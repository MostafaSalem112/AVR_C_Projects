
final_project_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000196  00800060  00003b70  00003c04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000041  008001f6  008001f6  00003d9a  2**0
                  ALLOC
  3 .stab         00003258  00000000  00000000  00003d9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000133b  00000000  00000000  00006ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000832f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  000084ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00008703  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000ad15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000c1e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000d4f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000d6d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000d9d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e3f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 c3 16 	jmp	0x2d86	; 0x2d86 <__vector_4>
      14:	0c 94 37 17 	jmp	0x2e6e	; 0x2e6e <__vector_5>
      18:	0c 94 c3 13 	jmp	0x2786	; 0x2786 <__vector_6>
      1c:	0c 94 f6 13 	jmp	0x27ec	; 0x27ec <__vector_7>
      20:	0c 94 6a 14 	jmp	0x28d4	; 0x28d4 <__vector_8>
      24:	0c 94 de 14 	jmp	0x29bc	; 0x29bc <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e7       	ldi	r30, 0x70	; 112
      68:	fb e3       	ldi	r31, 0x3B	; 59
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3f       	cpi	r26, 0xF6	; 246
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a6 ef       	ldi	r26, 0xF6	; 246
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 33       	cpi	r26, 0x37	; 55
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 01 19 	call	0x3202	; 0x3202 <main>
      8a:	0c 94 b6 1d 	jmp	0x3b6c	; 0x3b6c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7f 1d 	jmp	0x3afe	; 0x3afe <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 ed       	ldi	r26, 0xD9	; 217
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9b 1d 	jmp	0x3b36	; 0x3b36 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8b 1d 	jmp	0x3b16	; 0x3b16 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a7 1d 	jmp	0x3b4e	; 0x3b4e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8b 1d 	jmp	0x3b16	; 0x3b16 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a7 1d 	jmp	0x3b4e	; 0x3b4e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7f 1d 	jmp	0x3afe	; 0x3afe <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 ed       	ldi	r24, 0xD9	; 217
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9b 1d 	jmp	0x3b36	; 0x3b36 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 87 1d 	jmp	0x3b0e	; 0x3b0e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	69 ed       	ldi	r22, 0xD9	; 217
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 a3 1d 	jmp	0x3b46	; 0x3b46 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 8b 1d 	jmp	0x3b16	; 0x3b16 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a7 1d 	jmp	0x3b4e	; 0x3b4e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 8b 1d 	jmp	0x3b16	; 0x3b16 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 a7 1d 	jmp	0x3b4e	; 0x3b4e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 8b 1d 	jmp	0x3b16	; 0x3b16 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 a7 1d 	jmp	0x3b4e	; 0x3b4e <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 88 1d 	jmp	0x3b10	; 0x3b10 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 a4 1d 	jmp	0x3b48	; 0x3b48 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 8f 1d 	jmp	0x3b1e	; 0x3b1e <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 ab 1d 	jmp	0x3b56	; 0x3b56 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 87 1d 	jmp	0x3b0e	; 0x3b0e <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 a3 1d 	jmp	0x3b46	; 0x3b46 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	ef 51       	subi	r30, 0x1F	; 31
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <ADC_voidInitialize>:
#include "Bit_Math.h"
#include "DIO_interface.h"
#include "ADC_private.h"
#include "ADC_interface.h"

void ADC_voidInitialize(u8 Copy_u8ADC_Channel){
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <ADC_voidInitialize+0x6>
     ef0:	0f 92       	push	r0
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
     ef6:	89 83       	std	Y+1, r24	; 0x01
	ClrBit(ADMUX,PIN7);
     ef8:	a7 e2       	ldi	r26, 0x27	; 39
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e7 e2       	ldi	r30, 0x27	; 39
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	8f 77       	andi	r24, 0x7F	; 127
     f04:	8c 93       	st	X, r24
	SetBit(ADMUX,PIN6);
     f06:	a7 e2       	ldi	r26, 0x27	; 39
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e7 e2       	ldi	r30, 0x27	; 39
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	80 64       	ori	r24, 0x40	; 64
     f12:	8c 93       	st	X, r24
	ClrBit(ADMUX,PIN5);
     f14:	a7 e2       	ldi	r26, 0x27	; 39
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e7 e2       	ldi	r30, 0x27	; 39
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	8f 7d       	andi	r24, 0xDF	; 223
     f20:	8c 93       	st	X, r24
	
	switch(Copy_u8ADC_Channel){
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	3b 83       	std	Y+3, r19	; 0x03
     f2a:	2a 83       	std	Y+2, r18	; 0x02
     f2c:	8a 81       	ldd	r24, Y+2	; 0x02
     f2e:	9b 81       	ldd	r25, Y+3	; 0x03
     f30:	83 30       	cpi	r24, 0x03	; 3
     f32:	91 05       	cpc	r25, r1
     f34:	09 f4       	brne	.+2      	; 0xf38 <ADC_voidInitialize+0x4e>
     f36:	9b c0       	rjmp	.+310    	; 0x106e <ADC_voidInitialize+0x184>
     f38:	2a 81       	ldd	r18, Y+2	; 0x02
     f3a:	3b 81       	ldd	r19, Y+3	; 0x03
     f3c:	24 30       	cpi	r18, 0x04	; 4
     f3e:	31 05       	cpc	r19, r1
     f40:	8c f4       	brge	.+34     	; 0xf64 <ADC_voidInitialize+0x7a>
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	9b 81       	ldd	r25, Y+3	; 0x03
     f46:	81 30       	cpi	r24, 0x01	; 1
     f48:	91 05       	cpc	r25, r1
     f4a:	09 f4       	brne	.+2      	; 0xf4e <ADC_voidInitialize+0x64>
     f4c:	48 c0       	rjmp	.+144    	; 0xfde <ADC_voidInitialize+0xf4>
     f4e:	2a 81       	ldd	r18, Y+2	; 0x02
     f50:	3b 81       	ldd	r19, Y+3	; 0x03
     f52:	22 30       	cpi	r18, 0x02	; 2
     f54:	31 05       	cpc	r19, r1
     f56:	0c f0       	brlt	.+2      	; 0xf5a <ADC_voidInitialize+0x70>
     f58:	66 c0       	rjmp	.+204    	; 0x1026 <ADC_voidInitialize+0x13c>
     f5a:	8a 81       	ldd	r24, Y+2	; 0x02
     f5c:	9b 81       	ldd	r25, Y+3	; 0x03
     f5e:	00 97       	sbiw	r24, 0x00	; 0
     f60:	d1 f0       	breq	.+52     	; 0xf96 <ADC_voidInitialize+0xac>
     f62:	38 c1       	rjmp	.+624    	; 0x11d4 <ADC_voidInitialize+0x2ea>
     f64:	2a 81       	ldd	r18, Y+2	; 0x02
     f66:	3b 81       	ldd	r19, Y+3	; 0x03
     f68:	25 30       	cpi	r18, 0x05	; 5
     f6a:	31 05       	cpc	r19, r1
     f6c:	09 f4       	brne	.+2      	; 0xf70 <ADC_voidInitialize+0x86>
     f6e:	c7 c0       	rjmp	.+398    	; 0x10fe <ADC_voidInitialize+0x214>
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	9b 81       	ldd	r25, Y+3	; 0x03
     f74:	85 30       	cpi	r24, 0x05	; 5
     f76:	91 05       	cpc	r25, r1
     f78:	0c f4       	brge	.+2      	; 0xf7c <ADC_voidInitialize+0x92>
     f7a:	9d c0       	rjmp	.+314    	; 0x10b6 <ADC_voidInitialize+0x1cc>
     f7c:	2a 81       	ldd	r18, Y+2	; 0x02
     f7e:	3b 81       	ldd	r19, Y+3	; 0x03
     f80:	26 30       	cpi	r18, 0x06	; 6
     f82:	31 05       	cpc	r19, r1
     f84:	09 f4       	brne	.+2      	; 0xf88 <ADC_voidInitialize+0x9e>
     f86:	df c0       	rjmp	.+446    	; 0x1146 <ADC_voidInitialize+0x25c>
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	9b 81       	ldd	r25, Y+3	; 0x03
     f8c:	87 30       	cpi	r24, 0x07	; 7
     f8e:	91 05       	cpc	r25, r1
     f90:	09 f4       	brne	.+2      	; 0xf94 <ADC_voidInitialize+0xaa>
     f92:	fd c0       	rjmp	.+506    	; 0x118e <ADC_voidInitialize+0x2a4>
     f94:	1f c1       	rjmp	.+574    	; 0x11d4 <ADC_voidInitialize+0x2ea>
		case ADC0:
			ClrBit(ADMUX,PIN4);
     f96:	a7 e2       	ldi	r26, 0x27	; 39
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e7 e2       	ldi	r30, 0x27	; 39
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	8f 7e       	andi	r24, 0xEF	; 239
     fa2:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN3);
     fa4:	a7 e2       	ldi	r26, 0x27	; 39
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e7 e2       	ldi	r30, 0x27	; 39
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	87 7f       	andi	r24, 0xF7	; 247
     fb0:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN2);
     fb2:	a7 e2       	ldi	r26, 0x27	; 39
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e7 e2       	ldi	r30, 0x27	; 39
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	8b 7f       	andi	r24, 0xFB	; 251
     fbe:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN1);
     fc0:	a7 e2       	ldi	r26, 0x27	; 39
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e7 e2       	ldi	r30, 0x27	; 39
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	8d 7f       	andi	r24, 0xFD	; 253
     fcc:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN0);
     fce:	a7 e2       	ldi	r26, 0x27	; 39
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e7 e2       	ldi	r30, 0x27	; 39
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	8e 7f       	andi	r24, 0xFE	; 254
     fda:	8c 93       	st	X, r24
     fdc:	fb c0       	rjmp	.+502    	; 0x11d4 <ADC_voidInitialize+0x2ea>
			break;
		case ADC1:
			ClrBit(ADMUX,PIN4);
     fde:	a7 e2       	ldi	r26, 0x27	; 39
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e7 e2       	ldi	r30, 0x27	; 39
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	8f 7e       	andi	r24, 0xEF	; 239
     fea:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN3);
     fec:	a7 e2       	ldi	r26, 0x27	; 39
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e7 e2       	ldi	r30, 0x27	; 39
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	87 7f       	andi	r24, 0xF7	; 247
     ff8:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN2);
     ffa:	a7 e2       	ldi	r26, 0x27	; 39
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e7 e2       	ldi	r30, 0x27	; 39
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	8b 7f       	andi	r24, 0xFB	; 251
    1006:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN1);
    1008:	a7 e2       	ldi	r26, 0x27	; 39
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e7 e2       	ldi	r30, 0x27	; 39
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	8d 7f       	andi	r24, 0xFD	; 253
    1014:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN0);
    1016:	a7 e2       	ldi	r26, 0x27	; 39
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e7 e2       	ldi	r30, 0x27	; 39
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	81 60       	ori	r24, 0x01	; 1
    1022:	8c 93       	st	X, r24
    1024:	d7 c0       	rjmp	.+430    	; 0x11d4 <ADC_voidInitialize+0x2ea>
			break;
		case ADC2:
			ClrBit(ADMUX,PIN4);
    1026:	a7 e2       	ldi	r26, 0x27	; 39
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e7 e2       	ldi	r30, 0x27	; 39
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	8f 7e       	andi	r24, 0xEF	; 239
    1032:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN3);
    1034:	a7 e2       	ldi	r26, 0x27	; 39
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e7 e2       	ldi	r30, 0x27	; 39
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	87 7f       	andi	r24, 0xF7	; 247
    1040:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN2);
    1042:	a7 e2       	ldi	r26, 0x27	; 39
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e7 e2       	ldi	r30, 0x27	; 39
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	8b 7f       	andi	r24, 0xFB	; 251
    104e:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN1);
    1050:	a7 e2       	ldi	r26, 0x27	; 39
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e7 e2       	ldi	r30, 0x27	; 39
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	82 60       	ori	r24, 0x02	; 2
    105c:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN0);
    105e:	a7 e2       	ldi	r26, 0x27	; 39
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e7 e2       	ldi	r30, 0x27	; 39
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	8e 7f       	andi	r24, 0xFE	; 254
    106a:	8c 93       	st	X, r24
    106c:	b3 c0       	rjmp	.+358    	; 0x11d4 <ADC_voidInitialize+0x2ea>
			break;
		case ADC3:
			ClrBit(ADMUX,PIN4);
    106e:	a7 e2       	ldi	r26, 0x27	; 39
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e7 e2       	ldi	r30, 0x27	; 39
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	8f 7e       	andi	r24, 0xEF	; 239
    107a:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN3);
    107c:	a7 e2       	ldi	r26, 0x27	; 39
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e7 e2       	ldi	r30, 0x27	; 39
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	87 7f       	andi	r24, 0xF7	; 247
    1088:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN2);
    108a:	a7 e2       	ldi	r26, 0x27	; 39
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e7 e2       	ldi	r30, 0x27	; 39
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	8b 7f       	andi	r24, 0xFB	; 251
    1096:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN1);
    1098:	a7 e2       	ldi	r26, 0x27	; 39
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e7 e2       	ldi	r30, 0x27	; 39
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	82 60       	ori	r24, 0x02	; 2
    10a4:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN0);
    10a6:	a7 e2       	ldi	r26, 0x27	; 39
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e7 e2       	ldi	r30, 0x27	; 39
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	81 60       	ori	r24, 0x01	; 1
    10b2:	8c 93       	st	X, r24
    10b4:	8f c0       	rjmp	.+286    	; 0x11d4 <ADC_voidInitialize+0x2ea>
			break;
		case ADC4:
			ClrBit(ADMUX,PIN4);
    10b6:	a7 e2       	ldi	r26, 0x27	; 39
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	e7 e2       	ldi	r30, 0x27	; 39
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	8f 7e       	andi	r24, 0xEF	; 239
    10c2:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN3);
    10c4:	a7 e2       	ldi	r26, 0x27	; 39
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	e7 e2       	ldi	r30, 0x27	; 39
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	87 7f       	andi	r24, 0xF7	; 247
    10d0:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN2);
    10d2:	a7 e2       	ldi	r26, 0x27	; 39
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e7 e2       	ldi	r30, 0x27	; 39
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	84 60       	ori	r24, 0x04	; 4
    10de:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN1);
    10e0:	a7 e2       	ldi	r26, 0x27	; 39
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e7 e2       	ldi	r30, 0x27	; 39
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	8d 7f       	andi	r24, 0xFD	; 253
    10ec:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN0);
    10ee:	a7 e2       	ldi	r26, 0x27	; 39
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e7 e2       	ldi	r30, 0x27	; 39
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	8e 7f       	andi	r24, 0xFE	; 254
    10fa:	8c 93       	st	X, r24
    10fc:	6b c0       	rjmp	.+214    	; 0x11d4 <ADC_voidInitialize+0x2ea>
			break;
		case ADC5:
			ClrBit(ADMUX,PIN4);
    10fe:	a7 e2       	ldi	r26, 0x27	; 39
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e7 e2       	ldi	r30, 0x27	; 39
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	8f 7e       	andi	r24, 0xEF	; 239
    110a:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN3);
    110c:	a7 e2       	ldi	r26, 0x27	; 39
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e7 e2       	ldi	r30, 0x27	; 39
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	87 7f       	andi	r24, 0xF7	; 247
    1118:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN2);
    111a:	a7 e2       	ldi	r26, 0x27	; 39
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e7 e2       	ldi	r30, 0x27	; 39
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	84 60       	ori	r24, 0x04	; 4
    1126:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN1);
    1128:	a7 e2       	ldi	r26, 0x27	; 39
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e7 e2       	ldi	r30, 0x27	; 39
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	8d 7f       	andi	r24, 0xFD	; 253
    1134:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN0);
    1136:	a7 e2       	ldi	r26, 0x27	; 39
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e7 e2       	ldi	r30, 0x27	; 39
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	81 60       	ori	r24, 0x01	; 1
    1142:	8c 93       	st	X, r24
    1144:	47 c0       	rjmp	.+142    	; 0x11d4 <ADC_voidInitialize+0x2ea>
			break;
		case ADC6:
			ClrBit(ADMUX,PIN4);
    1146:	a7 e2       	ldi	r26, 0x27	; 39
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e7 e2       	ldi	r30, 0x27	; 39
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	8f 7e       	andi	r24, 0xEF	; 239
    1152:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN3);
    1154:	a7 e2       	ldi	r26, 0x27	; 39
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e7 e2       	ldi	r30, 0x27	; 39
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	87 7f       	andi	r24, 0xF7	; 247
    1160:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN2);
    1162:	a7 e2       	ldi	r26, 0x27	; 39
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e7 e2       	ldi	r30, 0x27	; 39
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	84 60       	ori	r24, 0x04	; 4
    116e:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN1);
    1170:	a7 e2       	ldi	r26, 0x27	; 39
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	e7 e2       	ldi	r30, 0x27	; 39
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	82 60       	ori	r24, 0x02	; 2
    117c:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN0);
    117e:	a7 e2       	ldi	r26, 0x27	; 39
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e7 e2       	ldi	r30, 0x27	; 39
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	8e 7f       	andi	r24, 0xFE	; 254
    118a:	8c 93       	st	X, r24
    118c:	23 c0       	rjmp	.+70     	; 0x11d4 <ADC_voidInitialize+0x2ea>
			break;
		case ADC7:
			ClrBit(ADMUX,PIN4);
    118e:	a7 e2       	ldi	r26, 0x27	; 39
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e7 e2       	ldi	r30, 0x27	; 39
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	8f 7e       	andi	r24, 0xEF	; 239
    119a:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN3);
    119c:	a7 e2       	ldi	r26, 0x27	; 39
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e7 e2       	ldi	r30, 0x27	; 39
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	87 7f       	andi	r24, 0xF7	; 247
    11a8:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN2);
    11aa:	a7 e2       	ldi	r26, 0x27	; 39
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	e7 e2       	ldi	r30, 0x27	; 39
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	84 60       	ori	r24, 0x04	; 4
    11b6:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN1);
    11b8:	a7 e2       	ldi	r26, 0x27	; 39
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e7 e2       	ldi	r30, 0x27	; 39
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	82 60       	ori	r24, 0x02	; 2
    11c4:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN0);
    11c6:	a7 e2       	ldi	r26, 0x27	; 39
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e7 e2       	ldi	r30, 0x27	; 39
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	81 60       	ori	r24, 0x01	; 1
    11d2:	8c 93       	st	X, r24
			break;
	}
	
	ClrBit(ADCSRA,PIN0);
    11d4:	a6 e2       	ldi	r26, 0x26	; 38
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e6 e2       	ldi	r30, 0x26	; 38
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	8e 7f       	andi	r24, 0xFE	; 254
    11e0:	8c 93       	st	X, r24
	SetBit(ADCSRA,PIN1);
    11e2:	a6 e2       	ldi	r26, 0x26	; 38
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e6 e2       	ldi	r30, 0x26	; 38
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	82 60       	ori	r24, 0x02	; 2
    11ee:	8c 93       	st	X, r24
	SetBit(ADCSRA,PIN2);
    11f0:	a6 e2       	ldi	r26, 0x26	; 38
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	e6 e2       	ldi	r30, 0x26	; 38
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	84 60       	ori	r24, 0x04	; 4
    11fc:	8c 93       	st	X, r24

	SetBit(ADCSRA,PIN7);
    11fe:	a6 e2       	ldi	r26, 0x26	; 38
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	e6 e2       	ldi	r30, 0x26	; 38
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	80 68       	ori	r24, 0x80	; 128
    120a:	8c 93       	st	X, r24
	SetBit(ADCSRA,PIN6);
    120c:	a6 e2       	ldi	r26, 0x26	; 38
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	e6 e2       	ldi	r30, 0x26	; 38
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	80 64       	ori	r24, 0x40	; 64
    1218:	8c 93       	st	X, r24
	while((GetBit(ADCSRA,PIN4))==0);
    121a:	e6 e2       	ldi	r30, 0x26	; 38
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	82 95       	swap	r24
    1222:	8f 70       	andi	r24, 0x0F	; 15
    1224:	88 2f       	mov	r24, r24
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	81 70       	andi	r24, 0x01	; 1
    122a:	90 70       	andi	r25, 0x00	; 0
    122c:	00 97       	sbiw	r24, 0x00	; 0
    122e:	a9 f3       	breq	.-22     	; 0x121a <ADC_voidInitialize+0x330>
}
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	cf 91       	pop	r28
    1238:	df 91       	pop	r29
    123a:	08 95       	ret

0000123c <ADC_voidStartConversion>:

u16 ADC_voidStartConversion(){
    123c:	df 93       	push	r29
    123e:	cf 93       	push	r28
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62

	SetBit(ADCSRA,PIN6);
    1244:	a6 e2       	ldi	r26, 0x26	; 38
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	e6 e2       	ldi	r30, 0x26	; 38
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	80 64       	ori	r24, 0x40	; 64
    1250:	8c 93       	st	X, r24
	while((GetBit(ADCSRA,PIN4))==0);
    1252:	e6 e2       	ldi	r30, 0x26	; 38
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	82 95       	swap	r24
    125a:	8f 70       	andi	r24, 0x0F	; 15
    125c:	88 2f       	mov	r24, r24
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	81 70       	andi	r24, 0x01	; 1
    1262:	90 70       	andi	r25, 0x00	; 0
    1264:	00 97       	sbiw	r24, 0x00	; 0
    1266:	a9 f3       	breq	.-22     	; 0x1252 <ADC_voidStartConversion+0x16>

	return ADC;
    1268:	e4 e2       	ldi	r30, 0x24	; 36
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	91 81       	ldd	r25, Z+1	; 0x01
}
    1270:	cf 91       	pop	r28
    1272:	df 91       	pop	r29
    1274:	08 95       	ret

00001276 <DIO_voidSetPinDirection>:
#include "Bit_Math.h"
#include "DIO_config.h"
#include "DIO_private.h"
#include "DIO_interface.h"

void DIO_voidSetPinDirection(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinDir){
    1276:	df 93       	push	r29
    1278:	cf 93       	push	r28
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
    127e:	27 97       	sbiw	r28, 0x07	; 7
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	f8 94       	cli
    1284:	de bf       	out	0x3e, r29	; 62
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	cd bf       	out	0x3d, r28	; 61
    128a:	89 83       	std	Y+1, r24	; 0x01
    128c:	6a 83       	std	Y+2, r22	; 0x02
    128e:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinDir==PIN_OUTPUT){     //output
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	81 30       	cpi	r24, 0x01	; 1
    1294:	09 f0       	breq	.+2      	; 0x1298 <DIO_voidSetPinDirection+0x22>
    1296:	6f c0       	rjmp	.+222    	; 0x1376 <DIO_voidSetPinDirection+0x100>
		switch(Copy_u8PortID){
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	3f 83       	std	Y+7, r19	; 0x07
    12a0:	2e 83       	std	Y+6, r18	; 0x06
    12a2:	8e 81       	ldd	r24, Y+6	; 0x06
    12a4:	9f 81       	ldd	r25, Y+7	; 0x07
    12a6:	81 30       	cpi	r24, 0x01	; 1
    12a8:	91 05       	cpc	r25, r1
    12aa:	49 f1       	breq	.+82     	; 0x12fe <DIO_voidSetPinDirection+0x88>
    12ac:	2e 81       	ldd	r18, Y+6	; 0x06
    12ae:	3f 81       	ldd	r19, Y+7	; 0x07
    12b0:	22 30       	cpi	r18, 0x02	; 2
    12b2:	31 05       	cpc	r19, r1
    12b4:	2c f4       	brge	.+10     	; 0x12c0 <DIO_voidSetPinDirection+0x4a>
    12b6:	8e 81       	ldd	r24, Y+6	; 0x06
    12b8:	9f 81       	ldd	r25, Y+7	; 0x07
    12ba:	00 97       	sbiw	r24, 0x00	; 0
    12bc:	61 f0       	breq	.+24     	; 0x12d6 <DIO_voidSetPinDirection+0x60>
    12be:	d2 c0       	rjmp	.+420    	; 0x1464 <DIO_voidSetPinDirection+0x1ee>
    12c0:	2e 81       	ldd	r18, Y+6	; 0x06
    12c2:	3f 81       	ldd	r19, Y+7	; 0x07
    12c4:	22 30       	cpi	r18, 0x02	; 2
    12c6:	31 05       	cpc	r19, r1
    12c8:	71 f1       	breq	.+92     	; 0x1326 <DIO_voidSetPinDirection+0xb0>
    12ca:	8e 81       	ldd	r24, Y+6	; 0x06
    12cc:	9f 81       	ldd	r25, Y+7	; 0x07
    12ce:	83 30       	cpi	r24, 0x03	; 3
    12d0:	91 05       	cpc	r25, r1
    12d2:	e9 f1       	breq	.+122    	; 0x134e <DIO_voidSetPinDirection+0xd8>
    12d4:	c7 c0       	rjmp	.+398    	; 0x1464 <DIO_voidSetPinDirection+0x1ee>
			case PORTA/*Port A*/: SetBit(DDRA_REG,Copy_u8PinID);break;
    12d6:	aa e3       	ldi	r26, 0x3A	; 58
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	ea e3       	ldi	r30, 0x3A	; 58
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	48 2f       	mov	r20, r24
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	02 2e       	mov	r0, r18
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <DIO_voidSetPinDirection+0x7e>
    12f0:	88 0f       	add	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	0a 94       	dec	r0
    12f6:	e2 f7       	brpl	.-8      	; 0x12f0 <DIO_voidSetPinDirection+0x7a>
    12f8:	84 2b       	or	r24, r20
    12fa:	8c 93       	st	X, r24
    12fc:	b3 c0       	rjmp	.+358    	; 0x1464 <DIO_voidSetPinDirection+0x1ee>
			case PORTB/*Port B*/: SetBit(DDRB_REG,Copy_u8PinID);break;
    12fe:	a7 e3       	ldi	r26, 0x37	; 55
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	e7 e3       	ldi	r30, 0x37	; 55
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	48 2f       	mov	r20, r24
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	02 2e       	mov	r0, r18
    1316:	02 c0       	rjmp	.+4      	; 0x131c <DIO_voidSetPinDirection+0xa6>
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	0a 94       	dec	r0
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <DIO_voidSetPinDirection+0xa2>
    1320:	84 2b       	or	r24, r20
    1322:	8c 93       	st	X, r24
    1324:	9f c0       	rjmp	.+318    	; 0x1464 <DIO_voidSetPinDirection+0x1ee>
			case PORTC/*Port C*/: SetBit(DDRC_REG,Copy_u8PinID);break;
    1326:	a4 e3       	ldi	r26, 0x34	; 52
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	e4 e3       	ldi	r30, 0x34	; 52
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	48 2f       	mov	r20, r24
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	02 2e       	mov	r0, r18
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <DIO_voidSetPinDirection+0xce>
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	0a 94       	dec	r0
    1346:	e2 f7       	brpl	.-8      	; 0x1340 <DIO_voidSetPinDirection+0xca>
    1348:	84 2b       	or	r24, r20
    134a:	8c 93       	st	X, r24
    134c:	8b c0       	rjmp	.+278    	; 0x1464 <DIO_voidSetPinDirection+0x1ee>
			case PORTD/*Port D*/: SetBit(DDRD_REG,Copy_u8PinID);break;
    134e:	a1 e3       	ldi	r26, 0x31	; 49
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	e1 e3       	ldi	r30, 0x31	; 49
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	48 2f       	mov	r20, r24
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	02 2e       	mov	r0, r18
    1366:	02 c0       	rjmp	.+4      	; 0x136c <DIO_voidSetPinDirection+0xf6>
    1368:	88 0f       	add	r24, r24
    136a:	99 1f       	adc	r25, r25
    136c:	0a 94       	dec	r0
    136e:	e2 f7       	brpl	.-8      	; 0x1368 <DIO_voidSetPinDirection+0xf2>
    1370:	84 2b       	or	r24, r20
    1372:	8c 93       	st	X, r24
    1374:	77 c0       	rjmp	.+238    	; 0x1464 <DIO_voidSetPinDirection+0x1ee>
		}
	}
	else if(Copy_u8PinDir==PIN_INPUT){ //input
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	88 23       	and	r24, r24
    137a:	09 f0       	breq	.+2      	; 0x137e <DIO_voidSetPinDirection+0x108>
    137c:	73 c0       	rjmp	.+230    	; 0x1464 <DIO_voidSetPinDirection+0x1ee>
		switch(Copy_u8PortID){
    137e:	89 81       	ldd	r24, Y+1	; 0x01
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	3d 83       	std	Y+5, r19	; 0x05
    1386:	2c 83       	std	Y+4, r18	; 0x04
    1388:	8c 81       	ldd	r24, Y+4	; 0x04
    138a:	9d 81       	ldd	r25, Y+5	; 0x05
    138c:	81 30       	cpi	r24, 0x01	; 1
    138e:	91 05       	cpc	r25, r1
    1390:	59 f1       	breq	.+86     	; 0x13e8 <DIO_voidSetPinDirection+0x172>
    1392:	2c 81       	ldd	r18, Y+4	; 0x04
    1394:	3d 81       	ldd	r19, Y+5	; 0x05
    1396:	22 30       	cpi	r18, 0x02	; 2
    1398:	31 05       	cpc	r19, r1
    139a:	2c f4       	brge	.+10     	; 0x13a6 <DIO_voidSetPinDirection+0x130>
    139c:	8c 81       	ldd	r24, Y+4	; 0x04
    139e:	9d 81       	ldd	r25, Y+5	; 0x05
    13a0:	00 97       	sbiw	r24, 0x00	; 0
    13a2:	69 f0       	breq	.+26     	; 0x13be <DIO_voidSetPinDirection+0x148>
    13a4:	5f c0       	rjmp	.+190    	; 0x1464 <DIO_voidSetPinDirection+0x1ee>
    13a6:	2c 81       	ldd	r18, Y+4	; 0x04
    13a8:	3d 81       	ldd	r19, Y+5	; 0x05
    13aa:	22 30       	cpi	r18, 0x02	; 2
    13ac:	31 05       	cpc	r19, r1
    13ae:	89 f1       	breq	.+98     	; 0x1412 <DIO_voidSetPinDirection+0x19c>
    13b0:	8c 81       	ldd	r24, Y+4	; 0x04
    13b2:	9d 81       	ldd	r25, Y+5	; 0x05
    13b4:	83 30       	cpi	r24, 0x03	; 3
    13b6:	91 05       	cpc	r25, r1
    13b8:	09 f4       	brne	.+2      	; 0x13bc <DIO_voidSetPinDirection+0x146>
    13ba:	40 c0       	rjmp	.+128    	; 0x143c <DIO_voidSetPinDirection+0x1c6>
    13bc:	53 c0       	rjmp	.+166    	; 0x1464 <DIO_voidSetPinDirection+0x1ee>
			case PORTA/*Port A*/: ClrBit(DDRA_REG,Copy_u8PinID);break;
    13be:	aa e3       	ldi	r26, 0x3A	; 58
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	ea e3       	ldi	r30, 0x3A	; 58
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	48 2f       	mov	r20, r24
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	28 2f       	mov	r18, r24
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	02 2e       	mov	r0, r18
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <DIO_voidSetPinDirection+0x166>
    13d8:	88 0f       	add	r24, r24
    13da:	99 1f       	adc	r25, r25
    13dc:	0a 94       	dec	r0
    13de:	e2 f7       	brpl	.-8      	; 0x13d8 <DIO_voidSetPinDirection+0x162>
    13e0:	80 95       	com	r24
    13e2:	84 23       	and	r24, r20
    13e4:	8c 93       	st	X, r24
    13e6:	3e c0       	rjmp	.+124    	; 0x1464 <DIO_voidSetPinDirection+0x1ee>
			case PORTB/*Port B*/: ClrBit(DDRB_REG,Copy_u8PinID);break;
    13e8:	a7 e3       	ldi	r26, 0x37	; 55
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e7 e3       	ldi	r30, 0x37	; 55
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	48 2f       	mov	r20, r24
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	02 2e       	mov	r0, r18
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <DIO_voidSetPinDirection+0x190>
    1402:	88 0f       	add	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	0a 94       	dec	r0
    1408:	e2 f7       	brpl	.-8      	; 0x1402 <DIO_voidSetPinDirection+0x18c>
    140a:	80 95       	com	r24
    140c:	84 23       	and	r24, r20
    140e:	8c 93       	st	X, r24
    1410:	29 c0       	rjmp	.+82     	; 0x1464 <DIO_voidSetPinDirection+0x1ee>
			case PORTC/*Port C*/: ClrBit(DDRC_REG,Copy_u8PinID);break;
    1412:	a4 e3       	ldi	r26, 0x34	; 52
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	e4 e3       	ldi	r30, 0x34	; 52
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	48 2f       	mov	r20, r24
    141e:	8a 81       	ldd	r24, Y+2	; 0x02
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	02 2e       	mov	r0, r18
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <DIO_voidSetPinDirection+0x1ba>
    142c:	88 0f       	add	r24, r24
    142e:	99 1f       	adc	r25, r25
    1430:	0a 94       	dec	r0
    1432:	e2 f7       	brpl	.-8      	; 0x142c <DIO_voidSetPinDirection+0x1b6>
    1434:	80 95       	com	r24
    1436:	84 23       	and	r24, r20
    1438:	8c 93       	st	X, r24
    143a:	14 c0       	rjmp	.+40     	; 0x1464 <DIO_voidSetPinDirection+0x1ee>
			case PORTD/*Port D*/: ClrBit(DDRD_REG,Copy_u8PinID);break;
    143c:	a1 e3       	ldi	r26, 0x31	; 49
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e1 e3       	ldi	r30, 0x31	; 49
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	48 2f       	mov	r20, r24
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	02 2e       	mov	r0, r18
    1454:	02 c0       	rjmp	.+4      	; 0x145a <DIO_voidSetPinDirection+0x1e4>
    1456:	88 0f       	add	r24, r24
    1458:	99 1f       	adc	r25, r25
    145a:	0a 94       	dec	r0
    145c:	e2 f7       	brpl	.-8      	; 0x1456 <DIO_voidSetPinDirection+0x1e0>
    145e:	80 95       	com	r24
    1460:	84 23       	and	r24, r20
    1462:	8c 93       	st	X, r24
		}
	}
}
    1464:	27 96       	adiw	r28, 0x07	; 7
    1466:	0f b6       	in	r0, 0x3f	; 63
    1468:	f8 94       	cli
    146a:	de bf       	out	0x3e, r29	; 62
    146c:	0f be       	out	0x3f, r0	; 63
    146e:	cd bf       	out	0x3d, r28	; 61
    1470:	cf 91       	pop	r28
    1472:	df 91       	pop	r29
    1474:	08 95       	ret

00001476 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
    1476:	df 93       	push	r29
    1478:	cf 93       	push	r28
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62
    147e:	27 97       	sbiw	r28, 0x07	; 7
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	f8 94       	cli
    1484:	de bf       	out	0x3e, r29	; 62
    1486:	0f be       	out	0x3f, r0	; 63
    1488:	cd bf       	out	0x3d, r28	; 61
    148a:	89 83       	std	Y+1, r24	; 0x01
    148c:	6a 83       	std	Y+2, r22	; 0x02
    148e:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinValue==PIN_HIGH){      //high
    1490:	8b 81       	ldd	r24, Y+3	; 0x03
    1492:	81 30       	cpi	r24, 0x01	; 1
    1494:	09 f0       	breq	.+2      	; 0x1498 <DIO_voidSetPinValue+0x22>
    1496:	6f c0       	rjmp	.+222    	; 0x1576 <DIO_voidSetPinValue+0x100>
		switch(Copy_u8PortID){
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	3f 83       	std	Y+7, r19	; 0x07
    14a0:	2e 83       	std	Y+6, r18	; 0x06
    14a2:	8e 81       	ldd	r24, Y+6	; 0x06
    14a4:	9f 81       	ldd	r25, Y+7	; 0x07
    14a6:	81 30       	cpi	r24, 0x01	; 1
    14a8:	91 05       	cpc	r25, r1
    14aa:	49 f1       	breq	.+82     	; 0x14fe <DIO_voidSetPinValue+0x88>
    14ac:	2e 81       	ldd	r18, Y+6	; 0x06
    14ae:	3f 81       	ldd	r19, Y+7	; 0x07
    14b0:	22 30       	cpi	r18, 0x02	; 2
    14b2:	31 05       	cpc	r19, r1
    14b4:	2c f4       	brge	.+10     	; 0x14c0 <DIO_voidSetPinValue+0x4a>
    14b6:	8e 81       	ldd	r24, Y+6	; 0x06
    14b8:	9f 81       	ldd	r25, Y+7	; 0x07
    14ba:	00 97       	sbiw	r24, 0x00	; 0
    14bc:	61 f0       	breq	.+24     	; 0x14d6 <DIO_voidSetPinValue+0x60>
    14be:	d2 c0       	rjmp	.+420    	; 0x1664 <DIO_voidSetPinValue+0x1ee>
    14c0:	2e 81       	ldd	r18, Y+6	; 0x06
    14c2:	3f 81       	ldd	r19, Y+7	; 0x07
    14c4:	22 30       	cpi	r18, 0x02	; 2
    14c6:	31 05       	cpc	r19, r1
    14c8:	71 f1       	breq	.+92     	; 0x1526 <DIO_voidSetPinValue+0xb0>
    14ca:	8e 81       	ldd	r24, Y+6	; 0x06
    14cc:	9f 81       	ldd	r25, Y+7	; 0x07
    14ce:	83 30       	cpi	r24, 0x03	; 3
    14d0:	91 05       	cpc	r25, r1
    14d2:	e9 f1       	breq	.+122    	; 0x154e <DIO_voidSetPinValue+0xd8>
    14d4:	c7 c0       	rjmp	.+398    	; 0x1664 <DIO_voidSetPinValue+0x1ee>
			case PORTA/*Port A*/: SetBit(PORTA_REG,Copy_u8PinID);break;
    14d6:	ab e3       	ldi	r26, 0x3B	; 59
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	eb e3       	ldi	r30, 0x3B	; 59
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	48 2f       	mov	r20, r24
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	02 2e       	mov	r0, r18
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <DIO_voidSetPinValue+0x7e>
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	0a 94       	dec	r0
    14f6:	e2 f7       	brpl	.-8      	; 0x14f0 <DIO_voidSetPinValue+0x7a>
    14f8:	84 2b       	or	r24, r20
    14fa:	8c 93       	st	X, r24
    14fc:	b3 c0       	rjmp	.+358    	; 0x1664 <DIO_voidSetPinValue+0x1ee>
			case PORTB/*Port B*/: SetBit(PORTB_REG,Copy_u8PinID);break;
    14fe:	a8 e3       	ldi	r26, 0x38	; 56
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	e8 e3       	ldi	r30, 0x38	; 56
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	48 2f       	mov	r20, r24
    150a:	8a 81       	ldd	r24, Y+2	; 0x02
    150c:	28 2f       	mov	r18, r24
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	02 2e       	mov	r0, r18
    1516:	02 c0       	rjmp	.+4      	; 0x151c <DIO_voidSetPinValue+0xa6>
    1518:	88 0f       	add	r24, r24
    151a:	99 1f       	adc	r25, r25
    151c:	0a 94       	dec	r0
    151e:	e2 f7       	brpl	.-8      	; 0x1518 <DIO_voidSetPinValue+0xa2>
    1520:	84 2b       	or	r24, r20
    1522:	8c 93       	st	X, r24
    1524:	9f c0       	rjmp	.+318    	; 0x1664 <DIO_voidSetPinValue+0x1ee>
			case PORTC/*Port C*/: SetBit(PORTC_REG,Copy_u8PinID);break;
    1526:	a5 e3       	ldi	r26, 0x35	; 53
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	e5 e3       	ldi	r30, 0x35	; 53
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	48 2f       	mov	r20, r24
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	28 2f       	mov	r18, r24
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	02 2e       	mov	r0, r18
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <DIO_voidSetPinValue+0xce>
    1540:	88 0f       	add	r24, r24
    1542:	99 1f       	adc	r25, r25
    1544:	0a 94       	dec	r0
    1546:	e2 f7       	brpl	.-8      	; 0x1540 <DIO_voidSetPinValue+0xca>
    1548:	84 2b       	or	r24, r20
    154a:	8c 93       	st	X, r24
    154c:	8b c0       	rjmp	.+278    	; 0x1664 <DIO_voidSetPinValue+0x1ee>
			case PORTD/*Port D*/: SetBit(PORTD_REG,Copy_u8PinID);break;
    154e:	a2 e3       	ldi	r26, 0x32	; 50
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	e2 e3       	ldi	r30, 0x32	; 50
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	48 2f       	mov	r20, r24
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	28 2f       	mov	r18, r24
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	02 2e       	mov	r0, r18
    1566:	02 c0       	rjmp	.+4      	; 0x156c <DIO_voidSetPinValue+0xf6>
    1568:	88 0f       	add	r24, r24
    156a:	99 1f       	adc	r25, r25
    156c:	0a 94       	dec	r0
    156e:	e2 f7       	brpl	.-8      	; 0x1568 <DIO_voidSetPinValue+0xf2>
    1570:	84 2b       	or	r24, r20
    1572:	8c 93       	st	X, r24
    1574:	77 c0       	rjmp	.+238    	; 0x1664 <DIO_voidSetPinValue+0x1ee>
		}
	}
	else if(Copy_u8PinValue==PIN_LOW){  //low
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	88 23       	and	r24, r24
    157a:	09 f0       	breq	.+2      	; 0x157e <DIO_voidSetPinValue+0x108>
    157c:	73 c0       	rjmp	.+230    	; 0x1664 <DIO_voidSetPinValue+0x1ee>
		switch(Copy_u8PortID){
    157e:	89 81       	ldd	r24, Y+1	; 0x01
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	3d 83       	std	Y+5, r19	; 0x05
    1586:	2c 83       	std	Y+4, r18	; 0x04
    1588:	8c 81       	ldd	r24, Y+4	; 0x04
    158a:	9d 81       	ldd	r25, Y+5	; 0x05
    158c:	81 30       	cpi	r24, 0x01	; 1
    158e:	91 05       	cpc	r25, r1
    1590:	59 f1       	breq	.+86     	; 0x15e8 <DIO_voidSetPinValue+0x172>
    1592:	2c 81       	ldd	r18, Y+4	; 0x04
    1594:	3d 81       	ldd	r19, Y+5	; 0x05
    1596:	22 30       	cpi	r18, 0x02	; 2
    1598:	31 05       	cpc	r19, r1
    159a:	2c f4       	brge	.+10     	; 0x15a6 <DIO_voidSetPinValue+0x130>
    159c:	8c 81       	ldd	r24, Y+4	; 0x04
    159e:	9d 81       	ldd	r25, Y+5	; 0x05
    15a0:	00 97       	sbiw	r24, 0x00	; 0
    15a2:	69 f0       	breq	.+26     	; 0x15be <DIO_voidSetPinValue+0x148>
    15a4:	5f c0       	rjmp	.+190    	; 0x1664 <DIO_voidSetPinValue+0x1ee>
    15a6:	2c 81       	ldd	r18, Y+4	; 0x04
    15a8:	3d 81       	ldd	r19, Y+5	; 0x05
    15aa:	22 30       	cpi	r18, 0x02	; 2
    15ac:	31 05       	cpc	r19, r1
    15ae:	89 f1       	breq	.+98     	; 0x1612 <DIO_voidSetPinValue+0x19c>
    15b0:	8c 81       	ldd	r24, Y+4	; 0x04
    15b2:	9d 81       	ldd	r25, Y+5	; 0x05
    15b4:	83 30       	cpi	r24, 0x03	; 3
    15b6:	91 05       	cpc	r25, r1
    15b8:	09 f4       	brne	.+2      	; 0x15bc <DIO_voidSetPinValue+0x146>
    15ba:	40 c0       	rjmp	.+128    	; 0x163c <DIO_voidSetPinValue+0x1c6>
    15bc:	53 c0       	rjmp	.+166    	; 0x1664 <DIO_voidSetPinValue+0x1ee>
			case PORTA/*Port A*/: ClrBit(PORTA_REG,Copy_u8PinID);break;
    15be:	ab e3       	ldi	r26, 0x3B	; 59
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	eb e3       	ldi	r30, 0x3B	; 59
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	48 2f       	mov	r20, r24
    15ca:	8a 81       	ldd	r24, Y+2	; 0x02
    15cc:	28 2f       	mov	r18, r24
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	02 2e       	mov	r0, r18
    15d6:	02 c0       	rjmp	.+4      	; 0x15dc <DIO_voidSetPinValue+0x166>
    15d8:	88 0f       	add	r24, r24
    15da:	99 1f       	adc	r25, r25
    15dc:	0a 94       	dec	r0
    15de:	e2 f7       	brpl	.-8      	; 0x15d8 <DIO_voidSetPinValue+0x162>
    15e0:	80 95       	com	r24
    15e2:	84 23       	and	r24, r20
    15e4:	8c 93       	st	X, r24
    15e6:	3e c0       	rjmp	.+124    	; 0x1664 <DIO_voidSetPinValue+0x1ee>
			case PORTB/*Port B*/: ClrBit(PORTB_REG,Copy_u8PinID);break;
    15e8:	a8 e3       	ldi	r26, 0x38	; 56
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	e8 e3       	ldi	r30, 0x38	; 56
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	48 2f       	mov	r20, r24
    15f4:	8a 81       	ldd	r24, Y+2	; 0x02
    15f6:	28 2f       	mov	r18, r24
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	02 2e       	mov	r0, r18
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <DIO_voidSetPinValue+0x190>
    1602:	88 0f       	add	r24, r24
    1604:	99 1f       	adc	r25, r25
    1606:	0a 94       	dec	r0
    1608:	e2 f7       	brpl	.-8      	; 0x1602 <DIO_voidSetPinValue+0x18c>
    160a:	80 95       	com	r24
    160c:	84 23       	and	r24, r20
    160e:	8c 93       	st	X, r24
    1610:	29 c0       	rjmp	.+82     	; 0x1664 <DIO_voidSetPinValue+0x1ee>
			case PORTC/*Port C*/: ClrBit(PORTC_REG,Copy_u8PinID);break;
    1612:	a5 e3       	ldi	r26, 0x35	; 53
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	e5 e3       	ldi	r30, 0x35	; 53
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	48 2f       	mov	r20, r24
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	28 2f       	mov	r18, r24
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	02 2e       	mov	r0, r18
    162a:	02 c0       	rjmp	.+4      	; 0x1630 <DIO_voidSetPinValue+0x1ba>
    162c:	88 0f       	add	r24, r24
    162e:	99 1f       	adc	r25, r25
    1630:	0a 94       	dec	r0
    1632:	e2 f7       	brpl	.-8      	; 0x162c <DIO_voidSetPinValue+0x1b6>
    1634:	80 95       	com	r24
    1636:	84 23       	and	r24, r20
    1638:	8c 93       	st	X, r24
    163a:	14 c0       	rjmp	.+40     	; 0x1664 <DIO_voidSetPinValue+0x1ee>
			case PORTD/*Port D*/: ClrBit(PORTD_REG,Copy_u8PinID);break;
    163c:	a2 e3       	ldi	r26, 0x32	; 50
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	e2 e3       	ldi	r30, 0x32	; 50
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	48 2f       	mov	r20, r24
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	28 2f       	mov	r18, r24
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	02 2e       	mov	r0, r18
    1654:	02 c0       	rjmp	.+4      	; 0x165a <DIO_voidSetPinValue+0x1e4>
    1656:	88 0f       	add	r24, r24
    1658:	99 1f       	adc	r25, r25
    165a:	0a 94       	dec	r0
    165c:	e2 f7       	brpl	.-8      	; 0x1656 <DIO_voidSetPinValue+0x1e0>
    165e:	80 95       	com	r24
    1660:	84 23       	and	r24, r20
    1662:	8c 93       	st	X, r24
		}
	}	
}
    1664:	27 96       	adiw	r28, 0x07	; 7
    1666:	0f b6       	in	r0, 0x3f	; 63
    1668:	f8 94       	cli
    166a:	de bf       	out	0x3e, r29	; 62
    166c:	0f be       	out	0x3f, r0	; 63
    166e:	cd bf       	out	0x3d, r28	; 61
    1670:	cf 91       	pop	r28
    1672:	df 91       	pop	r29
    1674:	08 95       	ret

00001676 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(u8 Copy_u8PortID,u8 Copy_u8PortDir){
    1676:	df 93       	push	r29
    1678:	cf 93       	push	r28
    167a:	00 d0       	rcall	.+0      	; 0x167c <DIO_voidSetPortDirection+0x6>
    167c:	00 d0       	rcall	.+0      	; 0x167e <DIO_voidSetPortDirection+0x8>
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	89 83       	std	Y+1, r24	; 0x01
    1684:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortID){
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	3c 83       	std	Y+4, r19	; 0x04
    168e:	2b 83       	std	Y+3, r18	; 0x03
    1690:	8b 81       	ldd	r24, Y+3	; 0x03
    1692:	9c 81       	ldd	r25, Y+4	; 0x04
    1694:	81 30       	cpi	r24, 0x01	; 1
    1696:	91 05       	cpc	r25, r1
    1698:	d1 f0       	breq	.+52     	; 0x16ce <DIO_voidSetPortDirection+0x58>
    169a:	2b 81       	ldd	r18, Y+3	; 0x03
    169c:	3c 81       	ldd	r19, Y+4	; 0x04
    169e:	22 30       	cpi	r18, 0x02	; 2
    16a0:	31 05       	cpc	r19, r1
    16a2:	2c f4       	brge	.+10     	; 0x16ae <DIO_voidSetPortDirection+0x38>
    16a4:	8b 81       	ldd	r24, Y+3	; 0x03
    16a6:	9c 81       	ldd	r25, Y+4	; 0x04
    16a8:	00 97       	sbiw	r24, 0x00	; 0
    16aa:	61 f0       	breq	.+24     	; 0x16c4 <DIO_voidSetPortDirection+0x4e>
    16ac:	1e c0       	rjmp	.+60     	; 0x16ea <DIO_voidSetPortDirection+0x74>
    16ae:	2b 81       	ldd	r18, Y+3	; 0x03
    16b0:	3c 81       	ldd	r19, Y+4	; 0x04
    16b2:	22 30       	cpi	r18, 0x02	; 2
    16b4:	31 05       	cpc	r19, r1
    16b6:	81 f0       	breq	.+32     	; 0x16d8 <DIO_voidSetPortDirection+0x62>
    16b8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ba:	9c 81       	ldd	r25, Y+4	; 0x04
    16bc:	83 30       	cpi	r24, 0x03	; 3
    16be:	91 05       	cpc	r25, r1
    16c0:	81 f0       	breq	.+32     	; 0x16e2 <DIO_voidSetPortDirection+0x6c>
    16c2:	13 c0       	rjmp	.+38     	; 0x16ea <DIO_voidSetPortDirection+0x74>
		case PORTA/*Port A*/: DDRA_REG=Copy_u8PortDir;break;
    16c4:	ea e3       	ldi	r30, 0x3A	; 58
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ca:	80 83       	st	Z, r24
    16cc:	0e c0       	rjmp	.+28     	; 0x16ea <DIO_voidSetPortDirection+0x74>
		case PORTB/*Port B*/: DDRB_REG=Copy_u8PortDir;break;
    16ce:	e7 e3       	ldi	r30, 0x37	; 55
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	8a 81       	ldd	r24, Y+2	; 0x02
    16d4:	80 83       	st	Z, r24
    16d6:	09 c0       	rjmp	.+18     	; 0x16ea <DIO_voidSetPortDirection+0x74>
		case PORTC/*Port C*/: DDRC_REG=Copy_u8PortDir;break;
    16d8:	e4 e3       	ldi	r30, 0x34	; 52
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	80 83       	st	Z, r24
    16e0:	04 c0       	rjmp	.+8      	; 0x16ea <DIO_voidSetPortDirection+0x74>
		case PORTD/*Port D*/: DDRD_REG=Copy_u8PortDir;break;
    16e2:	e1 e3       	ldi	r30, 0x31	; 49
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	8a 81       	ldd	r24, Y+2	; 0x02
    16e8:	80 83       	st	Z, r24
	}
}
    16ea:	0f 90       	pop	r0
    16ec:	0f 90       	pop	r0
    16ee:	0f 90       	pop	r0
    16f0:	0f 90       	pop	r0
    16f2:	cf 91       	pop	r28
    16f4:	df 91       	pop	r29
    16f6:	08 95       	ret

000016f8 <DIO_voidSetAllPortInput>:

void DIO_voidSetAllPortInput(u8 Copy_u8PortID){
    16f8:	df 93       	push	r29
    16fa:	cf 93       	push	r28
    16fc:	00 d0       	rcall	.+0      	; 0x16fe <DIO_voidSetAllPortInput+0x6>
    16fe:	0f 92       	push	r0
    1700:	cd b7       	in	r28, 0x3d	; 61
    1702:	de b7       	in	r29, 0x3e	; 62
    1704:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID){
    1706:	89 81       	ldd	r24, Y+1	; 0x01
    1708:	28 2f       	mov	r18, r24
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	3b 83       	std	Y+3, r19	; 0x03
    170e:	2a 83       	std	Y+2, r18	; 0x02
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	9b 81       	ldd	r25, Y+3	; 0x03
    1714:	81 30       	cpi	r24, 0x01	; 1
    1716:	91 05       	cpc	r25, r1
    1718:	c9 f0       	breq	.+50     	; 0x174c <DIO_voidSetAllPortInput+0x54>
    171a:	2a 81       	ldd	r18, Y+2	; 0x02
    171c:	3b 81       	ldd	r19, Y+3	; 0x03
    171e:	22 30       	cpi	r18, 0x02	; 2
    1720:	31 05       	cpc	r19, r1
    1722:	2c f4       	brge	.+10     	; 0x172e <DIO_voidSetAllPortInput+0x36>
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	9b 81       	ldd	r25, Y+3	; 0x03
    1728:	00 97       	sbiw	r24, 0x00	; 0
    172a:	61 f0       	breq	.+24     	; 0x1744 <DIO_voidSetAllPortInput+0x4c>
    172c:	1a c0       	rjmp	.+52     	; 0x1762 <DIO_voidSetAllPortInput+0x6a>
    172e:	2a 81       	ldd	r18, Y+2	; 0x02
    1730:	3b 81       	ldd	r19, Y+3	; 0x03
    1732:	22 30       	cpi	r18, 0x02	; 2
    1734:	31 05       	cpc	r19, r1
    1736:	71 f0       	breq	.+28     	; 0x1754 <DIO_voidSetAllPortInput+0x5c>
    1738:	8a 81       	ldd	r24, Y+2	; 0x02
    173a:	9b 81       	ldd	r25, Y+3	; 0x03
    173c:	83 30       	cpi	r24, 0x03	; 3
    173e:	91 05       	cpc	r25, r1
    1740:	69 f0       	breq	.+26     	; 0x175c <DIO_voidSetAllPortInput+0x64>
    1742:	0f c0       	rjmp	.+30     	; 0x1762 <DIO_voidSetAllPortInput+0x6a>
		case PORTA/*Port A*/: DDRA_REG=PORT_INPUT;break;
    1744:	ea e3       	ldi	r30, 0x3A	; 58
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	10 82       	st	Z, r1
    174a:	0b c0       	rjmp	.+22     	; 0x1762 <DIO_voidSetAllPortInput+0x6a>
		case PORTB/*Port B*/: DDRB_REG=PORT_INPUT;break;
    174c:	e7 e3       	ldi	r30, 0x37	; 55
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	10 82       	st	Z, r1
    1752:	07 c0       	rjmp	.+14     	; 0x1762 <DIO_voidSetAllPortInput+0x6a>
		case PORTC/*Port C*/: DDRC_REG=PORT_INPUT;break;
    1754:	e4 e3       	ldi	r30, 0x34	; 52
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	10 82       	st	Z, r1
    175a:	03 c0       	rjmp	.+6      	; 0x1762 <DIO_voidSetAllPortInput+0x6a>
		case PORTD/*Port D*/: DDRD_REG=PORT_INPUT;break;
    175c:	e1 e3       	ldi	r30, 0x31	; 49
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	10 82       	st	Z, r1
	}
}
    1762:	0f 90       	pop	r0
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	cf 91       	pop	r28
    176a:	df 91       	pop	r29
    176c:	08 95       	ret

0000176e <DIO_voidSetAllPortOutput>:

void DIO_voidSetAllPortOutput(u8 Copy_u8PortID){
    176e:	df 93       	push	r29
    1770:	cf 93       	push	r28
    1772:	00 d0       	rcall	.+0      	; 0x1774 <DIO_voidSetAllPortOutput+0x6>
    1774:	0f 92       	push	r0
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62
    177a:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID){
    177c:	89 81       	ldd	r24, Y+1	; 0x01
    177e:	28 2f       	mov	r18, r24
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	3b 83       	std	Y+3, r19	; 0x03
    1784:	2a 83       	std	Y+2, r18	; 0x02
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	9b 81       	ldd	r25, Y+3	; 0x03
    178a:	81 30       	cpi	r24, 0x01	; 1
    178c:	91 05       	cpc	r25, r1
    178e:	d1 f0       	breq	.+52     	; 0x17c4 <DIO_voidSetAllPortOutput+0x56>
    1790:	2a 81       	ldd	r18, Y+2	; 0x02
    1792:	3b 81       	ldd	r19, Y+3	; 0x03
    1794:	22 30       	cpi	r18, 0x02	; 2
    1796:	31 05       	cpc	r19, r1
    1798:	2c f4       	brge	.+10     	; 0x17a4 <DIO_voidSetAllPortOutput+0x36>
    179a:	8a 81       	ldd	r24, Y+2	; 0x02
    179c:	9b 81       	ldd	r25, Y+3	; 0x03
    179e:	00 97       	sbiw	r24, 0x00	; 0
    17a0:	61 f0       	breq	.+24     	; 0x17ba <DIO_voidSetAllPortOutput+0x4c>
    17a2:	1e c0       	rjmp	.+60     	; 0x17e0 <DIO_voidSetAllPortOutput+0x72>
    17a4:	2a 81       	ldd	r18, Y+2	; 0x02
    17a6:	3b 81       	ldd	r19, Y+3	; 0x03
    17a8:	22 30       	cpi	r18, 0x02	; 2
    17aa:	31 05       	cpc	r19, r1
    17ac:	81 f0       	breq	.+32     	; 0x17ce <DIO_voidSetAllPortOutput+0x60>
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	9b 81       	ldd	r25, Y+3	; 0x03
    17b2:	83 30       	cpi	r24, 0x03	; 3
    17b4:	91 05       	cpc	r25, r1
    17b6:	81 f0       	breq	.+32     	; 0x17d8 <DIO_voidSetAllPortOutput+0x6a>
    17b8:	13 c0       	rjmp	.+38     	; 0x17e0 <DIO_voidSetAllPortOutput+0x72>
		case PORTA/*Port A*/: DDRA_REG=PORT_OUTPUT;break;
    17ba:	ea e3       	ldi	r30, 0x3A	; 58
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	8f ef       	ldi	r24, 0xFF	; 255
    17c0:	80 83       	st	Z, r24
    17c2:	0e c0       	rjmp	.+28     	; 0x17e0 <DIO_voidSetAllPortOutput+0x72>
		case PORTB/*Port B*/: DDRB_REG=PORT_OUTPUT;break;
    17c4:	e7 e3       	ldi	r30, 0x37	; 55
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	8f ef       	ldi	r24, 0xFF	; 255
    17ca:	80 83       	st	Z, r24
    17cc:	09 c0       	rjmp	.+18     	; 0x17e0 <DIO_voidSetAllPortOutput+0x72>
		case PORTC/*Port C*/: DDRC_REG=PORT_OUTPUT;break;
    17ce:	e4 e3       	ldi	r30, 0x34	; 52
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	8f ef       	ldi	r24, 0xFF	; 255
    17d4:	80 83       	st	Z, r24
    17d6:	04 c0       	rjmp	.+8      	; 0x17e0 <DIO_voidSetAllPortOutput+0x72>
		case PORTD/*Port D*/: DDRD_REG=PORT_OUTPUT;break;
    17d8:	e1 e3       	ldi	r30, 0x31	; 49
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	8f ef       	ldi	r24, 0xFF	; 255
    17de:	80 83       	st	Z, r24
	}
}
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	cf 91       	pop	r28
    17e8:	df 91       	pop	r29
    17ea:	08 95       	ret

000017ec <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 Copy_u8PortID,u8 Copy_u8PortValue){
    17ec:	df 93       	push	r29
    17ee:	cf 93       	push	r28
    17f0:	00 d0       	rcall	.+0      	; 0x17f2 <DIO_voidSetPortValue+0x6>
    17f2:	00 d0       	rcall	.+0      	; 0x17f4 <DIO_voidSetPortValue+0x8>
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
    17f8:	89 83       	std	Y+1, r24	; 0x01
    17fa:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortID){
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
    17fe:	28 2f       	mov	r18, r24
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	3c 83       	std	Y+4, r19	; 0x04
    1804:	2b 83       	std	Y+3, r18	; 0x03
    1806:	8b 81       	ldd	r24, Y+3	; 0x03
    1808:	9c 81       	ldd	r25, Y+4	; 0x04
    180a:	81 30       	cpi	r24, 0x01	; 1
    180c:	91 05       	cpc	r25, r1
    180e:	d1 f0       	breq	.+52     	; 0x1844 <DIO_voidSetPortValue+0x58>
    1810:	2b 81       	ldd	r18, Y+3	; 0x03
    1812:	3c 81       	ldd	r19, Y+4	; 0x04
    1814:	22 30       	cpi	r18, 0x02	; 2
    1816:	31 05       	cpc	r19, r1
    1818:	2c f4       	brge	.+10     	; 0x1824 <DIO_voidSetPortValue+0x38>
    181a:	8b 81       	ldd	r24, Y+3	; 0x03
    181c:	9c 81       	ldd	r25, Y+4	; 0x04
    181e:	00 97       	sbiw	r24, 0x00	; 0
    1820:	61 f0       	breq	.+24     	; 0x183a <DIO_voidSetPortValue+0x4e>
    1822:	1e c0       	rjmp	.+60     	; 0x1860 <DIO_voidSetPortValue+0x74>
    1824:	2b 81       	ldd	r18, Y+3	; 0x03
    1826:	3c 81       	ldd	r19, Y+4	; 0x04
    1828:	22 30       	cpi	r18, 0x02	; 2
    182a:	31 05       	cpc	r19, r1
    182c:	81 f0       	breq	.+32     	; 0x184e <DIO_voidSetPortValue+0x62>
    182e:	8b 81       	ldd	r24, Y+3	; 0x03
    1830:	9c 81       	ldd	r25, Y+4	; 0x04
    1832:	83 30       	cpi	r24, 0x03	; 3
    1834:	91 05       	cpc	r25, r1
    1836:	81 f0       	breq	.+32     	; 0x1858 <DIO_voidSetPortValue+0x6c>
    1838:	13 c0       	rjmp	.+38     	; 0x1860 <DIO_voidSetPortValue+0x74>
		case PORTA/*Port A*/: PORTA_REG=Copy_u8PortValue;break;
    183a:	eb e3       	ldi	r30, 0x3B	; 59
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	8a 81       	ldd	r24, Y+2	; 0x02
    1840:	80 83       	st	Z, r24
    1842:	0e c0       	rjmp	.+28     	; 0x1860 <DIO_voidSetPortValue+0x74>
		case PORTB/*Port B*/: PORTB_REG=Copy_u8PortValue;break;
    1844:	e8 e3       	ldi	r30, 0x38	; 56
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	8a 81       	ldd	r24, Y+2	; 0x02
    184a:	80 83       	st	Z, r24
    184c:	09 c0       	rjmp	.+18     	; 0x1860 <DIO_voidSetPortValue+0x74>
		case PORTC/*Port C*/: PORTC_REG=Copy_u8PortValue;break;
    184e:	e5 e3       	ldi	r30, 0x35	; 53
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	8a 81       	ldd	r24, Y+2	; 0x02
    1854:	80 83       	st	Z, r24
    1856:	04 c0       	rjmp	.+8      	; 0x1860 <DIO_voidSetPortValue+0x74>
		case PORTD/*Port D*/: PORTD_REG=Copy_u8PortValue;break;
    1858:	e2 e3       	ldi	r30, 0x32	; 50
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	8a 81       	ldd	r24, Y+2	; 0x02
    185e:	80 83       	st	Z, r24
	}
}
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	cf 91       	pop	r28
    186a:	df 91       	pop	r29
    186c:	08 95       	ret

0000186e <DIO_voidSetAllPortLow>:

void DIO_voidSetAllPortLow(u8 Copy_u8PortID){
    186e:	df 93       	push	r29
    1870:	cf 93       	push	r28
    1872:	00 d0       	rcall	.+0      	; 0x1874 <DIO_voidSetAllPortLow+0x6>
    1874:	0f 92       	push	r0
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
    187a:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID){
    187c:	89 81       	ldd	r24, Y+1	; 0x01
    187e:	28 2f       	mov	r18, r24
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	3b 83       	std	Y+3, r19	; 0x03
    1884:	2a 83       	std	Y+2, r18	; 0x02
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	9b 81       	ldd	r25, Y+3	; 0x03
    188a:	81 30       	cpi	r24, 0x01	; 1
    188c:	91 05       	cpc	r25, r1
    188e:	c9 f0       	breq	.+50     	; 0x18c2 <DIO_voidSetAllPortLow+0x54>
    1890:	2a 81       	ldd	r18, Y+2	; 0x02
    1892:	3b 81       	ldd	r19, Y+3	; 0x03
    1894:	22 30       	cpi	r18, 0x02	; 2
    1896:	31 05       	cpc	r19, r1
    1898:	2c f4       	brge	.+10     	; 0x18a4 <DIO_voidSetAllPortLow+0x36>
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
    189c:	9b 81       	ldd	r25, Y+3	; 0x03
    189e:	00 97       	sbiw	r24, 0x00	; 0
    18a0:	61 f0       	breq	.+24     	; 0x18ba <DIO_voidSetAllPortLow+0x4c>
    18a2:	1a c0       	rjmp	.+52     	; 0x18d8 <DIO_voidSetAllPortLow+0x6a>
    18a4:	2a 81       	ldd	r18, Y+2	; 0x02
    18a6:	3b 81       	ldd	r19, Y+3	; 0x03
    18a8:	22 30       	cpi	r18, 0x02	; 2
    18aa:	31 05       	cpc	r19, r1
    18ac:	71 f0       	breq	.+28     	; 0x18ca <DIO_voidSetAllPortLow+0x5c>
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	9b 81       	ldd	r25, Y+3	; 0x03
    18b2:	83 30       	cpi	r24, 0x03	; 3
    18b4:	91 05       	cpc	r25, r1
    18b6:	69 f0       	breq	.+26     	; 0x18d2 <DIO_voidSetAllPortLow+0x64>
    18b8:	0f c0       	rjmp	.+30     	; 0x18d8 <DIO_voidSetAllPortLow+0x6a>
		case PORTA/*Port A*/: PORTA_REG=PORT_LOW;break;
    18ba:	eb e3       	ldi	r30, 0x3B	; 59
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	10 82       	st	Z, r1
    18c0:	0b c0       	rjmp	.+22     	; 0x18d8 <DIO_voidSetAllPortLow+0x6a>
		case PORTB/*Port B*/: PORTB_REG=PORT_LOW;break;
    18c2:	e8 e3       	ldi	r30, 0x38	; 56
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	10 82       	st	Z, r1
    18c8:	07 c0       	rjmp	.+14     	; 0x18d8 <DIO_voidSetAllPortLow+0x6a>
		case PORTC/*Port C*/: PORTC_REG=PORT_LOW;break;
    18ca:	e5 e3       	ldi	r30, 0x35	; 53
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	10 82       	st	Z, r1
    18d0:	03 c0       	rjmp	.+6      	; 0x18d8 <DIO_voidSetAllPortLow+0x6a>
		case PORTD/*Port D*/: PORTD_REG=PORT_LOW;break;
    18d2:	e2 e3       	ldi	r30, 0x32	; 50
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	10 82       	st	Z, r1
	}
}
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	0f 90       	pop	r0
    18de:	cf 91       	pop	r28
    18e0:	df 91       	pop	r29
    18e2:	08 95       	ret

000018e4 <DIO_voidSetAllPortHigh>:

void DIO_voidSetAllPortHigh(u8 Copy_u8PortID){
    18e4:	df 93       	push	r29
    18e6:	cf 93       	push	r28
    18e8:	00 d0       	rcall	.+0      	; 0x18ea <DIO_voidSetAllPortHigh+0x6>
    18ea:	0f 92       	push	r0
    18ec:	cd b7       	in	r28, 0x3d	; 61
    18ee:	de b7       	in	r29, 0x3e	; 62
    18f0:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID){
    18f2:	89 81       	ldd	r24, Y+1	; 0x01
    18f4:	28 2f       	mov	r18, r24
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	3b 83       	std	Y+3, r19	; 0x03
    18fa:	2a 83       	std	Y+2, r18	; 0x02
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1900:	81 30       	cpi	r24, 0x01	; 1
    1902:	91 05       	cpc	r25, r1
    1904:	d1 f0       	breq	.+52     	; 0x193a <DIO_voidSetAllPortHigh+0x56>
    1906:	2a 81       	ldd	r18, Y+2	; 0x02
    1908:	3b 81       	ldd	r19, Y+3	; 0x03
    190a:	22 30       	cpi	r18, 0x02	; 2
    190c:	31 05       	cpc	r19, r1
    190e:	2c f4       	brge	.+10     	; 0x191a <DIO_voidSetAllPortHigh+0x36>
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	9b 81       	ldd	r25, Y+3	; 0x03
    1914:	00 97       	sbiw	r24, 0x00	; 0
    1916:	61 f0       	breq	.+24     	; 0x1930 <DIO_voidSetAllPortHigh+0x4c>
    1918:	1e c0       	rjmp	.+60     	; 0x1956 <DIO_voidSetAllPortHigh+0x72>
    191a:	2a 81       	ldd	r18, Y+2	; 0x02
    191c:	3b 81       	ldd	r19, Y+3	; 0x03
    191e:	22 30       	cpi	r18, 0x02	; 2
    1920:	31 05       	cpc	r19, r1
    1922:	81 f0       	breq	.+32     	; 0x1944 <DIO_voidSetAllPortHigh+0x60>
    1924:	8a 81       	ldd	r24, Y+2	; 0x02
    1926:	9b 81       	ldd	r25, Y+3	; 0x03
    1928:	83 30       	cpi	r24, 0x03	; 3
    192a:	91 05       	cpc	r25, r1
    192c:	81 f0       	breq	.+32     	; 0x194e <DIO_voidSetAllPortHigh+0x6a>
    192e:	13 c0       	rjmp	.+38     	; 0x1956 <DIO_voidSetAllPortHigh+0x72>
		case PORTA/*Port A*/: PORTA_REG=PORT_HIGH;break;
    1930:	eb e3       	ldi	r30, 0x3B	; 59
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	8f ef       	ldi	r24, 0xFF	; 255
    1936:	80 83       	st	Z, r24
    1938:	0e c0       	rjmp	.+28     	; 0x1956 <DIO_voidSetAllPortHigh+0x72>
		case PORTB/*Port B*/: PORTB_REG=PORT_HIGH;break;
    193a:	e8 e3       	ldi	r30, 0x38	; 56
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	8f ef       	ldi	r24, 0xFF	; 255
    1940:	80 83       	st	Z, r24
    1942:	09 c0       	rjmp	.+18     	; 0x1956 <DIO_voidSetAllPortHigh+0x72>
		case PORTC/*Port C*/: PORTC_REG=PORT_HIGH;break;
    1944:	e5 e3       	ldi	r30, 0x35	; 53
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	8f ef       	ldi	r24, 0xFF	; 255
    194a:	80 83       	st	Z, r24
    194c:	04 c0       	rjmp	.+8      	; 0x1956 <DIO_voidSetAllPortHigh+0x72>
		case PORTD/*Port D*/: PORTD_REG=PORT_HIGH;break;
    194e:	e2 e3       	ldi	r30, 0x32	; 50
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	8f ef       	ldi	r24, 0xFF	; 255
    1954:	80 83       	st	Z, r24
	}
}
    1956:	0f 90       	pop	r0
    1958:	0f 90       	pop	r0
    195a:	0f 90       	pop	r0
    195c:	cf 91       	pop	r28
    195e:	df 91       	pop	r29
    1960:	08 95       	ret

00001962 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID){
    1962:	df 93       	push	r29
    1964:	cf 93       	push	r28
    1966:	00 d0       	rcall	.+0      	; 0x1968 <DIO_u8GetPinValue+0x6>
    1968:	00 d0       	rcall	.+0      	; 0x196a <DIO_u8GetPinValue+0x8>
    196a:	0f 92       	push	r0
    196c:	cd b7       	in	r28, 0x3d	; 61
    196e:	de b7       	in	r29, 0x3e	; 62
    1970:	8a 83       	std	Y+2, r24	; 0x02
    1972:	6b 83       	std	Y+3, r22	; 0x03
	u8 value;
	switch(Copy_u8PortID){
    1974:	8a 81       	ldd	r24, Y+2	; 0x02
    1976:	28 2f       	mov	r18, r24
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	3d 83       	std	Y+5, r19	; 0x05
    197c:	2c 83       	std	Y+4, r18	; 0x04
    197e:	4c 81       	ldd	r20, Y+4	; 0x04
    1980:	5d 81       	ldd	r21, Y+5	; 0x05
    1982:	41 30       	cpi	r20, 0x01	; 1
    1984:	51 05       	cpc	r21, r1
    1986:	41 f1       	breq	.+80     	; 0x19d8 <DIO_u8GetPinValue+0x76>
    1988:	8c 81       	ldd	r24, Y+4	; 0x04
    198a:	9d 81       	ldd	r25, Y+5	; 0x05
    198c:	82 30       	cpi	r24, 0x02	; 2
    198e:	91 05       	cpc	r25, r1
    1990:	34 f4       	brge	.+12     	; 0x199e <DIO_u8GetPinValue+0x3c>
    1992:	2c 81       	ldd	r18, Y+4	; 0x04
    1994:	3d 81       	ldd	r19, Y+5	; 0x05
    1996:	21 15       	cp	r18, r1
    1998:	31 05       	cpc	r19, r1
    199a:	61 f0       	breq	.+24     	; 0x19b4 <DIO_u8GetPinValue+0x52>
    199c:	52 c0       	rjmp	.+164    	; 0x1a42 <DIO_u8GetPinValue+0xe0>
    199e:	4c 81       	ldd	r20, Y+4	; 0x04
    19a0:	5d 81       	ldd	r21, Y+5	; 0x05
    19a2:	42 30       	cpi	r20, 0x02	; 2
    19a4:	51 05       	cpc	r21, r1
    19a6:	51 f1       	breq	.+84     	; 0x19fc <DIO_u8GetPinValue+0x9a>
    19a8:	8c 81       	ldd	r24, Y+4	; 0x04
    19aa:	9d 81       	ldd	r25, Y+5	; 0x05
    19ac:	83 30       	cpi	r24, 0x03	; 3
    19ae:	91 05       	cpc	r25, r1
    19b0:	b9 f1       	breq	.+110    	; 0x1a20 <DIO_u8GetPinValue+0xbe>
    19b2:	47 c0       	rjmp	.+142    	; 0x1a42 <DIO_u8GetPinValue+0xe0>
		case PORTA/*Port A*/: value=GetBit(PINA_REG,Copy_u8PinID);break;
    19b4:	e9 e3       	ldi	r30, 0x39	; 57
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	28 2f       	mov	r18, r24
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	8b 81       	ldd	r24, Y+3	; 0x03
    19c0:	88 2f       	mov	r24, r24
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	a9 01       	movw	r20, r18
    19c6:	02 c0       	rjmp	.+4      	; 0x19cc <DIO_u8GetPinValue+0x6a>
    19c8:	55 95       	asr	r21
    19ca:	47 95       	ror	r20
    19cc:	8a 95       	dec	r24
    19ce:	e2 f7       	brpl	.-8      	; 0x19c8 <DIO_u8GetPinValue+0x66>
    19d0:	ca 01       	movw	r24, r20
    19d2:	81 70       	andi	r24, 0x01	; 1
    19d4:	89 83       	std	Y+1, r24	; 0x01
    19d6:	35 c0       	rjmp	.+106    	; 0x1a42 <DIO_u8GetPinValue+0xe0>
		case PORTB/*Port B*/: value=GetBit(PINB_REG,Copy_u8PinID);break;
    19d8:	e6 e3       	ldi	r30, 0x36	; 54
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	28 2f       	mov	r18, r24
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	8b 81       	ldd	r24, Y+3	; 0x03
    19e4:	88 2f       	mov	r24, r24
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	a9 01       	movw	r20, r18
    19ea:	02 c0       	rjmp	.+4      	; 0x19f0 <DIO_u8GetPinValue+0x8e>
    19ec:	55 95       	asr	r21
    19ee:	47 95       	ror	r20
    19f0:	8a 95       	dec	r24
    19f2:	e2 f7       	brpl	.-8      	; 0x19ec <DIO_u8GetPinValue+0x8a>
    19f4:	ca 01       	movw	r24, r20
    19f6:	81 70       	andi	r24, 0x01	; 1
    19f8:	89 83       	std	Y+1, r24	; 0x01
    19fa:	23 c0       	rjmp	.+70     	; 0x1a42 <DIO_u8GetPinValue+0xe0>
		case PORTC/*Port C*/: value=GetBit(PINC_REG,Copy_u8PinID);break;
    19fc:	e3 e3       	ldi	r30, 0x33	; 51
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	28 2f       	mov	r18, r24
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	8b 81       	ldd	r24, Y+3	; 0x03
    1a08:	88 2f       	mov	r24, r24
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	a9 01       	movw	r20, r18
    1a0e:	02 c0       	rjmp	.+4      	; 0x1a14 <DIO_u8GetPinValue+0xb2>
    1a10:	55 95       	asr	r21
    1a12:	47 95       	ror	r20
    1a14:	8a 95       	dec	r24
    1a16:	e2 f7       	brpl	.-8      	; 0x1a10 <DIO_u8GetPinValue+0xae>
    1a18:	ca 01       	movw	r24, r20
    1a1a:	81 70       	andi	r24, 0x01	; 1
    1a1c:	89 83       	std	Y+1, r24	; 0x01
    1a1e:	11 c0       	rjmp	.+34     	; 0x1a42 <DIO_u8GetPinValue+0xe0>
		case PORTD/*Port D*/: value=GetBit(PIND_REG,Copy_u8PinID);break;
    1a20:	e0 e3       	ldi	r30, 0x30	; 48
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	28 2f       	mov	r18, r24
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2c:	88 2f       	mov	r24, r24
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	a9 01       	movw	r20, r18
    1a32:	02 c0       	rjmp	.+4      	; 0x1a38 <DIO_u8GetPinValue+0xd6>
    1a34:	55 95       	asr	r21
    1a36:	47 95       	ror	r20
    1a38:	8a 95       	dec	r24
    1a3a:	e2 f7       	brpl	.-8      	; 0x1a34 <DIO_u8GetPinValue+0xd2>
    1a3c:	ca 01       	movw	r24, r20
    1a3e:	81 70       	andi	r24, 0x01	; 1
    1a40:	89 83       	std	Y+1, r24	; 0x01
	}
	return value;
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
    1a48:	0f 90       	pop	r0
    1a4a:	0f 90       	pop	r0
    1a4c:	0f 90       	pop	r0
    1a4e:	cf 91       	pop	r28
    1a50:	df 91       	pop	r29
    1a52:	08 95       	ret

00001a54 <DIO_voidTogglePinValue>:

void DIO_voidTogglePinValue(u8 Copy_u8PortID,u8 Copy_u8PinID){
    1a54:	df 93       	push	r29
    1a56:	cf 93       	push	r28
    1a58:	00 d0       	rcall	.+0      	; 0x1a5a <DIO_voidTogglePinValue+0x6>
    1a5a:	00 d0       	rcall	.+0      	; 0x1a5c <DIO_voidTogglePinValue+0x8>
    1a5c:	cd b7       	in	r28, 0x3d	; 61
    1a5e:	de b7       	in	r29, 0x3e	; 62
    1a60:	89 83       	std	Y+1, r24	; 0x01
    1a62:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortID){
    1a64:	89 81       	ldd	r24, Y+1	; 0x01
    1a66:	28 2f       	mov	r18, r24
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	3c 83       	std	Y+4, r19	; 0x04
    1a6c:	2b 83       	std	Y+3, r18	; 0x03
    1a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a70:	9c 81       	ldd	r25, Y+4	; 0x04
    1a72:	81 30       	cpi	r24, 0x01	; 1
    1a74:	91 05       	cpc	r25, r1
    1a76:	49 f1       	breq	.+82     	; 0x1aca <DIO_voidTogglePinValue+0x76>
    1a78:	2b 81       	ldd	r18, Y+3	; 0x03
    1a7a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a7c:	22 30       	cpi	r18, 0x02	; 2
    1a7e:	31 05       	cpc	r19, r1
    1a80:	2c f4       	brge	.+10     	; 0x1a8c <DIO_voidTogglePinValue+0x38>
    1a82:	8b 81       	ldd	r24, Y+3	; 0x03
    1a84:	9c 81       	ldd	r25, Y+4	; 0x04
    1a86:	00 97       	sbiw	r24, 0x00	; 0
    1a88:	61 f0       	breq	.+24     	; 0x1aa2 <DIO_voidTogglePinValue+0x4e>
    1a8a:	5a c0       	rjmp	.+180    	; 0x1b40 <DIO_voidTogglePinValue+0xec>
    1a8c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a8e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a90:	22 30       	cpi	r18, 0x02	; 2
    1a92:	31 05       	cpc	r19, r1
    1a94:	71 f1       	breq	.+92     	; 0x1af2 <DIO_voidTogglePinValue+0x9e>
    1a96:	8b 81       	ldd	r24, Y+3	; 0x03
    1a98:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9a:	83 30       	cpi	r24, 0x03	; 3
    1a9c:	91 05       	cpc	r25, r1
    1a9e:	e9 f1       	breq	.+122    	; 0x1b1a <DIO_voidTogglePinValue+0xc6>
    1aa0:	4f c0       	rjmp	.+158    	; 0x1b40 <DIO_voidTogglePinValue+0xec>
		case PORTA/*Port A*/: TogBit(PORTA_REG,Copy_u8PinID);break;
    1aa2:	ab e3       	ldi	r26, 0x3B	; 59
    1aa4:	b0 e0       	ldi	r27, 0x00	; 0
    1aa6:	eb e3       	ldi	r30, 0x3B	; 59
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	48 2f       	mov	r20, r24
    1aae:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab0:	28 2f       	mov	r18, r24
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	02 2e       	mov	r0, r18
    1aba:	02 c0       	rjmp	.+4      	; 0x1ac0 <DIO_voidTogglePinValue+0x6c>
    1abc:	88 0f       	add	r24, r24
    1abe:	99 1f       	adc	r25, r25
    1ac0:	0a 94       	dec	r0
    1ac2:	e2 f7       	brpl	.-8      	; 0x1abc <DIO_voidTogglePinValue+0x68>
    1ac4:	84 27       	eor	r24, r20
    1ac6:	8c 93       	st	X, r24
    1ac8:	3b c0       	rjmp	.+118    	; 0x1b40 <DIO_voidTogglePinValue+0xec>
		case PORTB/*Port B*/: TogBit(PORTB_REG,Copy_u8PinID);break;
    1aca:	a8 e3       	ldi	r26, 0x38	; 56
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	e8 e3       	ldi	r30, 0x38	; 56
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	48 2f       	mov	r20, r24
    1ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad8:	28 2f       	mov	r18, r24
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	02 2e       	mov	r0, r18
    1ae2:	02 c0       	rjmp	.+4      	; 0x1ae8 <DIO_voidTogglePinValue+0x94>
    1ae4:	88 0f       	add	r24, r24
    1ae6:	99 1f       	adc	r25, r25
    1ae8:	0a 94       	dec	r0
    1aea:	e2 f7       	brpl	.-8      	; 0x1ae4 <DIO_voidTogglePinValue+0x90>
    1aec:	84 27       	eor	r24, r20
    1aee:	8c 93       	st	X, r24
    1af0:	27 c0       	rjmp	.+78     	; 0x1b40 <DIO_voidTogglePinValue+0xec>
		case PORTC/*Port C*/: TogBit(PORTC_REG,Copy_u8PinID);break;
    1af2:	a5 e3       	ldi	r26, 0x35	; 53
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	e5 e3       	ldi	r30, 0x35	; 53
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	48 2f       	mov	r20, r24
    1afe:	8a 81       	ldd	r24, Y+2	; 0x02
    1b00:	28 2f       	mov	r18, r24
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	02 2e       	mov	r0, r18
    1b0a:	02 c0       	rjmp	.+4      	; 0x1b10 <DIO_voidTogglePinValue+0xbc>
    1b0c:	88 0f       	add	r24, r24
    1b0e:	99 1f       	adc	r25, r25
    1b10:	0a 94       	dec	r0
    1b12:	e2 f7       	brpl	.-8      	; 0x1b0c <DIO_voidTogglePinValue+0xb8>
    1b14:	84 27       	eor	r24, r20
    1b16:	8c 93       	st	X, r24
    1b18:	13 c0       	rjmp	.+38     	; 0x1b40 <DIO_voidTogglePinValue+0xec>
		case PORTD/*Port D*/: TogBit(PORTD_REG,Copy_u8PinID);break;
    1b1a:	a2 e3       	ldi	r26, 0x32	; 50
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	e2 e3       	ldi	r30, 0x32	; 50
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	48 2f       	mov	r20, r24
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	28 2f       	mov	r18, r24
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	02 2e       	mov	r0, r18
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <DIO_voidTogglePinValue+0xe4>
    1b34:	88 0f       	add	r24, r24
    1b36:	99 1f       	adc	r25, r25
    1b38:	0a 94       	dec	r0
    1b3a:	e2 f7       	brpl	.-8      	; 0x1b34 <DIO_voidTogglePinValue+0xe0>
    1b3c:	84 27       	eor	r24, r20
    1b3e:	8c 93       	st	X, r24
	}
}
    1b40:	0f 90       	pop	r0
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	cf 91       	pop	r28
    1b4a:	df 91       	pop	r29
    1b4c:	08 95       	ret

00001b4e <LCD_voidIntialize>:
#include "LCD_config.h"
#include "LCD_interface.h"
#include "avr/delay.h"


void LCD_voidIntialize(){
    1b4e:	df 93       	push	r29
    1b50:	cf 93       	push	r28
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
    1b56:	aa 97       	sbiw	r28, 0x2a	; 42
    1b58:	0f b6       	in	r0, 0x3f	; 63
    1b5a:	f8 94       	cli
    1b5c:	de bf       	out	0x3e, r29	; 62
    1b5e:	0f be       	out	0x3f, r0	; 63
    1b60:	cd bf       	out	0x3d, r28	; 61
	
	DIO_voidSetAllPortOutput(LCD_DATA_PORT);
    1b62:	82 e0       	ldi	r24, 0x02	; 2
    1b64:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_voidSetAllPortOutput>
	
	DIO_voidSetPinDirection(LCD_CONTROL_PORT,RS,PIN_OUTPUT);
    1b68:	83 e0       	ldi	r24, 0x03	; 3
    1b6a:	62 e0       	ldi	r22, 0x02	; 2
    1b6c:	41 e0       	ldi	r20, 0x01	; 1
    1b6e:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT,RW,PIN_OUTPUT);
    1b72:	83 e0       	ldi	r24, 0x03	; 3
    1b74:	63 e0       	ldi	r22, 0x03	; 3
    1b76:	41 e0       	ldi	r20, 0x01	; 1
    1b78:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT,EN,PIN_OUTPUT);
    1b7c:	83 e0       	ldi	r24, 0x03	; 3
    1b7e:	64 e0       	ldi	r22, 0x04	; 4
    1b80:	41 e0       	ldi	r20, 0x01	; 1
    1b82:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinDirection>
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	a0 ef       	ldi	r26, 0xF0	; 240
    1b8c:	b1 e4       	ldi	r27, 0x41	; 65
    1b8e:	8f a3       	std	Y+39, r24	; 0x27
    1b90:	98 a7       	std	Y+40, r25	; 0x28
    1b92:	a9 a7       	std	Y+41, r26	; 0x29
    1b94:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b96:	6f a1       	ldd	r22, Y+39	; 0x27
    1b98:	78 a5       	ldd	r23, Y+40	; 0x28
    1b9a:	89 a5       	ldd	r24, Y+41	; 0x29
    1b9c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	4a ef       	ldi	r20, 0xFA	; 250
    1ba4:	54 e4       	ldi	r21, 0x44	; 68
    1ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	8b a3       	std	Y+35, r24	; 0x23
    1bb0:	9c a3       	std	Y+36, r25	; 0x24
    1bb2:	ad a3       	std	Y+37, r26	; 0x25
    1bb4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bb6:	6b a1       	ldd	r22, Y+35	; 0x23
    1bb8:	7c a1       	ldd	r23, Y+36	; 0x24
    1bba:	8d a1       	ldd	r24, Y+37	; 0x25
    1bbc:	9e a1       	ldd	r25, Y+38	; 0x26
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	40 e8       	ldi	r20, 0x80	; 128
    1bc4:	5f e3       	ldi	r21, 0x3F	; 63
    1bc6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bca:	88 23       	and	r24, r24
    1bcc:	2c f4       	brge	.+10     	; 0x1bd8 <LCD_voidIntialize+0x8a>
		__ticks = 1;
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	9a a3       	std	Y+34, r25	; 0x22
    1bd4:	89 a3       	std	Y+33, r24	; 0x21
    1bd6:	3f c0       	rjmp	.+126    	; 0x1c56 <LCD_voidIntialize+0x108>
	else if (__tmp > 65535)
    1bd8:	6b a1       	ldd	r22, Y+35	; 0x23
    1bda:	7c a1       	ldd	r23, Y+36	; 0x24
    1bdc:	8d a1       	ldd	r24, Y+37	; 0x25
    1bde:	9e a1       	ldd	r25, Y+38	; 0x26
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	3f ef       	ldi	r19, 0xFF	; 255
    1be4:	4f e7       	ldi	r20, 0x7F	; 127
    1be6:	57 e4       	ldi	r21, 0x47	; 71
    1be8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bec:	18 16       	cp	r1, r24
    1bee:	4c f5       	brge	.+82     	; 0x1c42 <LCD_voidIntialize+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf0:	6f a1       	ldd	r22, Y+39	; 0x27
    1bf2:	78 a5       	ldd	r23, Y+40	; 0x28
    1bf4:	89 a5       	ldd	r24, Y+41	; 0x29
    1bf6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	40 e2       	ldi	r20, 0x20	; 32
    1bfe:	51 e4       	ldi	r21, 0x41	; 65
    1c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	bc 01       	movw	r22, r24
    1c0a:	cd 01       	movw	r24, r26
    1c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	9a a3       	std	Y+34, r25	; 0x22
    1c16:	89 a3       	std	Y+33, r24	; 0x21
    1c18:	0f c0       	rjmp	.+30     	; 0x1c38 <LCD_voidIntialize+0xea>
    1c1a:	88 ec       	ldi	r24, 0xC8	; 200
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	98 a3       	std	Y+32, r25	; 0x20
    1c20:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c22:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c24:	98 a1       	ldd	r25, Y+32	; 0x20
    1c26:	01 97       	sbiw	r24, 0x01	; 1
    1c28:	f1 f7       	brne	.-4      	; 0x1c26 <LCD_voidIntialize+0xd8>
    1c2a:	98 a3       	std	Y+32, r25	; 0x20
    1c2c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c2e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c30:	9a a1       	ldd	r25, Y+34	; 0x22
    1c32:	01 97       	sbiw	r24, 0x01	; 1
    1c34:	9a a3       	std	Y+34, r25	; 0x22
    1c36:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c38:	89 a1       	ldd	r24, Y+33	; 0x21
    1c3a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c3c:	00 97       	sbiw	r24, 0x00	; 0
    1c3e:	69 f7       	brne	.-38     	; 0x1c1a <LCD_voidIntialize+0xcc>
    1c40:	14 c0       	rjmp	.+40     	; 0x1c6a <LCD_voidIntialize+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c42:	6b a1       	ldd	r22, Y+35	; 0x23
    1c44:	7c a1       	ldd	r23, Y+36	; 0x24
    1c46:	8d a1       	ldd	r24, Y+37	; 0x25
    1c48:	9e a1       	ldd	r25, Y+38	; 0x26
    1c4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	9a a3       	std	Y+34, r25	; 0x22
    1c54:	89 a3       	std	Y+33, r24	; 0x21
    1c56:	89 a1       	ldd	r24, Y+33	; 0x21
    1c58:	9a a1       	ldd	r25, Y+34	; 0x22
    1c5a:	9e 8f       	std	Y+30, r25	; 0x1e
    1c5c:	8d 8f       	std	Y+29, r24	; 0x1d
    1c5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c60:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c62:	01 97       	sbiw	r24, 0x01	; 1
    1c64:	f1 f7       	brne	.-4      	; 0x1c62 <LCD_voidIntialize+0x114>
    1c66:	9e 8f       	std	Y+30, r25	; 0x1e
    1c68:	8d 8f       	std	Y+29, r24	; 0x1d
	
	_delay_ms(30);
	LCD_voidWriteCommand(FUN_SET_COMMAND);
    1c6a:	88 e3       	ldi	r24, 0x38	; 56
    1c6c:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <LCD_voidWriteCommand>
    1c70:	80 e0       	ldi	r24, 0x00	; 0
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	a0 e0       	ldi	r26, 0x00	; 0
    1c76:	b0 e4       	ldi	r27, 0x40	; 64
    1c78:	89 8f       	std	Y+25, r24	; 0x19
    1c7a:	9a 8f       	std	Y+26, r25	; 0x1a
    1c7c:	ab 8f       	std	Y+27, r26	; 0x1b
    1c7e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c80:	69 8d       	ldd	r22, Y+25	; 0x19
    1c82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	4a ef       	ldi	r20, 0xFA	; 250
    1c8e:	54 e4       	ldi	r21, 0x44	; 68
    1c90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c94:	dc 01       	movw	r26, r24
    1c96:	cb 01       	movw	r24, r22
    1c98:	8d 8b       	std	Y+21, r24	; 0x15
    1c9a:	9e 8b       	std	Y+22, r25	; 0x16
    1c9c:	af 8b       	std	Y+23, r26	; 0x17
    1c9e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ca0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ca2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ca4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ca6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	40 e8       	ldi	r20, 0x80	; 128
    1cae:	5f e3       	ldi	r21, 0x3F	; 63
    1cb0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cb4:	88 23       	and	r24, r24
    1cb6:	2c f4       	brge	.+10     	; 0x1cc2 <LCD_voidIntialize+0x174>
		__ticks = 1;
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	9c 8b       	std	Y+20, r25	; 0x14
    1cbe:	8b 8b       	std	Y+19, r24	; 0x13
    1cc0:	3f c0       	rjmp	.+126    	; 0x1d40 <LCD_voidIntialize+0x1f2>
	else if (__tmp > 65535)
    1cc2:	6d 89       	ldd	r22, Y+21	; 0x15
    1cc4:	7e 89       	ldd	r23, Y+22	; 0x16
    1cc6:	8f 89       	ldd	r24, Y+23	; 0x17
    1cc8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cca:	20 e0       	ldi	r18, 0x00	; 0
    1ccc:	3f ef       	ldi	r19, 0xFF	; 255
    1cce:	4f e7       	ldi	r20, 0x7F	; 127
    1cd0:	57 e4       	ldi	r21, 0x47	; 71
    1cd2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cd6:	18 16       	cp	r1, r24
    1cd8:	4c f5       	brge	.+82     	; 0x1d2c <LCD_voidIntialize+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cda:	69 8d       	ldd	r22, Y+25	; 0x19
    1cdc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cde:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ce0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	40 e2       	ldi	r20, 0x20	; 32
    1ce8:	51 e4       	ldi	r21, 0x41	; 65
    1cea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	bc 01       	movw	r22, r24
    1cf4:	cd 01       	movw	r24, r26
    1cf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	9c 8b       	std	Y+20, r25	; 0x14
    1d00:	8b 8b       	std	Y+19, r24	; 0x13
    1d02:	0f c0       	rjmp	.+30     	; 0x1d22 <LCD_voidIntialize+0x1d4>
    1d04:	88 ec       	ldi	r24, 0xC8	; 200
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	9a 8b       	std	Y+18, r25	; 0x12
    1d0a:	89 8b       	std	Y+17, r24	; 0x11
    1d0c:	89 89       	ldd	r24, Y+17	; 0x11
    1d0e:	9a 89       	ldd	r25, Y+18	; 0x12
    1d10:	01 97       	sbiw	r24, 0x01	; 1
    1d12:	f1 f7       	brne	.-4      	; 0x1d10 <LCD_voidIntialize+0x1c2>
    1d14:	9a 8b       	std	Y+18, r25	; 0x12
    1d16:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d18:	8b 89       	ldd	r24, Y+19	; 0x13
    1d1a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d1c:	01 97       	sbiw	r24, 0x01	; 1
    1d1e:	9c 8b       	std	Y+20, r25	; 0x14
    1d20:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d22:	8b 89       	ldd	r24, Y+19	; 0x13
    1d24:	9c 89       	ldd	r25, Y+20	; 0x14
    1d26:	00 97       	sbiw	r24, 0x00	; 0
    1d28:	69 f7       	brne	.-38     	; 0x1d04 <LCD_voidIntialize+0x1b6>
    1d2a:	14 c0       	rjmp	.+40     	; 0x1d54 <LCD_voidIntialize+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d2c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d2e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d30:	8f 89       	ldd	r24, Y+23	; 0x17
    1d32:	98 8d       	ldd	r25, Y+24	; 0x18
    1d34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	9c 8b       	std	Y+20, r25	; 0x14
    1d3e:	8b 8b       	std	Y+19, r24	; 0x13
    1d40:	8b 89       	ldd	r24, Y+19	; 0x13
    1d42:	9c 89       	ldd	r25, Y+20	; 0x14
    1d44:	98 8b       	std	Y+16, r25	; 0x10
    1d46:	8f 87       	std	Y+15, r24	; 0x0f
    1d48:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d4a:	98 89       	ldd	r25, Y+16	; 0x10
    1d4c:	01 97       	sbiw	r24, 0x01	; 1
    1d4e:	f1 f7       	brne	.-4      	; 0x1d4c <LCD_voidIntialize+0x1fe>
    1d50:	98 8b       	std	Y+16, r25	; 0x10
    1d52:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_voidWriteCommand(DISPLAY_CONTROL_COMMAND);
    1d54:	8c e0       	ldi	r24, 0x0C	; 12
    1d56:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <LCD_voidWriteCommand>
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	a0 e0       	ldi	r26, 0x00	; 0
    1d60:	b0 e4       	ldi	r27, 0x40	; 64
    1d62:	8b 87       	std	Y+11, r24	; 0x0b
    1d64:	9c 87       	std	Y+12, r25	; 0x0c
    1d66:	ad 87       	std	Y+13, r26	; 0x0d
    1d68:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d70:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	4a ef       	ldi	r20, 0xFA	; 250
    1d78:	54 e4       	ldi	r21, 0x44	; 68
    1d7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	8f 83       	std	Y+7, r24	; 0x07
    1d84:	98 87       	std	Y+8, r25	; 0x08
    1d86:	a9 87       	std	Y+9, r26	; 0x09
    1d88:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d8c:	78 85       	ldd	r23, Y+8	; 0x08
    1d8e:	89 85       	ldd	r24, Y+9	; 0x09
    1d90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	40 e8       	ldi	r20, 0x80	; 128
    1d98:	5f e3       	ldi	r21, 0x3F	; 63
    1d9a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d9e:	88 23       	and	r24, r24
    1da0:	2c f4       	brge	.+10     	; 0x1dac <LCD_voidIntialize+0x25e>
		__ticks = 1;
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	9e 83       	std	Y+6, r25	; 0x06
    1da8:	8d 83       	std	Y+5, r24	; 0x05
    1daa:	3f c0       	rjmp	.+126    	; 0x1e2a <LCD_voidIntialize+0x2dc>
	else if (__tmp > 65535)
    1dac:	6f 81       	ldd	r22, Y+7	; 0x07
    1dae:	78 85       	ldd	r23, Y+8	; 0x08
    1db0:	89 85       	ldd	r24, Y+9	; 0x09
    1db2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	3f ef       	ldi	r19, 0xFF	; 255
    1db8:	4f e7       	ldi	r20, 0x7F	; 127
    1dba:	57 e4       	ldi	r21, 0x47	; 71
    1dbc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dc0:	18 16       	cp	r1, r24
    1dc2:	4c f5       	brge	.+82     	; 0x1e16 <LCD_voidIntialize+0x2c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dca:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	40 e2       	ldi	r20, 0x20	; 32
    1dd2:	51 e4       	ldi	r21, 0x41	; 65
    1dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	bc 01       	movw	r22, r24
    1dde:	cd 01       	movw	r24, r26
    1de0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de4:	dc 01       	movw	r26, r24
    1de6:	cb 01       	movw	r24, r22
    1de8:	9e 83       	std	Y+6, r25	; 0x06
    1dea:	8d 83       	std	Y+5, r24	; 0x05
    1dec:	0f c0       	rjmp	.+30     	; 0x1e0c <LCD_voidIntialize+0x2be>
    1dee:	88 ec       	ldi	r24, 0xC8	; 200
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	9c 83       	std	Y+4, r25	; 0x04
    1df4:	8b 83       	std	Y+3, r24	; 0x03
    1df6:	8b 81       	ldd	r24, Y+3	; 0x03
    1df8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dfa:	01 97       	sbiw	r24, 0x01	; 1
    1dfc:	f1 f7       	brne	.-4      	; 0x1dfa <LCD_voidIntialize+0x2ac>
    1dfe:	9c 83       	std	Y+4, r25	; 0x04
    1e00:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e02:	8d 81       	ldd	r24, Y+5	; 0x05
    1e04:	9e 81       	ldd	r25, Y+6	; 0x06
    1e06:	01 97       	sbiw	r24, 0x01	; 1
    1e08:	9e 83       	std	Y+6, r25	; 0x06
    1e0a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e10:	00 97       	sbiw	r24, 0x00	; 0
    1e12:	69 f7       	brne	.-38     	; 0x1dee <LCD_voidIntialize+0x2a0>
    1e14:	14 c0       	rjmp	.+40     	; 0x1e3e <LCD_voidIntialize+0x2f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e16:	6f 81       	ldd	r22, Y+7	; 0x07
    1e18:	78 85       	ldd	r23, Y+8	; 0x08
    1e1a:	89 85       	ldd	r24, Y+9	; 0x09
    1e1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	9e 83       	std	Y+6, r25	; 0x06
    1e28:	8d 83       	std	Y+5, r24	; 0x05
    1e2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e2e:	9a 83       	std	Y+2, r25	; 0x02
    1e30:	89 83       	std	Y+1, r24	; 0x01
    1e32:	89 81       	ldd	r24, Y+1	; 0x01
    1e34:	9a 81       	ldd	r25, Y+2	; 0x02
    1e36:	01 97       	sbiw	r24, 0x01	; 1
    1e38:	f1 f7       	brne	.-4      	; 0x1e36 <LCD_voidIntialize+0x2e8>
    1e3a:	9a 83       	std	Y+2, r25	; 0x02
    1e3c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_voidWriteCommand(CLEAR_COMMAND);
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <LCD_voidWriteCommand>
	
}
    1e44:	aa 96       	adiw	r28, 0x2a	; 42
    1e46:	0f b6       	in	r0, 0x3f	; 63
    1e48:	f8 94       	cli
    1e4a:	de bf       	out	0x3e, r29	; 62
    1e4c:	0f be       	out	0x3f, r0	; 63
    1e4e:	cd bf       	out	0x3d, r28	; 61
    1e50:	cf 91       	pop	r28
    1e52:	df 91       	pop	r29
    1e54:	08 95       	ret

00001e56 <LCD_voidWriteCommand>:

void LCD_voidWriteCommand(u8 Copy_u8Command){
    1e56:	df 93       	push	r29
    1e58:	cf 93       	push	r28
    1e5a:	cd b7       	in	r28, 0x3d	; 61
    1e5c:	de b7       	in	r29, 0x3e	; 62
    1e5e:	2f 97       	sbiw	r28, 0x0f	; 15
    1e60:	0f b6       	in	r0, 0x3f	; 63
    1e62:	f8 94       	cli
    1e64:	de bf       	out	0x3e, r29	; 62
    1e66:	0f be       	out	0x3f, r0	; 63
    1e68:	cd bf       	out	0x3d, r28	; 61
    1e6a:	8f 87       	std	Y+15, r24	; 0x0f

	DIO_voidSetPinValue(LCD_CONTROL_PORT,RS,PIN_LOW);
    1e6c:	83 e0       	ldi	r24, 0x03	; 3
    1e6e:	62 e0       	ldi	r22, 0x02	; 2
    1e70:	40 e0       	ldi	r20, 0x00	; 0
    1e72:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT,RW,PIN_LOW);
    1e76:	83 e0       	ldi	r24, 0x03	; 3
    1e78:	63 e0       	ldi	r22, 0x03	; 3
    1e7a:	40 e0       	ldi	r20, 0x00	; 0
    1e7c:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_voidSetPinValue>
	
	DIO_voidSetPortValue(LCD_DATA_PORT,Copy_u8Command);
    1e80:	82 e0       	ldi	r24, 0x02	; 2
    1e82:	6f 85       	ldd	r22, Y+15	; 0x0f
    1e84:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <DIO_voidSetPortValue>
	
	DIO_voidSetPinValue(LCD_CONTROL_PORT,EN,PIN_HIGH);
    1e88:	83 e0       	ldi	r24, 0x03	; 3
    1e8a:	64 e0       	ldi	r22, 0x04	; 4
    1e8c:	41 e0       	ldi	r20, 0x01	; 1
    1e8e:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_voidSetPinValue>
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	a0 e0       	ldi	r26, 0x00	; 0
    1e98:	b0 e4       	ldi	r27, 0x40	; 64
    1e9a:	8b 87       	std	Y+11, r24	; 0x0b
    1e9c:	9c 87       	std	Y+12, r25	; 0x0c
    1e9e:	ad 87       	std	Y+13, r26	; 0x0d
    1ea0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ea4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ea6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ea8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	4a ef       	ldi	r20, 0xFA	; 250
    1eb0:	54 e4       	ldi	r21, 0x44	; 68
    1eb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	8f 83       	std	Y+7, r24	; 0x07
    1ebc:	98 87       	std	Y+8, r25	; 0x08
    1ebe:	a9 87       	std	Y+9, r26	; 0x09
    1ec0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ec2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ec4:	78 85       	ldd	r23, Y+8	; 0x08
    1ec6:	89 85       	ldd	r24, Y+9	; 0x09
    1ec8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	40 e8       	ldi	r20, 0x80	; 128
    1ed0:	5f e3       	ldi	r21, 0x3F	; 63
    1ed2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ed6:	88 23       	and	r24, r24
    1ed8:	2c f4       	brge	.+10     	; 0x1ee4 <LCD_voidWriteCommand+0x8e>
		__ticks = 1;
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	9e 83       	std	Y+6, r25	; 0x06
    1ee0:	8d 83       	std	Y+5, r24	; 0x05
    1ee2:	3f c0       	rjmp	.+126    	; 0x1f62 <LCD_voidWriteCommand+0x10c>
	else if (__tmp > 65535)
    1ee4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee6:	78 85       	ldd	r23, Y+8	; 0x08
    1ee8:	89 85       	ldd	r24, Y+9	; 0x09
    1eea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	3f ef       	ldi	r19, 0xFF	; 255
    1ef0:	4f e7       	ldi	r20, 0x7F	; 127
    1ef2:	57 e4       	ldi	r21, 0x47	; 71
    1ef4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ef8:	18 16       	cp	r1, r24
    1efa:	4c f5       	brge	.+82     	; 0x1f4e <LCD_voidWriteCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1efc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1efe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	40 e2       	ldi	r20, 0x20	; 32
    1f0a:	51 e4       	ldi	r21, 0x41	; 65
    1f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	bc 01       	movw	r22, r24
    1f16:	cd 01       	movw	r24, r26
    1f18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	9e 83       	std	Y+6, r25	; 0x06
    1f22:	8d 83       	std	Y+5, r24	; 0x05
    1f24:	0f c0       	rjmp	.+30     	; 0x1f44 <LCD_voidWriteCommand+0xee>
    1f26:	88 ec       	ldi	r24, 0xC8	; 200
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	9c 83       	std	Y+4, r25	; 0x04
    1f2c:	8b 83       	std	Y+3, r24	; 0x03
    1f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f30:	9c 81       	ldd	r25, Y+4	; 0x04
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	f1 f7       	brne	.-4      	; 0x1f32 <LCD_voidWriteCommand+0xdc>
    1f36:	9c 83       	std	Y+4, r25	; 0x04
    1f38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	9e 83       	std	Y+6, r25	; 0x06
    1f42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f44:	8d 81       	ldd	r24, Y+5	; 0x05
    1f46:	9e 81       	ldd	r25, Y+6	; 0x06
    1f48:	00 97       	sbiw	r24, 0x00	; 0
    1f4a:	69 f7       	brne	.-38     	; 0x1f26 <LCD_voidWriteCommand+0xd0>
    1f4c:	14 c0       	rjmp	.+40     	; 0x1f76 <LCD_voidWriteCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f50:	78 85       	ldd	r23, Y+8	; 0x08
    1f52:	89 85       	ldd	r24, Y+9	; 0x09
    1f54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	9e 83       	std	Y+6, r25	; 0x06
    1f60:	8d 83       	std	Y+5, r24	; 0x05
    1f62:	8d 81       	ldd	r24, Y+5	; 0x05
    1f64:	9e 81       	ldd	r25, Y+6	; 0x06
    1f66:	9a 83       	std	Y+2, r25	; 0x02
    1f68:	89 83       	std	Y+1, r24	; 0x01
    1f6a:	89 81       	ldd	r24, Y+1	; 0x01
    1f6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f6e:	01 97       	sbiw	r24, 0x01	; 1
    1f70:	f1 f7       	brne	.-4      	; 0x1f6e <LCD_voidWriteCommand+0x118>
    1f72:	9a 83       	std	Y+2, r25	; 0x02
    1f74:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CONTROL_PORT,EN,PIN_LOW);
    1f76:	83 e0       	ldi	r24, 0x03	; 3
    1f78:	64 e0       	ldi	r22, 0x04	; 4
    1f7a:	40 e0       	ldi	r20, 0x00	; 0
    1f7c:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_voidSetPinValue>
}
    1f80:	2f 96       	adiw	r28, 0x0f	; 15
    1f82:	0f b6       	in	r0, 0x3f	; 63
    1f84:	f8 94       	cli
    1f86:	de bf       	out	0x3e, r29	; 62
    1f88:	0f be       	out	0x3f, r0	; 63
    1f8a:	cd bf       	out	0x3d, r28	; 61
    1f8c:	cf 91       	pop	r28
    1f8e:	df 91       	pop	r29
    1f90:	08 95       	ret

00001f92 <LCD_voidWriteData>:

void LCD_voidWriteData(u8 Copy_u8Data){
    1f92:	df 93       	push	r29
    1f94:	cf 93       	push	r28
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
    1f9a:	2f 97       	sbiw	r28, 0x0f	; 15
    1f9c:	0f b6       	in	r0, 0x3f	; 63
    1f9e:	f8 94       	cli
    1fa0:	de bf       	out	0x3e, r29	; 62
    1fa2:	0f be       	out	0x3f, r0	; 63
    1fa4:	cd bf       	out	0x3d, r28	; 61
    1fa6:	8f 87       	std	Y+15, r24	; 0x0f

	DIO_voidSetPinValue(LCD_CONTROL_PORT,RS,PIN_HIGH);
    1fa8:	83 e0       	ldi	r24, 0x03	; 3
    1faa:	62 e0       	ldi	r22, 0x02	; 2
    1fac:	41 e0       	ldi	r20, 0x01	; 1
    1fae:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT,RW,PIN_LOW);
    1fb2:	83 e0       	ldi	r24, 0x03	; 3
    1fb4:	63 e0       	ldi	r22, 0x03	; 3
    1fb6:	40 e0       	ldi	r20, 0x00	; 0
    1fb8:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_voidSetPinValue>
	
	DIO_voidSetPortValue(LCD_DATA_PORT,Copy_u8Data);
    1fbc:	82 e0       	ldi	r24, 0x02	; 2
    1fbe:	6f 85       	ldd	r22, Y+15	; 0x0f
    1fc0:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <DIO_voidSetPortValue>
	
	DIO_voidSetPinValue(LCD_CONTROL_PORT,EN,PIN_HIGH);
    1fc4:	83 e0       	ldi	r24, 0x03	; 3
    1fc6:	64 e0       	ldi	r22, 0x04	; 4
    1fc8:	41 e0       	ldi	r20, 0x01	; 1
    1fca:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_voidSetPinValue>
    1fce:	80 e0       	ldi	r24, 0x00	; 0
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	a0 e0       	ldi	r26, 0x00	; 0
    1fd4:	b0 e4       	ldi	r27, 0x40	; 64
    1fd6:	8b 87       	std	Y+11, r24	; 0x0b
    1fd8:	9c 87       	std	Y+12, r25	; 0x0c
    1fda:	ad 87       	std	Y+13, r26	; 0x0d
    1fdc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fde:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fe0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fe2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fe4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	4a ef       	ldi	r20, 0xFA	; 250
    1fec:	54 e4       	ldi	r21, 0x44	; 68
    1fee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	8f 83       	std	Y+7, r24	; 0x07
    1ff8:	98 87       	std	Y+8, r25	; 0x08
    1ffa:	a9 87       	std	Y+9, r26	; 0x09
    1ffc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ffe:	6f 81       	ldd	r22, Y+7	; 0x07
    2000:	78 85       	ldd	r23, Y+8	; 0x08
    2002:	89 85       	ldd	r24, Y+9	; 0x09
    2004:	9a 85       	ldd	r25, Y+10	; 0x0a
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	40 e8       	ldi	r20, 0x80	; 128
    200c:	5f e3       	ldi	r21, 0x3F	; 63
    200e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2012:	88 23       	and	r24, r24
    2014:	2c f4       	brge	.+10     	; 0x2020 <LCD_voidWriteData+0x8e>
		__ticks = 1;
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	9e 83       	std	Y+6, r25	; 0x06
    201c:	8d 83       	std	Y+5, r24	; 0x05
    201e:	3f c0       	rjmp	.+126    	; 0x209e <LCD_voidWriteData+0x10c>
	else if (__tmp > 65535)
    2020:	6f 81       	ldd	r22, Y+7	; 0x07
    2022:	78 85       	ldd	r23, Y+8	; 0x08
    2024:	89 85       	ldd	r24, Y+9	; 0x09
    2026:	9a 85       	ldd	r25, Y+10	; 0x0a
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	3f ef       	ldi	r19, 0xFF	; 255
    202c:	4f e7       	ldi	r20, 0x7F	; 127
    202e:	57 e4       	ldi	r21, 0x47	; 71
    2030:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2034:	18 16       	cp	r1, r24
    2036:	4c f5       	brge	.+82     	; 0x208a <LCD_voidWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2038:	6b 85       	ldd	r22, Y+11	; 0x0b
    203a:	7c 85       	ldd	r23, Y+12	; 0x0c
    203c:	8d 85       	ldd	r24, Y+13	; 0x0d
    203e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	40 e2       	ldi	r20, 0x20	; 32
    2046:	51 e4       	ldi	r21, 0x41	; 65
    2048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	bc 01       	movw	r22, r24
    2052:	cd 01       	movw	r24, r26
    2054:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	9e 83       	std	Y+6, r25	; 0x06
    205e:	8d 83       	std	Y+5, r24	; 0x05
    2060:	0f c0       	rjmp	.+30     	; 0x2080 <LCD_voidWriteData+0xee>
    2062:	88 ec       	ldi	r24, 0xC8	; 200
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	9c 83       	std	Y+4, r25	; 0x04
    2068:	8b 83       	std	Y+3, r24	; 0x03
    206a:	8b 81       	ldd	r24, Y+3	; 0x03
    206c:	9c 81       	ldd	r25, Y+4	; 0x04
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	f1 f7       	brne	.-4      	; 0x206e <LCD_voidWriteData+0xdc>
    2072:	9c 83       	std	Y+4, r25	; 0x04
    2074:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2076:	8d 81       	ldd	r24, Y+5	; 0x05
    2078:	9e 81       	ldd	r25, Y+6	; 0x06
    207a:	01 97       	sbiw	r24, 0x01	; 1
    207c:	9e 83       	std	Y+6, r25	; 0x06
    207e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2080:	8d 81       	ldd	r24, Y+5	; 0x05
    2082:	9e 81       	ldd	r25, Y+6	; 0x06
    2084:	00 97       	sbiw	r24, 0x00	; 0
    2086:	69 f7       	brne	.-38     	; 0x2062 <LCD_voidWriteData+0xd0>
    2088:	14 c0       	rjmp	.+40     	; 0x20b2 <LCD_voidWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    208a:	6f 81       	ldd	r22, Y+7	; 0x07
    208c:	78 85       	ldd	r23, Y+8	; 0x08
    208e:	89 85       	ldd	r24, Y+9	; 0x09
    2090:	9a 85       	ldd	r25, Y+10	; 0x0a
    2092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	9e 83       	std	Y+6, r25	; 0x06
    209c:	8d 83       	std	Y+5, r24	; 0x05
    209e:	8d 81       	ldd	r24, Y+5	; 0x05
    20a0:	9e 81       	ldd	r25, Y+6	; 0x06
    20a2:	9a 83       	std	Y+2, r25	; 0x02
    20a4:	89 83       	std	Y+1, r24	; 0x01
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	9a 81       	ldd	r25, Y+2	; 0x02
    20aa:	01 97       	sbiw	r24, 0x01	; 1
    20ac:	f1 f7       	brne	.-4      	; 0x20aa <LCD_voidWriteData+0x118>
    20ae:	9a 83       	std	Y+2, r25	; 0x02
    20b0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CONTROL_PORT,EN,PIN_LOW);
    20b2:	83 e0       	ldi	r24, 0x03	; 3
    20b4:	64 e0       	ldi	r22, 0x04	; 4
    20b6:	40 e0       	ldi	r20, 0x00	; 0
    20b8:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_voidSetPinValue>
}
    20bc:	2f 96       	adiw	r28, 0x0f	; 15
    20be:	0f b6       	in	r0, 0x3f	; 63
    20c0:	f8 94       	cli
    20c2:	de bf       	out	0x3e, r29	; 62
    20c4:	0f be       	out	0x3f, r0	; 63
    20c6:	cd bf       	out	0x3d, r28	; 61
    20c8:	cf 91       	pop	r28
    20ca:	df 91       	pop	r29
    20cc:	08 95       	ret

000020ce <LCD_voidGoToXY>:

void LCD_voidGoToXY(u8 Copy_u8X,u8 Copy_u8Y){
    20ce:	df 93       	push	r29
    20d0:	cf 93       	push	r28
    20d2:	00 d0       	rcall	.+0      	; 0x20d4 <LCD_voidGoToXY+0x6>
    20d4:	00 d0       	rcall	.+0      	; 0x20d6 <LCD_voidGoToXY+0x8>
    20d6:	cd b7       	in	r28, 0x3d	; 61
    20d8:	de b7       	in	r29, 0x3e	; 62
    20da:	89 83       	std	Y+1, r24	; 0x01
    20dc:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8X){
    20de:	89 81       	ldd	r24, Y+1	; 0x01
    20e0:	28 2f       	mov	r18, r24
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	3c 83       	std	Y+4, r19	; 0x04
    20e6:	2b 83       	std	Y+3, r18	; 0x03
    20e8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ea:	9c 81       	ldd	r25, Y+4	; 0x04
    20ec:	00 97       	sbiw	r24, 0x00	; 0
    20ee:	31 f0       	breq	.+12     	; 0x20fc <LCD_voidGoToXY+0x2e>
    20f0:	2b 81       	ldd	r18, Y+3	; 0x03
    20f2:	3c 81       	ldd	r19, Y+4	; 0x04
    20f4:	21 30       	cpi	r18, 0x01	; 1
    20f6:	31 05       	cpc	r19, r1
    20f8:	31 f0       	breq	.+12     	; 0x2106 <LCD_voidGoToXY+0x38>
    20fa:	09 c0       	rjmp	.+18     	; 0x210e <LCD_voidGoToXY+0x40>
		case LINE0:
			LCD_voidWriteCommand(LINE0_ADDRESS+Copy_u8Y);
    20fc:	8a 81       	ldd	r24, Y+2	; 0x02
    20fe:	80 58       	subi	r24, 0x80	; 128
    2100:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <LCD_voidWriteCommand>
    2104:	04 c0       	rjmp	.+8      	; 0x210e <LCD_voidGoToXY+0x40>
			break;
		case LINE1:
			LCD_voidWriteCommand(LINE1_ADDRESS+Copy_u8Y);
    2106:	8a 81       	ldd	r24, Y+2	; 0x02
    2108:	80 54       	subi	r24, 0x40	; 64
    210a:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <LCD_voidWriteCommand>
	}
}
    210e:	0f 90       	pop	r0
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	cf 91       	pop	r28
    2118:	df 91       	pop	r29
    211a:	08 95       	ret

0000211c <LCD_voidWriteString>:


void LCD_voidWriteString(u8 *Copy_u8String){
    211c:	df 93       	push	r29
    211e:	cf 93       	push	r28
    2120:	00 d0       	rcall	.+0      	; 0x2122 <LCD_voidWriteString+0x6>
    2122:	0f 92       	push	r0
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
    2128:	9b 83       	std	Y+3, r25	; 0x03
    212a:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    212c:	19 82       	std	Y+1, r1	; 0x01
    212e:	0e c0       	rjmp	.+28     	; 0x214c <LCD_voidWriteString+0x30>
	while(Copy_u8String[i]!='\0'){
		LCD_voidWriteData(Copy_u8String[i]);
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	28 2f       	mov	r18, r24
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	8a 81       	ldd	r24, Y+2	; 0x02
    2138:	9b 81       	ldd	r25, Y+3	; 0x03
    213a:	fc 01       	movw	r30, r24
    213c:	e2 0f       	add	r30, r18
    213e:	f3 1f       	adc	r31, r19
    2140:	80 81       	ld	r24, Z
    2142:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <LCD_voidWriteData>
		i++;
    2146:	89 81       	ldd	r24, Y+1	; 0x01
    2148:	8f 5f       	subi	r24, 0xFF	; 255
    214a:	89 83       	std	Y+1, r24	; 0x01
}


void LCD_voidWriteString(u8 *Copy_u8String){
	u8 i=0;
	while(Copy_u8String[i]!='\0'){
    214c:	89 81       	ldd	r24, Y+1	; 0x01
    214e:	28 2f       	mov	r18, r24
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	8a 81       	ldd	r24, Y+2	; 0x02
    2154:	9b 81       	ldd	r25, Y+3	; 0x03
    2156:	fc 01       	movw	r30, r24
    2158:	e2 0f       	add	r30, r18
    215a:	f3 1f       	adc	r31, r19
    215c:	80 81       	ld	r24, Z
    215e:	88 23       	and	r24, r24
    2160:	39 f7       	brne	.-50     	; 0x2130 <LCD_voidWriteString+0x14>
		LCD_voidWriteData(Copy_u8String[i]);
		i++;
	}
}
    2162:	0f 90       	pop	r0
    2164:	0f 90       	pop	r0
    2166:	0f 90       	pop	r0
    2168:	cf 91       	pop	r28
    216a:	df 91       	pop	r29
    216c:	08 95       	ret

0000216e <LCD_voidWriteNumber>:

void LCD_voidWriteNumber(u32 Copy_u32Number){
    216e:	0f 93       	push	r16
    2170:	1f 93       	push	r17
    2172:	df 93       	push	r29
    2174:	cf 93       	push	r28
    2176:	cd b7       	in	r28, 0x3d	; 61
    2178:	de b7       	in	r29, 0x3e	; 62
    217a:	60 97       	sbiw	r28, 0x10	; 16
    217c:	0f b6       	in	r0, 0x3f	; 63
    217e:	f8 94       	cli
    2180:	de bf       	out	0x3e, r29	; 62
    2182:	0f be       	out	0x3f, r0	; 63
    2184:	cd bf       	out	0x3d, r28	; 61
    2186:	6d 87       	std	Y+13, r22	; 0x0d
    2188:	7e 87       	std	Y+14, r23	; 0x0e
    218a:	8f 87       	std	Y+15, r24	; 0x0f
    218c:	98 8b       	std	Y+16, r25	; 0x10
	u8 arr[MAX_INT_DIGITS];
	u8 i=0;
    218e:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u32Number==0){
    2190:	8d 85       	ldd	r24, Y+13	; 0x0d
    2192:	9e 85       	ldd	r25, Y+14	; 0x0e
    2194:	af 85       	ldd	r26, Y+15	; 0x0f
    2196:	b8 89       	ldd	r27, Y+16	; 0x10
    2198:	00 97       	sbiw	r24, 0x00	; 0
    219a:	a1 05       	cpc	r26, r1
    219c:	b1 05       	cpc	r27, r1
    219e:	89 f5       	brne	.+98     	; 0x2202 <LCD_voidWriteNumber+0x94>
		LCD_voidWriteData(ZERO_ASCII);
    21a0:	80 e3       	ldi	r24, 0x30	; 48
    21a2:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <LCD_voidWriteData>
    21a6:	4d c0       	rjmp	.+154    	; 0x2242 <LCD_voidWriteNumber+0xd4>
	}
	else{
		while(Copy_u32Number>0){
			arr[i]=Copy_u32Number%10;
    21a8:	8a 81       	ldd	r24, Y+2	; 0x02
    21aa:	08 2f       	mov	r16, r24
    21ac:	10 e0       	ldi	r17, 0x00	; 0
    21ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    21b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21b2:	af 85       	ldd	r26, Y+15	; 0x0f
    21b4:	b8 89       	ldd	r27, Y+16	; 0x10
    21b6:	2a e0       	ldi	r18, 0x0A	; 10
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	40 e0       	ldi	r20, 0x00	; 0
    21bc:	50 e0       	ldi	r21, 0x00	; 0
    21be:	bc 01       	movw	r22, r24
    21c0:	cd 01       	movw	r24, r26
    21c2:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__udivmodsi4>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	28 2f       	mov	r18, r24
    21cc:	ce 01       	movw	r24, r28
    21ce:	03 96       	adiw	r24, 0x03	; 3
    21d0:	fc 01       	movw	r30, r24
    21d2:	e0 0f       	add	r30, r16
    21d4:	f1 1f       	adc	r31, r17
    21d6:	20 83       	st	Z, r18
			Copy_u32Number/=10;
    21d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21da:	9e 85       	ldd	r25, Y+14	; 0x0e
    21dc:	af 85       	ldd	r26, Y+15	; 0x0f
    21de:	b8 89       	ldd	r27, Y+16	; 0x10
    21e0:	2a e0       	ldi	r18, 0x0A	; 10
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	40 e0       	ldi	r20, 0x00	; 0
    21e6:	50 e0       	ldi	r21, 0x00	; 0
    21e8:	bc 01       	movw	r22, r24
    21ea:	cd 01       	movw	r24, r26
    21ec:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__udivmodsi4>
    21f0:	da 01       	movw	r26, r20
    21f2:	c9 01       	movw	r24, r18
    21f4:	8d 87       	std	Y+13, r24	; 0x0d
    21f6:	9e 87       	std	Y+14, r25	; 0x0e
    21f8:	af 87       	std	Y+15, r26	; 0x0f
    21fa:	b8 8b       	std	Y+16, r27	; 0x10
			i++;
    21fc:	8a 81       	ldd	r24, Y+2	; 0x02
    21fe:	8f 5f       	subi	r24, 0xFF	; 255
    2200:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
	if(Copy_u32Number==0){
		LCD_voidWriteData(ZERO_ASCII);
	}
	else{
		while(Copy_u32Number>0){
    2202:	8d 85       	ldd	r24, Y+13	; 0x0d
    2204:	9e 85       	ldd	r25, Y+14	; 0x0e
    2206:	af 85       	ldd	r26, Y+15	; 0x0f
    2208:	b8 89       	ldd	r27, Y+16	; 0x10
    220a:	00 97       	sbiw	r24, 0x00	; 0
    220c:	a1 05       	cpc	r26, r1
    220e:	b1 05       	cpc	r27, r1
    2210:	59 f6       	brne	.-106    	; 0x21a8 <LCD_voidWriteNumber+0x3a>
			arr[i]=Copy_u32Number%10;
			Copy_u32Number/=10;
			i++;
		}
		for(u8 j=i;j>0;j--){
    2212:	8a 81       	ldd	r24, Y+2	; 0x02
    2214:	89 83       	std	Y+1, r24	; 0x01
    2216:	12 c0       	rjmp	.+36     	; 0x223c <LCD_voidWriteNumber+0xce>
			LCD_voidWriteData(arr[j-1]+ZERO_ASCII);
    2218:	89 81       	ldd	r24, Y+1	; 0x01
    221a:	88 2f       	mov	r24, r24
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	9c 01       	movw	r18, r24
    2220:	21 50       	subi	r18, 0x01	; 1
    2222:	30 40       	sbci	r19, 0x00	; 0
    2224:	ce 01       	movw	r24, r28
    2226:	03 96       	adiw	r24, 0x03	; 3
    2228:	fc 01       	movw	r30, r24
    222a:	e2 0f       	add	r30, r18
    222c:	f3 1f       	adc	r31, r19
    222e:	80 81       	ld	r24, Z
    2230:	80 5d       	subi	r24, 0xD0	; 208
    2232:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <LCD_voidWriteData>
		while(Copy_u32Number>0){
			arr[i]=Copy_u32Number%10;
			Copy_u32Number/=10;
			i++;
		}
		for(u8 j=i;j>0;j--){
    2236:	89 81       	ldd	r24, Y+1	; 0x01
    2238:	81 50       	subi	r24, 0x01	; 1
    223a:	89 83       	std	Y+1, r24	; 0x01
    223c:	89 81       	ldd	r24, Y+1	; 0x01
    223e:	88 23       	and	r24, r24
    2240:	59 f7       	brne	.-42     	; 0x2218 <LCD_voidWriteNumber+0xaa>
			LCD_voidWriteData(arr[j-1]+ZERO_ASCII);
		}		
	}
}
    2242:	60 96       	adiw	r28, 0x10	; 16
    2244:	0f b6       	in	r0, 0x3f	; 63
    2246:	f8 94       	cli
    2248:	de bf       	out	0x3e, r29	; 62
    224a:	0f be       	out	0x3f, r0	; 63
    224c:	cd bf       	out	0x3d, r28	; 61
    224e:	cf 91       	pop	r28
    2250:	df 91       	pop	r29
    2252:	1f 91       	pop	r17
    2254:	0f 91       	pop	r16
    2256:	08 95       	ret

00002258 <LCD_voidWriteSpecialCharacter>:

void LCD_voidWriteSpecialCharacter(u8 *patern,u8 Copy_u32Char,u8 Copy_u8X,u8 Copy_u8Y){
    2258:	df 93       	push	r29
    225a:	cf 93       	push	r28
    225c:	00 d0       	rcall	.+0      	; 0x225e <LCD_voidWriteSpecialCharacter+0x6>
    225e:	00 d0       	rcall	.+0      	; 0x2260 <LCD_voidWriteSpecialCharacter+0x8>
    2260:	00 d0       	rcall	.+0      	; 0x2262 <LCD_voidWriteSpecialCharacter+0xa>
    2262:	cd b7       	in	r28, 0x3d	; 61
    2264:	de b7       	in	r29, 0x3e	; 62
    2266:	9b 83       	std	Y+3, r25	; 0x03
    2268:	8a 83       	std	Y+2, r24	; 0x02
    226a:	6c 83       	std	Y+4, r22	; 0x04
    226c:	4d 83       	std	Y+5, r20	; 0x05
    226e:	2e 83       	std	Y+6, r18	; 0x06
	LCD_voidWriteCommand(CGRAM_ADDRESS+Copy_u32Char*NO_BLOCK_BYTES);
    2270:	8c 81       	ldd	r24, Y+4	; 0x04
    2272:	88 2f       	mov	r24, r24
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	08 96       	adiw	r24, 0x08	; 8
    2278:	88 0f       	add	r24, r24
    227a:	99 1f       	adc	r25, r25
    227c:	88 0f       	add	r24, r24
    227e:	99 1f       	adc	r25, r25
    2280:	88 0f       	add	r24, r24
    2282:	99 1f       	adc	r25, r25
    2284:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <LCD_voidWriteCommand>
	for(u8 i=0;i<NO_BLOCK_BYTES;i++){
    2288:	19 82       	std	Y+1, r1	; 0x01
    228a:	0e c0       	rjmp	.+28     	; 0x22a8 <LCD_voidWriteSpecialCharacter+0x50>
		LCD_voidWriteData(patern[i]);
    228c:	89 81       	ldd	r24, Y+1	; 0x01
    228e:	28 2f       	mov	r18, r24
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	8a 81       	ldd	r24, Y+2	; 0x02
    2294:	9b 81       	ldd	r25, Y+3	; 0x03
    2296:	fc 01       	movw	r30, r24
    2298:	e2 0f       	add	r30, r18
    229a:	f3 1f       	adc	r31, r19
    229c:	80 81       	ld	r24, Z
    229e:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <LCD_voidWriteData>
	}
}

void LCD_voidWriteSpecialCharacter(u8 *patern,u8 Copy_u32Char,u8 Copy_u8X,u8 Copy_u8Y){
	LCD_voidWriteCommand(CGRAM_ADDRESS+Copy_u32Char*NO_BLOCK_BYTES);
	for(u8 i=0;i<NO_BLOCK_BYTES;i++){
    22a2:	89 81       	ldd	r24, Y+1	; 0x01
    22a4:	8f 5f       	subi	r24, 0xFF	; 255
    22a6:	89 83       	std	Y+1, r24	; 0x01
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	88 30       	cpi	r24, 0x08	; 8
    22ac:	78 f3       	brcs	.-34     	; 0x228c <LCD_voidWriteSpecialCharacter+0x34>
		LCD_voidWriteData(patern[i]);
	}
	LCD_voidGoToXY(Copy_u8X,Copy_u8Y);
    22ae:	8d 81       	ldd	r24, Y+5	; 0x05
    22b0:	6e 81       	ldd	r22, Y+6	; 0x06
    22b2:	0e 94 67 10 	call	0x20ce	; 0x20ce <LCD_voidGoToXY>
	LCD_voidWriteData(Copy_u32Char);
    22b6:	8c 81       	ldd	r24, Y+4	; 0x04
    22b8:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <LCD_voidWriteData>
}
    22bc:	26 96       	adiw	r28, 0x06	; 6
    22be:	0f b6       	in	r0, 0x3f	; 63
    22c0:	f8 94       	cli
    22c2:	de bf       	out	0x3e, r29	; 62
    22c4:	0f be       	out	0x3f, r0	; 63
    22c6:	cd bf       	out	0x3d, r28	; 61
    22c8:	cf 91       	pop	r28
    22ca:	df 91       	pop	r29
    22cc:	08 95       	ret

000022ce <LCD_voidClearDisplay>:

void LCD_voidClearDisplay(){
    22ce:	df 93       	push	r29
    22d0:	cf 93       	push	r28
    22d2:	cd b7       	in	r28, 0x3d	; 61
    22d4:	de b7       	in	r29, 0x3e	; 62
	LCD_voidWriteCommand(CLEAR_COMMAND);
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <LCD_voidWriteCommand>
    22dc:	cf 91       	pop	r28
    22de:	df 91       	pop	r29
    22e0:	08 95       	ret

000022e2 <SERVO_voidSetAngle>:
#include "Bit_Math.h"
#include "DIO_interface.h"
#include "TIMER1_interface.h"
#include "SERVO_interface.h"

void SERVO_voidSetAngle(u8 Copy_u8Angle){
    22e2:	df 93       	push	r29
    22e4:	cf 93       	push	r28
    22e6:	cd b7       	in	r28, 0x3d	; 61
    22e8:	de b7       	in	r29, 0x3e	; 62
    22ea:	29 97       	sbiw	r28, 0x09	; 9
    22ec:	0f b6       	in	r0, 0x3f	; 63
    22ee:	f8 94       	cli
    22f0:	de bf       	out	0x3e, r29	; 62
    22f2:	0f be       	out	0x3f, r0	; 63
    22f4:	cd bf       	out	0x3d, r28	; 61
    22f6:	89 87       	std	Y+9, r24	; 0x09
	u32 timer;
	f32 slop;
	TIMER1_voidInitialize();
    22f8:	0e 94 c2 11 	call	0x2384	; 0x2384 <TIMER1_voidInitialize>
	TIMER1_voidSetICR1(Set_Freq_50Hz);
    22fc:	80 e2       	ldi	r24, 0x20	; 32
    22fe:	9e e4       	ldi	r25, 0x4E	; 78
    2300:	0e 94 5f 12 	call	0x24be	; 0x24be <TIMER1_voidSetICR1>
	
	slop=50.0/9;
    2304:	8c e1       	ldi	r24, 0x1C	; 28
    2306:	97 ec       	ldi	r25, 0xC7	; 199
    2308:	a1 eb       	ldi	r26, 0xB1	; 177
    230a:	b0 e4       	ldi	r27, 0x40	; 64
    230c:	89 83       	std	Y+1, r24	; 0x01
    230e:	9a 83       	std	Y+2, r25	; 0x02
    2310:	ab 83       	std	Y+3, r26	; 0x03
    2312:	bc 83       	std	Y+4, r27	; 0x04
	timer=slop*Copy_u8Angle+999;
    2314:	89 85       	ldd	r24, Y+9	; 0x09
    2316:	88 2f       	mov	r24, r24
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	aa 27       	eor	r26, r26
    231c:	97 fd       	sbrc	r25, 7
    231e:	a0 95       	com	r26
    2320:	ba 2f       	mov	r27, r26
    2322:	bc 01       	movw	r22, r24
    2324:	cd 01       	movw	r24, r26
    2326:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	bc 01       	movw	r22, r24
    2330:	cd 01       	movw	r24, r26
    2332:	29 81       	ldd	r18, Y+1	; 0x01
    2334:	3a 81       	ldd	r19, Y+2	; 0x02
    2336:	4b 81       	ldd	r20, Y+3	; 0x03
    2338:	5c 81       	ldd	r21, Y+4	; 0x04
    233a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    233e:	dc 01       	movw	r26, r24
    2340:	cb 01       	movw	r24, r22
    2342:	bc 01       	movw	r22, r24
    2344:	cd 01       	movw	r24, r26
    2346:	20 e0       	ldi	r18, 0x00	; 0
    2348:	30 ec       	ldi	r19, 0xC0	; 192
    234a:	49 e7       	ldi	r20, 0x79	; 121
    234c:	54 e4       	ldi	r21, 0x44	; 68
    234e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2352:	dc 01       	movw	r26, r24
    2354:	cb 01       	movw	r24, r22
    2356:	bc 01       	movw	r22, r24
    2358:	cd 01       	movw	r24, r26
    235a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    235e:	dc 01       	movw	r26, r24
    2360:	cb 01       	movw	r24, r22
    2362:	8d 83       	std	Y+5, r24	; 0x05
    2364:	9e 83       	std	Y+6, r25	; 0x06
    2366:	af 83       	std	Y+7, r26	; 0x07
    2368:	b8 87       	std	Y+8, r27	; 0x08
	
	TIMER1_voidSetOCR1(timer);
    236a:	8d 81       	ldd	r24, Y+5	; 0x05
    236c:	9e 81       	ldd	r25, Y+6	; 0x06
    236e:	0e 94 4d 12 	call	0x249a	; 0x249a <TIMER1_voidSetOCR1>
    2372:	29 96       	adiw	r28, 0x09	; 9
    2374:	0f b6       	in	r0, 0x3f	; 63
    2376:	f8 94       	cli
    2378:	de bf       	out	0x3e, r29	; 62
    237a:	0f be       	out	0x3f, r0	; 63
    237c:	cd bf       	out	0x3d, r28	; 61
    237e:	cf 91       	pop	r28
    2380:	df 91       	pop	r29
    2382:	08 95       	ret

00002384 <TIMER1_voidInitialize>:
void (*TIMER1_CTCB_GPfun)(void)=NULL;
void (*TIMER1_ICU_GPfun)(void)=NULL;

u32 TIMER,PreLoad,PreScaler;

void TIMER1_voidInitialize(){
    2384:	df 93       	push	r29
    2386:	cf 93       	push	r28
    2388:	cd b7       	in	r28, 0x3d	; 61
    238a:	de b7       	in	r29, 0x3e	; 62
	SetBit(TCCR1B,PIN0);
	ClrBit(TCCR1B,PIN1);
	ClrBit(TCCR1B,PIN2);
	PreScaler=1;
#elif Clock_Select == clk_8
	ClrBit(TCCR1B,PIN0);
    238c:	ae e4       	ldi	r26, 0x4E	; 78
    238e:	b0 e0       	ldi	r27, 0x00	; 0
    2390:	ee e4       	ldi	r30, 0x4E	; 78
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	80 81       	ld	r24, Z
    2396:	8e 7f       	andi	r24, 0xFE	; 254
    2398:	8c 93       	st	X, r24
	SetBit(TCCR1B,PIN1);
    239a:	ae e4       	ldi	r26, 0x4E	; 78
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	ee e4       	ldi	r30, 0x4E	; 78
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	80 81       	ld	r24, Z
    23a4:	82 60       	ori	r24, 0x02	; 2
    23a6:	8c 93       	st	X, r24
	ClrBit(TCCR1B,PIN2);
    23a8:	ae e4       	ldi	r26, 0x4E	; 78
    23aa:	b0 e0       	ldi	r27, 0x00	; 0
    23ac:	ee e4       	ldi	r30, 0x4E	; 78
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	80 81       	ld	r24, Z
    23b2:	8b 7f       	andi	r24, 0xFB	; 251
    23b4:	8c 93       	st	X, r24
	PreScaler=8;
    23b6:	88 e0       	ldi	r24, 0x08	; 8
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	a0 e0       	ldi	r26, 0x00	; 0
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	80 93 2e 02 	sts	0x022E, r24
    23c2:	90 93 2f 02 	sts	0x022F, r25
    23c6:	a0 93 30 02 	sts	0x0230, r26
    23ca:	b0 93 31 02 	sts	0x0231, r27
		ClrBit(TCCR1A,PIN7);
	#elif (Compare_Output_Mode == Toggle_OC1)||(Compare_Output_Mode == Toggle_OC1A_Match)
		SetBit(TCCR1A,PIN6);
		ClrBit(TCCR1A,PIN7);
	#elif (Compare_Output_Mode == Clear_OC1)||(Compare_Output_Mode == Clear_Match_Set_Bottom)||(Compare_Output_Mode == Clear_Up_Set_Down)
		ClrBit(TCCR1A,PIN6);
    23ce:	af e4       	ldi	r26, 0x4F	; 79
    23d0:	b0 e0       	ldi	r27, 0x00	; 0
    23d2:	ef e4       	ldi	r30, 0x4F	; 79
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	80 81       	ld	r24, Z
    23d8:	8f 7b       	andi	r24, 0xBF	; 191
    23da:	8c 93       	st	X, r24
		SetBit(TCCR1A,PIN7);
    23dc:	af e4       	ldi	r26, 0x4F	; 79
    23de:	b0 e0       	ldi	r27, 0x00	; 0
    23e0:	ef e4       	ldi	r30, 0x4F	; 79
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	80 81       	ld	r24, Z
    23e6:	80 68       	ori	r24, 0x80	; 128
    23e8:	8c 93       	st	X, r24
		SetBit(TIMSK,PIN4);
	#elif TIMER_SELECT == TIMER1B
		SetBit(TIMSK,PIN3);
	#endif
#elif Waveform_MODE == Fast_PWM_ICR1
	ClrBit(TCCR1A,PIN0);
    23ea:	af e4       	ldi	r26, 0x4F	; 79
    23ec:	b0 e0       	ldi	r27, 0x00	; 0
    23ee:	ef e4       	ldi	r30, 0x4F	; 79
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	80 81       	ld	r24, Z
    23f4:	8e 7f       	andi	r24, 0xFE	; 254
    23f6:	8c 93       	st	X, r24
	SetBit(TCCR1A,PIN1);
    23f8:	af e4       	ldi	r26, 0x4F	; 79
    23fa:	b0 e0       	ldi	r27, 0x00	; 0
    23fc:	ef e4       	ldi	r30, 0x4F	; 79
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	80 81       	ld	r24, Z
    2402:	82 60       	ori	r24, 0x02	; 2
    2404:	8c 93       	st	X, r24
	SetBit(TCCR1B,PIN3);
    2406:	ae e4       	ldi	r26, 0x4E	; 78
    2408:	b0 e0       	ldi	r27, 0x00	; 0
    240a:	ee e4       	ldi	r30, 0x4E	; 78
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	80 81       	ld	r24, Z
    2410:	88 60       	ori	r24, 0x08	; 8
    2412:	8c 93       	st	X, r24
	SetBit(TCCR1B,PIN4);
    2414:	ae e4       	ldi	r26, 0x4E	; 78
    2416:	b0 e0       	ldi	r27, 0x00	; 0
    2418:	ee e4       	ldi	r30, 0x4E	; 78
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	80 81       	ld	r24, Z
    241e:	80 61       	ori	r24, 0x10	; 16
    2420:	8c 93       	st	X, r24
	SetBit(TCCR1A,PIN0);
	SetBit(TCCR1A,PIN1);
	SetBit(TCCR1B,PIN3);
	SetBit(TCCR1B,PIN4);
#endif
}
    2422:	cf 91       	pop	r28
    2424:	df 91       	pop	r29
    2426:	08 95       	ret

00002428 <TIMER1_voidEnableICU>:

void TIMER1_voidEnableICU(){
    2428:	df 93       	push	r29
    242a:	cf 93       	push	r28
    242c:	cd b7       	in	r28, 0x3d	; 61
    242e:	de b7       	in	r29, 0x3e	; 62
	
	SetBit(TIMSK,PIN5);
    2430:	a9 e5       	ldi	r26, 0x59	; 89
    2432:	b0 e0       	ldi	r27, 0x00	; 0
    2434:	e9 e5       	ldi	r30, 0x59	; 89
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	80 81       	ld	r24, Z
    243a:	80 62       	ori	r24, 0x20	; 32
    243c:	8c 93       	st	X, r24
}
    243e:	cf 91       	pop	r28
    2440:	df 91       	pop	r29
    2442:	08 95       	ret

00002444 <TIMER1_voidICUEdge>:

void TIMER1_voidICUEdge(u8 Copy_u8ICUEdge){
    2444:	df 93       	push	r29
    2446:	cf 93       	push	r28
    2448:	00 d0       	rcall	.+0      	; 0x244a <TIMER1_voidICUEdge+0x6>
    244a:	0f 92       	push	r0
    244c:	cd b7       	in	r28, 0x3d	; 61
    244e:	de b7       	in	r29, 0x3e	; 62
    2450:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8ICUEdge){
    2452:	89 81       	ldd	r24, Y+1	; 0x01
    2454:	28 2f       	mov	r18, r24
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	3b 83       	std	Y+3, r19	; 0x03
    245a:	2a 83       	std	Y+2, r18	; 0x02
    245c:	8a 81       	ldd	r24, Y+2	; 0x02
    245e:	9b 81       	ldd	r25, Y+3	; 0x03
    2460:	00 97       	sbiw	r24, 0x00	; 0
    2462:	31 f0       	breq	.+12     	; 0x2470 <TIMER1_voidICUEdge+0x2c>
    2464:	2a 81       	ldd	r18, Y+2	; 0x02
    2466:	3b 81       	ldd	r19, Y+3	; 0x03
    2468:	21 30       	cpi	r18, 0x01	; 1
    246a:	31 05       	cpc	r19, r1
    246c:	49 f0       	breq	.+18     	; 0x2480 <TIMER1_voidICUEdge+0x3c>
    246e:	0f c0       	rjmp	.+30     	; 0x248e <TIMER1_voidICUEdge+0x4a>
		case RISING_EDGE:
			SetBit(TCCR1B,PIN6);
    2470:	ae e4       	ldi	r26, 0x4E	; 78
    2472:	b0 e0       	ldi	r27, 0x00	; 0
    2474:	ee e4       	ldi	r30, 0x4E	; 78
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	80 81       	ld	r24, Z
    247a:	80 64       	ori	r24, 0x40	; 64
    247c:	8c 93       	st	X, r24
    247e:	07 c0       	rjmp	.+14     	; 0x248e <TIMER1_voidICUEdge+0x4a>
			break;
		case FALLING_EDGE:
			ClrBit(TCCR1B,PIN6);
    2480:	ae e4       	ldi	r26, 0x4E	; 78
    2482:	b0 e0       	ldi	r27, 0x00	; 0
    2484:	ee e4       	ldi	r30, 0x4E	; 78
    2486:	f0 e0       	ldi	r31, 0x00	; 0
    2488:	80 81       	ld	r24, Z
    248a:	8f 7b       	andi	r24, 0xBF	; 191
    248c:	8c 93       	st	X, r24
			break;
	}
}
    248e:	0f 90       	pop	r0
    2490:	0f 90       	pop	r0
    2492:	0f 90       	pop	r0
    2494:	cf 91       	pop	r28
    2496:	df 91       	pop	r29
    2498:	08 95       	ret

0000249a <TIMER1_voidSetOCR1>:

void TIMER1_voidSetOCR1(u16 Copy_u16Value){
    249a:	df 93       	push	r29
    249c:	cf 93       	push	r28
    249e:	00 d0       	rcall	.+0      	; 0x24a0 <TIMER1_voidSetOCR1+0x6>
    24a0:	cd b7       	in	r28, 0x3d	; 61
    24a2:	de b7       	in	r29, 0x3e	; 62
    24a4:	9a 83       	std	Y+2, r25	; 0x02
    24a6:	89 83       	std	Y+1, r24	; 0x01
	#if TIMER_SELECT == TIMER1A
		OCR1A=Copy_u16Value;
    24a8:	ea e4       	ldi	r30, 0x4A	; 74
    24aa:	f0 e0       	ldi	r31, 0x00	; 0
    24ac:	89 81       	ldd	r24, Y+1	; 0x01
    24ae:	9a 81       	ldd	r25, Y+2	; 0x02
    24b0:	91 83       	std	Z+1, r25	; 0x01
    24b2:	80 83       	st	Z, r24
	#elif TIMER_SELECT == TIMER1B
		OCR1B=Copy_u16Value;
	#endif	
}
    24b4:	0f 90       	pop	r0
    24b6:	0f 90       	pop	r0
    24b8:	cf 91       	pop	r28
    24ba:	df 91       	pop	r29
    24bc:	08 95       	ret

000024be <TIMER1_voidSetICR1>:

void TIMER1_voidSetICR1(u16 Copy_u16Value){
    24be:	df 93       	push	r29
    24c0:	cf 93       	push	r28
    24c2:	00 d0       	rcall	.+0      	; 0x24c4 <TIMER1_voidSetICR1+0x6>
    24c4:	cd b7       	in	r28, 0x3d	; 61
    24c6:	de b7       	in	r29, 0x3e	; 62
    24c8:	9a 83       	std	Y+2, r25	; 0x02
    24ca:	89 83       	std	Y+1, r24	; 0x01
	
	ICR1=Copy_u16Value;
    24cc:	e6 e4       	ldi	r30, 0x46	; 70
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	89 81       	ldd	r24, Y+1	; 0x01
    24d2:	9a 81       	ldd	r25, Y+2	; 0x02
    24d4:	91 83       	std	Z+1, r25	; 0x01
    24d6:	80 83       	st	Z, r24
}
    24d8:	0f 90       	pop	r0
    24da:	0f 90       	pop	r0
    24dc:	cf 91       	pop	r28
    24de:	df 91       	pop	r29
    24e0:	08 95       	ret

000024e2 <TIMER1_u16GetICR1>:

u16 TIMER1_u16GetICR1(){
    24e2:	df 93       	push	r29
    24e4:	cf 93       	push	r28
    24e6:	cd b7       	in	r28, 0x3d	; 61
    24e8:	de b7       	in	r29, 0x3e	; 62
	
	return ICR1;
    24ea:	e6 e4       	ldi	r30, 0x46	; 70
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	80 81       	ld	r24, Z
    24f0:	91 81       	ldd	r25, Z+1	; 0x01
}
    24f2:	cf 91       	pop	r28
    24f4:	df 91       	pop	r29
    24f6:	08 95       	ret

000024f8 <TIMER1_voidPreLoad>:

void TIMER1_voidPreLoad(u16 Copy_u16Value){
    24f8:	df 93       	push	r29
    24fa:	cf 93       	push	r28
    24fc:	00 d0       	rcall	.+0      	; 0x24fe <TIMER1_voidPreLoad+0x6>
    24fe:	cd b7       	in	r28, 0x3d	; 61
    2500:	de b7       	in	r29, 0x3e	; 62
    2502:	9a 83       	std	Y+2, r25	; 0x02
    2504:	89 83       	std	Y+1, r24	; 0x01
	
	TCNT1=Copy_u16Value;
    2506:	ec e4       	ldi	r30, 0x4C	; 76
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	89 81       	ldd	r24, Y+1	; 0x01
    250c:	9a 81       	ldd	r25, Y+2	; 0x02
    250e:	91 83       	std	Z+1, r25	; 0x01
    2510:	80 83       	st	Z, r24
}
    2512:	0f 90       	pop	r0
    2514:	0f 90       	pop	r0
    2516:	cf 91       	pop	r28
    2518:	df 91       	pop	r29
    251a:	08 95       	ret

0000251c <TIMER1_voidSetTimer>:


void TIMER1_voidSetTimer(u32 Copy_u32TimeMS){
    251c:	ef 92       	push	r14
    251e:	ff 92       	push	r15
    2520:	0f 93       	push	r16
    2522:	1f 93       	push	r17
    2524:	df 93       	push	r29
    2526:	cf 93       	push	r28
    2528:	cd b7       	in	r28, 0x3d	; 61
    252a:	de b7       	in	r29, 0x3e	; 62
    252c:	68 97       	sbiw	r28, 0x18	; 24
    252e:	0f b6       	in	r0, 0x3f	; 63
    2530:	f8 94       	cli
    2532:	de bf       	out	0x3e, r29	; 62
    2534:	0f be       	out	0x3f, r0	; 63
    2536:	cd bf       	out	0x3d, r28	; 61
    2538:	6d 8b       	std	Y+21, r22	; 0x15
    253a:	7e 8b       	std	Y+22, r23	; 0x16
    253c:	8f 8b       	std	Y+23, r24	; 0x17
    253e:	98 8f       	std	Y+24, r25	; 0x18
		MAX_NUM=OCR1A;
	#elif Waveform_MODE == CTC_ICR1
		MAX_NUM=ICR1;
	#endif
	
	u32 TIMER_freq=CPU_FREQUENCY/PreScaler;
    2540:	20 91 2e 02 	lds	r18, 0x022E
    2544:	30 91 2f 02 	lds	r19, 0x022F
    2548:	40 91 30 02 	lds	r20, 0x0230
    254c:	50 91 31 02 	lds	r21, 0x0231
    2550:	80 e0       	ldi	r24, 0x00	; 0
    2552:	92 e1       	ldi	r25, 0x12	; 18
    2554:	aa e7       	ldi	r26, 0x7A	; 122
    2556:	b0 e0       	ldi	r27, 0x00	; 0
    2558:	bc 01       	movw	r22, r24
    255a:	cd 01       	movw	r24, r26
    255c:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__udivmodsi4>
    2560:	da 01       	movw	r26, r20
    2562:	c9 01       	movw	r24, r18
    2564:	8d 87       	std	Y+13, r24	; 0x0d
    2566:	9e 87       	std	Y+14, r25	; 0x0e
    2568:	af 87       	std	Y+15, r26	; 0x0f
    256a:	b8 8b       	std	Y+16, r27	; 0x10
	f32 Tick_Time=MICRO_IN_SEC/TIMER_freq;
    256c:	80 e4       	ldi	r24, 0x40	; 64
    256e:	92 e4       	ldi	r25, 0x42	; 66
    2570:	af e0       	ldi	r26, 0x0F	; 15
    2572:	b0 e0       	ldi	r27, 0x00	; 0
    2574:	2d 85       	ldd	r18, Y+13	; 0x0d
    2576:	3e 85       	ldd	r19, Y+14	; 0x0e
    2578:	4f 85       	ldd	r20, Y+15	; 0x0f
    257a:	58 89       	ldd	r21, Y+16	; 0x10
    257c:	bc 01       	movw	r22, r24
    257e:	cd 01       	movw	r24, r26
    2580:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__udivmodsi4>
    2584:	da 01       	movw	r26, r20
    2586:	c9 01       	movw	r24, r18
    2588:	bc 01       	movw	r22, r24
    258a:	cd 01       	movw	r24, r26
    258c:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	89 87       	std	Y+9, r24	; 0x09
    2596:	9a 87       	std	Y+10, r25	; 0x0a
    2598:	ab 87       	std	Y+11, r26	; 0x0b
    259a:	bc 87       	std	Y+12, r27	; 0x0c
	u32 OverFlow_Time=Tick_Time*MAX_NUM;
    259c:	69 89       	ldd	r22, Y+17	; 0x11
    259e:	7a 89       	ldd	r23, Y+18	; 0x12
    25a0:	8b 89       	ldd	r24, Y+19	; 0x13
    25a2:	9c 89       	ldd	r25, Y+20	; 0x14
    25a4:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	bc 01       	movw	r22, r24
    25ae:	cd 01       	movw	r24, r26
    25b0:	29 85       	ldd	r18, Y+9	; 0x09
    25b2:	3a 85       	ldd	r19, Y+10	; 0x0a
    25b4:	4b 85       	ldd	r20, Y+11	; 0x0b
    25b6:	5c 85       	ldd	r21, Y+12	; 0x0c
    25b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25bc:	dc 01       	movw	r26, r24
    25be:	cb 01       	movw	r24, r22
    25c0:	bc 01       	movw	r22, r24
    25c2:	cd 01       	movw	r24, r26
    25c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c8:	dc 01       	movw	r26, r24
    25ca:	cb 01       	movw	r24, r22
    25cc:	8d 83       	std	Y+5, r24	; 0x05
    25ce:	9e 83       	std	Y+6, r25	; 0x06
    25d0:	af 83       	std	Y+7, r26	; 0x07
    25d2:	b8 87       	std	Y+8, r27	; 0x08
	
	TIMER=(Copy_u32TimeMS*MICRO_IN_MILLI)/OverFlow_Time;
    25d4:	8d 89       	ldd	r24, Y+21	; 0x15
    25d6:	9e 89       	ldd	r25, Y+22	; 0x16
    25d8:	af 89       	ldd	r26, Y+23	; 0x17
    25da:	b8 8d       	ldd	r27, Y+24	; 0x18
    25dc:	28 ee       	ldi	r18, 0xE8	; 232
    25de:	33 e0       	ldi	r19, 0x03	; 3
    25e0:	40 e0       	ldi	r20, 0x00	; 0
    25e2:	50 e0       	ldi	r21, 0x00	; 0
    25e4:	bc 01       	movw	r22, r24
    25e6:	cd 01       	movw	r24, r26
    25e8:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <__mulsi3>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	2d 81       	ldd	r18, Y+5	; 0x05
    25f2:	3e 81       	ldd	r19, Y+6	; 0x06
    25f4:	4f 81       	ldd	r20, Y+7	; 0x07
    25f6:	58 85       	ldd	r21, Y+8	; 0x08
    25f8:	bc 01       	movw	r22, r24
    25fa:	cd 01       	movw	r24, r26
    25fc:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__udivmodsi4>
    2600:	da 01       	movw	r26, r20
    2602:	c9 01       	movw	r24, r18
    2604:	80 93 2a 02 	sts	0x022A, r24
    2608:	90 93 2b 02 	sts	0x022B, r25
    260c:	a0 93 2c 02 	sts	0x022C, r26
    2610:	b0 93 2d 02 	sts	0x022D, r27
	f32 remainder=((Copy_u32TimeMS*MICRO_IN_MILLI)%OverFlow_Time)/(f32)OverFlow_Time;
    2614:	8d 89       	ldd	r24, Y+21	; 0x15
    2616:	9e 89       	ldd	r25, Y+22	; 0x16
    2618:	af 89       	ldd	r26, Y+23	; 0x17
    261a:	b8 8d       	ldd	r27, Y+24	; 0x18
    261c:	28 ee       	ldi	r18, 0xE8	; 232
    261e:	33 e0       	ldi	r19, 0x03	; 3
    2620:	40 e0       	ldi	r20, 0x00	; 0
    2622:	50 e0       	ldi	r21, 0x00	; 0
    2624:	bc 01       	movw	r22, r24
    2626:	cd 01       	movw	r24, r26
    2628:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <__mulsi3>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	2d 81       	ldd	r18, Y+5	; 0x05
    2632:	3e 81       	ldd	r19, Y+6	; 0x06
    2634:	4f 81       	ldd	r20, Y+7	; 0x07
    2636:	58 85       	ldd	r21, Y+8	; 0x08
    2638:	bc 01       	movw	r22, r24
    263a:	cd 01       	movw	r24, r26
    263c:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__udivmodsi4>
    2640:	dc 01       	movw	r26, r24
    2642:	cb 01       	movw	r24, r22
    2644:	bc 01       	movw	r22, r24
    2646:	cd 01       	movw	r24, r26
    2648:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    264c:	7b 01       	movw	r14, r22
    264e:	8c 01       	movw	r16, r24
    2650:	6d 81       	ldd	r22, Y+5	; 0x05
    2652:	7e 81       	ldd	r23, Y+6	; 0x06
    2654:	8f 81       	ldd	r24, Y+7	; 0x07
    2656:	98 85       	ldd	r25, Y+8	; 0x08
    2658:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    265c:	9b 01       	movw	r18, r22
    265e:	ac 01       	movw	r20, r24
    2660:	c8 01       	movw	r24, r16
    2662:	b7 01       	movw	r22, r14
    2664:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	89 83       	std	Y+1, r24	; 0x01
    266e:	9a 83       	std	Y+2, r25	; 0x02
    2670:	ab 83       	std	Y+3, r26	; 0x03
    2672:	bc 83       	std	Y+4, r27	; 0x04
	PreLoad=(1-remainder)*MAX_NUM;
    2674:	60 e0       	ldi	r22, 0x00	; 0
    2676:	70 e0       	ldi	r23, 0x00	; 0
    2678:	80 e8       	ldi	r24, 0x80	; 128
    267a:	9f e3       	ldi	r25, 0x3F	; 63
    267c:	29 81       	ldd	r18, Y+1	; 0x01
    267e:	3a 81       	ldd	r19, Y+2	; 0x02
    2680:	4b 81       	ldd	r20, Y+3	; 0x03
    2682:	5c 81       	ldd	r21, Y+4	; 0x04
    2684:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2688:	dc 01       	movw	r26, r24
    268a:	cb 01       	movw	r24, r22
    268c:	7c 01       	movw	r14, r24
    268e:	8d 01       	movw	r16, r26
    2690:	69 89       	ldd	r22, Y+17	; 0x11
    2692:	7a 89       	ldd	r23, Y+18	; 0x12
    2694:	8b 89       	ldd	r24, Y+19	; 0x13
    2696:	9c 89       	ldd	r25, Y+20	; 0x14
    2698:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    269c:	9b 01       	movw	r18, r22
    269e:	ac 01       	movw	r20, r24
    26a0:	c8 01       	movw	r24, r16
    26a2:	b7 01       	movw	r22, r14
    26a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a8:	dc 01       	movw	r26, r24
    26aa:	cb 01       	movw	r24, r22
    26ac:	bc 01       	movw	r22, r24
    26ae:	cd 01       	movw	r24, r26
    26b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	80 93 32 02 	sts	0x0232, r24
    26bc:	90 93 33 02 	sts	0x0233, r25
    26c0:	a0 93 34 02 	sts	0x0234, r26
    26c4:	b0 93 35 02 	sts	0x0235, r27
	
	TIMER1_voidPreLoad(PreLoad);
    26c8:	80 91 32 02 	lds	r24, 0x0232
    26cc:	90 91 33 02 	lds	r25, 0x0233
    26d0:	a0 91 34 02 	lds	r26, 0x0234
    26d4:	b0 91 35 02 	lds	r27, 0x0235
    26d8:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <TIMER1_voidPreLoad>
}
    26dc:	68 96       	adiw	r28, 0x18	; 24
    26de:	0f b6       	in	r0, 0x3f	; 63
    26e0:	f8 94       	cli
    26e2:	de bf       	out	0x3e, r29	; 62
    26e4:	0f be       	out	0x3f, r0	; 63
    26e6:	cd bf       	out	0x3d, r28	; 61
    26e8:	cf 91       	pop	r28
    26ea:	df 91       	pop	r29
    26ec:	1f 91       	pop	r17
    26ee:	0f 91       	pop	r16
    26f0:	ff 90       	pop	r15
    26f2:	ef 90       	pop	r14
    26f4:	08 95       	ret

000026f6 <TIMER1_ICU_SetCallBack>:

void TIMER1_ICU_SetCallBack(void(*ptr)(void)){
    26f6:	df 93       	push	r29
    26f8:	cf 93       	push	r28
    26fa:	00 d0       	rcall	.+0      	; 0x26fc <TIMER1_ICU_SetCallBack+0x6>
    26fc:	cd b7       	in	r28, 0x3d	; 61
    26fe:	de b7       	in	r29, 0x3e	; 62
    2700:	9a 83       	std	Y+2, r25	; 0x02
    2702:	89 83       	std	Y+1, r24	; 0x01
	
	TIMER1_ICU_GPfun=ptr;
    2704:	89 81       	ldd	r24, Y+1	; 0x01
    2706:	9a 81       	ldd	r25, Y+2	; 0x02
    2708:	90 93 fd 01 	sts	0x01FD, r25
    270c:	80 93 fc 01 	sts	0x01FC, r24
}
    2710:	0f 90       	pop	r0
    2712:	0f 90       	pop	r0
    2714:	cf 91       	pop	r28
    2716:	df 91       	pop	r29
    2718:	08 95       	ret

0000271a <TIMER1_CTCA_SetCallBack>:

void TIMER1_CTCA_SetCallBack(void(*ptr)(void)){
    271a:	df 93       	push	r29
    271c:	cf 93       	push	r28
    271e:	00 d0       	rcall	.+0      	; 0x2720 <TIMER1_CTCA_SetCallBack+0x6>
    2720:	cd b7       	in	r28, 0x3d	; 61
    2722:	de b7       	in	r29, 0x3e	; 62
    2724:	9a 83       	std	Y+2, r25	; 0x02
    2726:	89 83       	std	Y+1, r24	; 0x01
	
	TIMER1_CTCA_GPfun=ptr;
    2728:	89 81       	ldd	r24, Y+1	; 0x01
    272a:	9a 81       	ldd	r25, Y+2	; 0x02
    272c:	90 93 f9 01 	sts	0x01F9, r25
    2730:	80 93 f8 01 	sts	0x01F8, r24
}
    2734:	0f 90       	pop	r0
    2736:	0f 90       	pop	r0
    2738:	cf 91       	pop	r28
    273a:	df 91       	pop	r29
    273c:	08 95       	ret

0000273e <TIMER1_CTCB_SetCallBack>:

void TIMER1_CTCB_SetCallBack(void(*ptr)(void)){
    273e:	df 93       	push	r29
    2740:	cf 93       	push	r28
    2742:	00 d0       	rcall	.+0      	; 0x2744 <TIMER1_CTCB_SetCallBack+0x6>
    2744:	cd b7       	in	r28, 0x3d	; 61
    2746:	de b7       	in	r29, 0x3e	; 62
    2748:	9a 83       	std	Y+2, r25	; 0x02
    274a:	89 83       	std	Y+1, r24	; 0x01
	
	TIMER1_CTCB_GPfun=ptr;
    274c:	89 81       	ldd	r24, Y+1	; 0x01
    274e:	9a 81       	ldd	r25, Y+2	; 0x02
    2750:	90 93 fb 01 	sts	0x01FB, r25
    2754:	80 93 fa 01 	sts	0x01FA, r24
}
    2758:	0f 90       	pop	r0
    275a:	0f 90       	pop	r0
    275c:	cf 91       	pop	r28
    275e:	df 91       	pop	r29
    2760:	08 95       	ret

00002762 <TIMER1_NORMAL_SetCallBack>:

void TIMER1_NORMAL_SetCallBack(void(*ptr)(void)){
    2762:	df 93       	push	r29
    2764:	cf 93       	push	r28
    2766:	00 d0       	rcall	.+0      	; 0x2768 <TIMER1_NORMAL_SetCallBack+0x6>
    2768:	cd b7       	in	r28, 0x3d	; 61
    276a:	de b7       	in	r29, 0x3e	; 62
    276c:	9a 83       	std	Y+2, r25	; 0x02
    276e:	89 83       	std	Y+1, r24	; 0x01
			
	TIMER1_NORMAL_GPfun=ptr;
    2770:	89 81       	ldd	r24, Y+1	; 0x01
    2772:	9a 81       	ldd	r25, Y+2	; 0x02
    2774:	90 93 f7 01 	sts	0x01F7, r25
    2778:	80 93 f6 01 	sts	0x01F6, r24
}
    277c:	0f 90       	pop	r0
    277e:	0f 90       	pop	r0
    2780:	cf 91       	pop	r28
    2782:	df 91       	pop	r29
    2784:	08 95       	ret

00002786 <__vector_6>:

void __vector_6()__attribute__((signal));   // TIMER1_ICU
void __vector_6(){
    2786:	1f 92       	push	r1
    2788:	0f 92       	push	r0
    278a:	0f b6       	in	r0, 0x3f	; 63
    278c:	0f 92       	push	r0
    278e:	11 24       	eor	r1, r1
    2790:	2f 93       	push	r18
    2792:	3f 93       	push	r19
    2794:	4f 93       	push	r20
    2796:	5f 93       	push	r21
    2798:	6f 93       	push	r22
    279a:	7f 93       	push	r23
    279c:	8f 93       	push	r24
    279e:	9f 93       	push	r25
    27a0:	af 93       	push	r26
    27a2:	bf 93       	push	r27
    27a4:	ef 93       	push	r30
    27a6:	ff 93       	push	r31
    27a8:	df 93       	push	r29
    27aa:	cf 93       	push	r28
    27ac:	cd b7       	in	r28, 0x3d	; 61
    27ae:	de b7       	in	r29, 0x3e	; 62

	if(TIMER1_ICU_GPfun!=NULL){
    27b0:	80 91 fc 01 	lds	r24, 0x01FC
    27b4:	90 91 fd 01 	lds	r25, 0x01FD
    27b8:	00 97       	sbiw	r24, 0x00	; 0
    27ba:	29 f0       	breq	.+10     	; 0x27c6 <__vector_6+0x40>
		TIMER1_ICU_GPfun();
    27bc:	e0 91 fc 01 	lds	r30, 0x01FC
    27c0:	f0 91 fd 01 	lds	r31, 0x01FD
    27c4:	09 95       	icall
	}
}
    27c6:	cf 91       	pop	r28
    27c8:	df 91       	pop	r29
    27ca:	ff 91       	pop	r31
    27cc:	ef 91       	pop	r30
    27ce:	bf 91       	pop	r27
    27d0:	af 91       	pop	r26
    27d2:	9f 91       	pop	r25
    27d4:	8f 91       	pop	r24
    27d6:	7f 91       	pop	r23
    27d8:	6f 91       	pop	r22
    27da:	5f 91       	pop	r21
    27dc:	4f 91       	pop	r20
    27de:	3f 91       	pop	r19
    27e0:	2f 91       	pop	r18
    27e2:	0f 90       	pop	r0
    27e4:	0f be       	out	0x3f, r0	; 63
    27e6:	0f 90       	pop	r0
    27e8:	1f 90       	pop	r1
    27ea:	18 95       	reti

000027ec <__vector_7>:

void __vector_7()__attribute__((signal));   // TIMER1_CTCA
void __vector_7(){
    27ec:	1f 92       	push	r1
    27ee:	0f 92       	push	r0
    27f0:	0f b6       	in	r0, 0x3f	; 63
    27f2:	0f 92       	push	r0
    27f4:	11 24       	eor	r1, r1
    27f6:	2f 93       	push	r18
    27f8:	3f 93       	push	r19
    27fa:	4f 93       	push	r20
    27fc:	5f 93       	push	r21
    27fe:	6f 93       	push	r22
    2800:	7f 93       	push	r23
    2802:	8f 93       	push	r24
    2804:	9f 93       	push	r25
    2806:	af 93       	push	r26
    2808:	bf 93       	push	r27
    280a:	ef 93       	push	r30
    280c:	ff 93       	push	r31
    280e:	df 93       	push	r29
    2810:	cf 93       	push	r28
    2812:	cd b7       	in	r28, 0x3d	; 61
    2814:	de b7       	in	r29, 0x3e	; 62
	
	static u32 counter=0;
	
	if(counter==TIMER+1){
    2816:	80 91 2a 02 	lds	r24, 0x022A
    281a:	90 91 2b 02 	lds	r25, 0x022B
    281e:	a0 91 2c 02 	lds	r26, 0x022C
    2822:	b0 91 2d 02 	lds	r27, 0x022D
    2826:	9c 01       	movw	r18, r24
    2828:	ad 01       	movw	r20, r26
    282a:	2f 5f       	subi	r18, 0xFF	; 255
    282c:	3f 4f       	sbci	r19, 0xFF	; 255
    282e:	4f 4f       	sbci	r20, 0xFF	; 255
    2830:	5f 4f       	sbci	r21, 0xFF	; 255
    2832:	80 91 fe 01 	lds	r24, 0x01FE
    2836:	90 91 ff 01 	lds	r25, 0x01FF
    283a:	a0 91 00 02 	lds	r26, 0x0200
    283e:	b0 91 01 02 	lds	r27, 0x0201
    2842:	28 17       	cp	r18, r24
    2844:	39 07       	cpc	r19, r25
    2846:	4a 07       	cpc	r20, r26
    2848:	5b 07       	cpc	r21, r27
    284a:	f1 f4       	brne	.+60     	; 0x2888 <__vector_7+0x9c>
		if(TIMER1_CTCA_GPfun!=NULL){
    284c:	80 91 f8 01 	lds	r24, 0x01F8
    2850:	90 91 f9 01 	lds	r25, 0x01F9
    2854:	00 97       	sbiw	r24, 0x00	; 0
    2856:	29 f0       	breq	.+10     	; 0x2862 <__vector_7+0x76>
			TIMER1_CTCA_GPfun();
    2858:	e0 91 f8 01 	lds	r30, 0x01F8
    285c:	f0 91 f9 01 	lds	r31, 0x01F9
    2860:	09 95       	icall
		}
		counter=0;
    2862:	10 92 fe 01 	sts	0x01FE, r1
    2866:	10 92 ff 01 	sts	0x01FF, r1
    286a:	10 92 00 02 	sts	0x0200, r1
    286e:	10 92 01 02 	sts	0x0201, r1
		TIMER1_voidPreLoad(PreLoad);
    2872:	80 91 32 02 	lds	r24, 0x0232
    2876:	90 91 33 02 	lds	r25, 0x0233
    287a:	a0 91 34 02 	lds	r26, 0x0234
    287e:	b0 91 35 02 	lds	r27, 0x0235
    2882:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <TIMER1_voidPreLoad>
    2886:	13 c0       	rjmp	.+38     	; 0x28ae <__vector_7+0xc2>
	}
	else{
		counter++;
    2888:	80 91 fe 01 	lds	r24, 0x01FE
    288c:	90 91 ff 01 	lds	r25, 0x01FF
    2890:	a0 91 00 02 	lds	r26, 0x0200
    2894:	b0 91 01 02 	lds	r27, 0x0201
    2898:	01 96       	adiw	r24, 0x01	; 1
    289a:	a1 1d       	adc	r26, r1
    289c:	b1 1d       	adc	r27, r1
    289e:	80 93 fe 01 	sts	0x01FE, r24
    28a2:	90 93 ff 01 	sts	0x01FF, r25
    28a6:	a0 93 00 02 	sts	0x0200, r26
    28aa:	b0 93 01 02 	sts	0x0201, r27
	}
}
    28ae:	cf 91       	pop	r28
    28b0:	df 91       	pop	r29
    28b2:	ff 91       	pop	r31
    28b4:	ef 91       	pop	r30
    28b6:	bf 91       	pop	r27
    28b8:	af 91       	pop	r26
    28ba:	9f 91       	pop	r25
    28bc:	8f 91       	pop	r24
    28be:	7f 91       	pop	r23
    28c0:	6f 91       	pop	r22
    28c2:	5f 91       	pop	r21
    28c4:	4f 91       	pop	r20
    28c6:	3f 91       	pop	r19
    28c8:	2f 91       	pop	r18
    28ca:	0f 90       	pop	r0
    28cc:	0f be       	out	0x3f, r0	; 63
    28ce:	0f 90       	pop	r0
    28d0:	1f 90       	pop	r1
    28d2:	18 95       	reti

000028d4 <__vector_8>:

void __vector_8()__attribute__((signal));   // TIMER1_CTCB
void __vector_8(){
    28d4:	1f 92       	push	r1
    28d6:	0f 92       	push	r0
    28d8:	0f b6       	in	r0, 0x3f	; 63
    28da:	0f 92       	push	r0
    28dc:	11 24       	eor	r1, r1
    28de:	2f 93       	push	r18
    28e0:	3f 93       	push	r19
    28e2:	4f 93       	push	r20
    28e4:	5f 93       	push	r21
    28e6:	6f 93       	push	r22
    28e8:	7f 93       	push	r23
    28ea:	8f 93       	push	r24
    28ec:	9f 93       	push	r25
    28ee:	af 93       	push	r26
    28f0:	bf 93       	push	r27
    28f2:	ef 93       	push	r30
    28f4:	ff 93       	push	r31
    28f6:	df 93       	push	r29
    28f8:	cf 93       	push	r28
    28fa:	cd b7       	in	r28, 0x3d	; 61
    28fc:	de b7       	in	r29, 0x3e	; 62
	
	static u32 counter=0;
	
	if(counter==TIMER+1){
    28fe:	80 91 2a 02 	lds	r24, 0x022A
    2902:	90 91 2b 02 	lds	r25, 0x022B
    2906:	a0 91 2c 02 	lds	r26, 0x022C
    290a:	b0 91 2d 02 	lds	r27, 0x022D
    290e:	9c 01       	movw	r18, r24
    2910:	ad 01       	movw	r20, r26
    2912:	2f 5f       	subi	r18, 0xFF	; 255
    2914:	3f 4f       	sbci	r19, 0xFF	; 255
    2916:	4f 4f       	sbci	r20, 0xFF	; 255
    2918:	5f 4f       	sbci	r21, 0xFF	; 255
    291a:	80 91 02 02 	lds	r24, 0x0202
    291e:	90 91 03 02 	lds	r25, 0x0203
    2922:	a0 91 04 02 	lds	r26, 0x0204
    2926:	b0 91 05 02 	lds	r27, 0x0205
    292a:	28 17       	cp	r18, r24
    292c:	39 07       	cpc	r19, r25
    292e:	4a 07       	cpc	r20, r26
    2930:	5b 07       	cpc	r21, r27
    2932:	f1 f4       	brne	.+60     	; 0x2970 <__vector_8+0x9c>
		if(TIMER1_CTCB_GPfun!=NULL){
    2934:	80 91 fa 01 	lds	r24, 0x01FA
    2938:	90 91 fb 01 	lds	r25, 0x01FB
    293c:	00 97       	sbiw	r24, 0x00	; 0
    293e:	29 f0       	breq	.+10     	; 0x294a <__vector_8+0x76>
			TIMER1_CTCB_GPfun();
    2940:	e0 91 fa 01 	lds	r30, 0x01FA
    2944:	f0 91 fb 01 	lds	r31, 0x01FB
    2948:	09 95       	icall
		}
		counter=0;
    294a:	10 92 02 02 	sts	0x0202, r1
    294e:	10 92 03 02 	sts	0x0203, r1
    2952:	10 92 04 02 	sts	0x0204, r1
    2956:	10 92 05 02 	sts	0x0205, r1
		TIMER1_voidPreLoad(PreLoad);
    295a:	80 91 32 02 	lds	r24, 0x0232
    295e:	90 91 33 02 	lds	r25, 0x0233
    2962:	a0 91 34 02 	lds	r26, 0x0234
    2966:	b0 91 35 02 	lds	r27, 0x0235
    296a:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <TIMER1_voidPreLoad>
    296e:	13 c0       	rjmp	.+38     	; 0x2996 <__vector_8+0xc2>
	}
	else{
		counter++;
    2970:	80 91 02 02 	lds	r24, 0x0202
    2974:	90 91 03 02 	lds	r25, 0x0203
    2978:	a0 91 04 02 	lds	r26, 0x0204
    297c:	b0 91 05 02 	lds	r27, 0x0205
    2980:	01 96       	adiw	r24, 0x01	; 1
    2982:	a1 1d       	adc	r26, r1
    2984:	b1 1d       	adc	r27, r1
    2986:	80 93 02 02 	sts	0x0202, r24
    298a:	90 93 03 02 	sts	0x0203, r25
    298e:	a0 93 04 02 	sts	0x0204, r26
    2992:	b0 93 05 02 	sts	0x0205, r27
	}
}
    2996:	cf 91       	pop	r28
    2998:	df 91       	pop	r29
    299a:	ff 91       	pop	r31
    299c:	ef 91       	pop	r30
    299e:	bf 91       	pop	r27
    29a0:	af 91       	pop	r26
    29a2:	9f 91       	pop	r25
    29a4:	8f 91       	pop	r24
    29a6:	7f 91       	pop	r23
    29a8:	6f 91       	pop	r22
    29aa:	5f 91       	pop	r21
    29ac:	4f 91       	pop	r20
    29ae:	3f 91       	pop	r19
    29b0:	2f 91       	pop	r18
    29b2:	0f 90       	pop	r0
    29b4:	0f be       	out	0x3f, r0	; 63
    29b6:	0f 90       	pop	r0
    29b8:	1f 90       	pop	r1
    29ba:	18 95       	reti

000029bc <__vector_9>:

void __vector_9()__attribute__((signal));   // TIMER1_NORMAL
void __vector_9(){
    29bc:	1f 92       	push	r1
    29be:	0f 92       	push	r0
    29c0:	0f b6       	in	r0, 0x3f	; 63
    29c2:	0f 92       	push	r0
    29c4:	11 24       	eor	r1, r1
    29c6:	2f 93       	push	r18
    29c8:	3f 93       	push	r19
    29ca:	4f 93       	push	r20
    29cc:	5f 93       	push	r21
    29ce:	6f 93       	push	r22
    29d0:	7f 93       	push	r23
    29d2:	8f 93       	push	r24
    29d4:	9f 93       	push	r25
    29d6:	af 93       	push	r26
    29d8:	bf 93       	push	r27
    29da:	ef 93       	push	r30
    29dc:	ff 93       	push	r31
    29de:	df 93       	push	r29
    29e0:	cf 93       	push	r28
    29e2:	cd b7       	in	r28, 0x3d	; 61
    29e4:	de b7       	in	r29, 0x3e	; 62
	
	static u32 counter=0;
	
	if(counter==TIMER+1){
    29e6:	80 91 2a 02 	lds	r24, 0x022A
    29ea:	90 91 2b 02 	lds	r25, 0x022B
    29ee:	a0 91 2c 02 	lds	r26, 0x022C
    29f2:	b0 91 2d 02 	lds	r27, 0x022D
    29f6:	9c 01       	movw	r18, r24
    29f8:	ad 01       	movw	r20, r26
    29fa:	2f 5f       	subi	r18, 0xFF	; 255
    29fc:	3f 4f       	sbci	r19, 0xFF	; 255
    29fe:	4f 4f       	sbci	r20, 0xFF	; 255
    2a00:	5f 4f       	sbci	r21, 0xFF	; 255
    2a02:	80 91 06 02 	lds	r24, 0x0206
    2a06:	90 91 07 02 	lds	r25, 0x0207
    2a0a:	a0 91 08 02 	lds	r26, 0x0208
    2a0e:	b0 91 09 02 	lds	r27, 0x0209
    2a12:	28 17       	cp	r18, r24
    2a14:	39 07       	cpc	r19, r25
    2a16:	4a 07       	cpc	r20, r26
    2a18:	5b 07       	cpc	r21, r27
    2a1a:	f1 f4       	brne	.+60     	; 0x2a58 <__vector_9+0x9c>
		if(TIMER1_NORMAL_GPfun!=NULL){
    2a1c:	80 91 f6 01 	lds	r24, 0x01F6
    2a20:	90 91 f7 01 	lds	r25, 0x01F7
    2a24:	00 97       	sbiw	r24, 0x00	; 0
    2a26:	29 f0       	breq	.+10     	; 0x2a32 <__vector_9+0x76>
			TIMER1_NORMAL_GPfun();
    2a28:	e0 91 f6 01 	lds	r30, 0x01F6
    2a2c:	f0 91 f7 01 	lds	r31, 0x01F7
    2a30:	09 95       	icall
		}
		counter=0;
    2a32:	10 92 06 02 	sts	0x0206, r1
    2a36:	10 92 07 02 	sts	0x0207, r1
    2a3a:	10 92 08 02 	sts	0x0208, r1
    2a3e:	10 92 09 02 	sts	0x0209, r1
		TIMER1_voidPreLoad(PreLoad);
    2a42:	80 91 32 02 	lds	r24, 0x0232
    2a46:	90 91 33 02 	lds	r25, 0x0233
    2a4a:	a0 91 34 02 	lds	r26, 0x0234
    2a4e:	b0 91 35 02 	lds	r27, 0x0235
    2a52:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <TIMER1_voidPreLoad>
    2a56:	13 c0       	rjmp	.+38     	; 0x2a7e <__vector_9+0xc2>
	}
	else{
		counter++;
    2a58:	80 91 06 02 	lds	r24, 0x0206
    2a5c:	90 91 07 02 	lds	r25, 0x0207
    2a60:	a0 91 08 02 	lds	r26, 0x0208
    2a64:	b0 91 09 02 	lds	r27, 0x0209
    2a68:	01 96       	adiw	r24, 0x01	; 1
    2a6a:	a1 1d       	adc	r26, r1
    2a6c:	b1 1d       	adc	r27, r1
    2a6e:	80 93 06 02 	sts	0x0206, r24
    2a72:	90 93 07 02 	sts	0x0207, r25
    2a76:	a0 93 08 02 	sts	0x0208, r26
    2a7a:	b0 93 09 02 	sts	0x0209, r27
	}
    2a7e:	cf 91       	pop	r28
    2a80:	df 91       	pop	r29
    2a82:	ff 91       	pop	r31
    2a84:	ef 91       	pop	r30
    2a86:	bf 91       	pop	r27
    2a88:	af 91       	pop	r26
    2a8a:	9f 91       	pop	r25
    2a8c:	8f 91       	pop	r24
    2a8e:	7f 91       	pop	r23
    2a90:	6f 91       	pop	r22
    2a92:	5f 91       	pop	r21
    2a94:	4f 91       	pop	r20
    2a96:	3f 91       	pop	r19
    2a98:	2f 91       	pop	r18
    2a9a:	0f 90       	pop	r0
    2a9c:	0f be       	out	0x3f, r0	; 63
    2a9e:	0f 90       	pop	r0
    2aa0:	1f 90       	pop	r1
    2aa2:	18 95       	reti

00002aa4 <TIMER2_voidInitialize>:
void (*TIMER2_NORMAL_GPfun)(void)=NULL;
void (*TIMER2_CTC_GPfun)(void)=NULL;

u32 TIMER,PreLoad,PreScaler;

void TIMER2_voidInitialize(){
    2aa4:	df 93       	push	r29
    2aa6:	cf 93       	push	r28
    2aa8:	cd b7       	in	r28, 0x3d	; 61
    2aaa:	de b7       	in	r29, 0x3e	; 62
	SetBit(TCCR2,PIN0);
	ClrBit(TCCR2,PIN1);
	ClrBit(TCCR2,PIN2);
	PreScaler=1;
#elif Clock_Select == clk_8
	ClrBit(TCCR2,PIN0);
    2aac:	a5 e4       	ldi	r26, 0x45	; 69
    2aae:	b0 e0       	ldi	r27, 0x00	; 0
    2ab0:	e5 e4       	ldi	r30, 0x45	; 69
    2ab2:	f0 e0       	ldi	r31, 0x00	; 0
    2ab4:	80 81       	ld	r24, Z
    2ab6:	8e 7f       	andi	r24, 0xFE	; 254
    2ab8:	8c 93       	st	X, r24
	SetBit(TCCR2,PIN1);
    2aba:	a5 e4       	ldi	r26, 0x45	; 69
    2abc:	b0 e0       	ldi	r27, 0x00	; 0
    2abe:	e5 e4       	ldi	r30, 0x45	; 69
    2ac0:	f0 e0       	ldi	r31, 0x00	; 0
    2ac2:	80 81       	ld	r24, Z
    2ac4:	82 60       	ori	r24, 0x02	; 2
    2ac6:	8c 93       	st	X, r24
	ClrBit(TCCR2,PIN2);
    2ac8:	a5 e4       	ldi	r26, 0x45	; 69
    2aca:	b0 e0       	ldi	r27, 0x00	; 0
    2acc:	e5 e4       	ldi	r30, 0x45	; 69
    2ace:	f0 e0       	ldi	r31, 0x00	; 0
    2ad0:	80 81       	ld	r24, Z
    2ad2:	8b 7f       	andi	r24, 0xFB	; 251
    2ad4:	8c 93       	st	X, r24
	PreScaler=8;
    2ad6:	88 e0       	ldi	r24, 0x08	; 8
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	a0 e0       	ldi	r26, 0x00	; 0
    2adc:	b0 e0       	ldi	r27, 0x00	; 0
    2ade:	80 93 2e 02 	sts	0x022E, r24
    2ae2:	90 93 2f 02 	sts	0x022F, r25
    2ae6:	a0 93 30 02 	sts	0x0230, r26
    2aea:	b0 93 31 02 	sts	0x0231, r27
	ClrBit(TCCR2,PIN5);
#elif Compare_Output_Mode == Toggle_OC2
	SetBit(TCCR2,PIN4);
	ClrBit(TCCR2,PIN5);
#elif (Compare_Output_Mode == Clear_OC2)||(Compare_Output_Mode == Clear_Match_Set_Bottom)||(Compare_Output_Mode == Clear_Up_Set_Down)
	ClrBit(TCCR2,PIN4);
    2aee:	a5 e4       	ldi	r26, 0x45	; 69
    2af0:	b0 e0       	ldi	r27, 0x00	; 0
    2af2:	e5 e4       	ldi	r30, 0x45	; 69
    2af4:	f0 e0       	ldi	r31, 0x00	; 0
    2af6:	80 81       	ld	r24, Z
    2af8:	8f 7e       	andi	r24, 0xEF	; 239
    2afa:	8c 93       	st	X, r24
	SetBit(TCCR2,PIN5);
    2afc:	a5 e4       	ldi	r26, 0x45	; 69
    2afe:	b0 e0       	ldi	r27, 0x00	; 0
    2b00:	e5 e4       	ldi	r30, 0x45	; 69
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	80 81       	ld	r24, Z
    2b06:	80 62       	ori	r24, 0x20	; 32
    2b08:	8c 93       	st	X, r24
#elif Waveform_MODE == CTC
	SetBit(TCCR2,PIN3);
	ClrBit(TCCR2,PIN6);
	SetBit(TIMSK,PIN7);
#elif Waveform_MODE == Fast_PWM
	SetBit(TCCR2,PIN3);
    2b0a:	a5 e4       	ldi	r26, 0x45	; 69
    2b0c:	b0 e0       	ldi	r27, 0x00	; 0
    2b0e:	e5 e4       	ldi	r30, 0x45	; 69
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	80 81       	ld	r24, Z
    2b14:	88 60       	ori	r24, 0x08	; 8
    2b16:	8c 93       	st	X, r24
	SetBit(TCCR2,PIN6);
    2b18:	a5 e4       	ldi	r26, 0x45	; 69
    2b1a:	b0 e0       	ldi	r27, 0x00	; 0
    2b1c:	e5 e4       	ldi	r30, 0x45	; 69
    2b1e:	f0 e0       	ldi	r31, 0x00	; 0
    2b20:	80 81       	ld	r24, Z
    2b22:	80 64       	ori	r24, 0x40	; 64
    2b24:	8c 93       	st	X, r24
#endif
}
    2b26:	cf 91       	pop	r28
    2b28:	df 91       	pop	r29
    2b2a:	08 95       	ret

00002b2c <TIMER2_voidPreLoad>:

void TIMER2_voidPreLoad(u8 Copy_u8Value){
    2b2c:	df 93       	push	r29
    2b2e:	cf 93       	push	r28
    2b30:	0f 92       	push	r0
    2b32:	cd b7       	in	r28, 0x3d	; 61
    2b34:	de b7       	in	r29, 0x3e	; 62
    2b36:	89 83       	std	Y+1, r24	; 0x01
	
	TCNT2=Copy_u8Value;
    2b38:	e4 e4       	ldi	r30, 0x44	; 68
    2b3a:	f0 e0       	ldi	r31, 0x00	; 0
    2b3c:	89 81       	ldd	r24, Y+1	; 0x01
    2b3e:	80 83       	st	Z, r24
}
    2b40:	0f 90       	pop	r0
    2b42:	cf 91       	pop	r28
    2b44:	df 91       	pop	r29
    2b46:	08 95       	ret

00002b48 <TIMER2_voidSetOCR2>:

void TIMER2_voidSetOCR2(u8 Copy_u8Value){
    2b48:	df 93       	push	r29
    2b4a:	cf 93       	push	r28
    2b4c:	0f 92       	push	r0
    2b4e:	cd b7       	in	r28, 0x3d	; 61
    2b50:	de b7       	in	r29, 0x3e	; 62
    2b52:	89 83       	std	Y+1, r24	; 0x01
	
	OCR2=Copy_u8Value;
    2b54:	e3 e4       	ldi	r30, 0x43	; 67
    2b56:	f0 e0       	ldi	r31, 0x00	; 0
    2b58:	89 81       	ldd	r24, Y+1	; 0x01
    2b5a:	80 83       	st	Z, r24
}
    2b5c:	0f 90       	pop	r0
    2b5e:	cf 91       	pop	r28
    2b60:	df 91       	pop	r29
    2b62:	08 95       	ret

00002b64 <TIMER2_voidSetTimer>:

void TIMER2_voidSetTimer(u32 Copy_u32TimeMS){
    2b64:	ef 92       	push	r14
    2b66:	ff 92       	push	r15
    2b68:	0f 93       	push	r16
    2b6a:	1f 93       	push	r17
    2b6c:	df 93       	push	r29
    2b6e:	cf 93       	push	r28
    2b70:	cd b7       	in	r28, 0x3d	; 61
    2b72:	de b7       	in	r29, 0x3e	; 62
    2b74:	68 97       	sbiw	r28, 0x18	; 24
    2b76:	0f b6       	in	r0, 0x3f	; 63
    2b78:	f8 94       	cli
    2b7a:	de bf       	out	0x3e, r29	; 62
    2b7c:	0f be       	out	0x3f, r0	; 63
    2b7e:	cd bf       	out	0x3d, r28	; 61
    2b80:	6d 8b       	std	Y+21, r22	; 0x15
    2b82:	7e 8b       	std	Y+22, r23	; 0x16
    2b84:	8f 8b       	std	Y+23, r24	; 0x17
    2b86:	98 8f       	std	Y+24, r25	; 0x18
	}
	else if(Waveform_MODE == CTC){
		MAX_NUM=OCR2;
	}
	
	u32 TIMER_freq=CPU_FREQUENCY/PreScaler;
    2b88:	20 91 2e 02 	lds	r18, 0x022E
    2b8c:	30 91 2f 02 	lds	r19, 0x022F
    2b90:	40 91 30 02 	lds	r20, 0x0230
    2b94:	50 91 31 02 	lds	r21, 0x0231
    2b98:	80 e0       	ldi	r24, 0x00	; 0
    2b9a:	92 e1       	ldi	r25, 0x12	; 18
    2b9c:	aa e7       	ldi	r26, 0x7A	; 122
    2b9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ba0:	bc 01       	movw	r22, r24
    2ba2:	cd 01       	movw	r24, r26
    2ba4:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__udivmodsi4>
    2ba8:	da 01       	movw	r26, r20
    2baa:	c9 01       	movw	r24, r18
    2bac:	8d 87       	std	Y+13, r24	; 0x0d
    2bae:	9e 87       	std	Y+14, r25	; 0x0e
    2bb0:	af 87       	std	Y+15, r26	; 0x0f
    2bb2:	b8 8b       	std	Y+16, r27	; 0x10
	f32 Tick_Time=MICRO_IN_SEC/TIMER_freq;
    2bb4:	80 e4       	ldi	r24, 0x40	; 64
    2bb6:	92 e4       	ldi	r25, 0x42	; 66
    2bb8:	af e0       	ldi	r26, 0x0F	; 15
    2bba:	b0 e0       	ldi	r27, 0x00	; 0
    2bbc:	2d 85       	ldd	r18, Y+13	; 0x0d
    2bbe:	3e 85       	ldd	r19, Y+14	; 0x0e
    2bc0:	4f 85       	ldd	r20, Y+15	; 0x0f
    2bc2:	58 89       	ldd	r21, Y+16	; 0x10
    2bc4:	bc 01       	movw	r22, r24
    2bc6:	cd 01       	movw	r24, r26
    2bc8:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__udivmodsi4>
    2bcc:	da 01       	movw	r26, r20
    2bce:	c9 01       	movw	r24, r18
    2bd0:	bc 01       	movw	r22, r24
    2bd2:	cd 01       	movw	r24, r26
    2bd4:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2bd8:	dc 01       	movw	r26, r24
    2bda:	cb 01       	movw	r24, r22
    2bdc:	89 87       	std	Y+9, r24	; 0x09
    2bde:	9a 87       	std	Y+10, r25	; 0x0a
    2be0:	ab 87       	std	Y+11, r26	; 0x0b
    2be2:	bc 87       	std	Y+12, r27	; 0x0c
	u32 OverFlow_Time=Tick_Time*MAX_NUM;
    2be4:	69 89       	ldd	r22, Y+17	; 0x11
    2be6:	7a 89       	ldd	r23, Y+18	; 0x12
    2be8:	8b 89       	ldd	r24, Y+19	; 0x13
    2bea:	9c 89       	ldd	r25, Y+20	; 0x14
    2bec:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2bf0:	dc 01       	movw	r26, r24
    2bf2:	cb 01       	movw	r24, r22
    2bf4:	bc 01       	movw	r22, r24
    2bf6:	cd 01       	movw	r24, r26
    2bf8:	29 85       	ldd	r18, Y+9	; 0x09
    2bfa:	3a 85       	ldd	r19, Y+10	; 0x0a
    2bfc:	4b 85       	ldd	r20, Y+11	; 0x0b
    2bfe:	5c 85       	ldd	r21, Y+12	; 0x0c
    2c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c04:	dc 01       	movw	r26, r24
    2c06:	cb 01       	movw	r24, r22
    2c08:	bc 01       	movw	r22, r24
    2c0a:	cd 01       	movw	r24, r26
    2c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c10:	dc 01       	movw	r26, r24
    2c12:	cb 01       	movw	r24, r22
    2c14:	8d 83       	std	Y+5, r24	; 0x05
    2c16:	9e 83       	std	Y+6, r25	; 0x06
    2c18:	af 83       	std	Y+7, r26	; 0x07
    2c1a:	b8 87       	std	Y+8, r27	; 0x08
	
	TIMER=(Copy_u32TimeMS*MICRO_IN_MILLI)/OverFlow_Time;
    2c1c:	8d 89       	ldd	r24, Y+21	; 0x15
    2c1e:	9e 89       	ldd	r25, Y+22	; 0x16
    2c20:	af 89       	ldd	r26, Y+23	; 0x17
    2c22:	b8 8d       	ldd	r27, Y+24	; 0x18
    2c24:	28 ee       	ldi	r18, 0xE8	; 232
    2c26:	33 e0       	ldi	r19, 0x03	; 3
    2c28:	40 e0       	ldi	r20, 0x00	; 0
    2c2a:	50 e0       	ldi	r21, 0x00	; 0
    2c2c:	bc 01       	movw	r22, r24
    2c2e:	cd 01       	movw	r24, r26
    2c30:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <__mulsi3>
    2c34:	dc 01       	movw	r26, r24
    2c36:	cb 01       	movw	r24, r22
    2c38:	2d 81       	ldd	r18, Y+5	; 0x05
    2c3a:	3e 81       	ldd	r19, Y+6	; 0x06
    2c3c:	4f 81       	ldd	r20, Y+7	; 0x07
    2c3e:	58 85       	ldd	r21, Y+8	; 0x08
    2c40:	bc 01       	movw	r22, r24
    2c42:	cd 01       	movw	r24, r26
    2c44:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__udivmodsi4>
    2c48:	da 01       	movw	r26, r20
    2c4a:	c9 01       	movw	r24, r18
    2c4c:	80 93 2a 02 	sts	0x022A, r24
    2c50:	90 93 2b 02 	sts	0x022B, r25
    2c54:	a0 93 2c 02 	sts	0x022C, r26
    2c58:	b0 93 2d 02 	sts	0x022D, r27
	f32 remainder=((Copy_u32TimeMS*MICRO_IN_MILLI)%OverFlow_Time)/(f32)OverFlow_Time;
    2c5c:	8d 89       	ldd	r24, Y+21	; 0x15
    2c5e:	9e 89       	ldd	r25, Y+22	; 0x16
    2c60:	af 89       	ldd	r26, Y+23	; 0x17
    2c62:	b8 8d       	ldd	r27, Y+24	; 0x18
    2c64:	28 ee       	ldi	r18, 0xE8	; 232
    2c66:	33 e0       	ldi	r19, 0x03	; 3
    2c68:	40 e0       	ldi	r20, 0x00	; 0
    2c6a:	50 e0       	ldi	r21, 0x00	; 0
    2c6c:	bc 01       	movw	r22, r24
    2c6e:	cd 01       	movw	r24, r26
    2c70:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <__mulsi3>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	2d 81       	ldd	r18, Y+5	; 0x05
    2c7a:	3e 81       	ldd	r19, Y+6	; 0x06
    2c7c:	4f 81       	ldd	r20, Y+7	; 0x07
    2c7e:	58 85       	ldd	r21, Y+8	; 0x08
    2c80:	bc 01       	movw	r22, r24
    2c82:	cd 01       	movw	r24, r26
    2c84:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__udivmodsi4>
    2c88:	dc 01       	movw	r26, r24
    2c8a:	cb 01       	movw	r24, r22
    2c8c:	bc 01       	movw	r22, r24
    2c8e:	cd 01       	movw	r24, r26
    2c90:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2c94:	7b 01       	movw	r14, r22
    2c96:	8c 01       	movw	r16, r24
    2c98:	6d 81       	ldd	r22, Y+5	; 0x05
    2c9a:	7e 81       	ldd	r23, Y+6	; 0x06
    2c9c:	8f 81       	ldd	r24, Y+7	; 0x07
    2c9e:	98 85       	ldd	r25, Y+8	; 0x08
    2ca0:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2ca4:	9b 01       	movw	r18, r22
    2ca6:	ac 01       	movw	r20, r24
    2ca8:	c8 01       	movw	r24, r16
    2caa:	b7 01       	movw	r22, r14
    2cac:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	cb 01       	movw	r24, r22
    2cb4:	89 83       	std	Y+1, r24	; 0x01
    2cb6:	9a 83       	std	Y+2, r25	; 0x02
    2cb8:	ab 83       	std	Y+3, r26	; 0x03
    2cba:	bc 83       	std	Y+4, r27	; 0x04
	PreLoad=(1-remainder)*MAX_NUM;
    2cbc:	60 e0       	ldi	r22, 0x00	; 0
    2cbe:	70 e0       	ldi	r23, 0x00	; 0
    2cc0:	80 e8       	ldi	r24, 0x80	; 128
    2cc2:	9f e3       	ldi	r25, 0x3F	; 63
    2cc4:	29 81       	ldd	r18, Y+1	; 0x01
    2cc6:	3a 81       	ldd	r19, Y+2	; 0x02
    2cc8:	4b 81       	ldd	r20, Y+3	; 0x03
    2cca:	5c 81       	ldd	r21, Y+4	; 0x04
    2ccc:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2cd0:	dc 01       	movw	r26, r24
    2cd2:	cb 01       	movw	r24, r22
    2cd4:	7c 01       	movw	r14, r24
    2cd6:	8d 01       	movw	r16, r26
    2cd8:	69 89       	ldd	r22, Y+17	; 0x11
    2cda:	7a 89       	ldd	r23, Y+18	; 0x12
    2cdc:	8b 89       	ldd	r24, Y+19	; 0x13
    2cde:	9c 89       	ldd	r25, Y+20	; 0x14
    2ce0:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2ce4:	9b 01       	movw	r18, r22
    2ce6:	ac 01       	movw	r20, r24
    2ce8:	c8 01       	movw	r24, r16
    2cea:	b7 01       	movw	r22, r14
    2cec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf0:	dc 01       	movw	r26, r24
    2cf2:	cb 01       	movw	r24, r22
    2cf4:	bc 01       	movw	r22, r24
    2cf6:	cd 01       	movw	r24, r26
    2cf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cfc:	dc 01       	movw	r26, r24
    2cfe:	cb 01       	movw	r24, r22
    2d00:	80 93 32 02 	sts	0x0232, r24
    2d04:	90 93 33 02 	sts	0x0233, r25
    2d08:	a0 93 34 02 	sts	0x0234, r26
    2d0c:	b0 93 35 02 	sts	0x0235, r27
	
	TIMER2_voidPreLoad(PreLoad);
    2d10:	80 91 32 02 	lds	r24, 0x0232
    2d14:	90 91 33 02 	lds	r25, 0x0233
    2d18:	a0 91 34 02 	lds	r26, 0x0234
    2d1c:	b0 91 35 02 	lds	r27, 0x0235
    2d20:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <TIMER2_voidPreLoad>
}
    2d24:	68 96       	adiw	r28, 0x18	; 24
    2d26:	0f b6       	in	r0, 0x3f	; 63
    2d28:	f8 94       	cli
    2d2a:	de bf       	out	0x3e, r29	; 62
    2d2c:	0f be       	out	0x3f, r0	; 63
    2d2e:	cd bf       	out	0x3d, r28	; 61
    2d30:	cf 91       	pop	r28
    2d32:	df 91       	pop	r29
    2d34:	1f 91       	pop	r17
    2d36:	0f 91       	pop	r16
    2d38:	ff 90       	pop	r15
    2d3a:	ef 90       	pop	r14
    2d3c:	08 95       	ret

00002d3e <TIMER2_NORMAL_SetCallBack>:

void TIMER2_NORMAL_SetCallBack(void(*ptr)(void)){
    2d3e:	df 93       	push	r29
    2d40:	cf 93       	push	r28
    2d42:	00 d0       	rcall	.+0      	; 0x2d44 <TIMER2_NORMAL_SetCallBack+0x6>
    2d44:	cd b7       	in	r28, 0x3d	; 61
    2d46:	de b7       	in	r29, 0x3e	; 62
    2d48:	9a 83       	std	Y+2, r25	; 0x02
    2d4a:	89 83       	std	Y+1, r24	; 0x01
			
	TIMER2_NORMAL_GPfun=ptr;
    2d4c:	89 81       	ldd	r24, Y+1	; 0x01
    2d4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d50:	90 93 0b 02 	sts	0x020B, r25
    2d54:	80 93 0a 02 	sts	0x020A, r24
}
    2d58:	0f 90       	pop	r0
    2d5a:	0f 90       	pop	r0
    2d5c:	cf 91       	pop	r28
    2d5e:	df 91       	pop	r29
    2d60:	08 95       	ret

00002d62 <TIMER2_CTC_SetCallBack>:

void TIMER2_CTC_SetCallBack(void(*ptr)(void)){
    2d62:	df 93       	push	r29
    2d64:	cf 93       	push	r28
    2d66:	00 d0       	rcall	.+0      	; 0x2d68 <TIMER2_CTC_SetCallBack+0x6>
    2d68:	cd b7       	in	r28, 0x3d	; 61
    2d6a:	de b7       	in	r29, 0x3e	; 62
    2d6c:	9a 83       	std	Y+2, r25	; 0x02
    2d6e:	89 83       	std	Y+1, r24	; 0x01
	
	TIMER2_CTC_GPfun=ptr;
    2d70:	89 81       	ldd	r24, Y+1	; 0x01
    2d72:	9a 81       	ldd	r25, Y+2	; 0x02
    2d74:	90 93 0d 02 	sts	0x020D, r25
    2d78:	80 93 0c 02 	sts	0x020C, r24
}
    2d7c:	0f 90       	pop	r0
    2d7e:	0f 90       	pop	r0
    2d80:	cf 91       	pop	r28
    2d82:	df 91       	pop	r29
    2d84:	08 95       	ret

00002d86 <__vector_4>:

void __vector_4()__attribute__((signal));   // TIMER2_CTC
void __vector_4(){
    2d86:	1f 92       	push	r1
    2d88:	0f 92       	push	r0
    2d8a:	0f b6       	in	r0, 0x3f	; 63
    2d8c:	0f 92       	push	r0
    2d8e:	11 24       	eor	r1, r1
    2d90:	2f 93       	push	r18
    2d92:	3f 93       	push	r19
    2d94:	4f 93       	push	r20
    2d96:	5f 93       	push	r21
    2d98:	6f 93       	push	r22
    2d9a:	7f 93       	push	r23
    2d9c:	8f 93       	push	r24
    2d9e:	9f 93       	push	r25
    2da0:	af 93       	push	r26
    2da2:	bf 93       	push	r27
    2da4:	ef 93       	push	r30
    2da6:	ff 93       	push	r31
    2da8:	df 93       	push	r29
    2daa:	cf 93       	push	r28
    2dac:	cd b7       	in	r28, 0x3d	; 61
    2dae:	de b7       	in	r29, 0x3e	; 62
	
	static u32 counter=0;
	
	if(counter==TIMER+1){
    2db0:	80 91 2a 02 	lds	r24, 0x022A
    2db4:	90 91 2b 02 	lds	r25, 0x022B
    2db8:	a0 91 2c 02 	lds	r26, 0x022C
    2dbc:	b0 91 2d 02 	lds	r27, 0x022D
    2dc0:	9c 01       	movw	r18, r24
    2dc2:	ad 01       	movw	r20, r26
    2dc4:	2f 5f       	subi	r18, 0xFF	; 255
    2dc6:	3f 4f       	sbci	r19, 0xFF	; 255
    2dc8:	4f 4f       	sbci	r20, 0xFF	; 255
    2dca:	5f 4f       	sbci	r21, 0xFF	; 255
    2dcc:	80 91 0e 02 	lds	r24, 0x020E
    2dd0:	90 91 0f 02 	lds	r25, 0x020F
    2dd4:	a0 91 10 02 	lds	r26, 0x0210
    2dd8:	b0 91 11 02 	lds	r27, 0x0211
    2ddc:	28 17       	cp	r18, r24
    2dde:	39 07       	cpc	r19, r25
    2de0:	4a 07       	cpc	r20, r26
    2de2:	5b 07       	cpc	r21, r27
    2de4:	f1 f4       	brne	.+60     	; 0x2e22 <__vector_4+0x9c>
		if(TIMER2_CTC_GPfun!=NULL){
    2de6:	80 91 0c 02 	lds	r24, 0x020C
    2dea:	90 91 0d 02 	lds	r25, 0x020D
    2dee:	00 97       	sbiw	r24, 0x00	; 0
    2df0:	29 f0       	breq	.+10     	; 0x2dfc <__vector_4+0x76>
			TIMER2_CTC_GPfun();
    2df2:	e0 91 0c 02 	lds	r30, 0x020C
    2df6:	f0 91 0d 02 	lds	r31, 0x020D
    2dfa:	09 95       	icall
		}
		counter=0;
    2dfc:	10 92 0e 02 	sts	0x020E, r1
    2e00:	10 92 0f 02 	sts	0x020F, r1
    2e04:	10 92 10 02 	sts	0x0210, r1
    2e08:	10 92 11 02 	sts	0x0211, r1
		TIMER2_voidPreLoad(PreLoad);
    2e0c:	80 91 32 02 	lds	r24, 0x0232
    2e10:	90 91 33 02 	lds	r25, 0x0233
    2e14:	a0 91 34 02 	lds	r26, 0x0234
    2e18:	b0 91 35 02 	lds	r27, 0x0235
    2e1c:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <TIMER2_voidPreLoad>
    2e20:	13 c0       	rjmp	.+38     	; 0x2e48 <__vector_4+0xc2>
	}
	else{
		counter++;
    2e22:	80 91 0e 02 	lds	r24, 0x020E
    2e26:	90 91 0f 02 	lds	r25, 0x020F
    2e2a:	a0 91 10 02 	lds	r26, 0x0210
    2e2e:	b0 91 11 02 	lds	r27, 0x0211
    2e32:	01 96       	adiw	r24, 0x01	; 1
    2e34:	a1 1d       	adc	r26, r1
    2e36:	b1 1d       	adc	r27, r1
    2e38:	80 93 0e 02 	sts	0x020E, r24
    2e3c:	90 93 0f 02 	sts	0x020F, r25
    2e40:	a0 93 10 02 	sts	0x0210, r26
    2e44:	b0 93 11 02 	sts	0x0211, r27
	}
	
}
    2e48:	cf 91       	pop	r28
    2e4a:	df 91       	pop	r29
    2e4c:	ff 91       	pop	r31
    2e4e:	ef 91       	pop	r30
    2e50:	bf 91       	pop	r27
    2e52:	af 91       	pop	r26
    2e54:	9f 91       	pop	r25
    2e56:	8f 91       	pop	r24
    2e58:	7f 91       	pop	r23
    2e5a:	6f 91       	pop	r22
    2e5c:	5f 91       	pop	r21
    2e5e:	4f 91       	pop	r20
    2e60:	3f 91       	pop	r19
    2e62:	2f 91       	pop	r18
    2e64:	0f 90       	pop	r0
    2e66:	0f be       	out	0x3f, r0	; 63
    2e68:	0f 90       	pop	r0
    2e6a:	1f 90       	pop	r1
    2e6c:	18 95       	reti

00002e6e <__vector_5>:

void __vector_5()__attribute__((signal));   // TIMER2_NORMAL
void __vector_5(){
    2e6e:	1f 92       	push	r1
    2e70:	0f 92       	push	r0
    2e72:	0f b6       	in	r0, 0x3f	; 63
    2e74:	0f 92       	push	r0
    2e76:	11 24       	eor	r1, r1
    2e78:	2f 93       	push	r18
    2e7a:	3f 93       	push	r19
    2e7c:	4f 93       	push	r20
    2e7e:	5f 93       	push	r21
    2e80:	6f 93       	push	r22
    2e82:	7f 93       	push	r23
    2e84:	8f 93       	push	r24
    2e86:	9f 93       	push	r25
    2e88:	af 93       	push	r26
    2e8a:	bf 93       	push	r27
    2e8c:	ef 93       	push	r30
    2e8e:	ff 93       	push	r31
    2e90:	df 93       	push	r29
    2e92:	cf 93       	push	r28
    2e94:	cd b7       	in	r28, 0x3d	; 61
    2e96:	de b7       	in	r29, 0x3e	; 62
	
	static u32 counter=0;
	
	if(counter==TIMER+1){
    2e98:	80 91 2a 02 	lds	r24, 0x022A
    2e9c:	90 91 2b 02 	lds	r25, 0x022B
    2ea0:	a0 91 2c 02 	lds	r26, 0x022C
    2ea4:	b0 91 2d 02 	lds	r27, 0x022D
    2ea8:	9c 01       	movw	r18, r24
    2eaa:	ad 01       	movw	r20, r26
    2eac:	2f 5f       	subi	r18, 0xFF	; 255
    2eae:	3f 4f       	sbci	r19, 0xFF	; 255
    2eb0:	4f 4f       	sbci	r20, 0xFF	; 255
    2eb2:	5f 4f       	sbci	r21, 0xFF	; 255
    2eb4:	80 91 12 02 	lds	r24, 0x0212
    2eb8:	90 91 13 02 	lds	r25, 0x0213
    2ebc:	a0 91 14 02 	lds	r26, 0x0214
    2ec0:	b0 91 15 02 	lds	r27, 0x0215
    2ec4:	28 17       	cp	r18, r24
    2ec6:	39 07       	cpc	r19, r25
    2ec8:	4a 07       	cpc	r20, r26
    2eca:	5b 07       	cpc	r21, r27
    2ecc:	f1 f4       	brne	.+60     	; 0x2f0a <__vector_5+0x9c>
		if(TIMER2_NORMAL_GPfun!=NULL){
    2ece:	80 91 0a 02 	lds	r24, 0x020A
    2ed2:	90 91 0b 02 	lds	r25, 0x020B
    2ed6:	00 97       	sbiw	r24, 0x00	; 0
    2ed8:	29 f0       	breq	.+10     	; 0x2ee4 <__vector_5+0x76>
			TIMER2_NORMAL_GPfun();
    2eda:	e0 91 0a 02 	lds	r30, 0x020A
    2ede:	f0 91 0b 02 	lds	r31, 0x020B
    2ee2:	09 95       	icall
		}
		counter=0;
    2ee4:	10 92 12 02 	sts	0x0212, r1
    2ee8:	10 92 13 02 	sts	0x0213, r1
    2eec:	10 92 14 02 	sts	0x0214, r1
    2ef0:	10 92 15 02 	sts	0x0215, r1
		TIMER2_voidPreLoad(PreLoad);
    2ef4:	80 91 32 02 	lds	r24, 0x0232
    2ef8:	90 91 33 02 	lds	r25, 0x0233
    2efc:	a0 91 34 02 	lds	r26, 0x0234
    2f00:	b0 91 35 02 	lds	r27, 0x0235
    2f04:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <TIMER2_voidPreLoad>
    2f08:	13 c0       	rjmp	.+38     	; 0x2f30 <__vector_5+0xc2>
	}
	else{
		counter++;
    2f0a:	80 91 12 02 	lds	r24, 0x0212
    2f0e:	90 91 13 02 	lds	r25, 0x0213
    2f12:	a0 91 14 02 	lds	r26, 0x0214
    2f16:	b0 91 15 02 	lds	r27, 0x0215
    2f1a:	01 96       	adiw	r24, 0x01	; 1
    2f1c:	a1 1d       	adc	r26, r1
    2f1e:	b1 1d       	adc	r27, r1
    2f20:	80 93 12 02 	sts	0x0212, r24
    2f24:	90 93 13 02 	sts	0x0213, r25
    2f28:	a0 93 14 02 	sts	0x0214, r26
    2f2c:	b0 93 15 02 	sts	0x0215, r27
	}
	
}
    2f30:	cf 91       	pop	r28
    2f32:	df 91       	pop	r29
    2f34:	ff 91       	pop	r31
    2f36:	ef 91       	pop	r30
    2f38:	bf 91       	pop	r27
    2f3a:	af 91       	pop	r26
    2f3c:	9f 91       	pop	r25
    2f3e:	8f 91       	pop	r24
    2f40:	7f 91       	pop	r23
    2f42:	6f 91       	pop	r22
    2f44:	5f 91       	pop	r21
    2f46:	4f 91       	pop	r20
    2f48:	3f 91       	pop	r19
    2f4a:	2f 91       	pop	r18
    2f4c:	0f 90       	pop	r0
    2f4e:	0f be       	out	0x3f, r0	; 63
    2f50:	0f 90       	pop	r0
    2f52:	1f 90       	pop	r1
    2f54:	18 95       	reti

00002f56 <UART_voidInitialize>:
#include "UART_private.h"
#include "UART_interface.h"

u8 TEMP;

void UART_voidInitialize(){
    2f56:	df 93       	push	r29
    2f58:	cf 93       	push	r28
    2f5a:	cd b7       	in	r28, 0x3d	; 61
    2f5c:	de b7       	in	r29, 0x3e	; 62
	
	SetBit(UCSRB,PIN4);
    2f5e:	aa e2       	ldi	r26, 0x2A	; 42
    2f60:	b0 e0       	ldi	r27, 0x00	; 0
    2f62:	ea e2       	ldi	r30, 0x2A	; 42
    2f64:	f0 e0       	ldi	r31, 0x00	; 0
    2f66:	80 81       	ld	r24, Z
    2f68:	80 61       	ori	r24, 0x10	; 16
    2f6a:	8c 93       	st	X, r24
	SetBit(UCSRB,PIN3);
    2f6c:	aa e2       	ldi	r26, 0x2A	; 42
    2f6e:	b0 e0       	ldi	r27, 0x00	; 0
    2f70:	ea e2       	ldi	r30, 0x2A	; 42
    2f72:	f0 e0       	ldi	r31, 0x00	; 0
    2f74:	80 81       	ld	r24, Z
    2f76:	88 60       	ori	r24, 0x08	; 8
    2f78:	8c 93       	st	X, r24
	
	SetBit(TEMP,PIN7);
    2f7a:	80 91 36 02 	lds	r24, 0x0236
    2f7e:	80 68       	ori	r24, 0x80	; 128
    2f80:	80 93 36 02 	sts	0x0236, r24
	ClrBit(TEMP,PIN6);
    2f84:	80 91 36 02 	lds	r24, 0x0236
    2f88:	8f 7b       	andi	r24, 0xBF	; 191
    2f8a:	80 93 36 02 	sts	0x0236, r24
	ClrBit(TEMP,PIN5);
    2f8e:	80 91 36 02 	lds	r24, 0x0236
    2f92:	8f 7d       	andi	r24, 0xDF	; 223
    2f94:	80 93 36 02 	sts	0x0236, r24
	ClrBit(TEMP,PIN4);
    2f98:	80 91 36 02 	lds	r24, 0x0236
    2f9c:	8f 7e       	andi	r24, 0xEF	; 239
    2f9e:	80 93 36 02 	sts	0x0236, r24
	ClrBit(TEMP,PIN3);
    2fa2:	80 91 36 02 	lds	r24, 0x0236
    2fa6:	87 7f       	andi	r24, 0xF7	; 247
    2fa8:	80 93 36 02 	sts	0x0236, r24
	SetBit(TEMP,PIN2);
    2fac:	80 91 36 02 	lds	r24, 0x0236
    2fb0:	84 60       	ori	r24, 0x04	; 4
    2fb2:	80 93 36 02 	sts	0x0236, r24
	SetBit(TEMP,PIN1);
    2fb6:	80 91 36 02 	lds	r24, 0x0236
    2fba:	82 60       	ori	r24, 0x02	; 2
    2fbc:	80 93 36 02 	sts	0x0236, r24
	
	UCSRC=TEMP;
    2fc0:	e0 e4       	ldi	r30, 0x40	; 64
    2fc2:	f0 e0       	ldi	r31, 0x00	; 0
    2fc4:	80 91 36 02 	lds	r24, 0x0236
    2fc8:	80 83       	st	Z, r24
	
	UBRRH=0;
    2fca:	e0 e4       	ldi	r30, 0x40	; 64
    2fcc:	f0 e0       	ldi	r31, 0x00	; 0
    2fce:	10 82       	st	Z, r1
	UBRRL=51;
    2fd0:	e9 e2       	ldi	r30, 0x29	; 41
    2fd2:	f0 e0       	ldi	r31, 0x00	; 0
    2fd4:	83 e3       	ldi	r24, 0x33	; 51
    2fd6:	80 83       	st	Z, r24
}
    2fd8:	cf 91       	pop	r28
    2fda:	df 91       	pop	r29
    2fdc:	08 95       	ret

00002fde <UART_voidSendData>:

void UART_voidSendData(u8 Copy_u8Data){
    2fde:	df 93       	push	r29
    2fe0:	cf 93       	push	r28
    2fe2:	0f 92       	push	r0
    2fe4:	cd b7       	in	r28, 0x3d	; 61
    2fe6:	de b7       	in	r29, 0x3e	; 62
    2fe8:	89 83       	std	Y+1, r24	; 0x01
	UDR=Copy_u8Data;
    2fea:	ec e2       	ldi	r30, 0x2C	; 44
    2fec:	f0 e0       	ldi	r31, 0x00	; 0
    2fee:	89 81       	ldd	r24, Y+1	; 0x01
    2ff0:	80 83       	st	Z, r24
	while((GetBit(UCSRA,PIN6))==0);
    2ff2:	eb e2       	ldi	r30, 0x2B	; 43
    2ff4:	f0 e0       	ldi	r31, 0x00	; 0
    2ff6:	80 81       	ld	r24, Z
    2ff8:	82 95       	swap	r24
    2ffa:	86 95       	lsr	r24
    2ffc:	86 95       	lsr	r24
    2ffe:	83 70       	andi	r24, 0x03	; 3
    3000:	88 2f       	mov	r24, r24
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	81 70       	andi	r24, 0x01	; 1
    3006:	90 70       	andi	r25, 0x00	; 0
    3008:	00 97       	sbiw	r24, 0x00	; 0
    300a:	99 f3       	breq	.-26     	; 0x2ff2 <UART_voidSendData+0x14>
	SetBit(UCSRA,PIN6);
    300c:	ab e2       	ldi	r26, 0x2B	; 43
    300e:	b0 e0       	ldi	r27, 0x00	; 0
    3010:	eb e2       	ldi	r30, 0x2B	; 43
    3012:	f0 e0       	ldi	r31, 0x00	; 0
    3014:	80 81       	ld	r24, Z
    3016:	80 64       	ori	r24, 0x40	; 64
    3018:	8c 93       	st	X, r24
}
    301a:	0f 90       	pop	r0
    301c:	cf 91       	pop	r28
    301e:	df 91       	pop	r29
    3020:	08 95       	ret

00003022 <UART_u8ReciveData>:

u8 UART_u8ReciveData(){
    3022:	df 93       	push	r29
    3024:	cf 93       	push	r28
    3026:	cd b7       	in	r28, 0x3d	; 61
    3028:	de b7       	in	r29, 0x3e	; 62
	while((GetBit(UCSRA,PIN7))==0);
    302a:	eb e2       	ldi	r30, 0x2B	; 43
    302c:	f0 e0       	ldi	r31, 0x00	; 0
    302e:	80 81       	ld	r24, Z
    3030:	88 23       	and	r24, r24
    3032:	dc f7       	brge	.-10     	; 0x302a <UART_u8ReciveData+0x8>
	return UDR;
    3034:	ec e2       	ldi	r30, 0x2C	; 44
    3036:	f0 e0       	ldi	r31, 0x00	; 0
    3038:	80 81       	ld	r24, Z
}
    303a:	cf 91       	pop	r28
    303c:	df 91       	pop	r29
    303e:	08 95       	ret

00003040 <UART_voidSendString>:

void UART_voidSendString(u8 *Copy_u8String){
    3040:	df 93       	push	r29
    3042:	cf 93       	push	r28
    3044:	00 d0       	rcall	.+0      	; 0x3046 <UART_voidSendString+0x6>
    3046:	0f 92       	push	r0
    3048:	cd b7       	in	r28, 0x3d	; 61
    304a:	de b7       	in	r29, 0x3e	; 62
    304c:	9b 83       	std	Y+3, r25	; 0x03
    304e:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    3050:	19 82       	std	Y+1, r1	; 0x01
    3052:	23 c0       	rjmp	.+70     	; 0x309a <UART_voidSendString+0x5a>
	while(Copy_u8String[i]!='\0'){
		UDR=Copy_u8String[i];
    3054:	ac e2       	ldi	r26, 0x2C	; 44
    3056:	b0 e0       	ldi	r27, 0x00	; 0
    3058:	89 81       	ldd	r24, Y+1	; 0x01
    305a:	28 2f       	mov	r18, r24
    305c:	30 e0       	ldi	r19, 0x00	; 0
    305e:	8a 81       	ldd	r24, Y+2	; 0x02
    3060:	9b 81       	ldd	r25, Y+3	; 0x03
    3062:	fc 01       	movw	r30, r24
    3064:	e2 0f       	add	r30, r18
    3066:	f3 1f       	adc	r31, r19
    3068:	80 81       	ld	r24, Z
    306a:	8c 93       	st	X, r24
		while((GetBit(UCSRA,PIN6))==0);
    306c:	eb e2       	ldi	r30, 0x2B	; 43
    306e:	f0 e0       	ldi	r31, 0x00	; 0
    3070:	80 81       	ld	r24, Z
    3072:	82 95       	swap	r24
    3074:	86 95       	lsr	r24
    3076:	86 95       	lsr	r24
    3078:	83 70       	andi	r24, 0x03	; 3
    307a:	88 2f       	mov	r24, r24
    307c:	90 e0       	ldi	r25, 0x00	; 0
    307e:	81 70       	andi	r24, 0x01	; 1
    3080:	90 70       	andi	r25, 0x00	; 0
    3082:	00 97       	sbiw	r24, 0x00	; 0
    3084:	99 f3       	breq	.-26     	; 0x306c <UART_voidSendString+0x2c>
		SetBit(UCSRA,PIN6);
    3086:	ab e2       	ldi	r26, 0x2B	; 43
    3088:	b0 e0       	ldi	r27, 0x00	; 0
    308a:	eb e2       	ldi	r30, 0x2B	; 43
    308c:	f0 e0       	ldi	r31, 0x00	; 0
    308e:	80 81       	ld	r24, Z
    3090:	80 64       	ori	r24, 0x40	; 64
    3092:	8c 93       	st	X, r24
		i++;
    3094:	89 81       	ldd	r24, Y+1	; 0x01
    3096:	8f 5f       	subi	r24, 0xFF	; 255
    3098:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}

void UART_voidSendString(u8 *Copy_u8String){
	u8 i=0;
	while(Copy_u8String[i]!='\0'){
    309a:	89 81       	ldd	r24, Y+1	; 0x01
    309c:	28 2f       	mov	r18, r24
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	8a 81       	ldd	r24, Y+2	; 0x02
    30a2:	9b 81       	ldd	r25, Y+3	; 0x03
    30a4:	fc 01       	movw	r30, r24
    30a6:	e2 0f       	add	r30, r18
    30a8:	f3 1f       	adc	r31, r19
    30aa:	80 81       	ld	r24, Z
    30ac:	88 23       	and	r24, r24
    30ae:	91 f6       	brne	.-92     	; 0x3054 <UART_voidSendString+0x14>
		UDR=Copy_u8String[i];
		while((GetBit(UCSRA,PIN6))==0);
		SetBit(UCSRA,PIN6);
		i++;
	}
}
    30b0:	0f 90       	pop	r0
    30b2:	0f 90       	pop	r0
    30b4:	0f 90       	pop	r0
    30b6:	cf 91       	pop	r28
    30b8:	df 91       	pop	r29
    30ba:	08 95       	ret

000030bc <UART_u8_ReciveString>:

u8 *UART_u8_ReciveString(){
    30bc:	0f 93       	push	r16
    30be:	1f 93       	push	r17
    30c0:	df 93       	push	r29
    30c2:	cf 93       	push	r28
    30c4:	0f 92       	push	r0
    30c6:	cd b7       	in	r28, 0x3d	; 61
    30c8:	de b7       	in	r29, 0x3e	; 62
	static u8 string[20];
	u8 i=0;
    30ca:	19 82       	std	Y+1, r1	; 0x01
	do{
		string[i]=UART_u8ReciveData();
    30cc:	89 81       	ldd	r24, Y+1	; 0x01
    30ce:	08 2f       	mov	r16, r24
    30d0:	10 e0       	ldi	r17, 0x00	; 0
    30d2:	0e 94 11 18 	call	0x3022	; 0x3022 <UART_u8ReciveData>
    30d6:	f8 01       	movw	r30, r16
    30d8:	ea 5e       	subi	r30, 0xEA	; 234
    30da:	fd 4f       	sbci	r31, 0xFD	; 253
    30dc:	80 83       	st	Z, r24
		i++;
    30de:	89 81       	ldd	r24, Y+1	; 0x01
    30e0:	8f 5f       	subi	r24, 0xFF	; 255
    30e2:	89 83       	std	Y+1, r24	; 0x01
	}while(string[i-1]!='!');
    30e4:	89 81       	ldd	r24, Y+1	; 0x01
    30e6:	88 2f       	mov	r24, r24
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	01 97       	sbiw	r24, 0x01	; 1
    30ec:	fc 01       	movw	r30, r24
    30ee:	ea 5e       	subi	r30, 0xEA	; 234
    30f0:	fd 4f       	sbci	r31, 0xFD	; 253
    30f2:	80 81       	ld	r24, Z
    30f4:	81 32       	cpi	r24, 0x21	; 33
    30f6:	51 f7       	brne	.-44     	; 0x30cc <UART_u8_ReciveString+0x10>
	string[i-1]='\0';
    30f8:	89 81       	ldd	r24, Y+1	; 0x01
    30fa:	88 2f       	mov	r24, r24
    30fc:	90 e0       	ldi	r25, 0x00	; 0
    30fe:	01 97       	sbiw	r24, 0x01	; 1
    3100:	fc 01       	movw	r30, r24
    3102:	ea 5e       	subi	r30, 0xEA	; 234
    3104:	fd 4f       	sbci	r31, 0xFD	; 253
    3106:	10 82       	st	Z, r1
	return string;
    3108:	86 e1       	ldi	r24, 0x16	; 22
    310a:	92 e0       	ldi	r25, 0x02	; 2
}
    310c:	0f 90       	pop	r0
    310e:	cf 91       	pop	r28
    3110:	df 91       	pop	r29
    3112:	1f 91       	pop	r17
    3114:	0f 91       	pop	r16
    3116:	08 95       	ret

00003118 <UART_voidSendNumber>:

void UART_voidSendNumber(u32 Copy_u32Number){
    3118:	0f 93       	push	r16
    311a:	1f 93       	push	r17
    311c:	df 93       	push	r29
    311e:	cf 93       	push	r28
    3120:	cd b7       	in	r28, 0x3d	; 61
    3122:	de b7       	in	r29, 0x3e	; 62
    3124:	60 97       	sbiw	r28, 0x10	; 16
    3126:	0f b6       	in	r0, 0x3f	; 63
    3128:	f8 94       	cli
    312a:	de bf       	out	0x3e, r29	; 62
    312c:	0f be       	out	0x3f, r0	; 63
    312e:	cd bf       	out	0x3d, r28	; 61
    3130:	6d 87       	std	Y+13, r22	; 0x0d
    3132:	7e 87       	std	Y+14, r23	; 0x0e
    3134:	8f 87       	std	Y+15, r24	; 0x0f
    3136:	98 8b       	std	Y+16, r25	; 0x10
	u8 arr[MAX_INT_DIGITS];
	u8 i=0;
    3138:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u32Number==0){
    313a:	8d 85       	ldd	r24, Y+13	; 0x0d
    313c:	9e 85       	ldd	r25, Y+14	; 0x0e
    313e:	af 85       	ldd	r26, Y+15	; 0x0f
    3140:	b8 89       	ldd	r27, Y+16	; 0x10
    3142:	00 97       	sbiw	r24, 0x00	; 0
    3144:	a1 05       	cpc	r26, r1
    3146:	b1 05       	cpc	r27, r1
    3148:	89 f5       	brne	.+98     	; 0x31ac <UART_voidSendNumber+0x94>
		UART_voidSendData(ZERO_ASCII);
    314a:	80 e3       	ldi	r24, 0x30	; 48
    314c:	0e 94 ef 17 	call	0x2fde	; 0x2fde <UART_voidSendData>
    3150:	4d c0       	rjmp	.+154    	; 0x31ec <UART_voidSendNumber+0xd4>
	}
	else{
		while(Copy_u32Number>0){
			arr[i]=Copy_u32Number%10;
    3152:	8a 81       	ldd	r24, Y+2	; 0x02
    3154:	08 2f       	mov	r16, r24
    3156:	10 e0       	ldi	r17, 0x00	; 0
    3158:	8d 85       	ldd	r24, Y+13	; 0x0d
    315a:	9e 85       	ldd	r25, Y+14	; 0x0e
    315c:	af 85       	ldd	r26, Y+15	; 0x0f
    315e:	b8 89       	ldd	r27, Y+16	; 0x10
    3160:	2a e0       	ldi	r18, 0x0A	; 10
    3162:	30 e0       	ldi	r19, 0x00	; 0
    3164:	40 e0       	ldi	r20, 0x00	; 0
    3166:	50 e0       	ldi	r21, 0x00	; 0
    3168:	bc 01       	movw	r22, r24
    316a:	cd 01       	movw	r24, r26
    316c:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__udivmodsi4>
    3170:	dc 01       	movw	r26, r24
    3172:	cb 01       	movw	r24, r22
    3174:	28 2f       	mov	r18, r24
    3176:	ce 01       	movw	r24, r28
    3178:	03 96       	adiw	r24, 0x03	; 3
    317a:	fc 01       	movw	r30, r24
    317c:	e0 0f       	add	r30, r16
    317e:	f1 1f       	adc	r31, r17
    3180:	20 83       	st	Z, r18
			Copy_u32Number/=10;
    3182:	8d 85       	ldd	r24, Y+13	; 0x0d
    3184:	9e 85       	ldd	r25, Y+14	; 0x0e
    3186:	af 85       	ldd	r26, Y+15	; 0x0f
    3188:	b8 89       	ldd	r27, Y+16	; 0x10
    318a:	2a e0       	ldi	r18, 0x0A	; 10
    318c:	30 e0       	ldi	r19, 0x00	; 0
    318e:	40 e0       	ldi	r20, 0x00	; 0
    3190:	50 e0       	ldi	r21, 0x00	; 0
    3192:	bc 01       	movw	r22, r24
    3194:	cd 01       	movw	r24, r26
    3196:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__udivmodsi4>
    319a:	da 01       	movw	r26, r20
    319c:	c9 01       	movw	r24, r18
    319e:	8d 87       	std	Y+13, r24	; 0x0d
    31a0:	9e 87       	std	Y+14, r25	; 0x0e
    31a2:	af 87       	std	Y+15, r26	; 0x0f
    31a4:	b8 8b       	std	Y+16, r27	; 0x10
			i++;
    31a6:	8a 81       	ldd	r24, Y+2	; 0x02
    31a8:	8f 5f       	subi	r24, 0xFF	; 255
    31aa:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
	if(Copy_u32Number==0){
		UART_voidSendData(ZERO_ASCII);
	}
	else{
		while(Copy_u32Number>0){
    31ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    31ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    31b0:	af 85       	ldd	r26, Y+15	; 0x0f
    31b2:	b8 89       	ldd	r27, Y+16	; 0x10
    31b4:	00 97       	sbiw	r24, 0x00	; 0
    31b6:	a1 05       	cpc	r26, r1
    31b8:	b1 05       	cpc	r27, r1
    31ba:	59 f6       	brne	.-106    	; 0x3152 <UART_voidSendNumber+0x3a>
			arr[i]=Copy_u32Number%10;
			Copy_u32Number/=10;
			i++;
		}
		for(u8 j=i;j>0;j--){
    31bc:	8a 81       	ldd	r24, Y+2	; 0x02
    31be:	89 83       	std	Y+1, r24	; 0x01
    31c0:	12 c0       	rjmp	.+36     	; 0x31e6 <UART_voidSendNumber+0xce>
			UART_voidSendData(arr[j-1]+ZERO_ASCII);
    31c2:	89 81       	ldd	r24, Y+1	; 0x01
    31c4:	88 2f       	mov	r24, r24
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	9c 01       	movw	r18, r24
    31ca:	21 50       	subi	r18, 0x01	; 1
    31cc:	30 40       	sbci	r19, 0x00	; 0
    31ce:	ce 01       	movw	r24, r28
    31d0:	03 96       	adiw	r24, 0x03	; 3
    31d2:	fc 01       	movw	r30, r24
    31d4:	e2 0f       	add	r30, r18
    31d6:	f3 1f       	adc	r31, r19
    31d8:	80 81       	ld	r24, Z
    31da:	80 5d       	subi	r24, 0xD0	; 208
    31dc:	0e 94 ef 17 	call	0x2fde	; 0x2fde <UART_voidSendData>
		while(Copy_u32Number>0){
			arr[i]=Copy_u32Number%10;
			Copy_u32Number/=10;
			i++;
		}
		for(u8 j=i;j>0;j--){
    31e0:	89 81       	ldd	r24, Y+1	; 0x01
    31e2:	81 50       	subi	r24, 0x01	; 1
    31e4:	89 83       	std	Y+1, r24	; 0x01
    31e6:	89 81       	ldd	r24, Y+1	; 0x01
    31e8:	88 23       	and	r24, r24
    31ea:	59 f7       	brne	.-42     	; 0x31c2 <UART_voidSendNumber+0xaa>
			UART_voidSendData(arr[j-1]+ZERO_ASCII);
		}		
	}
}
    31ec:	60 96       	adiw	r28, 0x10	; 16
    31ee:	0f b6       	in	r0, 0x3f	; 63
    31f0:	f8 94       	cli
    31f2:	de bf       	out	0x3e, r29	; 62
    31f4:	0f be       	out	0x3f, r0	; 63
    31f6:	cd bf       	out	0x3d, r28	; 61
    31f8:	cf 91       	pop	r28
    31fa:	df 91       	pop	r29
    31fc:	1f 91       	pop	r17
    31fe:	0f 91       	pop	r16
    3200:	08 95       	ret

00003202 <main>:
void DISPLAY_DATA(u16 temp,u16 light);

u8 password[20]="123";
u8 password_size=3;

int main(){
    3202:	df 93       	push	r29
    3204:	cf 93       	push	r28
    3206:	00 d0       	rcall	.+0      	; 0x3208 <main+0x6>
    3208:	00 d0       	rcall	.+0      	; 0x320a <main+0x8>
    320a:	0f 92       	push	r0
    320c:	cd b7       	in	r28, 0x3d	; 61
    320e:	de b7       	in	r29, 0x3e	; 62

	u8 UART_DATA;
	u16 temp,light;

	UART_voidInitialize();
    3210:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <UART_voidInitialize>
	TIMER2_voidInitialize();
    3214:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <TIMER2_voidInitialize>
	LCD_voidIntialize();
    3218:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <LCD_voidIntialize>

	DIO_voidSetAllPortOutput(PORTB);
    321c:	81 e0       	ldi	r24, 0x01	; 1
    321e:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_voidSetAllPortOutput>
	DIO_voidSetPinDirection(PORTD,PIN5,PIN_OUTPUT);
    3222:	83 e0       	ldi	r24, 0x03	; 3
    3224:	65 e0       	ldi	r22, 0x05	; 5
    3226:	41 e0       	ldi	r20, 0x01	; 1
    3228:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTD,PIN6,PIN_OUTPUT);
    322c:	83 e0       	ldi	r24, 0x03	; 3
    322e:	66 e0       	ldi	r22, 0x06	; 6
    3230:	41 e0       	ldi	r20, 0x01	; 1
    3232:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTD,PIN7,PIN_OUTPUT);
    3236:	83 e0       	ldi	r24, 0x03	; 3
    3238:	67 e0       	ldi	r22, 0x07	; 7
    323a:	41 e0       	ldi	r20, 0x01	; 1
    323c:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTA,PIN0,PIN_INPUT);
    3240:	80 e0       	ldi	r24, 0x00	; 0
    3242:	60 e0       	ldi	r22, 0x00	; 0
    3244:	40 e0       	ldi	r20, 0x00	; 0
    3246:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTA,PIN1,PIN_INPUT);
    324a:	80 e0       	ldi	r24, 0x00	; 0
    324c:	61 e0       	ldi	r22, 0x01	; 1
    324e:	40 e0       	ldi	r20, 0x00	; 0
    3250:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTA,PIN2,PIN_OUTPUT);
    3254:	80 e0       	ldi	r24, 0x00	; 0
    3256:	62 e0       	ldi	r22, 0x02	; 2
    3258:	41 e0       	ldi	r20, 0x01	; 1
    325a:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORTA,PIN2,PIN_LOW);
    325e:	80 e0       	ldi	r24, 0x00	; 0
    3260:	62 e0       	ldi	r22, 0x02	; 2
    3262:	40 e0       	ldi	r20, 0x00	; 0
    3264:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_voidSetPinValue>

	DOOR_LOCK();
    3268:	0e 94 57 1a 	call	0x34ae	; 0x34ae <DOOR_LOCK>

	while(1){

		UART_DATA=UART_u8ReciveData();
    326c:	0e 94 11 18 	call	0x3022	; 0x3022 <UART_u8ReciveData>
    3270:	8d 83       	std	Y+5, r24	; 0x05
		LEDs_AND_FANs(UART_DATA);
    3272:	8d 81       	ldd	r24, Y+5	; 0x05
    3274:	0e 94 54 19 	call	0x32a8	; 0x32a8 <LEDs_AND_FANs>

		temp=GET_TEMP();
    3278:	0e 94 a1 1c 	call	0x3942	; 0x3942 <GET_TEMP>
    327c:	9c 83       	std	Y+4, r25	; 0x04
    327e:	8b 83       	std	Y+3, r24	; 0x03
		light=GET_LIGHT();
    3280:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <GET_LIGHT>
    3284:	9a 83       	std	Y+2, r25	; 0x02
    3286:	89 83       	std	Y+1, r24	; 0x01

		DISPLAY_DATA(temp,light);
    3288:	8b 81       	ldd	r24, Y+3	; 0x03
    328a:	9c 81       	ldd	r25, Y+4	; 0x04
    328c:	29 81       	ldd	r18, Y+1	; 0x01
    328e:	3a 81       	ldd	r19, Y+2	; 0x02
    3290:	b9 01       	movw	r22, r18
    3292:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <DISPLAY_DATA>
		FANs_SPEED(temp);
    3296:	8b 81       	ldd	r24, Y+3	; 0x03
    3298:	9c 81       	ldd	r25, Y+4	; 0x04
    329a:	0e 94 ed 19 	call	0x33da	; 0x33da <FANs_SPEED>
		STERRT_LAMP(light);
    329e:	89 81       	ldd	r24, Y+1	; 0x01
    32a0:	9a 81       	ldd	r25, Y+2	; 0x02
    32a2:	0e 94 3a 1a 	call	0x3474	; 0x3474 <STERRT_LAMP>
    32a6:	e2 cf       	rjmp	.-60     	; 0x326c <main+0x6a>

000032a8 <LEDs_AND_FANs>:
	}

	return 0;
}

void LEDs_AND_FANs(u8 UART_DATA){
    32a8:	df 93       	push	r29
    32aa:	cf 93       	push	r28
    32ac:	0f 92       	push	r0
    32ae:	cd b7       	in	r28, 0x3d	; 61
    32b0:	de b7       	in	r29, 0x3e	; 62
    32b2:	89 83       	std	Y+1, r24	; 0x01

	if(UART_DATA=='a'){
    32b4:	89 81       	ldd	r24, Y+1	; 0x01
    32b6:	81 36       	cpi	r24, 0x61	; 97
    32b8:	31 f4       	brne	.+12     	; 0x32c6 <LEDs_AND_FANs+0x1e>
		DIO_voidSetPinValue(PORTB,PIN0,PIN_HIGH);
    32ba:	81 e0       	ldi	r24, 0x01	; 1
    32bc:	60 e0       	ldi	r22, 0x00	; 0
    32be:	41 e0       	ldi	r20, 0x01	; 1
    32c0:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_voidSetPinValue>
    32c4:	86 c0       	rjmp	.+268    	; 0x33d2 <LEDs_AND_FANs+0x12a>
	}
	else if(UART_DATA=='b'){
    32c6:	89 81       	ldd	r24, Y+1	; 0x01
    32c8:	82 36       	cpi	r24, 0x62	; 98
    32ca:	31 f4       	brne	.+12     	; 0x32d8 <LEDs_AND_FANs+0x30>
		DIO_voidSetPinValue(PORTB,PIN0,PIN_LOW);
    32cc:	81 e0       	ldi	r24, 0x01	; 1
    32ce:	60 e0       	ldi	r22, 0x00	; 0
    32d0:	40 e0       	ldi	r20, 0x00	; 0
    32d2:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_voidSetPinValue>
    32d6:	7d c0       	rjmp	.+250    	; 0x33d2 <LEDs_AND_FANs+0x12a>
	}
	else if(UART_DATA=='c'){
    32d8:	89 81       	ldd	r24, Y+1	; 0x01
    32da:	83 36       	cpi	r24, 0x63	; 99
    32dc:	31 f4       	brne	.+12     	; 0x32ea <LEDs_AND_FANs+0x42>
		DIO_voidSetPinValue(PORTB,PIN1,PIN_HIGH);
    32de:	81 e0       	ldi	r24, 0x01	; 1
    32e0:	61 e0       	ldi	r22, 0x01	; 1
    32e2:	41 e0       	ldi	r20, 0x01	; 1
    32e4:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_voidSetPinValue>
    32e8:	74 c0       	rjmp	.+232    	; 0x33d2 <LEDs_AND_FANs+0x12a>
	}
	else if(UART_DATA=='d'){
    32ea:	89 81       	ldd	r24, Y+1	; 0x01
    32ec:	84 36       	cpi	r24, 0x64	; 100
    32ee:	31 f4       	brne	.+12     	; 0x32fc <LEDs_AND_FANs+0x54>
		DIO_voidSetPinValue(PORTB,PIN1,PIN_LOW);
    32f0:	81 e0       	ldi	r24, 0x01	; 1
    32f2:	61 e0       	ldi	r22, 0x01	; 1
    32f4:	40 e0       	ldi	r20, 0x00	; 0
    32f6:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_voidSetPinValue>
    32fa:	6b c0       	rjmp	.+214    	; 0x33d2 <LEDs_AND_FANs+0x12a>
	}
	else if(UART_DATA=='e'){
    32fc:	89 81       	ldd	r24, Y+1	; 0x01
    32fe:	85 36       	cpi	r24, 0x65	; 101
    3300:	31 f4       	brne	.+12     	; 0x330e <LEDs_AND_FANs+0x66>
		DIO_voidSetPinValue(PORTB,PIN2,PIN_HIGH);
    3302:	81 e0       	ldi	r24, 0x01	; 1
    3304:	62 e0       	ldi	r22, 0x02	; 2
    3306:	41 e0       	ldi	r20, 0x01	; 1
    3308:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_voidSetPinValue>
    330c:	62 c0       	rjmp	.+196    	; 0x33d2 <LEDs_AND_FANs+0x12a>
	}
	else if(UART_DATA=='f'){
    330e:	89 81       	ldd	r24, Y+1	; 0x01
    3310:	86 36       	cpi	r24, 0x66	; 102
    3312:	31 f4       	brne	.+12     	; 0x3320 <LEDs_AND_FANs+0x78>
		DIO_voidSetPinValue(PORTB,PIN2,PIN_LOW);
    3314:	81 e0       	ldi	r24, 0x01	; 1
    3316:	62 e0       	ldi	r22, 0x02	; 2
    3318:	40 e0       	ldi	r20, 0x00	; 0
    331a:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_voidSetPinValue>
    331e:	59 c0       	rjmp	.+178    	; 0x33d2 <LEDs_AND_FANs+0x12a>
	}
	else if(UART_DATA=='g'){
    3320:	89 81       	ldd	r24, Y+1	; 0x01
    3322:	87 36       	cpi	r24, 0x67	; 103
    3324:	31 f4       	brne	.+12     	; 0x3332 <LEDs_AND_FANs+0x8a>
		DIO_voidSetPinValue(PORTB,PIN3,PIN_HIGH);
    3326:	81 e0       	ldi	r24, 0x01	; 1
    3328:	63 e0       	ldi	r22, 0x03	; 3
    332a:	41 e0       	ldi	r20, 0x01	; 1
    332c:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_voidSetPinValue>
    3330:	50 c0       	rjmp	.+160    	; 0x33d2 <LEDs_AND_FANs+0x12a>
	}
	else if(UART_DATA=='h'){
    3332:	89 81       	ldd	r24, Y+1	; 0x01
    3334:	88 36       	cpi	r24, 0x68	; 104
    3336:	31 f4       	brne	.+12     	; 0x3344 <LEDs_AND_FANs+0x9c>
		DIO_voidSetPinValue(PORTB,PIN3,PIN_LOW);
    3338:	81 e0       	ldi	r24, 0x01	; 1
    333a:	63 e0       	ldi	r22, 0x03	; 3
    333c:	40 e0       	ldi	r20, 0x00	; 0
    333e:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_voidSetPinValue>
    3342:	47 c0       	rjmp	.+142    	; 0x33d2 <LEDs_AND_FANs+0x12a>
	}
	else if(UART_DATA=='i'){
    3344:	89 81       	ldd	r24, Y+1	; 0x01
    3346:	89 36       	cpi	r24, 0x69	; 105
    3348:	31 f4       	brne	.+12     	; 0x3356 <LEDs_AND_FANs+0xae>
		DIO_voidSetPinValue(PORTB,PIN4,PIN_HIGH);
    334a:	81 e0       	ldi	r24, 0x01	; 1
    334c:	64 e0       	ldi	r22, 0x04	; 4
    334e:	41 e0       	ldi	r20, 0x01	; 1
    3350:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_voidSetPinValue>
    3354:	3e c0       	rjmp	.+124    	; 0x33d2 <LEDs_AND_FANs+0x12a>
	}
	else if(UART_DATA=='j'){
    3356:	89 81       	ldd	r24, Y+1	; 0x01
    3358:	8a 36       	cpi	r24, 0x6A	; 106
    335a:	31 f4       	brne	.+12     	; 0x3368 <LEDs_AND_FANs+0xc0>
		DIO_voidSetPinValue(PORTB,PIN4,PIN_LOW);
    335c:	81 e0       	ldi	r24, 0x01	; 1
    335e:	64 e0       	ldi	r22, 0x04	; 4
    3360:	40 e0       	ldi	r20, 0x00	; 0
    3362:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_voidSetPinValue>
    3366:	35 c0       	rjmp	.+106    	; 0x33d2 <LEDs_AND_FANs+0x12a>
	}
	else if(UART_DATA=='k'){
    3368:	89 81       	ldd	r24, Y+1	; 0x01
    336a:	8b 36       	cpi	r24, 0x6B	; 107
    336c:	31 f4       	brne	.+12     	; 0x337a <LEDs_AND_FANs+0xd2>
		DIO_voidSetPinValue(PORTB,PIN5,PIN_HIGH);
    336e:	81 e0       	ldi	r24, 0x01	; 1
    3370:	65 e0       	ldi	r22, 0x05	; 5
    3372:	41 e0       	ldi	r20, 0x01	; 1
    3374:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_voidSetPinValue>
    3378:	2c c0       	rjmp	.+88     	; 0x33d2 <LEDs_AND_FANs+0x12a>
	}
	else if(UART_DATA=='l'){
    337a:	89 81       	ldd	r24, Y+1	; 0x01
    337c:	8c 36       	cpi	r24, 0x6C	; 108
    337e:	31 f4       	brne	.+12     	; 0x338c <LEDs_AND_FANs+0xe4>
		DIO_voidSetPinValue(PORTB,PIN5,PIN_LOW);
    3380:	81 e0       	ldi	r24, 0x01	; 1
    3382:	65 e0       	ldi	r22, 0x05	; 5
    3384:	40 e0       	ldi	r20, 0x00	; 0
    3386:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_voidSetPinValue>
    338a:	23 c0       	rjmp	.+70     	; 0x33d2 <LEDs_AND_FANs+0x12a>
	}
	else if(UART_DATA=='m'){
    338c:	89 81       	ldd	r24, Y+1	; 0x01
    338e:	8d 36       	cpi	r24, 0x6D	; 109
    3390:	31 f4       	brne	.+12     	; 0x339e <LEDs_AND_FANs+0xf6>
		DIO_voidSetPinValue(PORTB,PIN6,PIN_HIGH);
    3392:	81 e0       	ldi	r24, 0x01	; 1
    3394:	66 e0       	ldi	r22, 0x06	; 6
    3396:	41 e0       	ldi	r20, 0x01	; 1
    3398:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_voidSetPinValue>
    339c:	1a c0       	rjmp	.+52     	; 0x33d2 <LEDs_AND_FANs+0x12a>
	}
	else if(UART_DATA=='n'){
    339e:	89 81       	ldd	r24, Y+1	; 0x01
    33a0:	8e 36       	cpi	r24, 0x6E	; 110
    33a2:	31 f4       	brne	.+12     	; 0x33b0 <LEDs_AND_FANs+0x108>
		DIO_voidSetPinValue(PORTB,PIN6,PIN_LOW);
    33a4:	81 e0       	ldi	r24, 0x01	; 1
    33a6:	66 e0       	ldi	r22, 0x06	; 6
    33a8:	40 e0       	ldi	r20, 0x00	; 0
    33aa:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_voidSetPinValue>
    33ae:	11 c0       	rjmp	.+34     	; 0x33d2 <LEDs_AND_FANs+0x12a>
	}
	else if(UART_DATA=='o'){
    33b0:	89 81       	ldd	r24, Y+1	; 0x01
    33b2:	8f 36       	cpi	r24, 0x6F	; 111
    33b4:	31 f4       	brne	.+12     	; 0x33c2 <LEDs_AND_FANs+0x11a>
		DIO_voidSetPinValue(PORTB,PIN7,PIN_HIGH);
    33b6:	81 e0       	ldi	r24, 0x01	; 1
    33b8:	67 e0       	ldi	r22, 0x07	; 7
    33ba:	41 e0       	ldi	r20, 0x01	; 1
    33bc:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_voidSetPinValue>
    33c0:	08 c0       	rjmp	.+16     	; 0x33d2 <LEDs_AND_FANs+0x12a>
	}
	else if(UART_DATA=='p'){
    33c2:	89 81       	ldd	r24, Y+1	; 0x01
    33c4:	80 37       	cpi	r24, 0x70	; 112
    33c6:	29 f4       	brne	.+10     	; 0x33d2 <LEDs_AND_FANs+0x12a>
		DIO_voidSetPinValue(PORTB,PIN7,PIN_LOW);
    33c8:	81 e0       	ldi	r24, 0x01	; 1
    33ca:	67 e0       	ldi	r22, 0x07	; 7
    33cc:	40 e0       	ldi	r20, 0x00	; 0
    33ce:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_voidSetPinValue>
	}
}
    33d2:	0f 90       	pop	r0
    33d4:	cf 91       	pop	r28
    33d6:	df 91       	pop	r29
    33d8:	08 95       	ret

000033da <FANs_SPEED>:

void FANs_SPEED(u16 temp){
    33da:	df 93       	push	r29
    33dc:	cf 93       	push	r28
    33de:	00 d0       	rcall	.+0      	; 0x33e0 <FANs_SPEED+0x6>
    33e0:	0f 92       	push	r0
    33e2:	cd b7       	in	r28, 0x3d	; 61
    33e4:	de b7       	in	r29, 0x3e	; 62
    33e6:	9b 83       	std	Y+3, r25	; 0x03
    33e8:	8a 83       	std	Y+2, r24	; 0x02

	u8 OCR;

	if(temp<=10){
    33ea:	8a 81       	ldd	r24, Y+2	; 0x02
    33ec:	9b 81       	ldd	r25, Y+3	; 0x03
    33ee:	8b 30       	cpi	r24, 0x0B	; 11
    33f0:	91 05       	cpc	r25, r1
    33f2:	b0 f4       	brcc	.+44     	; 0x3420 <FANs_SPEED+0x46>
		DIO_voidSetPinValue(PORTB,PIN4,PIN_LOW);
    33f4:	81 e0       	ldi	r24, 0x01	; 1
    33f6:	64 e0       	ldi	r22, 0x04	; 4
    33f8:	40 e0       	ldi	r20, 0x00	; 0
    33fa:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN5,PIN_LOW);
    33fe:	81 e0       	ldi	r24, 0x01	; 1
    3400:	65 e0       	ldi	r22, 0x05	; 5
    3402:	40 e0       	ldi	r20, 0x00	; 0
    3404:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN6,PIN_LOW);
    3408:	81 e0       	ldi	r24, 0x01	; 1
    340a:	66 e0       	ldi	r22, 0x06	; 6
    340c:	40 e0       	ldi	r20, 0x00	; 0
    340e:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB,PIN7,PIN_LOW);
    3412:	81 e0       	ldi	r24, 0x01	; 1
    3414:	67 e0       	ldi	r22, 0x07	; 7
    3416:	40 e0       	ldi	r20, 0x00	; 0
    3418:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_voidSetPinValue>
		OCR=0;
    341c:	19 82       	std	Y+1, r1	; 0x01
    341e:	21 c0       	rjmp	.+66     	; 0x3462 <FANs_SPEED+0x88>
	}
	else if(temp>10 && temp<=20){
    3420:	8a 81       	ldd	r24, Y+2	; 0x02
    3422:	9b 81       	ldd	r25, Y+3	; 0x03
    3424:	8b 30       	cpi	r24, 0x0B	; 11
    3426:	91 05       	cpc	r25, r1
    3428:	40 f0       	brcs	.+16     	; 0x343a <FANs_SPEED+0x60>
    342a:	8a 81       	ldd	r24, Y+2	; 0x02
    342c:	9b 81       	ldd	r25, Y+3	; 0x03
    342e:	85 31       	cpi	r24, 0x15	; 21
    3430:	91 05       	cpc	r25, r1
    3432:	18 f4       	brcc	.+6      	; 0x343a <FANs_SPEED+0x60>
		OCR=25;
    3434:	89 e1       	ldi	r24, 0x19	; 25
    3436:	89 83       	std	Y+1, r24	; 0x01
    3438:	14 c0       	rjmp	.+40     	; 0x3462 <FANs_SPEED+0x88>
	}
	else if(temp>20 && temp<=35){
    343a:	8a 81       	ldd	r24, Y+2	; 0x02
    343c:	9b 81       	ldd	r25, Y+3	; 0x03
    343e:	85 31       	cpi	r24, 0x15	; 21
    3440:	91 05       	cpc	r25, r1
    3442:	40 f0       	brcs	.+16     	; 0x3454 <FANs_SPEED+0x7a>
    3444:	8a 81       	ldd	r24, Y+2	; 0x02
    3446:	9b 81       	ldd	r25, Y+3	; 0x03
    3448:	84 32       	cpi	r24, 0x24	; 36
    344a:	91 05       	cpc	r25, r1
    344c:	18 f4       	brcc	.+6      	; 0x3454 <FANs_SPEED+0x7a>
		OCR=180;
    344e:	84 eb       	ldi	r24, 0xB4	; 180
    3450:	89 83       	std	Y+1, r24	; 0x01
    3452:	07 c0       	rjmp	.+14     	; 0x3462 <FANs_SPEED+0x88>
	}
	else if(temp>35){
    3454:	8a 81       	ldd	r24, Y+2	; 0x02
    3456:	9b 81       	ldd	r25, Y+3	; 0x03
    3458:	84 32       	cpi	r24, 0x24	; 36
    345a:	91 05       	cpc	r25, r1
    345c:	10 f0       	brcs	.+4      	; 0x3462 <FANs_SPEED+0x88>
		OCR=255;
    345e:	8f ef       	ldi	r24, 0xFF	; 255
    3460:	89 83       	std	Y+1, r24	; 0x01
	}

	TIMER2_voidSetOCR2(OCR);
    3462:	89 81       	ldd	r24, Y+1	; 0x01
    3464:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <TIMER2_voidSetOCR2>
}
    3468:	0f 90       	pop	r0
    346a:	0f 90       	pop	r0
    346c:	0f 90       	pop	r0
    346e:	cf 91       	pop	r28
    3470:	df 91       	pop	r29
    3472:	08 95       	ret

00003474 <STERRT_LAMP>:

void STERRT_LAMP(u16 light){
    3474:	df 93       	push	r29
    3476:	cf 93       	push	r28
    3478:	00 d0       	rcall	.+0      	; 0x347a <STERRT_LAMP+0x6>
    347a:	cd b7       	in	r28, 0x3d	; 61
    347c:	de b7       	in	r29, 0x3e	; 62
    347e:	9a 83       	std	Y+2, r25	; 0x02
    3480:	89 83       	std	Y+1, r24	; 0x01

	if(light<1000){
    3482:	89 81       	ldd	r24, Y+1	; 0x01
    3484:	9a 81       	ldd	r25, Y+2	; 0x02
    3486:	23 e0       	ldi	r18, 0x03	; 3
    3488:	88 3e       	cpi	r24, 0xE8	; 232
    348a:	92 07       	cpc	r25, r18
    348c:	30 f4       	brcc	.+12     	; 0x349a <STERRT_LAMP+0x26>
		DIO_voidSetPinValue(PORTD,PIN6,PIN_HIGH);
    348e:	83 e0       	ldi	r24, 0x03	; 3
    3490:	66 e0       	ldi	r22, 0x06	; 6
    3492:	41 e0       	ldi	r20, 0x01	; 1
    3494:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_voidSetPinValue>
    3498:	05 c0       	rjmp	.+10     	; 0x34a4 <STERRT_LAMP+0x30>
	}
	else{
		DIO_voidSetPinValue(PORTD,PIN6,PIN_LOW);
    349a:	83 e0       	ldi	r24, 0x03	; 3
    349c:	66 e0       	ldi	r22, 0x06	; 6
    349e:	40 e0       	ldi	r20, 0x00	; 0
    34a0:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_voidSetPinValue>
	}
}
    34a4:	0f 90       	pop	r0
    34a6:	0f 90       	pop	r0
    34a8:	cf 91       	pop	r28
    34aa:	df 91       	pop	r29
    34ac:	08 95       	ret

000034ae <DOOR_LOCK>:

void DOOR_LOCK(){
    34ae:	df 93       	push	r29
    34b0:	cf 93       	push	r28
    34b2:	cd b7       	in	r28, 0x3d	; 61
    34b4:	de b7       	in	r29, 0x3e	; 62
    34b6:	c2 54       	subi	r28, 0x42	; 66
    34b8:	d0 40       	sbci	r29, 0x00	; 0
    34ba:	0f b6       	in	r0, 0x3f	; 63
    34bc:	f8 94       	cli
    34be:	de bf       	out	0x3e, r29	; 62
    34c0:	0f be       	out	0x3f, r0	; 63
    34c2:	cd bf       	out	0x3d, r28	; 61

	u8 input[20];
	u8 i=0,j,UART_DATA,count=0;
    34c4:	1e a6       	std	Y+46, r1	; 0x2e
    34c6:	1b a6       	std	Y+43, r1	; 0x2b

	LCD_voidWriteString("ENTER PASSWORD!");
    34c8:	80 e6       	ldi	r24, 0x60	; 96
    34ca:	90 e0       	ldi	r25, 0x00	; 0
    34cc:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_voidWriteString>
	LCD_voidGoToXY(1,0);
    34d0:	81 e0       	ldi	r24, 0x01	; 1
    34d2:	60 e0       	ldi	r22, 0x00	; 0
    34d4:	0e 94 67 10 	call	0x20ce	; 0x20ce <LCD_voidGoToXY>

	while(1){
		STERRT_LAMP(GET_LIGHT());
    34d8:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <GET_LIGHT>
    34dc:	0e 94 3a 1a 	call	0x3474	; 0x3474 <STERRT_LAMP>
		UART_DATA=UART_u8ReciveData();
    34e0:	0e 94 11 18 	call	0x3022	; 0x3022 <UART_u8ReciveData>
    34e4:	8c a7       	std	Y+44, r24	; 0x2c
		if(UART_DATA=='='){
    34e6:	8c a5       	ldd	r24, Y+44	; 0x2c
    34e8:	8d 33       	cpi	r24, 0x3D	; 61
    34ea:	09 f0       	breq	.+2      	; 0x34ee <DOOR_LOCK+0x40>
    34ec:	ec c1       	rjmp	.+984    	; 0x38c6 <DOOR_LOCK+0x418>
			for(j=0;j<i;j++){
    34ee:	1d a6       	std	Y+45, r1	; 0x2d
    34f0:	b1 c0       	rjmp	.+354    	; 0x3654 <DOOR_LOCK+0x1a6>
				if((input[j]!=password[j]) || (i!=password_size)){
    34f2:	8d a5       	ldd	r24, Y+45	; 0x2d
    34f4:	28 2f       	mov	r18, r24
    34f6:	30 e0       	ldi	r19, 0x00	; 0
    34f8:	ce 01       	movw	r24, r28
    34fa:	8f 96       	adiw	r24, 0x2f	; 47
    34fc:	fc 01       	movw	r30, r24
    34fe:	e2 0f       	add	r30, r18
    3500:	f3 1f       	adc	r31, r19
    3502:	20 81       	ld	r18, Z
    3504:	8d a5       	ldd	r24, Y+45	; 0x2d
    3506:	88 2f       	mov	r24, r24
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	fc 01       	movw	r30, r24
    350c:	ef 51       	subi	r30, 0x1F	; 31
    350e:	fe 4f       	sbci	r31, 0xFE	; 254
    3510:	80 81       	ld	r24, Z
    3512:	28 17       	cp	r18, r24
    3514:	31 f4       	brne	.+12     	; 0x3522 <DOOR_LOCK+0x74>
    3516:	90 91 f5 01 	lds	r25, 0x01F5
    351a:	8e a5       	ldd	r24, Y+46	; 0x2e
    351c:	89 17       	cp	r24, r25
    351e:	09 f4       	brne	.+2      	; 0x3522 <DOOR_LOCK+0x74>
    3520:	96 c0       	rjmp	.+300    	; 0x364e <DOOR_LOCK+0x1a0>
					LCD_voidClearDisplay();
    3522:	0e 94 67 11 	call	0x22ce	; 0x22ce <LCD_voidClearDisplay>
					LCD_voidGoToXY(0,0);
    3526:	80 e0       	ldi	r24, 0x00	; 0
    3528:	60 e0       	ldi	r22, 0x00	; 0
    352a:	0e 94 67 10 	call	0x20ce	; 0x20ce <LCD_voidGoToXY>
					LCD_voidWriteString("WRONG PASSWORD..");
    352e:	80 e7       	ldi	r24, 0x70	; 112
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_voidWriteString>
    3536:	80 e0       	ldi	r24, 0x00	; 0
    3538:	90 e0       	ldi	r25, 0x00	; 0
    353a:	a8 ec       	ldi	r26, 0xC8	; 200
    353c:	b2 e4       	ldi	r27, 0x42	; 66
    353e:	8f a3       	std	Y+39, r24	; 0x27
    3540:	98 a7       	std	Y+40, r25	; 0x28
    3542:	a9 a7       	std	Y+41, r26	; 0x29
    3544:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3546:	6f a1       	ldd	r22, Y+39	; 0x27
    3548:	78 a5       	ldd	r23, Y+40	; 0x28
    354a:	89 a5       	ldd	r24, Y+41	; 0x29
    354c:	9a a5       	ldd	r25, Y+42	; 0x2a
    354e:	20 e0       	ldi	r18, 0x00	; 0
    3550:	30 e0       	ldi	r19, 0x00	; 0
    3552:	4a ef       	ldi	r20, 0xFA	; 250
    3554:	54 e4       	ldi	r21, 0x44	; 68
    3556:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    355a:	dc 01       	movw	r26, r24
    355c:	cb 01       	movw	r24, r22
    355e:	8b a3       	std	Y+35, r24	; 0x23
    3560:	9c a3       	std	Y+36, r25	; 0x24
    3562:	ad a3       	std	Y+37, r26	; 0x25
    3564:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3566:	6b a1       	ldd	r22, Y+35	; 0x23
    3568:	7c a1       	ldd	r23, Y+36	; 0x24
    356a:	8d a1       	ldd	r24, Y+37	; 0x25
    356c:	9e a1       	ldd	r25, Y+38	; 0x26
    356e:	20 e0       	ldi	r18, 0x00	; 0
    3570:	30 e0       	ldi	r19, 0x00	; 0
    3572:	40 e8       	ldi	r20, 0x80	; 128
    3574:	5f e3       	ldi	r21, 0x3F	; 63
    3576:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    357a:	88 23       	and	r24, r24
    357c:	2c f4       	brge	.+10     	; 0x3588 <DOOR_LOCK+0xda>
		__ticks = 1;
    357e:	81 e0       	ldi	r24, 0x01	; 1
    3580:	90 e0       	ldi	r25, 0x00	; 0
    3582:	9a a3       	std	Y+34, r25	; 0x22
    3584:	89 a3       	std	Y+33, r24	; 0x21
    3586:	3f c0       	rjmp	.+126    	; 0x3606 <DOOR_LOCK+0x158>
	else if (__tmp > 65535)
    3588:	6b a1       	ldd	r22, Y+35	; 0x23
    358a:	7c a1       	ldd	r23, Y+36	; 0x24
    358c:	8d a1       	ldd	r24, Y+37	; 0x25
    358e:	9e a1       	ldd	r25, Y+38	; 0x26
    3590:	20 e0       	ldi	r18, 0x00	; 0
    3592:	3f ef       	ldi	r19, 0xFF	; 255
    3594:	4f e7       	ldi	r20, 0x7F	; 127
    3596:	57 e4       	ldi	r21, 0x47	; 71
    3598:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    359c:	18 16       	cp	r1, r24
    359e:	4c f5       	brge	.+82     	; 0x35f2 <DOOR_LOCK+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35a0:	6f a1       	ldd	r22, Y+39	; 0x27
    35a2:	78 a5       	ldd	r23, Y+40	; 0x28
    35a4:	89 a5       	ldd	r24, Y+41	; 0x29
    35a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    35a8:	20 e0       	ldi	r18, 0x00	; 0
    35aa:	30 e0       	ldi	r19, 0x00	; 0
    35ac:	40 e2       	ldi	r20, 0x20	; 32
    35ae:	51 e4       	ldi	r21, 0x41	; 65
    35b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35b4:	dc 01       	movw	r26, r24
    35b6:	cb 01       	movw	r24, r22
    35b8:	bc 01       	movw	r22, r24
    35ba:	cd 01       	movw	r24, r26
    35bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35c0:	dc 01       	movw	r26, r24
    35c2:	cb 01       	movw	r24, r22
    35c4:	9a a3       	std	Y+34, r25	; 0x22
    35c6:	89 a3       	std	Y+33, r24	; 0x21
    35c8:	0f c0       	rjmp	.+30     	; 0x35e8 <DOOR_LOCK+0x13a>
    35ca:	88 ec       	ldi	r24, 0xC8	; 200
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	98 a3       	std	Y+32, r25	; 0x20
    35d0:	8f 8f       	std	Y+31, r24	; 0x1f
    35d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    35d4:	98 a1       	ldd	r25, Y+32	; 0x20
    35d6:	01 97       	sbiw	r24, 0x01	; 1
    35d8:	f1 f7       	brne	.-4      	; 0x35d6 <DOOR_LOCK+0x128>
    35da:	98 a3       	std	Y+32, r25	; 0x20
    35dc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35de:	89 a1       	ldd	r24, Y+33	; 0x21
    35e0:	9a a1       	ldd	r25, Y+34	; 0x22
    35e2:	01 97       	sbiw	r24, 0x01	; 1
    35e4:	9a a3       	std	Y+34, r25	; 0x22
    35e6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35e8:	89 a1       	ldd	r24, Y+33	; 0x21
    35ea:	9a a1       	ldd	r25, Y+34	; 0x22
    35ec:	00 97       	sbiw	r24, 0x00	; 0
    35ee:	69 f7       	brne	.-38     	; 0x35ca <DOOR_LOCK+0x11c>
    35f0:	14 c0       	rjmp	.+40     	; 0x361a <DOOR_LOCK+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35f2:	6b a1       	ldd	r22, Y+35	; 0x23
    35f4:	7c a1       	ldd	r23, Y+36	; 0x24
    35f6:	8d a1       	ldd	r24, Y+37	; 0x25
    35f8:	9e a1       	ldd	r25, Y+38	; 0x26
    35fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35fe:	dc 01       	movw	r26, r24
    3600:	cb 01       	movw	r24, r22
    3602:	9a a3       	std	Y+34, r25	; 0x22
    3604:	89 a3       	std	Y+33, r24	; 0x21
    3606:	89 a1       	ldd	r24, Y+33	; 0x21
    3608:	9a a1       	ldd	r25, Y+34	; 0x22
    360a:	9e 8f       	std	Y+30, r25	; 0x1e
    360c:	8d 8f       	std	Y+29, r24	; 0x1d
    360e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3610:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3612:	01 97       	sbiw	r24, 0x01	; 1
    3614:	f1 f7       	brne	.-4      	; 0x3612 <DOOR_LOCK+0x164>
    3616:	9e 8f       	std	Y+30, r25	; 0x1e
    3618:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(100);

					LCD_voidClearDisplay();
    361a:	0e 94 67 11 	call	0x22ce	; 0x22ce <LCD_voidClearDisplay>
					LCD_voidGoToXY(0,0);
    361e:	80 e0       	ldi	r24, 0x00	; 0
    3620:	60 e0       	ldi	r22, 0x00	; 0
    3622:	0e 94 67 10 	call	0x20ce	; 0x20ce <LCD_voidGoToXY>
					LCD_voidWriteString("ENTER PASSWORD");
    3626:	81 e8       	ldi	r24, 0x81	; 129
    3628:	90 e0       	ldi	r25, 0x00	; 0
    362a:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_voidWriteString>
					LCD_voidGoToXY(1,0);
    362e:	81 e0       	ldi	r24, 0x01	; 1
    3630:	60 e0       	ldi	r22, 0x00	; 0
    3632:	0e 94 67 10 	call	0x20ce	; 0x20ce <LCD_voidGoToXY>

					count++;
    3636:	8b a5       	ldd	r24, Y+43	; 0x2b
    3638:	8f 5f       	subi	r24, 0xFF	; 255
    363a:	8b a7       	std	Y+43, r24	; 0x2b
					if(count>=3){
    363c:	8b a5       	ldd	r24, Y+43	; 0x2b
    363e:	83 30       	cpi	r24, 0x03	; 3
    3640:	70 f0       	brcs	.+28     	; 0x365e <DOOR_LOCK+0x1b0>
						DIO_voidSetPinValue(PORTA,PIN2,PIN_HIGH);
    3642:	80 e0       	ldi	r24, 0x00	; 0
    3644:	62 e0       	ldi	r22, 0x02	; 2
    3646:	41 e0       	ldi	r20, 0x01	; 1
    3648:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_voidSetPinValue>
    364c:	08 c0       	rjmp	.+16     	; 0x365e <DOOR_LOCK+0x1b0>

	while(1){
		STERRT_LAMP(GET_LIGHT());
		UART_DATA=UART_u8ReciveData();
		if(UART_DATA=='='){
			for(j=0;j<i;j++){
    364e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3650:	8f 5f       	subi	r24, 0xFF	; 255
    3652:	8d a7       	std	Y+45, r24	; 0x2d
    3654:	9d a5       	ldd	r25, Y+45	; 0x2d
    3656:	8e a5       	ldd	r24, Y+46	; 0x2e
    3658:	98 17       	cp	r25, r24
    365a:	08 f4       	brcc	.+2      	; 0x365e <DOOR_LOCK+0x1b0>
    365c:	4a cf       	rjmp	.-364    	; 0x34f2 <DOOR_LOCK+0x44>
					}

					break;
				}
			}
			if(i==0 && password_size!=0){
    365e:	8e a5       	ldd	r24, Y+46	; 0x2e
    3660:	88 23       	and	r24, r24
    3662:	09 f0       	breq	.+2      	; 0x3666 <DOOR_LOCK+0x1b8>
    3664:	9c c0       	rjmp	.+312    	; 0x379e <DOOR_LOCK+0x2f0>
    3666:	80 91 f5 01 	lds	r24, 0x01F5
    366a:	88 23       	and	r24, r24
    366c:	09 f4       	brne	.+2      	; 0x3670 <DOOR_LOCK+0x1c2>
    366e:	97 c0       	rjmp	.+302    	; 0x379e <DOOR_LOCK+0x2f0>
				LCD_voidClearDisplay();
    3670:	0e 94 67 11 	call	0x22ce	; 0x22ce <LCD_voidClearDisplay>
				LCD_voidGoToXY(0,0);
    3674:	80 e0       	ldi	r24, 0x00	; 0
    3676:	60 e0       	ldi	r22, 0x00	; 0
    3678:	0e 94 67 10 	call	0x20ce	; 0x20ce <LCD_voidGoToXY>
				LCD_voidWriteString("WRONG PASSWORD..");
    367c:	80 e7       	ldi	r24, 0x70	; 112
    367e:	90 e0       	ldi	r25, 0x00	; 0
    3680:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_voidWriteString>
    3684:	80 e0       	ldi	r24, 0x00	; 0
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	a8 ec       	ldi	r26, 0xC8	; 200
    368a:	b2 e4       	ldi	r27, 0x42	; 66
    368c:	89 8f       	std	Y+25, r24	; 0x19
    368e:	9a 8f       	std	Y+26, r25	; 0x1a
    3690:	ab 8f       	std	Y+27, r26	; 0x1b
    3692:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3694:	69 8d       	ldd	r22, Y+25	; 0x19
    3696:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3698:	8b 8d       	ldd	r24, Y+27	; 0x1b
    369a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    369c:	20 e0       	ldi	r18, 0x00	; 0
    369e:	30 e0       	ldi	r19, 0x00	; 0
    36a0:	4a ef       	ldi	r20, 0xFA	; 250
    36a2:	54 e4       	ldi	r21, 0x44	; 68
    36a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36a8:	dc 01       	movw	r26, r24
    36aa:	cb 01       	movw	r24, r22
    36ac:	8d 8b       	std	Y+21, r24	; 0x15
    36ae:	9e 8b       	std	Y+22, r25	; 0x16
    36b0:	af 8b       	std	Y+23, r26	; 0x17
    36b2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    36b4:	6d 89       	ldd	r22, Y+21	; 0x15
    36b6:	7e 89       	ldd	r23, Y+22	; 0x16
    36b8:	8f 89       	ldd	r24, Y+23	; 0x17
    36ba:	98 8d       	ldd	r25, Y+24	; 0x18
    36bc:	20 e0       	ldi	r18, 0x00	; 0
    36be:	30 e0       	ldi	r19, 0x00	; 0
    36c0:	40 e8       	ldi	r20, 0x80	; 128
    36c2:	5f e3       	ldi	r21, 0x3F	; 63
    36c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36c8:	88 23       	and	r24, r24
    36ca:	2c f4       	brge	.+10     	; 0x36d6 <DOOR_LOCK+0x228>
		__ticks = 1;
    36cc:	81 e0       	ldi	r24, 0x01	; 1
    36ce:	90 e0       	ldi	r25, 0x00	; 0
    36d0:	9c 8b       	std	Y+20, r25	; 0x14
    36d2:	8b 8b       	std	Y+19, r24	; 0x13
    36d4:	3f c0       	rjmp	.+126    	; 0x3754 <DOOR_LOCK+0x2a6>
	else if (__tmp > 65535)
    36d6:	6d 89       	ldd	r22, Y+21	; 0x15
    36d8:	7e 89       	ldd	r23, Y+22	; 0x16
    36da:	8f 89       	ldd	r24, Y+23	; 0x17
    36dc:	98 8d       	ldd	r25, Y+24	; 0x18
    36de:	20 e0       	ldi	r18, 0x00	; 0
    36e0:	3f ef       	ldi	r19, 0xFF	; 255
    36e2:	4f e7       	ldi	r20, 0x7F	; 127
    36e4:	57 e4       	ldi	r21, 0x47	; 71
    36e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36ea:	18 16       	cp	r1, r24
    36ec:	4c f5       	brge	.+82     	; 0x3740 <DOOR_LOCK+0x292>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36ee:	69 8d       	ldd	r22, Y+25	; 0x19
    36f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36f6:	20 e0       	ldi	r18, 0x00	; 0
    36f8:	30 e0       	ldi	r19, 0x00	; 0
    36fa:	40 e2       	ldi	r20, 0x20	; 32
    36fc:	51 e4       	ldi	r21, 0x41	; 65
    36fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3702:	dc 01       	movw	r26, r24
    3704:	cb 01       	movw	r24, r22
    3706:	bc 01       	movw	r22, r24
    3708:	cd 01       	movw	r24, r26
    370a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    370e:	dc 01       	movw	r26, r24
    3710:	cb 01       	movw	r24, r22
    3712:	9c 8b       	std	Y+20, r25	; 0x14
    3714:	8b 8b       	std	Y+19, r24	; 0x13
    3716:	0f c0       	rjmp	.+30     	; 0x3736 <DOOR_LOCK+0x288>
    3718:	88 ec       	ldi	r24, 0xC8	; 200
    371a:	90 e0       	ldi	r25, 0x00	; 0
    371c:	9a 8b       	std	Y+18, r25	; 0x12
    371e:	89 8b       	std	Y+17, r24	; 0x11
    3720:	89 89       	ldd	r24, Y+17	; 0x11
    3722:	9a 89       	ldd	r25, Y+18	; 0x12
    3724:	01 97       	sbiw	r24, 0x01	; 1
    3726:	f1 f7       	brne	.-4      	; 0x3724 <DOOR_LOCK+0x276>
    3728:	9a 8b       	std	Y+18, r25	; 0x12
    372a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    372c:	8b 89       	ldd	r24, Y+19	; 0x13
    372e:	9c 89       	ldd	r25, Y+20	; 0x14
    3730:	01 97       	sbiw	r24, 0x01	; 1
    3732:	9c 8b       	std	Y+20, r25	; 0x14
    3734:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3736:	8b 89       	ldd	r24, Y+19	; 0x13
    3738:	9c 89       	ldd	r25, Y+20	; 0x14
    373a:	00 97       	sbiw	r24, 0x00	; 0
    373c:	69 f7       	brne	.-38     	; 0x3718 <DOOR_LOCK+0x26a>
    373e:	14 c0       	rjmp	.+40     	; 0x3768 <DOOR_LOCK+0x2ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3740:	6d 89       	ldd	r22, Y+21	; 0x15
    3742:	7e 89       	ldd	r23, Y+22	; 0x16
    3744:	8f 89       	ldd	r24, Y+23	; 0x17
    3746:	98 8d       	ldd	r25, Y+24	; 0x18
    3748:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    374c:	dc 01       	movw	r26, r24
    374e:	cb 01       	movw	r24, r22
    3750:	9c 8b       	std	Y+20, r25	; 0x14
    3752:	8b 8b       	std	Y+19, r24	; 0x13
    3754:	8b 89       	ldd	r24, Y+19	; 0x13
    3756:	9c 89       	ldd	r25, Y+20	; 0x14
    3758:	98 8b       	std	Y+16, r25	; 0x10
    375a:	8f 87       	std	Y+15, r24	; 0x0f
    375c:	8f 85       	ldd	r24, Y+15	; 0x0f
    375e:	98 89       	ldd	r25, Y+16	; 0x10
    3760:	01 97       	sbiw	r24, 0x01	; 1
    3762:	f1 f7       	brne	.-4      	; 0x3760 <DOOR_LOCK+0x2b2>
    3764:	98 8b       	std	Y+16, r25	; 0x10
    3766:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(100);

				LCD_voidClearDisplay();
    3768:	0e 94 67 11 	call	0x22ce	; 0x22ce <LCD_voidClearDisplay>
				LCD_voidGoToXY(0,0);
    376c:	80 e0       	ldi	r24, 0x00	; 0
    376e:	60 e0       	ldi	r22, 0x00	; 0
    3770:	0e 94 67 10 	call	0x20ce	; 0x20ce <LCD_voidGoToXY>
				LCD_voidWriteString("ENTER PASSWORD");
    3774:	81 e8       	ldi	r24, 0x81	; 129
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_voidWriteString>
				LCD_voidGoToXY(1,0);
    377c:	81 e0       	ldi	r24, 0x01	; 1
    377e:	60 e0       	ldi	r22, 0x00	; 0
    3780:	0e 94 67 10 	call	0x20ce	; 0x20ce <LCD_voidGoToXY>

				count++;
    3784:	8b a5       	ldd	r24, Y+43	; 0x2b
    3786:	8f 5f       	subi	r24, 0xFF	; 255
    3788:	8b a7       	std	Y+43, r24	; 0x2b
				if(count>=3){
    378a:	8b a5       	ldd	r24, Y+43	; 0x2b
    378c:	83 30       	cpi	r24, 0x03	; 3
    378e:	08 f4       	brcc	.+2      	; 0x3792 <DOOR_LOCK+0x2e4>
    3790:	a3 ce       	rjmp	.-698    	; 0x34d8 <DOOR_LOCK+0x2a>
					DIO_voidSetPinValue(PORTA,PIN2,PIN_HIGH);
    3792:	80 e0       	ldi	r24, 0x00	; 0
    3794:	62 e0       	ldi	r22, 0x02	; 2
    3796:	41 e0       	ldi	r20, 0x01	; 1
    3798:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_voidSetPinValue>
    379c:	9d ce       	rjmp	.-710    	; 0x34d8 <DOOR_LOCK+0x2a>
				}
			}
			else if(j==i){
    379e:	9d a5       	ldd	r25, Y+45	; 0x2d
    37a0:	8e a5       	ldd	r24, Y+46	; 0x2e
    37a2:	98 17       	cp	r25, r24
    37a4:	09 f0       	breq	.+2      	; 0x37a8 <DOOR_LOCK+0x2fa>
    37a6:	8d c0       	rjmp	.+282    	; 0x38c2 <DOOR_LOCK+0x414>
				LCD_voidClearDisplay();
    37a8:	0e 94 67 11 	call	0x22ce	; 0x22ce <LCD_voidClearDisplay>
				LCD_voidGoToXY(0,0);
    37ac:	80 e0       	ldi	r24, 0x00	; 0
    37ae:	60 e0       	ldi	r22, 0x00	; 0
    37b0:	0e 94 67 10 	call	0x20ce	; 0x20ce <LCD_voidGoToXY>
				LCD_voidWriteString("WELCOME..");
    37b4:	80 e9       	ldi	r24, 0x90	; 144
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_voidWriteString>

				LCD_voidGoToXY(1,0);
    37bc:	81 e0       	ldi	r24, 0x01	; 1
    37be:	60 e0       	ldi	r22, 0x00	; 0
    37c0:	0e 94 67 10 	call	0x20ce	; 0x20ce <LCD_voidGoToXY>
				LCD_voidWriteString("OPENNING DOOR..");
    37c4:	8a e9       	ldi	r24, 0x9A	; 154
    37c6:	90 e0       	ldi	r25, 0x00	; 0
    37c8:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_voidWriteString>
				SERVO_voidSetAngle(180);
    37cc:	84 eb       	ldi	r24, 0xB4	; 180
    37ce:	0e 94 71 11 	call	0x22e2	; 0x22e2 <SERVO_voidSetAngle>

				DIO_voidSetPinValue(PORTA,PIN2,PIN_LOW);
    37d2:	80 e0       	ldi	r24, 0x00	; 0
    37d4:	62 e0       	ldi	r22, 0x02	; 2
    37d6:	40 e0       	ldi	r20, 0x00	; 0
    37d8:	0e 94 3b 0a 	call	0x1476	; 0x1476 <DIO_voidSetPinValue>
    37dc:	80 e0       	ldi	r24, 0x00	; 0
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	a8 ec       	ldi	r26, 0xC8	; 200
    37e2:	b2 e4       	ldi	r27, 0x42	; 66
    37e4:	8b 87       	std	Y+11, r24	; 0x0b
    37e6:	9c 87       	std	Y+12, r25	; 0x0c
    37e8:	ad 87       	std	Y+13, r26	; 0x0d
    37ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    37ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    37f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    37f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    37f4:	20 e0       	ldi	r18, 0x00	; 0
    37f6:	30 e0       	ldi	r19, 0x00	; 0
    37f8:	4a ef       	ldi	r20, 0xFA	; 250
    37fa:	54 e4       	ldi	r21, 0x44	; 68
    37fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3800:	dc 01       	movw	r26, r24
    3802:	cb 01       	movw	r24, r22
    3804:	8f 83       	std	Y+7, r24	; 0x07
    3806:	98 87       	std	Y+8, r25	; 0x08
    3808:	a9 87       	std	Y+9, r26	; 0x09
    380a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    380c:	6f 81       	ldd	r22, Y+7	; 0x07
    380e:	78 85       	ldd	r23, Y+8	; 0x08
    3810:	89 85       	ldd	r24, Y+9	; 0x09
    3812:	9a 85       	ldd	r25, Y+10	; 0x0a
    3814:	20 e0       	ldi	r18, 0x00	; 0
    3816:	30 e0       	ldi	r19, 0x00	; 0
    3818:	40 e8       	ldi	r20, 0x80	; 128
    381a:	5f e3       	ldi	r21, 0x3F	; 63
    381c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3820:	88 23       	and	r24, r24
    3822:	2c f4       	brge	.+10     	; 0x382e <DOOR_LOCK+0x380>
		__ticks = 1;
    3824:	81 e0       	ldi	r24, 0x01	; 1
    3826:	90 e0       	ldi	r25, 0x00	; 0
    3828:	9e 83       	std	Y+6, r25	; 0x06
    382a:	8d 83       	std	Y+5, r24	; 0x05
    382c:	3f c0       	rjmp	.+126    	; 0x38ac <DOOR_LOCK+0x3fe>
	else if (__tmp > 65535)
    382e:	6f 81       	ldd	r22, Y+7	; 0x07
    3830:	78 85       	ldd	r23, Y+8	; 0x08
    3832:	89 85       	ldd	r24, Y+9	; 0x09
    3834:	9a 85       	ldd	r25, Y+10	; 0x0a
    3836:	20 e0       	ldi	r18, 0x00	; 0
    3838:	3f ef       	ldi	r19, 0xFF	; 255
    383a:	4f e7       	ldi	r20, 0x7F	; 127
    383c:	57 e4       	ldi	r21, 0x47	; 71
    383e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3842:	18 16       	cp	r1, r24
    3844:	4c f5       	brge	.+82     	; 0x3898 <DOOR_LOCK+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3846:	6b 85       	ldd	r22, Y+11	; 0x0b
    3848:	7c 85       	ldd	r23, Y+12	; 0x0c
    384a:	8d 85       	ldd	r24, Y+13	; 0x0d
    384c:	9e 85       	ldd	r25, Y+14	; 0x0e
    384e:	20 e0       	ldi	r18, 0x00	; 0
    3850:	30 e0       	ldi	r19, 0x00	; 0
    3852:	40 e2       	ldi	r20, 0x20	; 32
    3854:	51 e4       	ldi	r21, 0x41	; 65
    3856:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    385a:	dc 01       	movw	r26, r24
    385c:	cb 01       	movw	r24, r22
    385e:	bc 01       	movw	r22, r24
    3860:	cd 01       	movw	r24, r26
    3862:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3866:	dc 01       	movw	r26, r24
    3868:	cb 01       	movw	r24, r22
    386a:	9e 83       	std	Y+6, r25	; 0x06
    386c:	8d 83       	std	Y+5, r24	; 0x05
    386e:	0f c0       	rjmp	.+30     	; 0x388e <DOOR_LOCK+0x3e0>
    3870:	88 ec       	ldi	r24, 0xC8	; 200
    3872:	90 e0       	ldi	r25, 0x00	; 0
    3874:	9c 83       	std	Y+4, r25	; 0x04
    3876:	8b 83       	std	Y+3, r24	; 0x03
    3878:	8b 81       	ldd	r24, Y+3	; 0x03
    387a:	9c 81       	ldd	r25, Y+4	; 0x04
    387c:	01 97       	sbiw	r24, 0x01	; 1
    387e:	f1 f7       	brne	.-4      	; 0x387c <DOOR_LOCK+0x3ce>
    3880:	9c 83       	std	Y+4, r25	; 0x04
    3882:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3884:	8d 81       	ldd	r24, Y+5	; 0x05
    3886:	9e 81       	ldd	r25, Y+6	; 0x06
    3888:	01 97       	sbiw	r24, 0x01	; 1
    388a:	9e 83       	std	Y+6, r25	; 0x06
    388c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    388e:	8d 81       	ldd	r24, Y+5	; 0x05
    3890:	9e 81       	ldd	r25, Y+6	; 0x06
    3892:	00 97       	sbiw	r24, 0x00	; 0
    3894:	69 f7       	brne	.-38     	; 0x3870 <DOOR_LOCK+0x3c2>
    3896:	4b c0       	rjmp	.+150    	; 0x392e <DOOR_LOCK+0x480>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3898:	6f 81       	ldd	r22, Y+7	; 0x07
    389a:	78 85       	ldd	r23, Y+8	; 0x08
    389c:	89 85       	ldd	r24, Y+9	; 0x09
    389e:	9a 85       	ldd	r25, Y+10	; 0x0a
    38a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38a4:	dc 01       	movw	r26, r24
    38a6:	cb 01       	movw	r24, r22
    38a8:	9e 83       	std	Y+6, r25	; 0x06
    38aa:	8d 83       	std	Y+5, r24	; 0x05
    38ac:	8d 81       	ldd	r24, Y+5	; 0x05
    38ae:	9e 81       	ldd	r25, Y+6	; 0x06
    38b0:	9a 83       	std	Y+2, r25	; 0x02
    38b2:	89 83       	std	Y+1, r24	; 0x01
    38b4:	89 81       	ldd	r24, Y+1	; 0x01
    38b6:	9a 81       	ldd	r25, Y+2	; 0x02
    38b8:	01 97       	sbiw	r24, 0x01	; 1
    38ba:	f1 f7       	brne	.-4      	; 0x38b8 <DOOR_LOCK+0x40a>
    38bc:	9a 83       	std	Y+2, r25	; 0x02
    38be:	89 83       	std	Y+1, r24	; 0x01
    38c0:	36 c0       	rjmp	.+108    	; 0x392e <DOOR_LOCK+0x480>

				_delay_ms(100);
				break;
			}
			else{
				i=0;
    38c2:	1e a6       	std	Y+46, r1	; 0x2e
    38c4:	09 ce       	rjmp	.-1006   	; 0x34d8 <DOOR_LOCK+0x2a>
			}
		}
		else if(UART_DATA=='z'){
    38c6:	8c a5       	ldd	r24, Y+44	; 0x2c
    38c8:	8a 37       	cpi	r24, 0x7A	; 122
    38ca:	81 f4       	brne	.+32     	; 0x38ec <DOOR_LOCK+0x43e>
			LCD_voidClearDisplay();
    38cc:	0e 94 67 11 	call	0x22ce	; 0x22ce <LCD_voidClearDisplay>
			LCD_voidGoToXY(0,0);
    38d0:	80 e0       	ldi	r24, 0x00	; 0
    38d2:	60 e0       	ldi	r22, 0x00	; 0
    38d4:	0e 94 67 10 	call	0x20ce	; 0x20ce <LCD_voidGoToXY>
			LCD_voidWriteString("ENTER PASSWORD");
    38d8:	81 e8       	ldi	r24, 0x81	; 129
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_voidWriteString>
			LCD_voidGoToXY(1,0);
    38e0:	81 e0       	ldi	r24, 0x01	; 1
    38e2:	60 e0       	ldi	r22, 0x00	; 0
    38e4:	0e 94 67 10 	call	0x20ce	; 0x20ce <LCD_voidGoToXY>
			i=0;
    38e8:	1e a6       	std	Y+46, r1	; 0x2e
    38ea:	f6 cd       	rjmp	.-1044   	; 0x34d8 <DOOR_LOCK+0x2a>
		}
		else if((UART_DATA>='0' && UART_DATA<='9') || (UART_DATA>='*' && UART_DATA<='/') || (UART_DATA=='=')){
    38ec:	8c a5       	ldd	r24, Y+44	; 0x2c
    38ee:	80 33       	cpi	r24, 0x30	; 48
    38f0:	18 f0       	brcs	.+6      	; 0x38f8 <DOOR_LOCK+0x44a>
    38f2:	8c a5       	ldd	r24, Y+44	; 0x2c
    38f4:	8a 33       	cpi	r24, 0x3A	; 58
    38f6:	50 f0       	brcs	.+20     	; 0x390c <DOOR_LOCK+0x45e>
    38f8:	8c a5       	ldd	r24, Y+44	; 0x2c
    38fa:	8a 32       	cpi	r24, 0x2A	; 42
    38fc:	18 f0       	brcs	.+6      	; 0x3904 <DOOR_LOCK+0x456>
    38fe:	8c a5       	ldd	r24, Y+44	; 0x2c
    3900:	80 33       	cpi	r24, 0x30	; 48
    3902:	20 f0       	brcs	.+8      	; 0x390c <DOOR_LOCK+0x45e>
    3904:	8c a5       	ldd	r24, Y+44	; 0x2c
    3906:	8d 33       	cpi	r24, 0x3D	; 61
    3908:	09 f0       	breq	.+2      	; 0x390c <DOOR_LOCK+0x45e>
    390a:	e6 cd       	rjmp	.-1076   	; 0x34d8 <DOOR_LOCK+0x2a>
			input[i]=UART_DATA;
    390c:	8e a5       	ldd	r24, Y+46	; 0x2e
    390e:	28 2f       	mov	r18, r24
    3910:	30 e0       	ldi	r19, 0x00	; 0
    3912:	ce 01       	movw	r24, r28
    3914:	8f 96       	adiw	r24, 0x2f	; 47
    3916:	fc 01       	movw	r30, r24
    3918:	e2 0f       	add	r30, r18
    391a:	f3 1f       	adc	r31, r19
    391c:	8c a5       	ldd	r24, Y+44	; 0x2c
    391e:	80 83       	st	Z, r24
			i++;
    3920:	8e a5       	ldd	r24, Y+46	; 0x2e
    3922:	8f 5f       	subi	r24, 0xFF	; 255
    3924:	8e a7       	std	Y+46, r24	; 0x2e
			LCD_voidWriteData(UART_DATA);
    3926:	8c a5       	ldd	r24, Y+44	; 0x2c
    3928:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <LCD_voidWriteData>
    392c:	d5 cd       	rjmp	.-1110   	; 0x34d8 <DOOR_LOCK+0x2a>
		}
	}
}
    392e:	ce 5b       	subi	r28, 0xBE	; 190
    3930:	df 4f       	sbci	r29, 0xFF	; 255
    3932:	0f b6       	in	r0, 0x3f	; 63
    3934:	f8 94       	cli
    3936:	de bf       	out	0x3e, r29	; 62
    3938:	0f be       	out	0x3f, r0	; 63
    393a:	cd bf       	out	0x3d, r28	; 61
    393c:	cf 91       	pop	r28
    393e:	df 91       	pop	r29
    3940:	08 95       	ret

00003942 <GET_TEMP>:

u16 GET_TEMP(){
    3942:	df 93       	push	r29
    3944:	cf 93       	push	r28
    3946:	00 d0       	rcall	.+0      	; 0x3948 <GET_TEMP+0x6>
    3948:	00 d0       	rcall	.+0      	; 0x394a <GET_TEMP+0x8>
    394a:	cd b7       	in	r28, 0x3d	; 61
    394c:	de b7       	in	r29, 0x3e	; 62

	u16 reading,temp;

	ADC_voidInitialize(ADC0);
    394e:	80 e0       	ldi	r24, 0x00	; 0
    3950:	0e 94 75 07 	call	0xeea	; 0xeea <ADC_voidInitialize>
	reading=ADC_voidStartConversion();
    3954:	0e 94 1e 09 	call	0x123c	; 0x123c <ADC_voidStartConversion>
    3958:	9c 83       	std	Y+4, r25	; 0x04
    395a:	8b 83       	std	Y+3, r24	; 0x03
	temp=(u16)(((u32)reading*5000)/(1023*10));
    395c:	8b 81       	ldd	r24, Y+3	; 0x03
    395e:	9c 81       	ldd	r25, Y+4	; 0x04
    3960:	cc 01       	movw	r24, r24
    3962:	a0 e0       	ldi	r26, 0x00	; 0
    3964:	b0 e0       	ldi	r27, 0x00	; 0
    3966:	28 e8       	ldi	r18, 0x88	; 136
    3968:	33 e1       	ldi	r19, 0x13	; 19
    396a:	40 e0       	ldi	r20, 0x00	; 0
    396c:	50 e0       	ldi	r21, 0x00	; 0
    396e:	bc 01       	movw	r22, r24
    3970:	cd 01       	movw	r24, r26
    3972:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <__mulsi3>
    3976:	dc 01       	movw	r26, r24
    3978:	cb 01       	movw	r24, r22
    397a:	26 ef       	ldi	r18, 0xF6	; 246
    397c:	37 e2       	ldi	r19, 0x27	; 39
    397e:	40 e0       	ldi	r20, 0x00	; 0
    3980:	50 e0       	ldi	r21, 0x00	; 0
    3982:	bc 01       	movw	r22, r24
    3984:	cd 01       	movw	r24, r26
    3986:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__udivmodsi4>
    398a:	da 01       	movw	r26, r20
    398c:	c9 01       	movw	r24, r18
    398e:	9a 83       	std	Y+2, r25	; 0x02
    3990:	89 83       	std	Y+1, r24	; 0x01

	return temp;
    3992:	89 81       	ldd	r24, Y+1	; 0x01
    3994:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3996:	0f 90       	pop	r0
    3998:	0f 90       	pop	r0
    399a:	0f 90       	pop	r0
    399c:	0f 90       	pop	r0
    399e:	cf 91       	pop	r28
    39a0:	df 91       	pop	r29
    39a2:	08 95       	ret

000039a4 <GET_LIGHT>:

u16 GET_LIGHT(){
    39a4:	df 93       	push	r29
    39a6:	cf 93       	push	r28
    39a8:	00 d0       	rcall	.+0      	; 0x39aa <GET_LIGHT+0x6>
    39aa:	00 d0       	rcall	.+0      	; 0x39ac <GET_LIGHT+0x8>
    39ac:	cd b7       	in	r28, 0x3d	; 61
    39ae:	de b7       	in	r29, 0x3e	; 62

	u16 reading,light;

	ADC_voidInitialize(ADC1);
    39b0:	81 e0       	ldi	r24, 0x01	; 1
    39b2:	0e 94 75 07 	call	0xeea	; 0xeea <ADC_voidInitialize>
	reading=ADC_voidStartConversion();
    39b6:	0e 94 1e 09 	call	0x123c	; 0x123c <ADC_voidStartConversion>
    39ba:	9c 83       	std	Y+4, r25	; 0x04
    39bc:	8b 83       	std	Y+3, r24	; 0x03
	light=(u16)(((u32)reading*5000*2)/1023);
    39be:	8b 81       	ldd	r24, Y+3	; 0x03
    39c0:	9c 81       	ldd	r25, Y+4	; 0x04
    39c2:	cc 01       	movw	r24, r24
    39c4:	a0 e0       	ldi	r26, 0x00	; 0
    39c6:	b0 e0       	ldi	r27, 0x00	; 0
    39c8:	20 e1       	ldi	r18, 0x10	; 16
    39ca:	37 e2       	ldi	r19, 0x27	; 39
    39cc:	40 e0       	ldi	r20, 0x00	; 0
    39ce:	50 e0       	ldi	r21, 0x00	; 0
    39d0:	bc 01       	movw	r22, r24
    39d2:	cd 01       	movw	r24, r26
    39d4:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <__mulsi3>
    39d8:	dc 01       	movw	r26, r24
    39da:	cb 01       	movw	r24, r22
    39dc:	2f ef       	ldi	r18, 0xFF	; 255
    39de:	33 e0       	ldi	r19, 0x03	; 3
    39e0:	40 e0       	ldi	r20, 0x00	; 0
    39e2:	50 e0       	ldi	r21, 0x00	; 0
    39e4:	bc 01       	movw	r22, r24
    39e6:	cd 01       	movw	r24, r26
    39e8:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__udivmodsi4>
    39ec:	da 01       	movw	r26, r20
    39ee:	c9 01       	movw	r24, r18
    39f0:	9a 83       	std	Y+2, r25	; 0x02
    39f2:	89 83       	std	Y+1, r24	; 0x01

	return light;
    39f4:	89 81       	ldd	r24, Y+1	; 0x01
    39f6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    39f8:	0f 90       	pop	r0
    39fa:	0f 90       	pop	r0
    39fc:	0f 90       	pop	r0
    39fe:	0f 90       	pop	r0
    3a00:	cf 91       	pop	r28
    3a02:	df 91       	pop	r29
    3a04:	08 95       	ret

00003a06 <DISPLAY_DATA>:

void DISPLAY_DATA(u16 temp,u16 light){
    3a06:	df 93       	push	r29
    3a08:	cf 93       	push	r28
    3a0a:	00 d0       	rcall	.+0      	; 0x3a0c <DISPLAY_DATA+0x6>
    3a0c:	00 d0       	rcall	.+0      	; 0x3a0e <DISPLAY_DATA+0x8>
    3a0e:	cd b7       	in	r28, 0x3d	; 61
    3a10:	de b7       	in	r29, 0x3e	; 62
    3a12:	9a 83       	std	Y+2, r25	; 0x02
    3a14:	89 83       	std	Y+1, r24	; 0x01
    3a16:	7c 83       	std	Y+4, r23	; 0x04
    3a18:	6b 83       	std	Y+3, r22	; 0x03

	LCD_voidGoToXY(0,0);
    3a1a:	80 e0       	ldi	r24, 0x00	; 0
    3a1c:	60 e0       	ldi	r22, 0x00	; 0
    3a1e:	0e 94 67 10 	call	0x20ce	; 0x20ce <LCD_voidGoToXY>
	LCD_voidWriteString("TEMP=");
    3a22:	8a ea       	ldi	r24, 0xAA	; 170
    3a24:	90 e0       	ldi	r25, 0x00	; 0
    3a26:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_voidWriteString>
	LCD_voidWriteNumber(temp);
    3a2a:	89 81       	ldd	r24, Y+1	; 0x01
    3a2c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a2e:	cc 01       	movw	r24, r24
    3a30:	a0 e0       	ldi	r26, 0x00	; 0
    3a32:	b0 e0       	ldi	r27, 0x00	; 0
    3a34:	bc 01       	movw	r22, r24
    3a36:	cd 01       	movw	r24, r26
    3a38:	0e 94 b7 10 	call	0x216e	; 0x216e <LCD_voidWriteNumber>
	LCD_voidWriteString("C              ");
    3a3c:	80 eb       	ldi	r24, 0xB0	; 176
    3a3e:	90 e0       	ldi	r25, 0x00	; 0
    3a40:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_voidWriteString>

	LCD_voidGoToXY(1,0);
    3a44:	81 e0       	ldi	r24, 0x01	; 1
    3a46:	60 e0       	ldi	r22, 0x00	; 0
    3a48:	0e 94 67 10 	call	0x20ce	; 0x20ce <LCD_voidGoToXY>
	LCD_voidWriteString("LIGHT=");
    3a4c:	80 ec       	ldi	r24, 0xC0	; 192
    3a4e:	90 e0       	ldi	r25, 0x00	; 0
    3a50:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_voidWriteString>
	LCD_voidWriteNumber(light);
    3a54:	8b 81       	ldd	r24, Y+3	; 0x03
    3a56:	9c 81       	ldd	r25, Y+4	; 0x04
    3a58:	cc 01       	movw	r24, r24
    3a5a:	a0 e0       	ldi	r26, 0x00	; 0
    3a5c:	b0 e0       	ldi	r27, 0x00	; 0
    3a5e:	bc 01       	movw	r22, r24
    3a60:	cd 01       	movw	r24, r26
    3a62:	0e 94 b7 10 	call	0x216e	; 0x216e <LCD_voidWriteNumber>
	LCD_voidWriteString("LUX              ");
    3a66:	87 ec       	ldi	r24, 0xC7	; 199
    3a68:	90 e0       	ldi	r25, 0x00	; 0
    3a6a:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_voidWriteString>
}
    3a6e:	0f 90       	pop	r0
    3a70:	0f 90       	pop	r0
    3a72:	0f 90       	pop	r0
    3a74:	0f 90       	pop	r0
    3a76:	cf 91       	pop	r28
    3a78:	df 91       	pop	r29
    3a7a:	08 95       	ret

00003a7c <__mulsi3>:
    3a7c:	62 9f       	mul	r22, r18
    3a7e:	d0 01       	movw	r26, r0
    3a80:	73 9f       	mul	r23, r19
    3a82:	f0 01       	movw	r30, r0
    3a84:	82 9f       	mul	r24, r18
    3a86:	e0 0d       	add	r30, r0
    3a88:	f1 1d       	adc	r31, r1
    3a8a:	64 9f       	mul	r22, r20
    3a8c:	e0 0d       	add	r30, r0
    3a8e:	f1 1d       	adc	r31, r1
    3a90:	92 9f       	mul	r25, r18
    3a92:	f0 0d       	add	r31, r0
    3a94:	83 9f       	mul	r24, r19
    3a96:	f0 0d       	add	r31, r0
    3a98:	74 9f       	mul	r23, r20
    3a9a:	f0 0d       	add	r31, r0
    3a9c:	65 9f       	mul	r22, r21
    3a9e:	f0 0d       	add	r31, r0
    3aa0:	99 27       	eor	r25, r25
    3aa2:	72 9f       	mul	r23, r18
    3aa4:	b0 0d       	add	r27, r0
    3aa6:	e1 1d       	adc	r30, r1
    3aa8:	f9 1f       	adc	r31, r25
    3aaa:	63 9f       	mul	r22, r19
    3aac:	b0 0d       	add	r27, r0
    3aae:	e1 1d       	adc	r30, r1
    3ab0:	f9 1f       	adc	r31, r25
    3ab2:	bd 01       	movw	r22, r26
    3ab4:	cf 01       	movw	r24, r30
    3ab6:	11 24       	eor	r1, r1
    3ab8:	08 95       	ret

00003aba <__udivmodsi4>:
    3aba:	a1 e2       	ldi	r26, 0x21	; 33
    3abc:	1a 2e       	mov	r1, r26
    3abe:	aa 1b       	sub	r26, r26
    3ac0:	bb 1b       	sub	r27, r27
    3ac2:	fd 01       	movw	r30, r26
    3ac4:	0d c0       	rjmp	.+26     	; 0x3ae0 <__udivmodsi4_ep>

00003ac6 <__udivmodsi4_loop>:
    3ac6:	aa 1f       	adc	r26, r26
    3ac8:	bb 1f       	adc	r27, r27
    3aca:	ee 1f       	adc	r30, r30
    3acc:	ff 1f       	adc	r31, r31
    3ace:	a2 17       	cp	r26, r18
    3ad0:	b3 07       	cpc	r27, r19
    3ad2:	e4 07       	cpc	r30, r20
    3ad4:	f5 07       	cpc	r31, r21
    3ad6:	20 f0       	brcs	.+8      	; 0x3ae0 <__udivmodsi4_ep>
    3ad8:	a2 1b       	sub	r26, r18
    3ada:	b3 0b       	sbc	r27, r19
    3adc:	e4 0b       	sbc	r30, r20
    3ade:	f5 0b       	sbc	r31, r21

00003ae0 <__udivmodsi4_ep>:
    3ae0:	66 1f       	adc	r22, r22
    3ae2:	77 1f       	adc	r23, r23
    3ae4:	88 1f       	adc	r24, r24
    3ae6:	99 1f       	adc	r25, r25
    3ae8:	1a 94       	dec	r1
    3aea:	69 f7       	brne	.-38     	; 0x3ac6 <__udivmodsi4_loop>
    3aec:	60 95       	com	r22
    3aee:	70 95       	com	r23
    3af0:	80 95       	com	r24
    3af2:	90 95       	com	r25
    3af4:	9b 01       	movw	r18, r22
    3af6:	ac 01       	movw	r20, r24
    3af8:	bd 01       	movw	r22, r26
    3afa:	cf 01       	movw	r24, r30
    3afc:	08 95       	ret

00003afe <__prologue_saves__>:
    3afe:	2f 92       	push	r2
    3b00:	3f 92       	push	r3
    3b02:	4f 92       	push	r4
    3b04:	5f 92       	push	r5
    3b06:	6f 92       	push	r6
    3b08:	7f 92       	push	r7
    3b0a:	8f 92       	push	r8
    3b0c:	9f 92       	push	r9
    3b0e:	af 92       	push	r10
    3b10:	bf 92       	push	r11
    3b12:	cf 92       	push	r12
    3b14:	df 92       	push	r13
    3b16:	ef 92       	push	r14
    3b18:	ff 92       	push	r15
    3b1a:	0f 93       	push	r16
    3b1c:	1f 93       	push	r17
    3b1e:	cf 93       	push	r28
    3b20:	df 93       	push	r29
    3b22:	cd b7       	in	r28, 0x3d	; 61
    3b24:	de b7       	in	r29, 0x3e	; 62
    3b26:	ca 1b       	sub	r28, r26
    3b28:	db 0b       	sbc	r29, r27
    3b2a:	0f b6       	in	r0, 0x3f	; 63
    3b2c:	f8 94       	cli
    3b2e:	de bf       	out	0x3e, r29	; 62
    3b30:	0f be       	out	0x3f, r0	; 63
    3b32:	cd bf       	out	0x3d, r28	; 61
    3b34:	09 94       	ijmp

00003b36 <__epilogue_restores__>:
    3b36:	2a 88       	ldd	r2, Y+18	; 0x12
    3b38:	39 88       	ldd	r3, Y+17	; 0x11
    3b3a:	48 88       	ldd	r4, Y+16	; 0x10
    3b3c:	5f 84       	ldd	r5, Y+15	; 0x0f
    3b3e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3b40:	7d 84       	ldd	r7, Y+13	; 0x0d
    3b42:	8c 84       	ldd	r8, Y+12	; 0x0c
    3b44:	9b 84       	ldd	r9, Y+11	; 0x0b
    3b46:	aa 84       	ldd	r10, Y+10	; 0x0a
    3b48:	b9 84       	ldd	r11, Y+9	; 0x09
    3b4a:	c8 84       	ldd	r12, Y+8	; 0x08
    3b4c:	df 80       	ldd	r13, Y+7	; 0x07
    3b4e:	ee 80       	ldd	r14, Y+6	; 0x06
    3b50:	fd 80       	ldd	r15, Y+5	; 0x05
    3b52:	0c 81       	ldd	r16, Y+4	; 0x04
    3b54:	1b 81       	ldd	r17, Y+3	; 0x03
    3b56:	aa 81       	ldd	r26, Y+2	; 0x02
    3b58:	b9 81       	ldd	r27, Y+1	; 0x01
    3b5a:	ce 0f       	add	r28, r30
    3b5c:	d1 1d       	adc	r29, r1
    3b5e:	0f b6       	in	r0, 0x3f	; 63
    3b60:	f8 94       	cli
    3b62:	de bf       	out	0x3e, r29	; 62
    3b64:	0f be       	out	0x3f, r0	; 63
    3b66:	cd bf       	out	0x3d, r28	; 61
    3b68:	ed 01       	movw	r28, r26
    3b6a:	08 95       	ret

00003b6c <_exit>:
    3b6c:	f8 94       	cli

00003b6e <__stop_program>:
    3b6e:	ff cf       	rjmp	.-2      	; 0x3b6e <__stop_program>
