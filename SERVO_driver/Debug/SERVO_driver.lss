
SERVO_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00002c06  00002c9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  00800168  00800168  00002da2  2**0
                  ALLOC
  3 .stab         00001ee4  00000000  00000000  00002da4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fb2  00000000  00000000  00004c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00005c3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00005dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000600e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00008620  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  00009aee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000adfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000afdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000b2e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bcfd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 bc 13 	jmp	0x2778	; 0x2778 <__vector_6>
      1c:	0c 94 ef 13 	jmp	0x27de	; 0x27de <__vector_7>
      20:	0c 94 63 14 	jmp	0x28c6	; 0x28c6 <__vector_8>
      24:	0c 94 d7 14 	jmp	0x29ae	; 0x29ae <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a8 38       	cpi	r26, 0x88	; 136
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e6 e0       	ldi	r30, 0x06	; 6
      78:	fc e2       	ldi	r31, 0x2C	; 44
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <main>
      8a:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e6 15 	jmp	0x2bcc	; 0x2bcc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d6 15 	jmp	0x2bac	; 0x2bac <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f2 15 	jmp	0x2be4	; 0x2be4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d6 15 	jmp	0x2bac	; 0x2bac <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f2 15 	jmp	0x2be4	; 0x2be4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e6 15 	jmp	0x2bcc	; 0x2bcc <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d2 15 	jmp	0x2ba4	; 0x2ba4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ee 15 	jmp	0x2bdc	; 0x2bdc <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 d6 15 	jmp	0x2bac	; 0x2bac <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 f2 15 	jmp	0x2be4	; 0x2be4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 d6 15 	jmp	0x2bac	; 0x2bac <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 f2 15 	jmp	0x2be4	; 0x2be4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 d6 15 	jmp	0x2bac	; 0x2bac <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 f2 15 	jmp	0x2be4	; 0x2be4 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 d3 15 	jmp	0x2ba6	; 0x2ba6 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 ef 15 	jmp	0x2bde	; 0x2bde <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 da 15 	jmp	0x2bb4	; 0x2bb4 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 f6 15 	jmp	0x2bec	; 0x2bec <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 d2 15 	jmp	0x2ba4	; 0x2ba4 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 ee 15 	jmp	0x2bdc	; 0x2bdc <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <ADC_voidInitialize>:
#include "Bit_Math.h"
#include "DIO_interface.h"
#include "ADC_private.h"
#include "ADC_interface.h"

void ADC_voidInitialize(u8 Copy_u8ADC_Channel){
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <ADC_voidInitialize+0x6>
     ef0:	0f 92       	push	r0
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
     ef6:	89 83       	std	Y+1, r24	; 0x01
	ClrBit(ADMUX,PIN7);
     ef8:	a7 e2       	ldi	r26, 0x27	; 39
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e7 e2       	ldi	r30, 0x27	; 39
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	8f 77       	andi	r24, 0x7F	; 127
     f04:	8c 93       	st	X, r24
	SetBit(ADMUX,PIN6);
     f06:	a7 e2       	ldi	r26, 0x27	; 39
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e7 e2       	ldi	r30, 0x27	; 39
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	80 64       	ori	r24, 0x40	; 64
     f12:	8c 93       	st	X, r24
	ClrBit(ADMUX,PIN5);
     f14:	a7 e2       	ldi	r26, 0x27	; 39
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e7 e2       	ldi	r30, 0x27	; 39
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	8f 7d       	andi	r24, 0xDF	; 223
     f20:	8c 93       	st	X, r24
	
	switch(Copy_u8ADC_Channel){
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	3b 83       	std	Y+3, r19	; 0x03
     f2a:	2a 83       	std	Y+2, r18	; 0x02
     f2c:	8a 81       	ldd	r24, Y+2	; 0x02
     f2e:	9b 81       	ldd	r25, Y+3	; 0x03
     f30:	83 30       	cpi	r24, 0x03	; 3
     f32:	91 05       	cpc	r25, r1
     f34:	09 f4       	brne	.+2      	; 0xf38 <ADC_voidInitialize+0x4e>
     f36:	9b c0       	rjmp	.+310    	; 0x106e <ADC_voidInitialize+0x184>
     f38:	2a 81       	ldd	r18, Y+2	; 0x02
     f3a:	3b 81       	ldd	r19, Y+3	; 0x03
     f3c:	24 30       	cpi	r18, 0x04	; 4
     f3e:	31 05       	cpc	r19, r1
     f40:	8c f4       	brge	.+34     	; 0xf64 <ADC_voidInitialize+0x7a>
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	9b 81       	ldd	r25, Y+3	; 0x03
     f46:	81 30       	cpi	r24, 0x01	; 1
     f48:	91 05       	cpc	r25, r1
     f4a:	09 f4       	brne	.+2      	; 0xf4e <ADC_voidInitialize+0x64>
     f4c:	48 c0       	rjmp	.+144    	; 0xfde <ADC_voidInitialize+0xf4>
     f4e:	2a 81       	ldd	r18, Y+2	; 0x02
     f50:	3b 81       	ldd	r19, Y+3	; 0x03
     f52:	22 30       	cpi	r18, 0x02	; 2
     f54:	31 05       	cpc	r19, r1
     f56:	0c f0       	brlt	.+2      	; 0xf5a <ADC_voidInitialize+0x70>
     f58:	66 c0       	rjmp	.+204    	; 0x1026 <ADC_voidInitialize+0x13c>
     f5a:	8a 81       	ldd	r24, Y+2	; 0x02
     f5c:	9b 81       	ldd	r25, Y+3	; 0x03
     f5e:	00 97       	sbiw	r24, 0x00	; 0
     f60:	d1 f0       	breq	.+52     	; 0xf96 <ADC_voidInitialize+0xac>
     f62:	38 c1       	rjmp	.+624    	; 0x11d4 <ADC_voidInitialize+0x2ea>
     f64:	2a 81       	ldd	r18, Y+2	; 0x02
     f66:	3b 81       	ldd	r19, Y+3	; 0x03
     f68:	25 30       	cpi	r18, 0x05	; 5
     f6a:	31 05       	cpc	r19, r1
     f6c:	09 f4       	brne	.+2      	; 0xf70 <ADC_voidInitialize+0x86>
     f6e:	c7 c0       	rjmp	.+398    	; 0x10fe <ADC_voidInitialize+0x214>
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	9b 81       	ldd	r25, Y+3	; 0x03
     f74:	85 30       	cpi	r24, 0x05	; 5
     f76:	91 05       	cpc	r25, r1
     f78:	0c f4       	brge	.+2      	; 0xf7c <ADC_voidInitialize+0x92>
     f7a:	9d c0       	rjmp	.+314    	; 0x10b6 <ADC_voidInitialize+0x1cc>
     f7c:	2a 81       	ldd	r18, Y+2	; 0x02
     f7e:	3b 81       	ldd	r19, Y+3	; 0x03
     f80:	26 30       	cpi	r18, 0x06	; 6
     f82:	31 05       	cpc	r19, r1
     f84:	09 f4       	brne	.+2      	; 0xf88 <ADC_voidInitialize+0x9e>
     f86:	df c0       	rjmp	.+446    	; 0x1146 <ADC_voidInitialize+0x25c>
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	9b 81       	ldd	r25, Y+3	; 0x03
     f8c:	87 30       	cpi	r24, 0x07	; 7
     f8e:	91 05       	cpc	r25, r1
     f90:	09 f4       	brne	.+2      	; 0xf94 <ADC_voidInitialize+0xaa>
     f92:	fd c0       	rjmp	.+506    	; 0x118e <ADC_voidInitialize+0x2a4>
     f94:	1f c1       	rjmp	.+574    	; 0x11d4 <ADC_voidInitialize+0x2ea>
		case ADC0:
			ClrBit(ADMUX,PIN4);
     f96:	a7 e2       	ldi	r26, 0x27	; 39
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e7 e2       	ldi	r30, 0x27	; 39
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	8f 7e       	andi	r24, 0xEF	; 239
     fa2:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN3);
     fa4:	a7 e2       	ldi	r26, 0x27	; 39
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e7 e2       	ldi	r30, 0x27	; 39
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	87 7f       	andi	r24, 0xF7	; 247
     fb0:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN2);
     fb2:	a7 e2       	ldi	r26, 0x27	; 39
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e7 e2       	ldi	r30, 0x27	; 39
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	8b 7f       	andi	r24, 0xFB	; 251
     fbe:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN1);
     fc0:	a7 e2       	ldi	r26, 0x27	; 39
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e7 e2       	ldi	r30, 0x27	; 39
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	8d 7f       	andi	r24, 0xFD	; 253
     fcc:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN0);
     fce:	a7 e2       	ldi	r26, 0x27	; 39
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e7 e2       	ldi	r30, 0x27	; 39
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	8e 7f       	andi	r24, 0xFE	; 254
     fda:	8c 93       	st	X, r24
     fdc:	fb c0       	rjmp	.+502    	; 0x11d4 <ADC_voidInitialize+0x2ea>
			break;
		case ADC1:
			ClrBit(ADMUX,PIN4);
     fde:	a7 e2       	ldi	r26, 0x27	; 39
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e7 e2       	ldi	r30, 0x27	; 39
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	8f 7e       	andi	r24, 0xEF	; 239
     fea:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN3);
     fec:	a7 e2       	ldi	r26, 0x27	; 39
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e7 e2       	ldi	r30, 0x27	; 39
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	87 7f       	andi	r24, 0xF7	; 247
     ff8:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN2);
     ffa:	a7 e2       	ldi	r26, 0x27	; 39
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e7 e2       	ldi	r30, 0x27	; 39
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	8b 7f       	andi	r24, 0xFB	; 251
    1006:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN1);
    1008:	a7 e2       	ldi	r26, 0x27	; 39
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e7 e2       	ldi	r30, 0x27	; 39
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	8d 7f       	andi	r24, 0xFD	; 253
    1014:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN0);
    1016:	a7 e2       	ldi	r26, 0x27	; 39
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e7 e2       	ldi	r30, 0x27	; 39
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	81 60       	ori	r24, 0x01	; 1
    1022:	8c 93       	st	X, r24
    1024:	d7 c0       	rjmp	.+430    	; 0x11d4 <ADC_voidInitialize+0x2ea>
			break;
		case ADC2:
			ClrBit(ADMUX,PIN4);
    1026:	a7 e2       	ldi	r26, 0x27	; 39
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e7 e2       	ldi	r30, 0x27	; 39
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	8f 7e       	andi	r24, 0xEF	; 239
    1032:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN3);
    1034:	a7 e2       	ldi	r26, 0x27	; 39
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e7 e2       	ldi	r30, 0x27	; 39
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	87 7f       	andi	r24, 0xF7	; 247
    1040:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN2);
    1042:	a7 e2       	ldi	r26, 0x27	; 39
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e7 e2       	ldi	r30, 0x27	; 39
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	8b 7f       	andi	r24, 0xFB	; 251
    104e:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN1);
    1050:	a7 e2       	ldi	r26, 0x27	; 39
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e7 e2       	ldi	r30, 0x27	; 39
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	82 60       	ori	r24, 0x02	; 2
    105c:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN0);
    105e:	a7 e2       	ldi	r26, 0x27	; 39
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e7 e2       	ldi	r30, 0x27	; 39
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	8e 7f       	andi	r24, 0xFE	; 254
    106a:	8c 93       	st	X, r24
    106c:	b3 c0       	rjmp	.+358    	; 0x11d4 <ADC_voidInitialize+0x2ea>
			break;
		case ADC3:
			ClrBit(ADMUX,PIN4);
    106e:	a7 e2       	ldi	r26, 0x27	; 39
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e7 e2       	ldi	r30, 0x27	; 39
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	8f 7e       	andi	r24, 0xEF	; 239
    107a:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN3);
    107c:	a7 e2       	ldi	r26, 0x27	; 39
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e7 e2       	ldi	r30, 0x27	; 39
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	87 7f       	andi	r24, 0xF7	; 247
    1088:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN2);
    108a:	a7 e2       	ldi	r26, 0x27	; 39
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e7 e2       	ldi	r30, 0x27	; 39
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	8b 7f       	andi	r24, 0xFB	; 251
    1096:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN1);
    1098:	a7 e2       	ldi	r26, 0x27	; 39
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e7 e2       	ldi	r30, 0x27	; 39
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	82 60       	ori	r24, 0x02	; 2
    10a4:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN0);
    10a6:	a7 e2       	ldi	r26, 0x27	; 39
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e7 e2       	ldi	r30, 0x27	; 39
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	81 60       	ori	r24, 0x01	; 1
    10b2:	8c 93       	st	X, r24
    10b4:	8f c0       	rjmp	.+286    	; 0x11d4 <ADC_voidInitialize+0x2ea>
			break;
		case ADC4:
			ClrBit(ADMUX,PIN4);
    10b6:	a7 e2       	ldi	r26, 0x27	; 39
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	e7 e2       	ldi	r30, 0x27	; 39
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	8f 7e       	andi	r24, 0xEF	; 239
    10c2:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN3);
    10c4:	a7 e2       	ldi	r26, 0x27	; 39
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	e7 e2       	ldi	r30, 0x27	; 39
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	87 7f       	andi	r24, 0xF7	; 247
    10d0:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN2);
    10d2:	a7 e2       	ldi	r26, 0x27	; 39
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e7 e2       	ldi	r30, 0x27	; 39
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	84 60       	ori	r24, 0x04	; 4
    10de:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN1);
    10e0:	a7 e2       	ldi	r26, 0x27	; 39
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e7 e2       	ldi	r30, 0x27	; 39
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	8d 7f       	andi	r24, 0xFD	; 253
    10ec:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN0);
    10ee:	a7 e2       	ldi	r26, 0x27	; 39
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e7 e2       	ldi	r30, 0x27	; 39
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	8e 7f       	andi	r24, 0xFE	; 254
    10fa:	8c 93       	st	X, r24
    10fc:	6b c0       	rjmp	.+214    	; 0x11d4 <ADC_voidInitialize+0x2ea>
			break;
		case ADC5:
			ClrBit(ADMUX,PIN4);
    10fe:	a7 e2       	ldi	r26, 0x27	; 39
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e7 e2       	ldi	r30, 0x27	; 39
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	8f 7e       	andi	r24, 0xEF	; 239
    110a:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN3);
    110c:	a7 e2       	ldi	r26, 0x27	; 39
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e7 e2       	ldi	r30, 0x27	; 39
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	87 7f       	andi	r24, 0xF7	; 247
    1118:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN2);
    111a:	a7 e2       	ldi	r26, 0x27	; 39
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e7 e2       	ldi	r30, 0x27	; 39
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	84 60       	ori	r24, 0x04	; 4
    1126:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN1);
    1128:	a7 e2       	ldi	r26, 0x27	; 39
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e7 e2       	ldi	r30, 0x27	; 39
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	8d 7f       	andi	r24, 0xFD	; 253
    1134:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN0);
    1136:	a7 e2       	ldi	r26, 0x27	; 39
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e7 e2       	ldi	r30, 0x27	; 39
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	81 60       	ori	r24, 0x01	; 1
    1142:	8c 93       	st	X, r24
    1144:	47 c0       	rjmp	.+142    	; 0x11d4 <ADC_voidInitialize+0x2ea>
			break;
		case ADC6:
			ClrBit(ADMUX,PIN4);
    1146:	a7 e2       	ldi	r26, 0x27	; 39
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e7 e2       	ldi	r30, 0x27	; 39
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	8f 7e       	andi	r24, 0xEF	; 239
    1152:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN3);
    1154:	a7 e2       	ldi	r26, 0x27	; 39
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e7 e2       	ldi	r30, 0x27	; 39
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	87 7f       	andi	r24, 0xF7	; 247
    1160:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN2);
    1162:	a7 e2       	ldi	r26, 0x27	; 39
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e7 e2       	ldi	r30, 0x27	; 39
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	84 60       	ori	r24, 0x04	; 4
    116e:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN1);
    1170:	a7 e2       	ldi	r26, 0x27	; 39
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	e7 e2       	ldi	r30, 0x27	; 39
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	82 60       	ori	r24, 0x02	; 2
    117c:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN0);
    117e:	a7 e2       	ldi	r26, 0x27	; 39
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e7 e2       	ldi	r30, 0x27	; 39
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	8e 7f       	andi	r24, 0xFE	; 254
    118a:	8c 93       	st	X, r24
    118c:	23 c0       	rjmp	.+70     	; 0x11d4 <ADC_voidInitialize+0x2ea>
			break;
		case ADC7:
			ClrBit(ADMUX,PIN4);
    118e:	a7 e2       	ldi	r26, 0x27	; 39
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e7 e2       	ldi	r30, 0x27	; 39
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	8f 7e       	andi	r24, 0xEF	; 239
    119a:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN3);
    119c:	a7 e2       	ldi	r26, 0x27	; 39
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e7 e2       	ldi	r30, 0x27	; 39
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	87 7f       	andi	r24, 0xF7	; 247
    11a8:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN2);
    11aa:	a7 e2       	ldi	r26, 0x27	; 39
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	e7 e2       	ldi	r30, 0x27	; 39
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	84 60       	ori	r24, 0x04	; 4
    11b6:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN1);
    11b8:	a7 e2       	ldi	r26, 0x27	; 39
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e7 e2       	ldi	r30, 0x27	; 39
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	82 60       	ori	r24, 0x02	; 2
    11c4:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN0);
    11c6:	a7 e2       	ldi	r26, 0x27	; 39
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e7 e2       	ldi	r30, 0x27	; 39
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	81 60       	ori	r24, 0x01	; 1
    11d2:	8c 93       	st	X, r24
			break;
	}
	
	ClrBit(ADCSRA,PIN0);
    11d4:	a6 e2       	ldi	r26, 0x26	; 38
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e6 e2       	ldi	r30, 0x26	; 38
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	8e 7f       	andi	r24, 0xFE	; 254
    11e0:	8c 93       	st	X, r24
	SetBit(ADCSRA,PIN1);
    11e2:	a6 e2       	ldi	r26, 0x26	; 38
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e6 e2       	ldi	r30, 0x26	; 38
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	82 60       	ori	r24, 0x02	; 2
    11ee:	8c 93       	st	X, r24
	SetBit(ADCSRA,PIN2);
    11f0:	a6 e2       	ldi	r26, 0x26	; 38
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	e6 e2       	ldi	r30, 0x26	; 38
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	84 60       	ori	r24, 0x04	; 4
    11fc:	8c 93       	st	X, r24
	
	SetBit(ADCSRA,PIN7);
    11fe:	a6 e2       	ldi	r26, 0x26	; 38
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	e6 e2       	ldi	r30, 0x26	; 38
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	80 68       	ori	r24, 0x80	; 128
    120a:	8c 93       	st	X, r24
	SetBit(ADCSRA,PIN6);
    120c:	a6 e2       	ldi	r26, 0x26	; 38
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	e6 e2       	ldi	r30, 0x26	; 38
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	80 64       	ori	r24, 0x40	; 64
    1218:	8c 93       	st	X, r24
}
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	cf 91       	pop	r28
    1222:	df 91       	pop	r29
    1224:	08 95       	ret

00001226 <ADC_voidStartConversion>:

u16 ADC_voidStartConversion(){
    1226:	df 93       	push	r29
    1228:	cf 93       	push	r28
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
	
	SetBit(ADCSRA,PIN6);
    122e:	a6 e2       	ldi	r26, 0x26	; 38
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	e6 e2       	ldi	r30, 0x26	; 38
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	80 64       	ori	r24, 0x40	; 64
    123a:	8c 93       	st	X, r24
	return ADC;
    123c:	e4 e2       	ldi	r30, 0x24	; 36
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	91 81       	ldd	r25, Z+1	; 0x01
    1244:	cf 91       	pop	r28
    1246:	df 91       	pop	r29
    1248:	08 95       	ret

0000124a <DIO_voidSetPinDirection>:
#include "Bit_Math.h"
#include "DIO_config.h"
#include "DIO_private.h"
#include "DIO_interface.h"

void DIO_voidSetPinDirection(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinDir){
    124a:	df 93       	push	r29
    124c:	cf 93       	push	r28
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
    1252:	27 97       	sbiw	r28, 0x07	; 7
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	f8 94       	cli
    1258:	de bf       	out	0x3e, r29	; 62
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	cd bf       	out	0x3d, r28	; 61
    125e:	89 83       	std	Y+1, r24	; 0x01
    1260:	6a 83       	std	Y+2, r22	; 0x02
    1262:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinDir==PIN_OUTPUT){     //output
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	81 30       	cpi	r24, 0x01	; 1
    1268:	09 f0       	breq	.+2      	; 0x126c <DIO_voidSetPinDirection+0x22>
    126a:	6f c0       	rjmp	.+222    	; 0x134a <DIO_voidSetPinDirection+0x100>
		switch(Copy_u8PortID){
    126c:	89 81       	ldd	r24, Y+1	; 0x01
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	3f 83       	std	Y+7, r19	; 0x07
    1274:	2e 83       	std	Y+6, r18	; 0x06
    1276:	8e 81       	ldd	r24, Y+6	; 0x06
    1278:	9f 81       	ldd	r25, Y+7	; 0x07
    127a:	81 30       	cpi	r24, 0x01	; 1
    127c:	91 05       	cpc	r25, r1
    127e:	49 f1       	breq	.+82     	; 0x12d2 <DIO_voidSetPinDirection+0x88>
    1280:	2e 81       	ldd	r18, Y+6	; 0x06
    1282:	3f 81       	ldd	r19, Y+7	; 0x07
    1284:	22 30       	cpi	r18, 0x02	; 2
    1286:	31 05       	cpc	r19, r1
    1288:	2c f4       	brge	.+10     	; 0x1294 <DIO_voidSetPinDirection+0x4a>
    128a:	8e 81       	ldd	r24, Y+6	; 0x06
    128c:	9f 81       	ldd	r25, Y+7	; 0x07
    128e:	00 97       	sbiw	r24, 0x00	; 0
    1290:	61 f0       	breq	.+24     	; 0x12aa <DIO_voidSetPinDirection+0x60>
    1292:	d2 c0       	rjmp	.+420    	; 0x1438 <DIO_voidSetPinDirection+0x1ee>
    1294:	2e 81       	ldd	r18, Y+6	; 0x06
    1296:	3f 81       	ldd	r19, Y+7	; 0x07
    1298:	22 30       	cpi	r18, 0x02	; 2
    129a:	31 05       	cpc	r19, r1
    129c:	71 f1       	breq	.+92     	; 0x12fa <DIO_voidSetPinDirection+0xb0>
    129e:	8e 81       	ldd	r24, Y+6	; 0x06
    12a0:	9f 81       	ldd	r25, Y+7	; 0x07
    12a2:	83 30       	cpi	r24, 0x03	; 3
    12a4:	91 05       	cpc	r25, r1
    12a6:	e9 f1       	breq	.+122    	; 0x1322 <DIO_voidSetPinDirection+0xd8>
    12a8:	c7 c0       	rjmp	.+398    	; 0x1438 <DIO_voidSetPinDirection+0x1ee>
			case PORTA/*Port A*/: SetBit(DDRA_REG,Copy_u8PinID);break;
    12aa:	aa e3       	ldi	r26, 0x3A	; 58
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	ea e3       	ldi	r30, 0x3A	; 58
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	48 2f       	mov	r20, r24
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	02 2e       	mov	r0, r18
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <DIO_voidSetPinDirection+0x7e>
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	0a 94       	dec	r0
    12ca:	e2 f7       	brpl	.-8      	; 0x12c4 <DIO_voidSetPinDirection+0x7a>
    12cc:	84 2b       	or	r24, r20
    12ce:	8c 93       	st	X, r24
    12d0:	b3 c0       	rjmp	.+358    	; 0x1438 <DIO_voidSetPinDirection+0x1ee>
			case PORTB/*Port B*/: SetBit(DDRB_REG,Copy_u8PinID);break;
    12d2:	a7 e3       	ldi	r26, 0x37	; 55
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	e7 e3       	ldi	r30, 0x37	; 55
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	48 2f       	mov	r20, r24
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	02 2e       	mov	r0, r18
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <DIO_voidSetPinDirection+0xa6>
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	0a 94       	dec	r0
    12f2:	e2 f7       	brpl	.-8      	; 0x12ec <DIO_voidSetPinDirection+0xa2>
    12f4:	84 2b       	or	r24, r20
    12f6:	8c 93       	st	X, r24
    12f8:	9f c0       	rjmp	.+318    	; 0x1438 <DIO_voidSetPinDirection+0x1ee>
			case PORTC/*Port C*/: SetBit(DDRC_REG,Copy_u8PinID);break;
    12fa:	a4 e3       	ldi	r26, 0x34	; 52
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e4 e3       	ldi	r30, 0x34	; 52
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	48 2f       	mov	r20, r24
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	02 2e       	mov	r0, r18
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <DIO_voidSetPinDirection+0xce>
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	0a 94       	dec	r0
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <DIO_voidSetPinDirection+0xca>
    131c:	84 2b       	or	r24, r20
    131e:	8c 93       	st	X, r24
    1320:	8b c0       	rjmp	.+278    	; 0x1438 <DIO_voidSetPinDirection+0x1ee>
			case PORTD/*Port D*/: SetBit(DDRD_REG,Copy_u8PinID);break;
    1322:	a1 e3       	ldi	r26, 0x31	; 49
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	e1 e3       	ldi	r30, 0x31	; 49
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	48 2f       	mov	r20, r24
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	02 2e       	mov	r0, r18
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <DIO_voidSetPinDirection+0xf6>
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	0a 94       	dec	r0
    1342:	e2 f7       	brpl	.-8      	; 0x133c <DIO_voidSetPinDirection+0xf2>
    1344:	84 2b       	or	r24, r20
    1346:	8c 93       	st	X, r24
    1348:	77 c0       	rjmp	.+238    	; 0x1438 <DIO_voidSetPinDirection+0x1ee>
		}
	}
	else if(Copy_u8PinDir==PIN_INPUT){ //input
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	88 23       	and	r24, r24
    134e:	09 f0       	breq	.+2      	; 0x1352 <DIO_voidSetPinDirection+0x108>
    1350:	73 c0       	rjmp	.+230    	; 0x1438 <DIO_voidSetPinDirection+0x1ee>
		switch(Copy_u8PortID){
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	3d 83       	std	Y+5, r19	; 0x05
    135a:	2c 83       	std	Y+4, r18	; 0x04
    135c:	8c 81       	ldd	r24, Y+4	; 0x04
    135e:	9d 81       	ldd	r25, Y+5	; 0x05
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	91 05       	cpc	r25, r1
    1364:	59 f1       	breq	.+86     	; 0x13bc <DIO_voidSetPinDirection+0x172>
    1366:	2c 81       	ldd	r18, Y+4	; 0x04
    1368:	3d 81       	ldd	r19, Y+5	; 0x05
    136a:	22 30       	cpi	r18, 0x02	; 2
    136c:	31 05       	cpc	r19, r1
    136e:	2c f4       	brge	.+10     	; 0x137a <DIO_voidSetPinDirection+0x130>
    1370:	8c 81       	ldd	r24, Y+4	; 0x04
    1372:	9d 81       	ldd	r25, Y+5	; 0x05
    1374:	00 97       	sbiw	r24, 0x00	; 0
    1376:	69 f0       	breq	.+26     	; 0x1392 <DIO_voidSetPinDirection+0x148>
    1378:	5f c0       	rjmp	.+190    	; 0x1438 <DIO_voidSetPinDirection+0x1ee>
    137a:	2c 81       	ldd	r18, Y+4	; 0x04
    137c:	3d 81       	ldd	r19, Y+5	; 0x05
    137e:	22 30       	cpi	r18, 0x02	; 2
    1380:	31 05       	cpc	r19, r1
    1382:	89 f1       	breq	.+98     	; 0x13e6 <DIO_voidSetPinDirection+0x19c>
    1384:	8c 81       	ldd	r24, Y+4	; 0x04
    1386:	9d 81       	ldd	r25, Y+5	; 0x05
    1388:	83 30       	cpi	r24, 0x03	; 3
    138a:	91 05       	cpc	r25, r1
    138c:	09 f4       	brne	.+2      	; 0x1390 <DIO_voidSetPinDirection+0x146>
    138e:	40 c0       	rjmp	.+128    	; 0x1410 <DIO_voidSetPinDirection+0x1c6>
    1390:	53 c0       	rjmp	.+166    	; 0x1438 <DIO_voidSetPinDirection+0x1ee>
			case PORTA/*Port A*/: ClrBit(DDRA_REG,Copy_u8PinID);break;
    1392:	aa e3       	ldi	r26, 0x3A	; 58
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	ea e3       	ldi	r30, 0x3A	; 58
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	48 2f       	mov	r20, r24
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	02 2e       	mov	r0, r18
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <DIO_voidSetPinDirection+0x166>
    13ac:	88 0f       	add	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	0a 94       	dec	r0
    13b2:	e2 f7       	brpl	.-8      	; 0x13ac <DIO_voidSetPinDirection+0x162>
    13b4:	80 95       	com	r24
    13b6:	84 23       	and	r24, r20
    13b8:	8c 93       	st	X, r24
    13ba:	3e c0       	rjmp	.+124    	; 0x1438 <DIO_voidSetPinDirection+0x1ee>
			case PORTB/*Port B*/: ClrBit(DDRB_REG,Copy_u8PinID);break;
    13bc:	a7 e3       	ldi	r26, 0x37	; 55
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	e7 e3       	ldi	r30, 0x37	; 55
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	48 2f       	mov	r20, r24
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	02 2e       	mov	r0, r18
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <DIO_voidSetPinDirection+0x190>
    13d6:	88 0f       	add	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	0a 94       	dec	r0
    13dc:	e2 f7       	brpl	.-8      	; 0x13d6 <DIO_voidSetPinDirection+0x18c>
    13de:	80 95       	com	r24
    13e0:	84 23       	and	r24, r20
    13e2:	8c 93       	st	X, r24
    13e4:	29 c0       	rjmp	.+82     	; 0x1438 <DIO_voidSetPinDirection+0x1ee>
			case PORTC/*Port C*/: ClrBit(DDRC_REG,Copy_u8PinID);break;
    13e6:	a4 e3       	ldi	r26, 0x34	; 52
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e4 e3       	ldi	r30, 0x34	; 52
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	48 2f       	mov	r20, r24
    13f2:	8a 81       	ldd	r24, Y+2	; 0x02
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	02 2e       	mov	r0, r18
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <DIO_voidSetPinDirection+0x1ba>
    1400:	88 0f       	add	r24, r24
    1402:	99 1f       	adc	r25, r25
    1404:	0a 94       	dec	r0
    1406:	e2 f7       	brpl	.-8      	; 0x1400 <DIO_voidSetPinDirection+0x1b6>
    1408:	80 95       	com	r24
    140a:	84 23       	and	r24, r20
    140c:	8c 93       	st	X, r24
    140e:	14 c0       	rjmp	.+40     	; 0x1438 <DIO_voidSetPinDirection+0x1ee>
			case PORTD/*Port D*/: ClrBit(DDRD_REG,Copy_u8PinID);break;
    1410:	a1 e3       	ldi	r26, 0x31	; 49
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e1 e3       	ldi	r30, 0x31	; 49
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	48 2f       	mov	r20, r24
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	02 2e       	mov	r0, r18
    1428:	02 c0       	rjmp	.+4      	; 0x142e <DIO_voidSetPinDirection+0x1e4>
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	0a 94       	dec	r0
    1430:	e2 f7       	brpl	.-8      	; 0x142a <DIO_voidSetPinDirection+0x1e0>
    1432:	80 95       	com	r24
    1434:	84 23       	and	r24, r20
    1436:	8c 93       	st	X, r24
		}
	}
}
    1438:	27 96       	adiw	r28, 0x07	; 7
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	de bf       	out	0x3e, r29	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	cd bf       	out	0x3d, r28	; 61
    1444:	cf 91       	pop	r28
    1446:	df 91       	pop	r29
    1448:	08 95       	ret

0000144a <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
    144a:	df 93       	push	r29
    144c:	cf 93       	push	r28
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62
    1452:	27 97       	sbiw	r28, 0x07	; 7
    1454:	0f b6       	in	r0, 0x3f	; 63
    1456:	f8 94       	cli
    1458:	de bf       	out	0x3e, r29	; 62
    145a:	0f be       	out	0x3f, r0	; 63
    145c:	cd bf       	out	0x3d, r28	; 61
    145e:	89 83       	std	Y+1, r24	; 0x01
    1460:	6a 83       	std	Y+2, r22	; 0x02
    1462:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinValue==PIN_HIGH){      //high
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	81 30       	cpi	r24, 0x01	; 1
    1468:	09 f0       	breq	.+2      	; 0x146c <DIO_voidSetPinValue+0x22>
    146a:	6f c0       	rjmp	.+222    	; 0x154a <DIO_voidSetPinValue+0x100>
		switch(Copy_u8PortID){
    146c:	89 81       	ldd	r24, Y+1	; 0x01
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	3f 83       	std	Y+7, r19	; 0x07
    1474:	2e 83       	std	Y+6, r18	; 0x06
    1476:	8e 81       	ldd	r24, Y+6	; 0x06
    1478:	9f 81       	ldd	r25, Y+7	; 0x07
    147a:	81 30       	cpi	r24, 0x01	; 1
    147c:	91 05       	cpc	r25, r1
    147e:	49 f1       	breq	.+82     	; 0x14d2 <DIO_voidSetPinValue+0x88>
    1480:	2e 81       	ldd	r18, Y+6	; 0x06
    1482:	3f 81       	ldd	r19, Y+7	; 0x07
    1484:	22 30       	cpi	r18, 0x02	; 2
    1486:	31 05       	cpc	r19, r1
    1488:	2c f4       	brge	.+10     	; 0x1494 <DIO_voidSetPinValue+0x4a>
    148a:	8e 81       	ldd	r24, Y+6	; 0x06
    148c:	9f 81       	ldd	r25, Y+7	; 0x07
    148e:	00 97       	sbiw	r24, 0x00	; 0
    1490:	61 f0       	breq	.+24     	; 0x14aa <DIO_voidSetPinValue+0x60>
    1492:	d2 c0       	rjmp	.+420    	; 0x1638 <DIO_voidSetPinValue+0x1ee>
    1494:	2e 81       	ldd	r18, Y+6	; 0x06
    1496:	3f 81       	ldd	r19, Y+7	; 0x07
    1498:	22 30       	cpi	r18, 0x02	; 2
    149a:	31 05       	cpc	r19, r1
    149c:	71 f1       	breq	.+92     	; 0x14fa <DIO_voidSetPinValue+0xb0>
    149e:	8e 81       	ldd	r24, Y+6	; 0x06
    14a0:	9f 81       	ldd	r25, Y+7	; 0x07
    14a2:	83 30       	cpi	r24, 0x03	; 3
    14a4:	91 05       	cpc	r25, r1
    14a6:	e9 f1       	breq	.+122    	; 0x1522 <DIO_voidSetPinValue+0xd8>
    14a8:	c7 c0       	rjmp	.+398    	; 0x1638 <DIO_voidSetPinValue+0x1ee>
			case PORTA/*Port A*/: SetBit(PORTA_REG,Copy_u8PinID);break;
    14aa:	ab e3       	ldi	r26, 0x3B	; 59
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	eb e3       	ldi	r30, 0x3B	; 59
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	48 2f       	mov	r20, r24
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	02 2e       	mov	r0, r18
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <DIO_voidSetPinValue+0x7e>
    14c4:	88 0f       	add	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	0a 94       	dec	r0
    14ca:	e2 f7       	brpl	.-8      	; 0x14c4 <DIO_voidSetPinValue+0x7a>
    14cc:	84 2b       	or	r24, r20
    14ce:	8c 93       	st	X, r24
    14d0:	b3 c0       	rjmp	.+358    	; 0x1638 <DIO_voidSetPinValue+0x1ee>
			case PORTB/*Port B*/: SetBit(PORTB_REG,Copy_u8PinID);break;
    14d2:	a8 e3       	ldi	r26, 0x38	; 56
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	e8 e3       	ldi	r30, 0x38	; 56
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	48 2f       	mov	r20, r24
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	28 2f       	mov	r18, r24
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	02 2e       	mov	r0, r18
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <DIO_voidSetPinValue+0xa6>
    14ec:	88 0f       	add	r24, r24
    14ee:	99 1f       	adc	r25, r25
    14f0:	0a 94       	dec	r0
    14f2:	e2 f7       	brpl	.-8      	; 0x14ec <DIO_voidSetPinValue+0xa2>
    14f4:	84 2b       	or	r24, r20
    14f6:	8c 93       	st	X, r24
    14f8:	9f c0       	rjmp	.+318    	; 0x1638 <DIO_voidSetPinValue+0x1ee>
			case PORTC/*Port C*/: SetBit(PORTC_REG,Copy_u8PinID);break;
    14fa:	a5 e3       	ldi	r26, 0x35	; 53
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	e5 e3       	ldi	r30, 0x35	; 53
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	48 2f       	mov	r20, r24
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	02 2e       	mov	r0, r18
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <DIO_voidSetPinValue+0xce>
    1514:	88 0f       	add	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	0a 94       	dec	r0
    151a:	e2 f7       	brpl	.-8      	; 0x1514 <DIO_voidSetPinValue+0xca>
    151c:	84 2b       	or	r24, r20
    151e:	8c 93       	st	X, r24
    1520:	8b c0       	rjmp	.+278    	; 0x1638 <DIO_voidSetPinValue+0x1ee>
			case PORTD/*Port D*/: SetBit(PORTD_REG,Copy_u8PinID);break;
    1522:	a2 e3       	ldi	r26, 0x32	; 50
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e2 e3       	ldi	r30, 0x32	; 50
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	48 2f       	mov	r20, r24
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	02 2e       	mov	r0, r18
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <DIO_voidSetPinValue+0xf6>
    153c:	88 0f       	add	r24, r24
    153e:	99 1f       	adc	r25, r25
    1540:	0a 94       	dec	r0
    1542:	e2 f7       	brpl	.-8      	; 0x153c <DIO_voidSetPinValue+0xf2>
    1544:	84 2b       	or	r24, r20
    1546:	8c 93       	st	X, r24
    1548:	77 c0       	rjmp	.+238    	; 0x1638 <DIO_voidSetPinValue+0x1ee>
		}
	}
	else if(Copy_u8PinValue==PIN_LOW){  //low
    154a:	8b 81       	ldd	r24, Y+3	; 0x03
    154c:	88 23       	and	r24, r24
    154e:	09 f0       	breq	.+2      	; 0x1552 <DIO_voidSetPinValue+0x108>
    1550:	73 c0       	rjmp	.+230    	; 0x1638 <DIO_voidSetPinValue+0x1ee>
		switch(Copy_u8PortID){
    1552:	89 81       	ldd	r24, Y+1	; 0x01
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	3d 83       	std	Y+5, r19	; 0x05
    155a:	2c 83       	std	Y+4, r18	; 0x04
    155c:	8c 81       	ldd	r24, Y+4	; 0x04
    155e:	9d 81       	ldd	r25, Y+5	; 0x05
    1560:	81 30       	cpi	r24, 0x01	; 1
    1562:	91 05       	cpc	r25, r1
    1564:	59 f1       	breq	.+86     	; 0x15bc <DIO_voidSetPinValue+0x172>
    1566:	2c 81       	ldd	r18, Y+4	; 0x04
    1568:	3d 81       	ldd	r19, Y+5	; 0x05
    156a:	22 30       	cpi	r18, 0x02	; 2
    156c:	31 05       	cpc	r19, r1
    156e:	2c f4       	brge	.+10     	; 0x157a <DIO_voidSetPinValue+0x130>
    1570:	8c 81       	ldd	r24, Y+4	; 0x04
    1572:	9d 81       	ldd	r25, Y+5	; 0x05
    1574:	00 97       	sbiw	r24, 0x00	; 0
    1576:	69 f0       	breq	.+26     	; 0x1592 <DIO_voidSetPinValue+0x148>
    1578:	5f c0       	rjmp	.+190    	; 0x1638 <DIO_voidSetPinValue+0x1ee>
    157a:	2c 81       	ldd	r18, Y+4	; 0x04
    157c:	3d 81       	ldd	r19, Y+5	; 0x05
    157e:	22 30       	cpi	r18, 0x02	; 2
    1580:	31 05       	cpc	r19, r1
    1582:	89 f1       	breq	.+98     	; 0x15e6 <DIO_voidSetPinValue+0x19c>
    1584:	8c 81       	ldd	r24, Y+4	; 0x04
    1586:	9d 81       	ldd	r25, Y+5	; 0x05
    1588:	83 30       	cpi	r24, 0x03	; 3
    158a:	91 05       	cpc	r25, r1
    158c:	09 f4       	brne	.+2      	; 0x1590 <DIO_voidSetPinValue+0x146>
    158e:	40 c0       	rjmp	.+128    	; 0x1610 <DIO_voidSetPinValue+0x1c6>
    1590:	53 c0       	rjmp	.+166    	; 0x1638 <DIO_voidSetPinValue+0x1ee>
			case PORTA/*Port A*/: ClrBit(PORTA_REG,Copy_u8PinID);break;
    1592:	ab e3       	ldi	r26, 0x3B	; 59
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	eb e3       	ldi	r30, 0x3B	; 59
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	48 2f       	mov	r20, r24
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	28 2f       	mov	r18, r24
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	02 2e       	mov	r0, r18
    15aa:	02 c0       	rjmp	.+4      	; 0x15b0 <DIO_voidSetPinValue+0x166>
    15ac:	88 0f       	add	r24, r24
    15ae:	99 1f       	adc	r25, r25
    15b0:	0a 94       	dec	r0
    15b2:	e2 f7       	brpl	.-8      	; 0x15ac <DIO_voidSetPinValue+0x162>
    15b4:	80 95       	com	r24
    15b6:	84 23       	and	r24, r20
    15b8:	8c 93       	st	X, r24
    15ba:	3e c0       	rjmp	.+124    	; 0x1638 <DIO_voidSetPinValue+0x1ee>
			case PORTB/*Port B*/: ClrBit(PORTB_REG,Copy_u8PinID);break;
    15bc:	a8 e3       	ldi	r26, 0x38	; 56
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	e8 e3       	ldi	r30, 0x38	; 56
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	48 2f       	mov	r20, r24
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	28 2f       	mov	r18, r24
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	02 2e       	mov	r0, r18
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <DIO_voidSetPinValue+0x190>
    15d6:	88 0f       	add	r24, r24
    15d8:	99 1f       	adc	r25, r25
    15da:	0a 94       	dec	r0
    15dc:	e2 f7       	brpl	.-8      	; 0x15d6 <DIO_voidSetPinValue+0x18c>
    15de:	80 95       	com	r24
    15e0:	84 23       	and	r24, r20
    15e2:	8c 93       	st	X, r24
    15e4:	29 c0       	rjmp	.+82     	; 0x1638 <DIO_voidSetPinValue+0x1ee>
			case PORTC/*Port C*/: ClrBit(PORTC_REG,Copy_u8PinID);break;
    15e6:	a5 e3       	ldi	r26, 0x35	; 53
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	e5 e3       	ldi	r30, 0x35	; 53
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	48 2f       	mov	r20, r24
    15f2:	8a 81       	ldd	r24, Y+2	; 0x02
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	02 2e       	mov	r0, r18
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <DIO_voidSetPinValue+0x1ba>
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	0a 94       	dec	r0
    1606:	e2 f7       	brpl	.-8      	; 0x1600 <DIO_voidSetPinValue+0x1b6>
    1608:	80 95       	com	r24
    160a:	84 23       	and	r24, r20
    160c:	8c 93       	st	X, r24
    160e:	14 c0       	rjmp	.+40     	; 0x1638 <DIO_voidSetPinValue+0x1ee>
			case PORTD/*Port D*/: ClrBit(PORTD_REG,Copy_u8PinID);break;
    1610:	a2 e3       	ldi	r26, 0x32	; 50
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	e2 e3       	ldi	r30, 0x32	; 50
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	48 2f       	mov	r20, r24
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	28 2f       	mov	r18, r24
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	02 2e       	mov	r0, r18
    1628:	02 c0       	rjmp	.+4      	; 0x162e <DIO_voidSetPinValue+0x1e4>
    162a:	88 0f       	add	r24, r24
    162c:	99 1f       	adc	r25, r25
    162e:	0a 94       	dec	r0
    1630:	e2 f7       	brpl	.-8      	; 0x162a <DIO_voidSetPinValue+0x1e0>
    1632:	80 95       	com	r24
    1634:	84 23       	and	r24, r20
    1636:	8c 93       	st	X, r24
		}
	}	
}
    1638:	27 96       	adiw	r28, 0x07	; 7
    163a:	0f b6       	in	r0, 0x3f	; 63
    163c:	f8 94       	cli
    163e:	de bf       	out	0x3e, r29	; 62
    1640:	0f be       	out	0x3f, r0	; 63
    1642:	cd bf       	out	0x3d, r28	; 61
    1644:	cf 91       	pop	r28
    1646:	df 91       	pop	r29
    1648:	08 95       	ret

0000164a <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(u8 Copy_u8PortID,u8 Copy_u8PortDir){
    164a:	df 93       	push	r29
    164c:	cf 93       	push	r28
    164e:	00 d0       	rcall	.+0      	; 0x1650 <DIO_voidSetPortDirection+0x6>
    1650:	00 d0       	rcall	.+0      	; 0x1652 <DIO_voidSetPortDirection+0x8>
    1652:	cd b7       	in	r28, 0x3d	; 61
    1654:	de b7       	in	r29, 0x3e	; 62
    1656:	89 83       	std	Y+1, r24	; 0x01
    1658:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortID){
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	28 2f       	mov	r18, r24
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	3c 83       	std	Y+4, r19	; 0x04
    1662:	2b 83       	std	Y+3, r18	; 0x03
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	9c 81       	ldd	r25, Y+4	; 0x04
    1668:	81 30       	cpi	r24, 0x01	; 1
    166a:	91 05       	cpc	r25, r1
    166c:	d1 f0       	breq	.+52     	; 0x16a2 <DIO_voidSetPortDirection+0x58>
    166e:	2b 81       	ldd	r18, Y+3	; 0x03
    1670:	3c 81       	ldd	r19, Y+4	; 0x04
    1672:	22 30       	cpi	r18, 0x02	; 2
    1674:	31 05       	cpc	r19, r1
    1676:	2c f4       	brge	.+10     	; 0x1682 <DIO_voidSetPortDirection+0x38>
    1678:	8b 81       	ldd	r24, Y+3	; 0x03
    167a:	9c 81       	ldd	r25, Y+4	; 0x04
    167c:	00 97       	sbiw	r24, 0x00	; 0
    167e:	61 f0       	breq	.+24     	; 0x1698 <DIO_voidSetPortDirection+0x4e>
    1680:	1e c0       	rjmp	.+60     	; 0x16be <DIO_voidSetPortDirection+0x74>
    1682:	2b 81       	ldd	r18, Y+3	; 0x03
    1684:	3c 81       	ldd	r19, Y+4	; 0x04
    1686:	22 30       	cpi	r18, 0x02	; 2
    1688:	31 05       	cpc	r19, r1
    168a:	81 f0       	breq	.+32     	; 0x16ac <DIO_voidSetPortDirection+0x62>
    168c:	8b 81       	ldd	r24, Y+3	; 0x03
    168e:	9c 81       	ldd	r25, Y+4	; 0x04
    1690:	83 30       	cpi	r24, 0x03	; 3
    1692:	91 05       	cpc	r25, r1
    1694:	81 f0       	breq	.+32     	; 0x16b6 <DIO_voidSetPortDirection+0x6c>
    1696:	13 c0       	rjmp	.+38     	; 0x16be <DIO_voidSetPortDirection+0x74>
		case PORTA/*Port A*/: DDRA_REG=Copy_u8PortDir;break;
    1698:	ea e3       	ldi	r30, 0x3A	; 58
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	8a 81       	ldd	r24, Y+2	; 0x02
    169e:	80 83       	st	Z, r24
    16a0:	0e c0       	rjmp	.+28     	; 0x16be <DIO_voidSetPortDirection+0x74>
		case PORTB/*Port B*/: DDRB_REG=Copy_u8PortDir;break;
    16a2:	e7 e3       	ldi	r30, 0x37	; 55
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	80 83       	st	Z, r24
    16aa:	09 c0       	rjmp	.+18     	; 0x16be <DIO_voidSetPortDirection+0x74>
		case PORTC/*Port C*/: DDRC_REG=Copy_u8PortDir;break;
    16ac:	e4 e3       	ldi	r30, 0x34	; 52
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	80 83       	st	Z, r24
    16b4:	04 c0       	rjmp	.+8      	; 0x16be <DIO_voidSetPortDirection+0x74>
		case PORTD/*Port D*/: DDRD_REG=Copy_u8PortDir;break;
    16b6:	e1 e3       	ldi	r30, 0x31	; 49
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	80 83       	st	Z, r24
	}
}
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	0f 90       	pop	r0
    16c4:	0f 90       	pop	r0
    16c6:	cf 91       	pop	r28
    16c8:	df 91       	pop	r29
    16ca:	08 95       	ret

000016cc <DIO_voidSetAllPortInput>:

void DIO_voidSetAllPortInput(u8 Copy_u8PortID){
    16cc:	df 93       	push	r29
    16ce:	cf 93       	push	r28
    16d0:	00 d0       	rcall	.+0      	; 0x16d2 <DIO_voidSetAllPortInput+0x6>
    16d2:	0f 92       	push	r0
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62
    16d8:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID){
    16da:	89 81       	ldd	r24, Y+1	; 0x01
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	3b 83       	std	Y+3, r19	; 0x03
    16e2:	2a 83       	std	Y+2, r18	; 0x02
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	9b 81       	ldd	r25, Y+3	; 0x03
    16e8:	81 30       	cpi	r24, 0x01	; 1
    16ea:	91 05       	cpc	r25, r1
    16ec:	c9 f0       	breq	.+50     	; 0x1720 <DIO_voidSetAllPortInput+0x54>
    16ee:	2a 81       	ldd	r18, Y+2	; 0x02
    16f0:	3b 81       	ldd	r19, Y+3	; 0x03
    16f2:	22 30       	cpi	r18, 0x02	; 2
    16f4:	31 05       	cpc	r19, r1
    16f6:	2c f4       	brge	.+10     	; 0x1702 <DIO_voidSetAllPortInput+0x36>
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
    16fa:	9b 81       	ldd	r25, Y+3	; 0x03
    16fc:	00 97       	sbiw	r24, 0x00	; 0
    16fe:	61 f0       	breq	.+24     	; 0x1718 <DIO_voidSetAllPortInput+0x4c>
    1700:	1a c0       	rjmp	.+52     	; 0x1736 <DIO_voidSetAllPortInput+0x6a>
    1702:	2a 81       	ldd	r18, Y+2	; 0x02
    1704:	3b 81       	ldd	r19, Y+3	; 0x03
    1706:	22 30       	cpi	r18, 0x02	; 2
    1708:	31 05       	cpc	r19, r1
    170a:	71 f0       	breq	.+28     	; 0x1728 <DIO_voidSetAllPortInput+0x5c>
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	9b 81       	ldd	r25, Y+3	; 0x03
    1710:	83 30       	cpi	r24, 0x03	; 3
    1712:	91 05       	cpc	r25, r1
    1714:	69 f0       	breq	.+26     	; 0x1730 <DIO_voidSetAllPortInput+0x64>
    1716:	0f c0       	rjmp	.+30     	; 0x1736 <DIO_voidSetAllPortInput+0x6a>
		case PORTA/*Port A*/: DDRA_REG=PORT_INPUT;break;
    1718:	ea e3       	ldi	r30, 0x3A	; 58
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	10 82       	st	Z, r1
    171e:	0b c0       	rjmp	.+22     	; 0x1736 <DIO_voidSetAllPortInput+0x6a>
		case PORTB/*Port B*/: DDRB_REG=PORT_INPUT;break;
    1720:	e7 e3       	ldi	r30, 0x37	; 55
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	10 82       	st	Z, r1
    1726:	07 c0       	rjmp	.+14     	; 0x1736 <DIO_voidSetAllPortInput+0x6a>
		case PORTC/*Port C*/: DDRC_REG=PORT_INPUT;break;
    1728:	e4 e3       	ldi	r30, 0x34	; 52
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	10 82       	st	Z, r1
    172e:	03 c0       	rjmp	.+6      	; 0x1736 <DIO_voidSetAllPortInput+0x6a>
		case PORTD/*Port D*/: DDRD_REG=PORT_INPUT;break;
    1730:	e1 e3       	ldi	r30, 0x31	; 49
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	10 82       	st	Z, r1
	}
}
    1736:	0f 90       	pop	r0
    1738:	0f 90       	pop	r0
    173a:	0f 90       	pop	r0
    173c:	cf 91       	pop	r28
    173e:	df 91       	pop	r29
    1740:	08 95       	ret

00001742 <DIO_voidSetAllPortOutput>:

void DIO_voidSetAllPortOutput(u8 Copy_u8PortID){
    1742:	df 93       	push	r29
    1744:	cf 93       	push	r28
    1746:	00 d0       	rcall	.+0      	; 0x1748 <DIO_voidSetAllPortOutput+0x6>
    1748:	0f 92       	push	r0
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
    174e:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID){
    1750:	89 81       	ldd	r24, Y+1	; 0x01
    1752:	28 2f       	mov	r18, r24
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	3b 83       	std	Y+3, r19	; 0x03
    1758:	2a 83       	std	Y+2, r18	; 0x02
    175a:	8a 81       	ldd	r24, Y+2	; 0x02
    175c:	9b 81       	ldd	r25, Y+3	; 0x03
    175e:	81 30       	cpi	r24, 0x01	; 1
    1760:	91 05       	cpc	r25, r1
    1762:	d1 f0       	breq	.+52     	; 0x1798 <DIO_voidSetAllPortOutput+0x56>
    1764:	2a 81       	ldd	r18, Y+2	; 0x02
    1766:	3b 81       	ldd	r19, Y+3	; 0x03
    1768:	22 30       	cpi	r18, 0x02	; 2
    176a:	31 05       	cpc	r19, r1
    176c:	2c f4       	brge	.+10     	; 0x1778 <DIO_voidSetAllPortOutput+0x36>
    176e:	8a 81       	ldd	r24, Y+2	; 0x02
    1770:	9b 81       	ldd	r25, Y+3	; 0x03
    1772:	00 97       	sbiw	r24, 0x00	; 0
    1774:	61 f0       	breq	.+24     	; 0x178e <DIO_voidSetAllPortOutput+0x4c>
    1776:	1e c0       	rjmp	.+60     	; 0x17b4 <DIO_voidSetAllPortOutput+0x72>
    1778:	2a 81       	ldd	r18, Y+2	; 0x02
    177a:	3b 81       	ldd	r19, Y+3	; 0x03
    177c:	22 30       	cpi	r18, 0x02	; 2
    177e:	31 05       	cpc	r19, r1
    1780:	81 f0       	breq	.+32     	; 0x17a2 <DIO_voidSetAllPortOutput+0x60>
    1782:	8a 81       	ldd	r24, Y+2	; 0x02
    1784:	9b 81       	ldd	r25, Y+3	; 0x03
    1786:	83 30       	cpi	r24, 0x03	; 3
    1788:	91 05       	cpc	r25, r1
    178a:	81 f0       	breq	.+32     	; 0x17ac <DIO_voidSetAllPortOutput+0x6a>
    178c:	13 c0       	rjmp	.+38     	; 0x17b4 <DIO_voidSetAllPortOutput+0x72>
		case PORTA/*Port A*/: DDRA_REG=PORT_OUTPUT;break;
    178e:	ea e3       	ldi	r30, 0x3A	; 58
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	8f ef       	ldi	r24, 0xFF	; 255
    1794:	80 83       	st	Z, r24
    1796:	0e c0       	rjmp	.+28     	; 0x17b4 <DIO_voidSetAllPortOutput+0x72>
		case PORTB/*Port B*/: DDRB_REG=PORT_OUTPUT;break;
    1798:	e7 e3       	ldi	r30, 0x37	; 55
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	8f ef       	ldi	r24, 0xFF	; 255
    179e:	80 83       	st	Z, r24
    17a0:	09 c0       	rjmp	.+18     	; 0x17b4 <DIO_voidSetAllPortOutput+0x72>
		case PORTC/*Port C*/: DDRC_REG=PORT_OUTPUT;break;
    17a2:	e4 e3       	ldi	r30, 0x34	; 52
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	8f ef       	ldi	r24, 0xFF	; 255
    17a8:	80 83       	st	Z, r24
    17aa:	04 c0       	rjmp	.+8      	; 0x17b4 <DIO_voidSetAllPortOutput+0x72>
		case PORTD/*Port D*/: DDRD_REG=PORT_OUTPUT;break;
    17ac:	e1 e3       	ldi	r30, 0x31	; 49
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	8f ef       	ldi	r24, 0xFF	; 255
    17b2:	80 83       	st	Z, r24
	}
}
    17b4:	0f 90       	pop	r0
    17b6:	0f 90       	pop	r0
    17b8:	0f 90       	pop	r0
    17ba:	cf 91       	pop	r28
    17bc:	df 91       	pop	r29
    17be:	08 95       	ret

000017c0 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 Copy_u8PortID,u8 Copy_u8PortValue){
    17c0:	df 93       	push	r29
    17c2:	cf 93       	push	r28
    17c4:	00 d0       	rcall	.+0      	; 0x17c6 <DIO_voidSetPortValue+0x6>
    17c6:	00 d0       	rcall	.+0      	; 0x17c8 <DIO_voidSetPortValue+0x8>
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
    17cc:	89 83       	std	Y+1, r24	; 0x01
    17ce:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortID){
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	3c 83       	std	Y+4, r19	; 0x04
    17d8:	2b 83       	std	Y+3, r18	; 0x03
    17da:	8b 81       	ldd	r24, Y+3	; 0x03
    17dc:	9c 81       	ldd	r25, Y+4	; 0x04
    17de:	81 30       	cpi	r24, 0x01	; 1
    17e0:	91 05       	cpc	r25, r1
    17e2:	d1 f0       	breq	.+52     	; 0x1818 <DIO_voidSetPortValue+0x58>
    17e4:	2b 81       	ldd	r18, Y+3	; 0x03
    17e6:	3c 81       	ldd	r19, Y+4	; 0x04
    17e8:	22 30       	cpi	r18, 0x02	; 2
    17ea:	31 05       	cpc	r19, r1
    17ec:	2c f4       	brge	.+10     	; 0x17f8 <DIO_voidSetPortValue+0x38>
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	9c 81       	ldd	r25, Y+4	; 0x04
    17f2:	00 97       	sbiw	r24, 0x00	; 0
    17f4:	61 f0       	breq	.+24     	; 0x180e <DIO_voidSetPortValue+0x4e>
    17f6:	1e c0       	rjmp	.+60     	; 0x1834 <DIO_voidSetPortValue+0x74>
    17f8:	2b 81       	ldd	r18, Y+3	; 0x03
    17fa:	3c 81       	ldd	r19, Y+4	; 0x04
    17fc:	22 30       	cpi	r18, 0x02	; 2
    17fe:	31 05       	cpc	r19, r1
    1800:	81 f0       	breq	.+32     	; 0x1822 <DIO_voidSetPortValue+0x62>
    1802:	8b 81       	ldd	r24, Y+3	; 0x03
    1804:	9c 81       	ldd	r25, Y+4	; 0x04
    1806:	83 30       	cpi	r24, 0x03	; 3
    1808:	91 05       	cpc	r25, r1
    180a:	81 f0       	breq	.+32     	; 0x182c <DIO_voidSetPortValue+0x6c>
    180c:	13 c0       	rjmp	.+38     	; 0x1834 <DIO_voidSetPortValue+0x74>
		case PORTA/*Port A*/: PORTA_REG=Copy_u8PortValue;break;
    180e:	eb e3       	ldi	r30, 0x3B	; 59
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	8a 81       	ldd	r24, Y+2	; 0x02
    1814:	80 83       	st	Z, r24
    1816:	0e c0       	rjmp	.+28     	; 0x1834 <DIO_voidSetPortValue+0x74>
		case PORTB/*Port B*/: PORTB_REG=Copy_u8PortValue;break;
    1818:	e8 e3       	ldi	r30, 0x38	; 56
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	8a 81       	ldd	r24, Y+2	; 0x02
    181e:	80 83       	st	Z, r24
    1820:	09 c0       	rjmp	.+18     	; 0x1834 <DIO_voidSetPortValue+0x74>
		case PORTC/*Port C*/: PORTC_REG=Copy_u8PortValue;break;
    1822:	e5 e3       	ldi	r30, 0x35	; 53
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	8a 81       	ldd	r24, Y+2	; 0x02
    1828:	80 83       	st	Z, r24
    182a:	04 c0       	rjmp	.+8      	; 0x1834 <DIO_voidSetPortValue+0x74>
		case PORTD/*Port D*/: PORTD_REG=Copy_u8PortValue;break;
    182c:	e2 e3       	ldi	r30, 0x32	; 50
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	8a 81       	ldd	r24, Y+2	; 0x02
    1832:	80 83       	st	Z, r24
	}
}
    1834:	0f 90       	pop	r0
    1836:	0f 90       	pop	r0
    1838:	0f 90       	pop	r0
    183a:	0f 90       	pop	r0
    183c:	cf 91       	pop	r28
    183e:	df 91       	pop	r29
    1840:	08 95       	ret

00001842 <DIO_voidSetAllPortLow>:

void DIO_voidSetAllPortLow(u8 Copy_u8PortID){
    1842:	df 93       	push	r29
    1844:	cf 93       	push	r28
    1846:	00 d0       	rcall	.+0      	; 0x1848 <DIO_voidSetAllPortLow+0x6>
    1848:	0f 92       	push	r0
    184a:	cd b7       	in	r28, 0x3d	; 61
    184c:	de b7       	in	r29, 0x3e	; 62
    184e:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID){
    1850:	89 81       	ldd	r24, Y+1	; 0x01
    1852:	28 2f       	mov	r18, r24
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	3b 83       	std	Y+3, r19	; 0x03
    1858:	2a 83       	std	Y+2, r18	; 0x02
    185a:	8a 81       	ldd	r24, Y+2	; 0x02
    185c:	9b 81       	ldd	r25, Y+3	; 0x03
    185e:	81 30       	cpi	r24, 0x01	; 1
    1860:	91 05       	cpc	r25, r1
    1862:	c9 f0       	breq	.+50     	; 0x1896 <DIO_voidSetAllPortLow+0x54>
    1864:	2a 81       	ldd	r18, Y+2	; 0x02
    1866:	3b 81       	ldd	r19, Y+3	; 0x03
    1868:	22 30       	cpi	r18, 0x02	; 2
    186a:	31 05       	cpc	r19, r1
    186c:	2c f4       	brge	.+10     	; 0x1878 <DIO_voidSetAllPortLow+0x36>
    186e:	8a 81       	ldd	r24, Y+2	; 0x02
    1870:	9b 81       	ldd	r25, Y+3	; 0x03
    1872:	00 97       	sbiw	r24, 0x00	; 0
    1874:	61 f0       	breq	.+24     	; 0x188e <DIO_voidSetAllPortLow+0x4c>
    1876:	1a c0       	rjmp	.+52     	; 0x18ac <DIO_voidSetAllPortLow+0x6a>
    1878:	2a 81       	ldd	r18, Y+2	; 0x02
    187a:	3b 81       	ldd	r19, Y+3	; 0x03
    187c:	22 30       	cpi	r18, 0x02	; 2
    187e:	31 05       	cpc	r19, r1
    1880:	71 f0       	breq	.+28     	; 0x189e <DIO_voidSetAllPortLow+0x5c>
    1882:	8a 81       	ldd	r24, Y+2	; 0x02
    1884:	9b 81       	ldd	r25, Y+3	; 0x03
    1886:	83 30       	cpi	r24, 0x03	; 3
    1888:	91 05       	cpc	r25, r1
    188a:	69 f0       	breq	.+26     	; 0x18a6 <DIO_voidSetAllPortLow+0x64>
    188c:	0f c0       	rjmp	.+30     	; 0x18ac <DIO_voidSetAllPortLow+0x6a>
		case PORTA/*Port A*/: PORTA_REG=PORT_LOW;break;
    188e:	eb e3       	ldi	r30, 0x3B	; 59
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	10 82       	st	Z, r1
    1894:	0b c0       	rjmp	.+22     	; 0x18ac <DIO_voidSetAllPortLow+0x6a>
		case PORTB/*Port B*/: PORTB_REG=PORT_LOW;break;
    1896:	e8 e3       	ldi	r30, 0x38	; 56
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	10 82       	st	Z, r1
    189c:	07 c0       	rjmp	.+14     	; 0x18ac <DIO_voidSetAllPortLow+0x6a>
		case PORTC/*Port C*/: PORTC_REG=PORT_LOW;break;
    189e:	e5 e3       	ldi	r30, 0x35	; 53
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	10 82       	st	Z, r1
    18a4:	03 c0       	rjmp	.+6      	; 0x18ac <DIO_voidSetAllPortLow+0x6a>
		case PORTD/*Port D*/: PORTD_REG=PORT_LOW;break;
    18a6:	e2 e3       	ldi	r30, 0x32	; 50
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	10 82       	st	Z, r1
	}
}
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	0f 90       	pop	r0
    18b2:	cf 91       	pop	r28
    18b4:	df 91       	pop	r29
    18b6:	08 95       	ret

000018b8 <DIO_voidSetAllPortHigh>:

void DIO_voidSetAllPortHigh(u8 Copy_u8PortID){
    18b8:	df 93       	push	r29
    18ba:	cf 93       	push	r28
    18bc:	00 d0       	rcall	.+0      	; 0x18be <DIO_voidSetAllPortHigh+0x6>
    18be:	0f 92       	push	r0
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
    18c4:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID){
    18c6:	89 81       	ldd	r24, Y+1	; 0x01
    18c8:	28 2f       	mov	r18, r24
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	3b 83       	std	Y+3, r19	; 0x03
    18ce:	2a 83       	std	Y+2, r18	; 0x02
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	9b 81       	ldd	r25, Y+3	; 0x03
    18d4:	81 30       	cpi	r24, 0x01	; 1
    18d6:	91 05       	cpc	r25, r1
    18d8:	d1 f0       	breq	.+52     	; 0x190e <DIO_voidSetAllPortHigh+0x56>
    18da:	2a 81       	ldd	r18, Y+2	; 0x02
    18dc:	3b 81       	ldd	r19, Y+3	; 0x03
    18de:	22 30       	cpi	r18, 0x02	; 2
    18e0:	31 05       	cpc	r19, r1
    18e2:	2c f4       	brge	.+10     	; 0x18ee <DIO_voidSetAllPortHigh+0x36>
    18e4:	8a 81       	ldd	r24, Y+2	; 0x02
    18e6:	9b 81       	ldd	r25, Y+3	; 0x03
    18e8:	00 97       	sbiw	r24, 0x00	; 0
    18ea:	61 f0       	breq	.+24     	; 0x1904 <DIO_voidSetAllPortHigh+0x4c>
    18ec:	1e c0       	rjmp	.+60     	; 0x192a <DIO_voidSetAllPortHigh+0x72>
    18ee:	2a 81       	ldd	r18, Y+2	; 0x02
    18f0:	3b 81       	ldd	r19, Y+3	; 0x03
    18f2:	22 30       	cpi	r18, 0x02	; 2
    18f4:	31 05       	cpc	r19, r1
    18f6:	81 f0       	breq	.+32     	; 0x1918 <DIO_voidSetAllPortHigh+0x60>
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	9b 81       	ldd	r25, Y+3	; 0x03
    18fc:	83 30       	cpi	r24, 0x03	; 3
    18fe:	91 05       	cpc	r25, r1
    1900:	81 f0       	breq	.+32     	; 0x1922 <DIO_voidSetAllPortHigh+0x6a>
    1902:	13 c0       	rjmp	.+38     	; 0x192a <DIO_voidSetAllPortHigh+0x72>
		case PORTA/*Port A*/: PORTA_REG=PORT_HIGH;break;
    1904:	eb e3       	ldi	r30, 0x3B	; 59
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	8f ef       	ldi	r24, 0xFF	; 255
    190a:	80 83       	st	Z, r24
    190c:	0e c0       	rjmp	.+28     	; 0x192a <DIO_voidSetAllPortHigh+0x72>
		case PORTB/*Port B*/: PORTB_REG=PORT_HIGH;break;
    190e:	e8 e3       	ldi	r30, 0x38	; 56
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	8f ef       	ldi	r24, 0xFF	; 255
    1914:	80 83       	st	Z, r24
    1916:	09 c0       	rjmp	.+18     	; 0x192a <DIO_voidSetAllPortHigh+0x72>
		case PORTC/*Port C*/: PORTC_REG=PORT_HIGH;break;
    1918:	e5 e3       	ldi	r30, 0x35	; 53
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	8f ef       	ldi	r24, 0xFF	; 255
    191e:	80 83       	st	Z, r24
    1920:	04 c0       	rjmp	.+8      	; 0x192a <DIO_voidSetAllPortHigh+0x72>
		case PORTD/*Port D*/: PORTD_REG=PORT_HIGH;break;
    1922:	e2 e3       	ldi	r30, 0x32	; 50
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	8f ef       	ldi	r24, 0xFF	; 255
    1928:	80 83       	st	Z, r24
	}
}
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	cf 91       	pop	r28
    1932:	df 91       	pop	r29
    1934:	08 95       	ret

00001936 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID){
    1936:	df 93       	push	r29
    1938:	cf 93       	push	r28
    193a:	00 d0       	rcall	.+0      	; 0x193c <DIO_u8GetPinValue+0x6>
    193c:	00 d0       	rcall	.+0      	; 0x193e <DIO_u8GetPinValue+0x8>
    193e:	0f 92       	push	r0
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	8a 83       	std	Y+2, r24	; 0x02
    1946:	6b 83       	std	Y+3, r22	; 0x03
	u8 value;
	switch(Copy_u8PortID){
    1948:	8a 81       	ldd	r24, Y+2	; 0x02
    194a:	28 2f       	mov	r18, r24
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	3d 83       	std	Y+5, r19	; 0x05
    1950:	2c 83       	std	Y+4, r18	; 0x04
    1952:	4c 81       	ldd	r20, Y+4	; 0x04
    1954:	5d 81       	ldd	r21, Y+5	; 0x05
    1956:	41 30       	cpi	r20, 0x01	; 1
    1958:	51 05       	cpc	r21, r1
    195a:	41 f1       	breq	.+80     	; 0x19ac <DIO_u8GetPinValue+0x76>
    195c:	8c 81       	ldd	r24, Y+4	; 0x04
    195e:	9d 81       	ldd	r25, Y+5	; 0x05
    1960:	82 30       	cpi	r24, 0x02	; 2
    1962:	91 05       	cpc	r25, r1
    1964:	34 f4       	brge	.+12     	; 0x1972 <DIO_u8GetPinValue+0x3c>
    1966:	2c 81       	ldd	r18, Y+4	; 0x04
    1968:	3d 81       	ldd	r19, Y+5	; 0x05
    196a:	21 15       	cp	r18, r1
    196c:	31 05       	cpc	r19, r1
    196e:	61 f0       	breq	.+24     	; 0x1988 <DIO_u8GetPinValue+0x52>
    1970:	52 c0       	rjmp	.+164    	; 0x1a16 <DIO_u8GetPinValue+0xe0>
    1972:	4c 81       	ldd	r20, Y+4	; 0x04
    1974:	5d 81       	ldd	r21, Y+5	; 0x05
    1976:	42 30       	cpi	r20, 0x02	; 2
    1978:	51 05       	cpc	r21, r1
    197a:	51 f1       	breq	.+84     	; 0x19d0 <DIO_u8GetPinValue+0x9a>
    197c:	8c 81       	ldd	r24, Y+4	; 0x04
    197e:	9d 81       	ldd	r25, Y+5	; 0x05
    1980:	83 30       	cpi	r24, 0x03	; 3
    1982:	91 05       	cpc	r25, r1
    1984:	b9 f1       	breq	.+110    	; 0x19f4 <DIO_u8GetPinValue+0xbe>
    1986:	47 c0       	rjmp	.+142    	; 0x1a16 <DIO_u8GetPinValue+0xe0>
		case PORTA/*Port A*/: value=GetBit(PINA_REG,Copy_u8PinID);break;
    1988:	e9 e3       	ldi	r30, 0x39	; 57
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	28 2f       	mov	r18, r24
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	8b 81       	ldd	r24, Y+3	; 0x03
    1994:	88 2f       	mov	r24, r24
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	a9 01       	movw	r20, r18
    199a:	02 c0       	rjmp	.+4      	; 0x19a0 <DIO_u8GetPinValue+0x6a>
    199c:	55 95       	asr	r21
    199e:	47 95       	ror	r20
    19a0:	8a 95       	dec	r24
    19a2:	e2 f7       	brpl	.-8      	; 0x199c <DIO_u8GetPinValue+0x66>
    19a4:	ca 01       	movw	r24, r20
    19a6:	81 70       	andi	r24, 0x01	; 1
    19a8:	89 83       	std	Y+1, r24	; 0x01
    19aa:	35 c0       	rjmp	.+106    	; 0x1a16 <DIO_u8GetPinValue+0xe0>
		case PORTB/*Port B*/: value=GetBit(PINB_REG,Copy_u8PinID);break;
    19ac:	e6 e3       	ldi	r30, 0x36	; 54
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	28 2f       	mov	r18, r24
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	8b 81       	ldd	r24, Y+3	; 0x03
    19b8:	88 2f       	mov	r24, r24
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	a9 01       	movw	r20, r18
    19be:	02 c0       	rjmp	.+4      	; 0x19c4 <DIO_u8GetPinValue+0x8e>
    19c0:	55 95       	asr	r21
    19c2:	47 95       	ror	r20
    19c4:	8a 95       	dec	r24
    19c6:	e2 f7       	brpl	.-8      	; 0x19c0 <DIO_u8GetPinValue+0x8a>
    19c8:	ca 01       	movw	r24, r20
    19ca:	81 70       	andi	r24, 0x01	; 1
    19cc:	89 83       	std	Y+1, r24	; 0x01
    19ce:	23 c0       	rjmp	.+70     	; 0x1a16 <DIO_u8GetPinValue+0xe0>
		case PORTC/*Port C*/: value=GetBit(PINC_REG,Copy_u8PinID);break;
    19d0:	e3 e3       	ldi	r30, 0x33	; 51
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	28 2f       	mov	r18, r24
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	88 2f       	mov	r24, r24
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	a9 01       	movw	r20, r18
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <DIO_u8GetPinValue+0xb2>
    19e4:	55 95       	asr	r21
    19e6:	47 95       	ror	r20
    19e8:	8a 95       	dec	r24
    19ea:	e2 f7       	brpl	.-8      	; 0x19e4 <DIO_u8GetPinValue+0xae>
    19ec:	ca 01       	movw	r24, r20
    19ee:	81 70       	andi	r24, 0x01	; 1
    19f0:	89 83       	std	Y+1, r24	; 0x01
    19f2:	11 c0       	rjmp	.+34     	; 0x1a16 <DIO_u8GetPinValue+0xe0>
		case PORTD/*Port D*/: value=GetBit(PIND_REG,Copy_u8PinID);break;
    19f4:	e0 e3       	ldi	r30, 0x30	; 48
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 81       	ld	r24, Z
    19fa:	28 2f       	mov	r18, r24
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1a00:	88 2f       	mov	r24, r24
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	a9 01       	movw	r20, r18
    1a06:	02 c0       	rjmp	.+4      	; 0x1a0c <DIO_u8GetPinValue+0xd6>
    1a08:	55 95       	asr	r21
    1a0a:	47 95       	ror	r20
    1a0c:	8a 95       	dec	r24
    1a0e:	e2 f7       	brpl	.-8      	; 0x1a08 <DIO_u8GetPinValue+0xd2>
    1a10:	ca 01       	movw	r24, r20
    1a12:	81 70       	andi	r24, 0x01	; 1
    1a14:	89 83       	std	Y+1, r24	; 0x01
	}
	return value;
    1a16:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a18:	0f 90       	pop	r0
    1a1a:	0f 90       	pop	r0
    1a1c:	0f 90       	pop	r0
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	cf 91       	pop	r28
    1a24:	df 91       	pop	r29
    1a26:	08 95       	ret

00001a28 <DIO_voidTogglePinValue>:

void DIO_voidTogglePinValue(u8 Copy_u8PortID,u8 Copy_u8PinID){
    1a28:	df 93       	push	r29
    1a2a:	cf 93       	push	r28
    1a2c:	00 d0       	rcall	.+0      	; 0x1a2e <DIO_voidTogglePinValue+0x6>
    1a2e:	00 d0       	rcall	.+0      	; 0x1a30 <DIO_voidTogglePinValue+0x8>
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62
    1a34:	89 83       	std	Y+1, r24	; 0x01
    1a36:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortID){
    1a38:	89 81       	ldd	r24, Y+1	; 0x01
    1a3a:	28 2f       	mov	r18, r24
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	3c 83       	std	Y+4, r19	; 0x04
    1a40:	2b 83       	std	Y+3, r18	; 0x03
    1a42:	8b 81       	ldd	r24, Y+3	; 0x03
    1a44:	9c 81       	ldd	r25, Y+4	; 0x04
    1a46:	81 30       	cpi	r24, 0x01	; 1
    1a48:	91 05       	cpc	r25, r1
    1a4a:	49 f1       	breq	.+82     	; 0x1a9e <DIO_voidTogglePinValue+0x76>
    1a4c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a4e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a50:	22 30       	cpi	r18, 0x02	; 2
    1a52:	31 05       	cpc	r19, r1
    1a54:	2c f4       	brge	.+10     	; 0x1a60 <DIO_voidTogglePinValue+0x38>
    1a56:	8b 81       	ldd	r24, Y+3	; 0x03
    1a58:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5a:	00 97       	sbiw	r24, 0x00	; 0
    1a5c:	61 f0       	breq	.+24     	; 0x1a76 <DIO_voidTogglePinValue+0x4e>
    1a5e:	5a c0       	rjmp	.+180    	; 0x1b14 <DIO_voidTogglePinValue+0xec>
    1a60:	2b 81       	ldd	r18, Y+3	; 0x03
    1a62:	3c 81       	ldd	r19, Y+4	; 0x04
    1a64:	22 30       	cpi	r18, 0x02	; 2
    1a66:	31 05       	cpc	r19, r1
    1a68:	71 f1       	breq	.+92     	; 0x1ac6 <DIO_voidTogglePinValue+0x9e>
    1a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6e:	83 30       	cpi	r24, 0x03	; 3
    1a70:	91 05       	cpc	r25, r1
    1a72:	e9 f1       	breq	.+122    	; 0x1aee <DIO_voidTogglePinValue+0xc6>
    1a74:	4f c0       	rjmp	.+158    	; 0x1b14 <DIO_voidTogglePinValue+0xec>
		case PORTA/*Port A*/: TogBit(PORTA_REG,Copy_u8PinID);break;
    1a76:	ab e3       	ldi	r26, 0x3B	; 59
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	eb e3       	ldi	r30, 0x3B	; 59
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	48 2f       	mov	r20, r24
    1a82:	8a 81       	ldd	r24, Y+2	; 0x02
    1a84:	28 2f       	mov	r18, r24
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	02 2e       	mov	r0, r18
    1a8e:	02 c0       	rjmp	.+4      	; 0x1a94 <DIO_voidTogglePinValue+0x6c>
    1a90:	88 0f       	add	r24, r24
    1a92:	99 1f       	adc	r25, r25
    1a94:	0a 94       	dec	r0
    1a96:	e2 f7       	brpl	.-8      	; 0x1a90 <DIO_voidTogglePinValue+0x68>
    1a98:	84 27       	eor	r24, r20
    1a9a:	8c 93       	st	X, r24
    1a9c:	3b c0       	rjmp	.+118    	; 0x1b14 <DIO_voidTogglePinValue+0xec>
		case PORTB/*Port B*/: TogBit(PORTB_REG,Copy_u8PinID);break;
    1a9e:	a8 e3       	ldi	r26, 0x38	; 56
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	e8 e3       	ldi	r30, 0x38	; 56
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	48 2f       	mov	r20, r24
    1aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1aac:	28 2f       	mov	r18, r24
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	02 2e       	mov	r0, r18
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <DIO_voidTogglePinValue+0x94>
    1ab8:	88 0f       	add	r24, r24
    1aba:	99 1f       	adc	r25, r25
    1abc:	0a 94       	dec	r0
    1abe:	e2 f7       	brpl	.-8      	; 0x1ab8 <DIO_voidTogglePinValue+0x90>
    1ac0:	84 27       	eor	r24, r20
    1ac2:	8c 93       	st	X, r24
    1ac4:	27 c0       	rjmp	.+78     	; 0x1b14 <DIO_voidTogglePinValue+0xec>
		case PORTC/*Port C*/: TogBit(PORTC_REG,Copy_u8PinID);break;
    1ac6:	a5 e3       	ldi	r26, 0x35	; 53
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	e5 e3       	ldi	r30, 0x35	; 53
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	48 2f       	mov	r20, r24
    1ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad4:	28 2f       	mov	r18, r24
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	02 2e       	mov	r0, r18
    1ade:	02 c0       	rjmp	.+4      	; 0x1ae4 <DIO_voidTogglePinValue+0xbc>
    1ae0:	88 0f       	add	r24, r24
    1ae2:	99 1f       	adc	r25, r25
    1ae4:	0a 94       	dec	r0
    1ae6:	e2 f7       	brpl	.-8      	; 0x1ae0 <DIO_voidTogglePinValue+0xb8>
    1ae8:	84 27       	eor	r24, r20
    1aea:	8c 93       	st	X, r24
    1aec:	13 c0       	rjmp	.+38     	; 0x1b14 <DIO_voidTogglePinValue+0xec>
		case PORTD/*Port D*/: TogBit(PORTD_REG,Copy_u8PinID);break;
    1aee:	a2 e3       	ldi	r26, 0x32	; 50
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	e2 e3       	ldi	r30, 0x32	; 50
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	80 81       	ld	r24, Z
    1af8:	48 2f       	mov	r20, r24
    1afa:	8a 81       	ldd	r24, Y+2	; 0x02
    1afc:	28 2f       	mov	r18, r24
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	02 2e       	mov	r0, r18
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <DIO_voidTogglePinValue+0xe4>
    1b08:	88 0f       	add	r24, r24
    1b0a:	99 1f       	adc	r25, r25
    1b0c:	0a 94       	dec	r0
    1b0e:	e2 f7       	brpl	.-8      	; 0x1b08 <DIO_voidTogglePinValue+0xe0>
    1b10:	84 27       	eor	r24, r20
    1b12:	8c 93       	st	X, r24
	}
}
    1b14:	0f 90       	pop	r0
    1b16:	0f 90       	pop	r0
    1b18:	0f 90       	pop	r0
    1b1a:	0f 90       	pop	r0
    1b1c:	cf 91       	pop	r28
    1b1e:	df 91       	pop	r29
    1b20:	08 95       	ret

00001b22 <LCD_voidIntialize>:
#include "LCD_config.h"
#include "LCD_interface.h"
#include "avr/delay.h"


void LCD_voidIntialize(){
    1b22:	df 93       	push	r29
    1b24:	cf 93       	push	r28
    1b26:	cd b7       	in	r28, 0x3d	; 61
    1b28:	de b7       	in	r29, 0x3e	; 62
    1b2a:	aa 97       	sbiw	r28, 0x2a	; 42
    1b2c:	0f b6       	in	r0, 0x3f	; 63
    1b2e:	f8 94       	cli
    1b30:	de bf       	out	0x3e, r29	; 62
    1b32:	0f be       	out	0x3f, r0	; 63
    1b34:	cd bf       	out	0x3d, r28	; 61
	
	DIO_voidSetAllPortOutput(LCD_DATA_PORT);
    1b36:	80 e0       	ldi	r24, 0x00	; 0
    1b38:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_voidSetAllPortOutput>
	
	DIO_voidSetPinDirection(LCD_CONTROL_PORT,RS,PIN_OUTPUT);
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	60 e0       	ldi	r22, 0x00	; 0
    1b40:	41 e0       	ldi	r20, 0x01	; 1
    1b42:	0e 94 25 09 	call	0x124a	; 0x124a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT,RW,PIN_OUTPUT);
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	61 e0       	ldi	r22, 0x01	; 1
    1b4a:	41 e0       	ldi	r20, 0x01	; 1
    1b4c:	0e 94 25 09 	call	0x124a	; 0x124a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT,EN,PIN_OUTPUT);
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	62 e0       	ldi	r22, 0x02	; 2
    1b54:	41 e0       	ldi	r20, 0x01	; 1
    1b56:	0e 94 25 09 	call	0x124a	; 0x124a <DIO_voidSetPinDirection>
    1b5a:	80 e0       	ldi	r24, 0x00	; 0
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	a0 ef       	ldi	r26, 0xF0	; 240
    1b60:	b1 e4       	ldi	r27, 0x41	; 65
    1b62:	8f a3       	std	Y+39, r24	; 0x27
    1b64:	98 a7       	std	Y+40, r25	; 0x28
    1b66:	a9 a7       	std	Y+41, r26	; 0x29
    1b68:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b6a:	6f a1       	ldd	r22, Y+39	; 0x27
    1b6c:	78 a5       	ldd	r23, Y+40	; 0x28
    1b6e:	89 a5       	ldd	r24, Y+41	; 0x29
    1b70:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	4a ef       	ldi	r20, 0xFA	; 250
    1b78:	54 e4       	ldi	r21, 0x44	; 68
    1b7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b7e:	dc 01       	movw	r26, r24
    1b80:	cb 01       	movw	r24, r22
    1b82:	8b a3       	std	Y+35, r24	; 0x23
    1b84:	9c a3       	std	Y+36, r25	; 0x24
    1b86:	ad a3       	std	Y+37, r26	; 0x25
    1b88:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b8a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b8c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b8e:	8d a1       	ldd	r24, Y+37	; 0x25
    1b90:	9e a1       	ldd	r25, Y+38	; 0x26
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	40 e8       	ldi	r20, 0x80	; 128
    1b98:	5f e3       	ldi	r21, 0x3F	; 63
    1b9a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b9e:	88 23       	and	r24, r24
    1ba0:	2c f4       	brge	.+10     	; 0x1bac <LCD_voidIntialize+0x8a>
		__ticks = 1;
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	9a a3       	std	Y+34, r25	; 0x22
    1ba8:	89 a3       	std	Y+33, r24	; 0x21
    1baa:	3f c0       	rjmp	.+126    	; 0x1c2a <LCD_voidIntialize+0x108>
	else if (__tmp > 65535)
    1bac:	6b a1       	ldd	r22, Y+35	; 0x23
    1bae:	7c a1       	ldd	r23, Y+36	; 0x24
    1bb0:	8d a1       	ldd	r24, Y+37	; 0x25
    1bb2:	9e a1       	ldd	r25, Y+38	; 0x26
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	3f ef       	ldi	r19, 0xFF	; 255
    1bb8:	4f e7       	ldi	r20, 0x7F	; 127
    1bba:	57 e4       	ldi	r21, 0x47	; 71
    1bbc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bc0:	18 16       	cp	r1, r24
    1bc2:	4c f5       	brge	.+82     	; 0x1c16 <LCD_voidIntialize+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bc4:	6f a1       	ldd	r22, Y+39	; 0x27
    1bc6:	78 a5       	ldd	r23, Y+40	; 0x28
    1bc8:	89 a5       	ldd	r24, Y+41	; 0x29
    1bca:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	40 e2       	ldi	r20, 0x20	; 32
    1bd2:	51 e4       	ldi	r21, 0x41	; 65
    1bd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	bc 01       	movw	r22, r24
    1bde:	cd 01       	movw	r24, r26
    1be0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	9a a3       	std	Y+34, r25	; 0x22
    1bea:	89 a3       	std	Y+33, r24	; 0x21
    1bec:	0f c0       	rjmp	.+30     	; 0x1c0c <LCD_voidIntialize+0xea>
    1bee:	88 ec       	ldi	r24, 0xC8	; 200
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	98 a3       	std	Y+32, r25	; 0x20
    1bf4:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bf6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bf8:	98 a1       	ldd	r25, Y+32	; 0x20
    1bfa:	01 97       	sbiw	r24, 0x01	; 1
    1bfc:	f1 f7       	brne	.-4      	; 0x1bfa <LCD_voidIntialize+0xd8>
    1bfe:	98 a3       	std	Y+32, r25	; 0x20
    1c00:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c02:	89 a1       	ldd	r24, Y+33	; 0x21
    1c04:	9a a1       	ldd	r25, Y+34	; 0x22
    1c06:	01 97       	sbiw	r24, 0x01	; 1
    1c08:	9a a3       	std	Y+34, r25	; 0x22
    1c0a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c0c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c0e:	9a a1       	ldd	r25, Y+34	; 0x22
    1c10:	00 97       	sbiw	r24, 0x00	; 0
    1c12:	69 f7       	brne	.-38     	; 0x1bee <LCD_voidIntialize+0xcc>
    1c14:	14 c0       	rjmp	.+40     	; 0x1c3e <LCD_voidIntialize+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c16:	6b a1       	ldd	r22, Y+35	; 0x23
    1c18:	7c a1       	ldd	r23, Y+36	; 0x24
    1c1a:	8d a1       	ldd	r24, Y+37	; 0x25
    1c1c:	9e a1       	ldd	r25, Y+38	; 0x26
    1c1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	9a a3       	std	Y+34, r25	; 0x22
    1c28:	89 a3       	std	Y+33, r24	; 0x21
    1c2a:	89 a1       	ldd	r24, Y+33	; 0x21
    1c2c:	9a a1       	ldd	r25, Y+34	; 0x22
    1c2e:	9e 8f       	std	Y+30, r25	; 0x1e
    1c30:	8d 8f       	std	Y+29, r24	; 0x1d
    1c32:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c34:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c36:	01 97       	sbiw	r24, 0x01	; 1
    1c38:	f1 f7       	brne	.-4      	; 0x1c36 <LCD_voidIntialize+0x114>
    1c3a:	9e 8f       	std	Y+30, r25	; 0x1e
    1c3c:	8d 8f       	std	Y+29, r24	; 0x1d
	
	_delay_ms(30);
	LCD_voidWriteCommand(FUN_SET_COMMAND);
    1c3e:	88 e3       	ldi	r24, 0x38	; 56
    1c40:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <LCD_voidWriteCommand>
    1c44:	80 e0       	ldi	r24, 0x00	; 0
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	a0 e0       	ldi	r26, 0x00	; 0
    1c4a:	b0 e4       	ldi	r27, 0x40	; 64
    1c4c:	89 8f       	std	Y+25, r24	; 0x19
    1c4e:	9a 8f       	std	Y+26, r25	; 0x1a
    1c50:	ab 8f       	std	Y+27, r26	; 0x1b
    1c52:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c54:	69 8d       	ldd	r22, Y+25	; 0x19
    1c56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	4a ef       	ldi	r20, 0xFA	; 250
    1c62:	54 e4       	ldi	r21, 0x44	; 68
    1c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	8d 8b       	std	Y+21, r24	; 0x15
    1c6e:	9e 8b       	std	Y+22, r25	; 0x16
    1c70:	af 8b       	std	Y+23, r26	; 0x17
    1c72:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c74:	6d 89       	ldd	r22, Y+21	; 0x15
    1c76:	7e 89       	ldd	r23, Y+22	; 0x16
    1c78:	8f 89       	ldd	r24, Y+23	; 0x17
    1c7a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	40 e8       	ldi	r20, 0x80	; 128
    1c82:	5f e3       	ldi	r21, 0x3F	; 63
    1c84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c88:	88 23       	and	r24, r24
    1c8a:	2c f4       	brge	.+10     	; 0x1c96 <LCD_voidIntialize+0x174>
		__ticks = 1;
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	9c 8b       	std	Y+20, r25	; 0x14
    1c92:	8b 8b       	std	Y+19, r24	; 0x13
    1c94:	3f c0       	rjmp	.+126    	; 0x1d14 <LCD_voidIntialize+0x1f2>
	else if (__tmp > 65535)
    1c96:	6d 89       	ldd	r22, Y+21	; 0x15
    1c98:	7e 89       	ldd	r23, Y+22	; 0x16
    1c9a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c9c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	3f ef       	ldi	r19, 0xFF	; 255
    1ca2:	4f e7       	ldi	r20, 0x7F	; 127
    1ca4:	57 e4       	ldi	r21, 0x47	; 71
    1ca6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1caa:	18 16       	cp	r1, r24
    1cac:	4c f5       	brge	.+82     	; 0x1d00 <LCD_voidIntialize+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cae:	69 8d       	ldd	r22, Y+25	; 0x19
    1cb0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cb2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cb4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	40 e2       	ldi	r20, 0x20	; 32
    1cbc:	51 e4       	ldi	r21, 0x41	; 65
    1cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	bc 01       	movw	r22, r24
    1cc8:	cd 01       	movw	r24, r26
    1cca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	9c 8b       	std	Y+20, r25	; 0x14
    1cd4:	8b 8b       	std	Y+19, r24	; 0x13
    1cd6:	0f c0       	rjmp	.+30     	; 0x1cf6 <LCD_voidIntialize+0x1d4>
    1cd8:	88 ec       	ldi	r24, 0xC8	; 200
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	9a 8b       	std	Y+18, r25	; 0x12
    1cde:	89 8b       	std	Y+17, r24	; 0x11
    1ce0:	89 89       	ldd	r24, Y+17	; 0x11
    1ce2:	9a 89       	ldd	r25, Y+18	; 0x12
    1ce4:	01 97       	sbiw	r24, 0x01	; 1
    1ce6:	f1 f7       	brne	.-4      	; 0x1ce4 <LCD_voidIntialize+0x1c2>
    1ce8:	9a 8b       	std	Y+18, r25	; 0x12
    1cea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cec:	8b 89       	ldd	r24, Y+19	; 0x13
    1cee:	9c 89       	ldd	r25, Y+20	; 0x14
    1cf0:	01 97       	sbiw	r24, 0x01	; 1
    1cf2:	9c 8b       	std	Y+20, r25	; 0x14
    1cf4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf6:	8b 89       	ldd	r24, Y+19	; 0x13
    1cf8:	9c 89       	ldd	r25, Y+20	; 0x14
    1cfa:	00 97       	sbiw	r24, 0x00	; 0
    1cfc:	69 f7       	brne	.-38     	; 0x1cd8 <LCD_voidIntialize+0x1b6>
    1cfe:	14 c0       	rjmp	.+40     	; 0x1d28 <LCD_voidIntialize+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d00:	6d 89       	ldd	r22, Y+21	; 0x15
    1d02:	7e 89       	ldd	r23, Y+22	; 0x16
    1d04:	8f 89       	ldd	r24, Y+23	; 0x17
    1d06:	98 8d       	ldd	r25, Y+24	; 0x18
    1d08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	9c 8b       	std	Y+20, r25	; 0x14
    1d12:	8b 8b       	std	Y+19, r24	; 0x13
    1d14:	8b 89       	ldd	r24, Y+19	; 0x13
    1d16:	9c 89       	ldd	r25, Y+20	; 0x14
    1d18:	98 8b       	std	Y+16, r25	; 0x10
    1d1a:	8f 87       	std	Y+15, r24	; 0x0f
    1d1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d1e:	98 89       	ldd	r25, Y+16	; 0x10
    1d20:	01 97       	sbiw	r24, 0x01	; 1
    1d22:	f1 f7       	brne	.-4      	; 0x1d20 <LCD_voidIntialize+0x1fe>
    1d24:	98 8b       	std	Y+16, r25	; 0x10
    1d26:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_voidWriteCommand(DISPLAY_CONTROL_COMMAND);
    1d28:	8c e0       	ldi	r24, 0x0C	; 12
    1d2a:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <LCD_voidWriteCommand>
    1d2e:	80 e0       	ldi	r24, 0x00	; 0
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	a0 e0       	ldi	r26, 0x00	; 0
    1d34:	b0 e4       	ldi	r27, 0x40	; 64
    1d36:	8b 87       	std	Y+11, r24	; 0x0b
    1d38:	9c 87       	std	Y+12, r25	; 0x0c
    1d3a:	ad 87       	std	Y+13, r26	; 0x0d
    1d3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d40:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d42:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d44:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	4a ef       	ldi	r20, 0xFA	; 250
    1d4c:	54 e4       	ldi	r21, 0x44	; 68
    1d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d52:	dc 01       	movw	r26, r24
    1d54:	cb 01       	movw	r24, r22
    1d56:	8f 83       	std	Y+7, r24	; 0x07
    1d58:	98 87       	std	Y+8, r25	; 0x08
    1d5a:	a9 87       	std	Y+9, r26	; 0x09
    1d5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d60:	78 85       	ldd	r23, Y+8	; 0x08
    1d62:	89 85       	ldd	r24, Y+9	; 0x09
    1d64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	40 e8       	ldi	r20, 0x80	; 128
    1d6c:	5f e3       	ldi	r21, 0x3F	; 63
    1d6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d72:	88 23       	and	r24, r24
    1d74:	2c f4       	brge	.+10     	; 0x1d80 <LCD_voidIntialize+0x25e>
		__ticks = 1;
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	9e 83       	std	Y+6, r25	; 0x06
    1d7c:	8d 83       	std	Y+5, r24	; 0x05
    1d7e:	3f c0       	rjmp	.+126    	; 0x1dfe <LCD_voidIntialize+0x2dc>
	else if (__tmp > 65535)
    1d80:	6f 81       	ldd	r22, Y+7	; 0x07
    1d82:	78 85       	ldd	r23, Y+8	; 0x08
    1d84:	89 85       	ldd	r24, Y+9	; 0x09
    1d86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	3f ef       	ldi	r19, 0xFF	; 255
    1d8c:	4f e7       	ldi	r20, 0x7F	; 127
    1d8e:	57 e4       	ldi	r21, 0x47	; 71
    1d90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d94:	18 16       	cp	r1, r24
    1d96:	4c f5       	brge	.+82     	; 0x1dea <LCD_voidIntialize+0x2c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d98:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	40 e2       	ldi	r20, 0x20	; 32
    1da6:	51 e4       	ldi	r21, 0x41	; 65
    1da8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	bc 01       	movw	r22, r24
    1db2:	cd 01       	movw	r24, r26
    1db4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db8:	dc 01       	movw	r26, r24
    1dba:	cb 01       	movw	r24, r22
    1dbc:	9e 83       	std	Y+6, r25	; 0x06
    1dbe:	8d 83       	std	Y+5, r24	; 0x05
    1dc0:	0f c0       	rjmp	.+30     	; 0x1de0 <LCD_voidIntialize+0x2be>
    1dc2:	88 ec       	ldi	r24, 0xC8	; 200
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	9c 83       	std	Y+4, r25	; 0x04
    1dc8:	8b 83       	std	Y+3, r24	; 0x03
    1dca:	8b 81       	ldd	r24, Y+3	; 0x03
    1dcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dce:	01 97       	sbiw	r24, 0x01	; 1
    1dd0:	f1 f7       	brne	.-4      	; 0x1dce <LCD_voidIntialize+0x2ac>
    1dd2:	9c 83       	std	Y+4, r25	; 0x04
    1dd4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dda:	01 97       	sbiw	r24, 0x01	; 1
    1ddc:	9e 83       	std	Y+6, r25	; 0x06
    1dde:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de0:	8d 81       	ldd	r24, Y+5	; 0x05
    1de2:	9e 81       	ldd	r25, Y+6	; 0x06
    1de4:	00 97       	sbiw	r24, 0x00	; 0
    1de6:	69 f7       	brne	.-38     	; 0x1dc2 <LCD_voidIntialize+0x2a0>
    1de8:	14 c0       	rjmp	.+40     	; 0x1e12 <LCD_voidIntialize+0x2f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dea:	6f 81       	ldd	r22, Y+7	; 0x07
    1dec:	78 85       	ldd	r23, Y+8	; 0x08
    1dee:	89 85       	ldd	r24, Y+9	; 0x09
    1df0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	9e 83       	std	Y+6, r25	; 0x06
    1dfc:	8d 83       	std	Y+5, r24	; 0x05
    1dfe:	8d 81       	ldd	r24, Y+5	; 0x05
    1e00:	9e 81       	ldd	r25, Y+6	; 0x06
    1e02:	9a 83       	std	Y+2, r25	; 0x02
    1e04:	89 83       	std	Y+1, r24	; 0x01
    1e06:	89 81       	ldd	r24, Y+1	; 0x01
    1e08:	9a 81       	ldd	r25, Y+2	; 0x02
    1e0a:	01 97       	sbiw	r24, 0x01	; 1
    1e0c:	f1 f7       	brne	.-4      	; 0x1e0a <LCD_voidIntialize+0x2e8>
    1e0e:	9a 83       	std	Y+2, r25	; 0x02
    1e10:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_voidWriteCommand(CLEAR_COMMAND);
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <LCD_voidWriteCommand>
	
}
    1e18:	aa 96       	adiw	r28, 0x2a	; 42
    1e1a:	0f b6       	in	r0, 0x3f	; 63
    1e1c:	f8 94       	cli
    1e1e:	de bf       	out	0x3e, r29	; 62
    1e20:	0f be       	out	0x3f, r0	; 63
    1e22:	cd bf       	out	0x3d, r28	; 61
    1e24:	cf 91       	pop	r28
    1e26:	df 91       	pop	r29
    1e28:	08 95       	ret

00001e2a <LCD_voidWriteCommand>:

void LCD_voidWriteCommand(u8 Copy_u8Command){
    1e2a:	df 93       	push	r29
    1e2c:	cf 93       	push	r28
    1e2e:	cd b7       	in	r28, 0x3d	; 61
    1e30:	de b7       	in	r29, 0x3e	; 62
    1e32:	2f 97       	sbiw	r28, 0x0f	; 15
    1e34:	0f b6       	in	r0, 0x3f	; 63
    1e36:	f8 94       	cli
    1e38:	de bf       	out	0x3e, r29	; 62
    1e3a:	0f be       	out	0x3f, r0	; 63
    1e3c:	cd bf       	out	0x3d, r28	; 61
    1e3e:	8f 87       	std	Y+15, r24	; 0x0f

	DIO_voidSetPinValue(LCD_CONTROL_PORT,RS,PIN_LOW);
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	60 e0       	ldi	r22, 0x00	; 0
    1e44:	40 e0       	ldi	r20, 0x00	; 0
    1e46:	0e 94 25 0a 	call	0x144a	; 0x144a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT,RW,PIN_LOW);
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	61 e0       	ldi	r22, 0x01	; 1
    1e4e:	40 e0       	ldi	r20, 0x00	; 0
    1e50:	0e 94 25 0a 	call	0x144a	; 0x144a <DIO_voidSetPinValue>
	
	DIO_voidSetPortValue(LCD_DATA_PORT,Copy_u8Command);
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	6f 85       	ldd	r22, Y+15	; 0x0f
    1e58:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPortValue>
	
	DIO_voidSetPinValue(LCD_CONTROL_PORT,EN,PIN_HIGH);
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	62 e0       	ldi	r22, 0x02	; 2
    1e60:	41 e0       	ldi	r20, 0x01	; 1
    1e62:	0e 94 25 0a 	call	0x144a	; 0x144a <DIO_voidSetPinValue>
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	a0 e0       	ldi	r26, 0x00	; 0
    1e6c:	b0 e4       	ldi	r27, 0x40	; 64
    1e6e:	8b 87       	std	Y+11, r24	; 0x0b
    1e70:	9c 87       	std	Y+12, r25	; 0x0c
    1e72:	ad 87       	std	Y+13, r26	; 0x0d
    1e74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e76:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e78:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	4a ef       	ldi	r20, 0xFA	; 250
    1e84:	54 e4       	ldi	r21, 0x44	; 68
    1e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	cb 01       	movw	r24, r22
    1e8e:	8f 83       	std	Y+7, r24	; 0x07
    1e90:	98 87       	std	Y+8, r25	; 0x08
    1e92:	a9 87       	std	Y+9, r26	; 0x09
    1e94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e96:	6f 81       	ldd	r22, Y+7	; 0x07
    1e98:	78 85       	ldd	r23, Y+8	; 0x08
    1e9a:	89 85       	ldd	r24, Y+9	; 0x09
    1e9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	40 e8       	ldi	r20, 0x80	; 128
    1ea4:	5f e3       	ldi	r21, 0x3F	; 63
    1ea6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eaa:	88 23       	and	r24, r24
    1eac:	2c f4       	brge	.+10     	; 0x1eb8 <LCD_voidWriteCommand+0x8e>
		__ticks = 1;
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	9e 83       	std	Y+6, r25	; 0x06
    1eb4:	8d 83       	std	Y+5, r24	; 0x05
    1eb6:	3f c0       	rjmp	.+126    	; 0x1f36 <LCD_voidWriteCommand+0x10c>
	else if (__tmp > 65535)
    1eb8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eba:	78 85       	ldd	r23, Y+8	; 0x08
    1ebc:	89 85       	ldd	r24, Y+9	; 0x09
    1ebe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	3f ef       	ldi	r19, 0xFF	; 255
    1ec4:	4f e7       	ldi	r20, 0x7F	; 127
    1ec6:	57 e4       	ldi	r21, 0x47	; 71
    1ec8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ecc:	18 16       	cp	r1, r24
    1ece:	4c f5       	brge	.+82     	; 0x1f22 <LCD_voidWriteCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ed2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ed4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ed6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	40 e2       	ldi	r20, 0x20	; 32
    1ede:	51 e4       	ldi	r21, 0x41	; 65
    1ee0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	cb 01       	movw	r24, r22
    1ee8:	bc 01       	movw	r22, r24
    1eea:	cd 01       	movw	r24, r26
    1eec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	9e 83       	std	Y+6, r25	; 0x06
    1ef6:	8d 83       	std	Y+5, r24	; 0x05
    1ef8:	0f c0       	rjmp	.+30     	; 0x1f18 <LCD_voidWriteCommand+0xee>
    1efa:	88 ec       	ldi	r24, 0xC8	; 200
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	9c 83       	std	Y+4, r25	; 0x04
    1f00:	8b 83       	std	Y+3, r24	; 0x03
    1f02:	8b 81       	ldd	r24, Y+3	; 0x03
    1f04:	9c 81       	ldd	r25, Y+4	; 0x04
    1f06:	01 97       	sbiw	r24, 0x01	; 1
    1f08:	f1 f7       	brne	.-4      	; 0x1f06 <LCD_voidWriteCommand+0xdc>
    1f0a:	9c 83       	std	Y+4, r25	; 0x04
    1f0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f10:	9e 81       	ldd	r25, Y+6	; 0x06
    1f12:	01 97       	sbiw	r24, 0x01	; 1
    1f14:	9e 83       	std	Y+6, r25	; 0x06
    1f16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f18:	8d 81       	ldd	r24, Y+5	; 0x05
    1f1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1c:	00 97       	sbiw	r24, 0x00	; 0
    1f1e:	69 f7       	brne	.-38     	; 0x1efa <LCD_voidWriteCommand+0xd0>
    1f20:	14 c0       	rjmp	.+40     	; 0x1f4a <LCD_voidWriteCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f22:	6f 81       	ldd	r22, Y+7	; 0x07
    1f24:	78 85       	ldd	r23, Y+8	; 0x08
    1f26:	89 85       	ldd	r24, Y+9	; 0x09
    1f28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	9e 83       	std	Y+6, r25	; 0x06
    1f34:	8d 83       	std	Y+5, r24	; 0x05
    1f36:	8d 81       	ldd	r24, Y+5	; 0x05
    1f38:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3a:	9a 83       	std	Y+2, r25	; 0x02
    1f3c:	89 83       	std	Y+1, r24	; 0x01
    1f3e:	89 81       	ldd	r24, Y+1	; 0x01
    1f40:	9a 81       	ldd	r25, Y+2	; 0x02
    1f42:	01 97       	sbiw	r24, 0x01	; 1
    1f44:	f1 f7       	brne	.-4      	; 0x1f42 <LCD_voidWriteCommand+0x118>
    1f46:	9a 83       	std	Y+2, r25	; 0x02
    1f48:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CONTROL_PORT,EN,PIN_LOW);
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	62 e0       	ldi	r22, 0x02	; 2
    1f4e:	40 e0       	ldi	r20, 0x00	; 0
    1f50:	0e 94 25 0a 	call	0x144a	; 0x144a <DIO_voidSetPinValue>
}
    1f54:	2f 96       	adiw	r28, 0x0f	; 15
    1f56:	0f b6       	in	r0, 0x3f	; 63
    1f58:	f8 94       	cli
    1f5a:	de bf       	out	0x3e, r29	; 62
    1f5c:	0f be       	out	0x3f, r0	; 63
    1f5e:	cd bf       	out	0x3d, r28	; 61
    1f60:	cf 91       	pop	r28
    1f62:	df 91       	pop	r29
    1f64:	08 95       	ret

00001f66 <LCD_voidWriteData>:

void LCD_voidWriteData(u8 Copy_u8Data){
    1f66:	df 93       	push	r29
    1f68:	cf 93       	push	r28
    1f6a:	cd b7       	in	r28, 0x3d	; 61
    1f6c:	de b7       	in	r29, 0x3e	; 62
    1f6e:	2f 97       	sbiw	r28, 0x0f	; 15
    1f70:	0f b6       	in	r0, 0x3f	; 63
    1f72:	f8 94       	cli
    1f74:	de bf       	out	0x3e, r29	; 62
    1f76:	0f be       	out	0x3f, r0	; 63
    1f78:	cd bf       	out	0x3d, r28	; 61
    1f7a:	8f 87       	std	Y+15, r24	; 0x0f

	DIO_voidSetPinValue(LCD_CONTROL_PORT,RS,PIN_HIGH);
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	60 e0       	ldi	r22, 0x00	; 0
    1f80:	41 e0       	ldi	r20, 0x01	; 1
    1f82:	0e 94 25 0a 	call	0x144a	; 0x144a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT,RW,PIN_LOW);
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	61 e0       	ldi	r22, 0x01	; 1
    1f8a:	40 e0       	ldi	r20, 0x00	; 0
    1f8c:	0e 94 25 0a 	call	0x144a	; 0x144a <DIO_voidSetPinValue>
	
	DIO_voidSetPortValue(LCD_DATA_PORT,Copy_u8Data);
    1f90:	80 e0       	ldi	r24, 0x00	; 0
    1f92:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f94:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPortValue>
	
	DIO_voidSetPinValue(LCD_CONTROL_PORT,EN,PIN_HIGH);
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	62 e0       	ldi	r22, 0x02	; 2
    1f9c:	41 e0       	ldi	r20, 0x01	; 1
    1f9e:	0e 94 25 0a 	call	0x144a	; 0x144a <DIO_voidSetPinValue>
    1fa2:	80 e0       	ldi	r24, 0x00	; 0
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	a0 e0       	ldi	r26, 0x00	; 0
    1fa8:	b0 e4       	ldi	r27, 0x40	; 64
    1faa:	8b 87       	std	Y+11, r24	; 0x0b
    1fac:	9c 87       	std	Y+12, r25	; 0x0c
    1fae:	ad 87       	std	Y+13, r26	; 0x0d
    1fb0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	4a ef       	ldi	r20, 0xFA	; 250
    1fc0:	54 e4       	ldi	r21, 0x44	; 68
    1fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	8f 83       	std	Y+7, r24	; 0x07
    1fcc:	98 87       	std	Y+8, r25	; 0x08
    1fce:	a9 87       	std	Y+9, r26	; 0x09
    1fd0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fd2:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd4:	78 85       	ldd	r23, Y+8	; 0x08
    1fd6:	89 85       	ldd	r24, Y+9	; 0x09
    1fd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	40 e8       	ldi	r20, 0x80	; 128
    1fe0:	5f e3       	ldi	r21, 0x3F	; 63
    1fe2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fe6:	88 23       	and	r24, r24
    1fe8:	2c f4       	brge	.+10     	; 0x1ff4 <LCD_voidWriteData+0x8e>
		__ticks = 1;
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	9e 83       	std	Y+6, r25	; 0x06
    1ff0:	8d 83       	std	Y+5, r24	; 0x05
    1ff2:	3f c0       	rjmp	.+126    	; 0x2072 <LCD_voidWriteData+0x10c>
	else if (__tmp > 65535)
    1ff4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff6:	78 85       	ldd	r23, Y+8	; 0x08
    1ff8:	89 85       	ldd	r24, Y+9	; 0x09
    1ffa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	3f ef       	ldi	r19, 0xFF	; 255
    2000:	4f e7       	ldi	r20, 0x7F	; 127
    2002:	57 e4       	ldi	r21, 0x47	; 71
    2004:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2008:	18 16       	cp	r1, r24
    200a:	4c f5       	brge	.+82     	; 0x205e <LCD_voidWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    200c:	6b 85       	ldd	r22, Y+11	; 0x0b
    200e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2010:	8d 85       	ldd	r24, Y+13	; 0x0d
    2012:	9e 85       	ldd	r25, Y+14	; 0x0e
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	40 e2       	ldi	r20, 0x20	; 32
    201a:	51 e4       	ldi	r21, 0x41	; 65
    201c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	bc 01       	movw	r22, r24
    2026:	cd 01       	movw	r24, r26
    2028:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	9e 83       	std	Y+6, r25	; 0x06
    2032:	8d 83       	std	Y+5, r24	; 0x05
    2034:	0f c0       	rjmp	.+30     	; 0x2054 <LCD_voidWriteData+0xee>
    2036:	88 ec       	ldi	r24, 0xC8	; 200
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	9c 83       	std	Y+4, r25	; 0x04
    203c:	8b 83       	std	Y+3, r24	; 0x03
    203e:	8b 81       	ldd	r24, Y+3	; 0x03
    2040:	9c 81       	ldd	r25, Y+4	; 0x04
    2042:	01 97       	sbiw	r24, 0x01	; 1
    2044:	f1 f7       	brne	.-4      	; 0x2042 <LCD_voidWriteData+0xdc>
    2046:	9c 83       	std	Y+4, r25	; 0x04
    2048:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    204a:	8d 81       	ldd	r24, Y+5	; 0x05
    204c:	9e 81       	ldd	r25, Y+6	; 0x06
    204e:	01 97       	sbiw	r24, 0x01	; 1
    2050:	9e 83       	std	Y+6, r25	; 0x06
    2052:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2054:	8d 81       	ldd	r24, Y+5	; 0x05
    2056:	9e 81       	ldd	r25, Y+6	; 0x06
    2058:	00 97       	sbiw	r24, 0x00	; 0
    205a:	69 f7       	brne	.-38     	; 0x2036 <LCD_voidWriteData+0xd0>
    205c:	14 c0       	rjmp	.+40     	; 0x2086 <LCD_voidWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    205e:	6f 81       	ldd	r22, Y+7	; 0x07
    2060:	78 85       	ldd	r23, Y+8	; 0x08
    2062:	89 85       	ldd	r24, Y+9	; 0x09
    2064:	9a 85       	ldd	r25, Y+10	; 0x0a
    2066:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	9e 83       	std	Y+6, r25	; 0x06
    2070:	8d 83       	std	Y+5, r24	; 0x05
    2072:	8d 81       	ldd	r24, Y+5	; 0x05
    2074:	9e 81       	ldd	r25, Y+6	; 0x06
    2076:	9a 83       	std	Y+2, r25	; 0x02
    2078:	89 83       	std	Y+1, r24	; 0x01
    207a:	89 81       	ldd	r24, Y+1	; 0x01
    207c:	9a 81       	ldd	r25, Y+2	; 0x02
    207e:	01 97       	sbiw	r24, 0x01	; 1
    2080:	f1 f7       	brne	.-4      	; 0x207e <LCD_voidWriteData+0x118>
    2082:	9a 83       	std	Y+2, r25	; 0x02
    2084:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CONTROL_PORT,EN,PIN_LOW);
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	62 e0       	ldi	r22, 0x02	; 2
    208a:	40 e0       	ldi	r20, 0x00	; 0
    208c:	0e 94 25 0a 	call	0x144a	; 0x144a <DIO_voidSetPinValue>
}
    2090:	2f 96       	adiw	r28, 0x0f	; 15
    2092:	0f b6       	in	r0, 0x3f	; 63
    2094:	f8 94       	cli
    2096:	de bf       	out	0x3e, r29	; 62
    2098:	0f be       	out	0x3f, r0	; 63
    209a:	cd bf       	out	0x3d, r28	; 61
    209c:	cf 91       	pop	r28
    209e:	df 91       	pop	r29
    20a0:	08 95       	ret

000020a2 <LCD_voidGoToXY>:

void LCD_voidGoToXY(u8 Copy_u8X,u8 Copy_u8Y){
    20a2:	df 93       	push	r29
    20a4:	cf 93       	push	r28
    20a6:	00 d0       	rcall	.+0      	; 0x20a8 <LCD_voidGoToXY+0x6>
    20a8:	00 d0       	rcall	.+0      	; 0x20aa <LCD_voidGoToXY+0x8>
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
    20ae:	89 83       	std	Y+1, r24	; 0x01
    20b0:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8X){
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	28 2f       	mov	r18, r24
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	3c 83       	std	Y+4, r19	; 0x04
    20ba:	2b 83       	std	Y+3, r18	; 0x03
    20bc:	8b 81       	ldd	r24, Y+3	; 0x03
    20be:	9c 81       	ldd	r25, Y+4	; 0x04
    20c0:	00 97       	sbiw	r24, 0x00	; 0
    20c2:	31 f0       	breq	.+12     	; 0x20d0 <LCD_voidGoToXY+0x2e>
    20c4:	2b 81       	ldd	r18, Y+3	; 0x03
    20c6:	3c 81       	ldd	r19, Y+4	; 0x04
    20c8:	21 30       	cpi	r18, 0x01	; 1
    20ca:	31 05       	cpc	r19, r1
    20cc:	31 f0       	breq	.+12     	; 0x20da <LCD_voidGoToXY+0x38>
    20ce:	09 c0       	rjmp	.+18     	; 0x20e2 <LCD_voidGoToXY+0x40>
		case LINE0:
			LCD_voidWriteCommand(LINE0_ADDRESS+Copy_u8Y);
    20d0:	8a 81       	ldd	r24, Y+2	; 0x02
    20d2:	80 58       	subi	r24, 0x80	; 128
    20d4:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <LCD_voidWriteCommand>
    20d8:	04 c0       	rjmp	.+8      	; 0x20e2 <LCD_voidGoToXY+0x40>
			break;
		case LINE1:
			LCD_voidWriteCommand(LINE1_ADDRESS+Copy_u8Y);
    20da:	8a 81       	ldd	r24, Y+2	; 0x02
    20dc:	80 54       	subi	r24, 0x40	; 64
    20de:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <LCD_voidWriteCommand>
	}
}
    20e2:	0f 90       	pop	r0
    20e4:	0f 90       	pop	r0
    20e6:	0f 90       	pop	r0
    20e8:	0f 90       	pop	r0
    20ea:	cf 91       	pop	r28
    20ec:	df 91       	pop	r29
    20ee:	08 95       	ret

000020f0 <LCD_voidWriteString>:


void LCD_voidWriteString(u8 *Copy_u8String){
    20f0:	df 93       	push	r29
    20f2:	cf 93       	push	r28
    20f4:	00 d0       	rcall	.+0      	; 0x20f6 <LCD_voidWriteString+0x6>
    20f6:	0f 92       	push	r0
    20f8:	cd b7       	in	r28, 0x3d	; 61
    20fa:	de b7       	in	r29, 0x3e	; 62
    20fc:	9b 83       	std	Y+3, r25	; 0x03
    20fe:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    2100:	19 82       	std	Y+1, r1	; 0x01
    2102:	0e c0       	rjmp	.+28     	; 0x2120 <LCD_voidWriteString+0x30>
	while(Copy_u8String[i]!='\0'){
		LCD_voidWriteData(Copy_u8String[i]);
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	28 2f       	mov	r18, r24
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	8a 81       	ldd	r24, Y+2	; 0x02
    210c:	9b 81       	ldd	r25, Y+3	; 0x03
    210e:	fc 01       	movw	r30, r24
    2110:	e2 0f       	add	r30, r18
    2112:	f3 1f       	adc	r31, r19
    2114:	80 81       	ld	r24, Z
    2116:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <LCD_voidWriteData>
		i++;
    211a:	89 81       	ldd	r24, Y+1	; 0x01
    211c:	8f 5f       	subi	r24, 0xFF	; 255
    211e:	89 83       	std	Y+1, r24	; 0x01
}


void LCD_voidWriteString(u8 *Copy_u8String){
	u8 i=0;
	while(Copy_u8String[i]!='\0'){
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	28 2f       	mov	r18, r24
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	8a 81       	ldd	r24, Y+2	; 0x02
    2128:	9b 81       	ldd	r25, Y+3	; 0x03
    212a:	fc 01       	movw	r30, r24
    212c:	e2 0f       	add	r30, r18
    212e:	f3 1f       	adc	r31, r19
    2130:	80 81       	ld	r24, Z
    2132:	88 23       	and	r24, r24
    2134:	39 f7       	brne	.-50     	; 0x2104 <LCD_voidWriteString+0x14>
		LCD_voidWriteData(Copy_u8String[i]);
		i++;
	}
}
    2136:	0f 90       	pop	r0
    2138:	0f 90       	pop	r0
    213a:	0f 90       	pop	r0
    213c:	cf 91       	pop	r28
    213e:	df 91       	pop	r29
    2140:	08 95       	ret

00002142 <LCD_voidWriteNumber>:

void LCD_voidWriteNumber(u32 Copy_u32Number){
    2142:	0f 93       	push	r16
    2144:	1f 93       	push	r17
    2146:	df 93       	push	r29
    2148:	cf 93       	push	r28
    214a:	cd b7       	in	r28, 0x3d	; 61
    214c:	de b7       	in	r29, 0x3e	; 62
    214e:	60 97       	sbiw	r28, 0x10	; 16
    2150:	0f b6       	in	r0, 0x3f	; 63
    2152:	f8 94       	cli
    2154:	de bf       	out	0x3e, r29	; 62
    2156:	0f be       	out	0x3f, r0	; 63
    2158:	cd bf       	out	0x3d, r28	; 61
    215a:	6d 87       	std	Y+13, r22	; 0x0d
    215c:	7e 87       	std	Y+14, r23	; 0x0e
    215e:	8f 87       	std	Y+15, r24	; 0x0f
    2160:	98 8b       	std	Y+16, r25	; 0x10
	u8 arr[MAX_INT_DIGITS];
	u8 i=0;
    2162:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u32Number==0){
    2164:	8d 85       	ldd	r24, Y+13	; 0x0d
    2166:	9e 85       	ldd	r25, Y+14	; 0x0e
    2168:	af 85       	ldd	r26, Y+15	; 0x0f
    216a:	b8 89       	ldd	r27, Y+16	; 0x10
    216c:	00 97       	sbiw	r24, 0x00	; 0
    216e:	a1 05       	cpc	r26, r1
    2170:	b1 05       	cpc	r27, r1
    2172:	89 f5       	brne	.+98     	; 0x21d6 <LCD_voidWriteNumber+0x94>
		LCD_voidWriteData(ZERO_ASCII);
    2174:	80 e3       	ldi	r24, 0x30	; 48
    2176:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <LCD_voidWriteData>
    217a:	4d c0       	rjmp	.+154    	; 0x2216 <LCD_voidWriteNumber+0xd4>
	}
	else{
		while(Copy_u32Number>0){
			arr[i]=Copy_u32Number%10;
    217c:	8a 81       	ldd	r24, Y+2	; 0x02
    217e:	08 2f       	mov	r16, r24
    2180:	10 e0       	ldi	r17, 0x00	; 0
    2182:	8d 85       	ldd	r24, Y+13	; 0x0d
    2184:	9e 85       	ldd	r25, Y+14	; 0x0e
    2186:	af 85       	ldd	r26, Y+15	; 0x0f
    2188:	b8 89       	ldd	r27, Y+16	; 0x10
    218a:	2a e0       	ldi	r18, 0x0A	; 10
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	40 e0       	ldi	r20, 0x00	; 0
    2190:	50 e0       	ldi	r21, 0x00	; 0
    2192:	bc 01       	movw	r22, r24
    2194:	cd 01       	movw	r24, r26
    2196:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <__udivmodsi4>
    219a:	dc 01       	movw	r26, r24
    219c:	cb 01       	movw	r24, r22
    219e:	28 2f       	mov	r18, r24
    21a0:	ce 01       	movw	r24, r28
    21a2:	03 96       	adiw	r24, 0x03	; 3
    21a4:	fc 01       	movw	r30, r24
    21a6:	e0 0f       	add	r30, r16
    21a8:	f1 1f       	adc	r31, r17
    21aa:	20 83       	st	Z, r18
			Copy_u32Number/=10;
    21ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    21b0:	af 85       	ldd	r26, Y+15	; 0x0f
    21b2:	b8 89       	ldd	r27, Y+16	; 0x10
    21b4:	2a e0       	ldi	r18, 0x0A	; 10
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	40 e0       	ldi	r20, 0x00	; 0
    21ba:	50 e0       	ldi	r21, 0x00	; 0
    21bc:	bc 01       	movw	r22, r24
    21be:	cd 01       	movw	r24, r26
    21c0:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <__udivmodsi4>
    21c4:	da 01       	movw	r26, r20
    21c6:	c9 01       	movw	r24, r18
    21c8:	8d 87       	std	Y+13, r24	; 0x0d
    21ca:	9e 87       	std	Y+14, r25	; 0x0e
    21cc:	af 87       	std	Y+15, r26	; 0x0f
    21ce:	b8 8b       	std	Y+16, r27	; 0x10
			i++;
    21d0:	8a 81       	ldd	r24, Y+2	; 0x02
    21d2:	8f 5f       	subi	r24, 0xFF	; 255
    21d4:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
	if(Copy_u32Number==0){
		LCD_voidWriteData(ZERO_ASCII);
	}
	else{
		while(Copy_u32Number>0){
    21d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21da:	af 85       	ldd	r26, Y+15	; 0x0f
    21dc:	b8 89       	ldd	r27, Y+16	; 0x10
    21de:	00 97       	sbiw	r24, 0x00	; 0
    21e0:	a1 05       	cpc	r26, r1
    21e2:	b1 05       	cpc	r27, r1
    21e4:	59 f6       	brne	.-106    	; 0x217c <LCD_voidWriteNumber+0x3a>
			arr[i]=Copy_u32Number%10;
			Copy_u32Number/=10;
			i++;
		}
		for(u8 j=i;j>0;j--){
    21e6:	8a 81       	ldd	r24, Y+2	; 0x02
    21e8:	89 83       	std	Y+1, r24	; 0x01
    21ea:	12 c0       	rjmp	.+36     	; 0x2210 <LCD_voidWriteNumber+0xce>
			LCD_voidWriteData(arr[j-1]+ZERO_ASCII);
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
    21ee:	88 2f       	mov	r24, r24
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	9c 01       	movw	r18, r24
    21f4:	21 50       	subi	r18, 0x01	; 1
    21f6:	30 40       	sbci	r19, 0x00	; 0
    21f8:	ce 01       	movw	r24, r28
    21fa:	03 96       	adiw	r24, 0x03	; 3
    21fc:	fc 01       	movw	r30, r24
    21fe:	e2 0f       	add	r30, r18
    2200:	f3 1f       	adc	r31, r19
    2202:	80 81       	ld	r24, Z
    2204:	80 5d       	subi	r24, 0xD0	; 208
    2206:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <LCD_voidWriteData>
		while(Copy_u32Number>0){
			arr[i]=Copy_u32Number%10;
			Copy_u32Number/=10;
			i++;
		}
		for(u8 j=i;j>0;j--){
    220a:	89 81       	ldd	r24, Y+1	; 0x01
    220c:	81 50       	subi	r24, 0x01	; 1
    220e:	89 83       	std	Y+1, r24	; 0x01
    2210:	89 81       	ldd	r24, Y+1	; 0x01
    2212:	88 23       	and	r24, r24
    2214:	59 f7       	brne	.-42     	; 0x21ec <LCD_voidWriteNumber+0xaa>
			LCD_voidWriteData(arr[j-1]+ZERO_ASCII);
		}		
	}
}
    2216:	60 96       	adiw	r28, 0x10	; 16
    2218:	0f b6       	in	r0, 0x3f	; 63
    221a:	f8 94       	cli
    221c:	de bf       	out	0x3e, r29	; 62
    221e:	0f be       	out	0x3f, r0	; 63
    2220:	cd bf       	out	0x3d, r28	; 61
    2222:	cf 91       	pop	r28
    2224:	df 91       	pop	r29
    2226:	1f 91       	pop	r17
    2228:	0f 91       	pop	r16
    222a:	08 95       	ret

0000222c <LCD_voidWriteSpecialCharacter>:

void LCD_voidWriteSpecialCharacter(u8 *patern,u8 Copy_u32Char,u8 Copy_u8X,u8 Copy_u8Y){
    222c:	df 93       	push	r29
    222e:	cf 93       	push	r28
    2230:	00 d0       	rcall	.+0      	; 0x2232 <LCD_voidWriteSpecialCharacter+0x6>
    2232:	00 d0       	rcall	.+0      	; 0x2234 <LCD_voidWriteSpecialCharacter+0x8>
    2234:	00 d0       	rcall	.+0      	; 0x2236 <LCD_voidWriteSpecialCharacter+0xa>
    2236:	cd b7       	in	r28, 0x3d	; 61
    2238:	de b7       	in	r29, 0x3e	; 62
    223a:	9b 83       	std	Y+3, r25	; 0x03
    223c:	8a 83       	std	Y+2, r24	; 0x02
    223e:	6c 83       	std	Y+4, r22	; 0x04
    2240:	4d 83       	std	Y+5, r20	; 0x05
    2242:	2e 83       	std	Y+6, r18	; 0x06
	LCD_voidWriteCommand(CGRAM_ADDRESS+Copy_u32Char*NO_BLOCK_BYTES);
    2244:	8c 81       	ldd	r24, Y+4	; 0x04
    2246:	88 2f       	mov	r24, r24
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	08 96       	adiw	r24, 0x08	; 8
    224c:	88 0f       	add	r24, r24
    224e:	99 1f       	adc	r25, r25
    2250:	88 0f       	add	r24, r24
    2252:	99 1f       	adc	r25, r25
    2254:	88 0f       	add	r24, r24
    2256:	99 1f       	adc	r25, r25
    2258:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <LCD_voidWriteCommand>
	for(u8 i=0;i<NO_BLOCK_BYTES;i++){
    225c:	19 82       	std	Y+1, r1	; 0x01
    225e:	0e c0       	rjmp	.+28     	; 0x227c <LCD_voidWriteSpecialCharacter+0x50>
		LCD_voidWriteData(patern[i]);
    2260:	89 81       	ldd	r24, Y+1	; 0x01
    2262:	28 2f       	mov	r18, r24
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	8a 81       	ldd	r24, Y+2	; 0x02
    2268:	9b 81       	ldd	r25, Y+3	; 0x03
    226a:	fc 01       	movw	r30, r24
    226c:	e2 0f       	add	r30, r18
    226e:	f3 1f       	adc	r31, r19
    2270:	80 81       	ld	r24, Z
    2272:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <LCD_voidWriteData>
	}
}

void LCD_voidWriteSpecialCharacter(u8 *patern,u8 Copy_u32Char,u8 Copy_u8X,u8 Copy_u8Y){
	LCD_voidWriteCommand(CGRAM_ADDRESS+Copy_u32Char*NO_BLOCK_BYTES);
	for(u8 i=0;i<NO_BLOCK_BYTES;i++){
    2276:	89 81       	ldd	r24, Y+1	; 0x01
    2278:	8f 5f       	subi	r24, 0xFF	; 255
    227a:	89 83       	std	Y+1, r24	; 0x01
    227c:	89 81       	ldd	r24, Y+1	; 0x01
    227e:	88 30       	cpi	r24, 0x08	; 8
    2280:	78 f3       	brcs	.-34     	; 0x2260 <LCD_voidWriteSpecialCharacter+0x34>
		LCD_voidWriteData(patern[i]);
	}
	LCD_voidGoToXY(Copy_u8X,Copy_u8Y);
    2282:	8d 81       	ldd	r24, Y+5	; 0x05
    2284:	6e 81       	ldd	r22, Y+6	; 0x06
    2286:	0e 94 51 10 	call	0x20a2	; 0x20a2 <LCD_voidGoToXY>
	LCD_voidWriteData(Copy_u32Char);
    228a:	8c 81       	ldd	r24, Y+4	; 0x04
    228c:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <LCD_voidWriteData>
}
    2290:	26 96       	adiw	r28, 0x06	; 6
    2292:	0f b6       	in	r0, 0x3f	; 63
    2294:	f8 94       	cli
    2296:	de bf       	out	0x3e, r29	; 62
    2298:	0f be       	out	0x3f, r0	; 63
    229a:	cd bf       	out	0x3d, r28	; 61
    229c:	cf 91       	pop	r28
    229e:	df 91       	pop	r29
    22a0:	08 95       	ret

000022a2 <LCD_voidClearDisplay>:

void LCD_voidClearDisplay(){
    22a2:	df 93       	push	r29
    22a4:	cf 93       	push	r28
    22a6:	cd b7       	in	r28, 0x3d	; 61
    22a8:	de b7       	in	r29, 0x3e	; 62
	LCD_voidWriteCommand(CLEAR_COMMAND);
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <LCD_voidWriteCommand>
    22b0:	cf 91       	pop	r28
    22b2:	df 91       	pop	r29
    22b4:	08 95       	ret

000022b6 <SERVO_voidSetAngle>:
#include "Bit_Math.h"
#include "DIO_interface.h"
#include "TIMER1_interface.h"
#include "SERVO_interface.h"

void SERVO_voidSetAngle(u8 Copy_u8Angle){
    22b6:	df 93       	push	r29
    22b8:	cf 93       	push	r28
    22ba:	cd b7       	in	r28, 0x3d	; 61
    22bc:	de b7       	in	r29, 0x3e	; 62
    22be:	29 97       	sbiw	r28, 0x09	; 9
    22c0:	0f b6       	in	r0, 0x3f	; 63
    22c2:	f8 94       	cli
    22c4:	de bf       	out	0x3e, r29	; 62
    22c6:	0f be       	out	0x3f, r0	; 63
    22c8:	cd bf       	out	0x3d, r28	; 61
    22ca:	89 87       	std	Y+9, r24	; 0x09
	u32 timer;
	f32 slop;
	TIMER1_voidInitialize();
    22cc:	0e 94 ac 11 	call	0x2358	; 0x2358 <TIMER1_voidInitialize>
	TIMER1_voidSetICR1(Set_Freq_50Hz);
    22d0:	80 e2       	ldi	r24, 0x20	; 32
    22d2:	9e e4       	ldi	r25, 0x4E	; 78
    22d4:	0e 94 50 12 	call	0x24a0	; 0x24a0 <TIMER1_voidSetICR1>
	
	slop=50.0/9;
    22d8:	8c e1       	ldi	r24, 0x1C	; 28
    22da:	97 ec       	ldi	r25, 0xC7	; 199
    22dc:	a1 eb       	ldi	r26, 0xB1	; 177
    22de:	b0 e4       	ldi	r27, 0x40	; 64
    22e0:	89 83       	std	Y+1, r24	; 0x01
    22e2:	9a 83       	std	Y+2, r25	; 0x02
    22e4:	ab 83       	std	Y+3, r26	; 0x03
    22e6:	bc 83       	std	Y+4, r27	; 0x04
	timer=slop*Copy_u8Angle+999;
    22e8:	89 85       	ldd	r24, Y+9	; 0x09
    22ea:	88 2f       	mov	r24, r24
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	aa 27       	eor	r26, r26
    22f0:	97 fd       	sbrc	r25, 7
    22f2:	a0 95       	com	r26
    22f4:	ba 2f       	mov	r27, r26
    22f6:	bc 01       	movw	r22, r24
    22f8:	cd 01       	movw	r24, r26
    22fa:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	bc 01       	movw	r22, r24
    2304:	cd 01       	movw	r24, r26
    2306:	29 81       	ldd	r18, Y+1	; 0x01
    2308:	3a 81       	ldd	r19, Y+2	; 0x02
    230a:	4b 81       	ldd	r20, Y+3	; 0x03
    230c:	5c 81       	ldd	r21, Y+4	; 0x04
    230e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	bc 01       	movw	r22, r24
    2318:	cd 01       	movw	r24, r26
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	30 ec       	ldi	r19, 0xC0	; 192
    231e:	49 e7       	ldi	r20, 0x79	; 121
    2320:	54 e4       	ldi	r21, 0x44	; 68
    2322:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2326:	dc 01       	movw	r26, r24
    2328:	cb 01       	movw	r24, r22
    232a:	bc 01       	movw	r22, r24
    232c:	cd 01       	movw	r24, r26
    232e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	8d 83       	std	Y+5, r24	; 0x05
    2338:	9e 83       	std	Y+6, r25	; 0x06
    233a:	af 83       	std	Y+7, r26	; 0x07
    233c:	b8 87       	std	Y+8, r27	; 0x08
	
	TIMER1_voidSetOCR1(timer);
    233e:	8d 81       	ldd	r24, Y+5	; 0x05
    2340:	9e 81       	ldd	r25, Y+6	; 0x06
    2342:	0e 94 3e 12 	call	0x247c	; 0x247c <TIMER1_voidSetOCR1>
    2346:	29 96       	adiw	r28, 0x09	; 9
    2348:	0f b6       	in	r0, 0x3f	; 63
    234a:	f8 94       	cli
    234c:	de bf       	out	0x3e, r29	; 62
    234e:	0f be       	out	0x3f, r0	; 63
    2350:	cd bf       	out	0x3d, r28	; 61
    2352:	cf 91       	pop	r28
    2354:	df 91       	pop	r29
    2356:	08 95       	ret

00002358 <TIMER1_voidInitialize>:
void (*TIMER1_CTCB_GPfun)(void)=NULL;
void (*TIMER1_ICU_GPfun)(void)=NULL;

u32 TIMER,PreLoad,PreScaler;

void TIMER1_voidInitialize(){
    2358:	df 93       	push	r29
    235a:	cf 93       	push	r28
    235c:	cd b7       	in	r28, 0x3d	; 61
    235e:	de b7       	in	r29, 0x3e	; 62
	SetBit(TCCR1B,PIN0);
	ClrBit(TCCR1B,PIN1);
	ClrBit(TCCR1B,PIN2);
	PreScaler=1;
#elif Clock_Select == clk_8
	ClrBit(TCCR1B,PIN0);
    2360:	ae e4       	ldi	r26, 0x4E	; 78
    2362:	b0 e0       	ldi	r27, 0x00	; 0
    2364:	ee e4       	ldi	r30, 0x4E	; 78
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	80 81       	ld	r24, Z
    236a:	8e 7f       	andi	r24, 0xFE	; 254
    236c:	8c 93       	st	X, r24
	SetBit(TCCR1B,PIN1);
    236e:	ae e4       	ldi	r26, 0x4E	; 78
    2370:	b0 e0       	ldi	r27, 0x00	; 0
    2372:	ee e4       	ldi	r30, 0x4E	; 78
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	80 81       	ld	r24, Z
    2378:	82 60       	ori	r24, 0x02	; 2
    237a:	8c 93       	st	X, r24
	ClrBit(TCCR1B,PIN2);
    237c:	ae e4       	ldi	r26, 0x4E	; 78
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	ee e4       	ldi	r30, 0x4E	; 78
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	80 81       	ld	r24, Z
    2386:	8b 7f       	andi	r24, 0xFB	; 251
    2388:	8c 93       	st	X, r24
	PreScaler=8;
    238a:	88 e0       	ldi	r24, 0x08	; 8
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	a0 e0       	ldi	r26, 0x00	; 0
    2390:	b0 e0       	ldi	r27, 0x00	; 0
    2392:	80 93 80 01 	sts	0x0180, r24
    2396:	90 93 81 01 	sts	0x0181, r25
    239a:	a0 93 82 01 	sts	0x0182, r26
    239e:	b0 93 83 01 	sts	0x0183, r27
#endif

/************ Compare Output Mode *********/
#if TIMER_SELECT == TIMER1A
	#if Compare_Output_Mode == OC1_Disconnected
		ClrBit(TCCR1A,PIN6);
    23a2:	af e4       	ldi	r26, 0x4F	; 79
    23a4:	b0 e0       	ldi	r27, 0x00	; 0
    23a6:	ef e4       	ldi	r30, 0x4F	; 79
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	80 81       	ld	r24, Z
    23ac:	8f 7b       	andi	r24, 0xBF	; 191
    23ae:	8c 93       	st	X, r24
		ClrBit(TCCR1A,PIN7);
    23b0:	af e4       	ldi	r26, 0x4F	; 79
    23b2:	b0 e0       	ldi	r27, 0x00	; 0
    23b4:	ef e4       	ldi	r30, 0x4F	; 79
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	80 81       	ld	r24, Z
    23ba:	8f 77       	andi	r24, 0x7F	; 127
    23bc:	8c 93       	st	X, r24
	#endif
#endif

/************ Waveform Generation Mode *********/
#if Waveform_MODE == NORMAL
	ClrBit(TCCR1A,PIN0);
    23be:	af e4       	ldi	r26, 0x4F	; 79
    23c0:	b0 e0       	ldi	r27, 0x00	; 0
    23c2:	ef e4       	ldi	r30, 0x4F	; 79
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	80 81       	ld	r24, Z
    23c8:	8e 7f       	andi	r24, 0xFE	; 254
    23ca:	8c 93       	st	X, r24
	ClrBit(TCCR1A,PIN1);
    23cc:	af e4       	ldi	r26, 0x4F	; 79
    23ce:	b0 e0       	ldi	r27, 0x00	; 0
    23d0:	ef e4       	ldi	r30, 0x4F	; 79
    23d2:	f0 e0       	ldi	r31, 0x00	; 0
    23d4:	80 81       	ld	r24, Z
    23d6:	8d 7f       	andi	r24, 0xFD	; 253
    23d8:	8c 93       	st	X, r24
	ClrBit(TCCR1B,PIN3);
    23da:	ae e4       	ldi	r26, 0x4E	; 78
    23dc:	b0 e0       	ldi	r27, 0x00	; 0
    23de:	ee e4       	ldi	r30, 0x4E	; 78
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	80 81       	ld	r24, Z
    23e4:	87 7f       	andi	r24, 0xF7	; 247
    23e6:	8c 93       	st	X, r24
	ClrBit(TCCR1B,PIN4);
    23e8:	ae e4       	ldi	r26, 0x4E	; 78
    23ea:	b0 e0       	ldi	r27, 0x00	; 0
    23ec:	ee e4       	ldi	r30, 0x4E	; 78
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	80 81       	ld	r24, Z
    23f2:	8f 7e       	andi	r24, 0xEF	; 239
    23f4:	8c 93       	st	X, r24
	SetBit(TIMSK,PIN2);
    23f6:	a9 e5       	ldi	r26, 0x59	; 89
    23f8:	b0 e0       	ldi	r27, 0x00	; 0
    23fa:	e9 e5       	ldi	r30, 0x59	; 89
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	80 81       	ld	r24, Z
    2400:	84 60       	ori	r24, 0x04	; 4
    2402:	8c 93       	st	X, r24
	SetBit(TCCR1A,PIN0);
	SetBit(TCCR1A,PIN1);
	SetBit(TCCR1B,PIN3);
	SetBit(TCCR1B,PIN4);
#endif
}
    2404:	cf 91       	pop	r28
    2406:	df 91       	pop	r29
    2408:	08 95       	ret

0000240a <TIMER1_voidEnableICU>:

void TIMER1_voidEnableICU(){
    240a:	df 93       	push	r29
    240c:	cf 93       	push	r28
    240e:	cd b7       	in	r28, 0x3d	; 61
    2410:	de b7       	in	r29, 0x3e	; 62
	
	SetBit(TIMSK,PIN5);
    2412:	a9 e5       	ldi	r26, 0x59	; 89
    2414:	b0 e0       	ldi	r27, 0x00	; 0
    2416:	e9 e5       	ldi	r30, 0x59	; 89
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	80 81       	ld	r24, Z
    241c:	80 62       	ori	r24, 0x20	; 32
    241e:	8c 93       	st	X, r24
}
    2420:	cf 91       	pop	r28
    2422:	df 91       	pop	r29
    2424:	08 95       	ret

00002426 <TIMER1_voidICUEdge>:

void TIMER1_voidICUEdge(u8 Copy_u8ICUEdge){
    2426:	df 93       	push	r29
    2428:	cf 93       	push	r28
    242a:	00 d0       	rcall	.+0      	; 0x242c <TIMER1_voidICUEdge+0x6>
    242c:	0f 92       	push	r0
    242e:	cd b7       	in	r28, 0x3d	; 61
    2430:	de b7       	in	r29, 0x3e	; 62
    2432:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8ICUEdge){
    2434:	89 81       	ldd	r24, Y+1	; 0x01
    2436:	28 2f       	mov	r18, r24
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	3b 83       	std	Y+3, r19	; 0x03
    243c:	2a 83       	std	Y+2, r18	; 0x02
    243e:	8a 81       	ldd	r24, Y+2	; 0x02
    2440:	9b 81       	ldd	r25, Y+3	; 0x03
    2442:	00 97       	sbiw	r24, 0x00	; 0
    2444:	31 f0       	breq	.+12     	; 0x2452 <TIMER1_voidICUEdge+0x2c>
    2446:	2a 81       	ldd	r18, Y+2	; 0x02
    2448:	3b 81       	ldd	r19, Y+3	; 0x03
    244a:	21 30       	cpi	r18, 0x01	; 1
    244c:	31 05       	cpc	r19, r1
    244e:	49 f0       	breq	.+18     	; 0x2462 <TIMER1_voidICUEdge+0x3c>
    2450:	0f c0       	rjmp	.+30     	; 0x2470 <TIMER1_voidICUEdge+0x4a>
		case RISING_EDGE:
			SetBit(TCCR1B,PIN6);
    2452:	ae e4       	ldi	r26, 0x4E	; 78
    2454:	b0 e0       	ldi	r27, 0x00	; 0
    2456:	ee e4       	ldi	r30, 0x4E	; 78
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	80 81       	ld	r24, Z
    245c:	80 64       	ori	r24, 0x40	; 64
    245e:	8c 93       	st	X, r24
    2460:	07 c0       	rjmp	.+14     	; 0x2470 <TIMER1_voidICUEdge+0x4a>
			break;
		case FALLING_EDGE:
			ClrBit(TCCR1B,PIN6);
    2462:	ae e4       	ldi	r26, 0x4E	; 78
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	ee e4       	ldi	r30, 0x4E	; 78
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	80 81       	ld	r24, Z
    246c:	8f 7b       	andi	r24, 0xBF	; 191
    246e:	8c 93       	st	X, r24
			break;
	}
}
    2470:	0f 90       	pop	r0
    2472:	0f 90       	pop	r0
    2474:	0f 90       	pop	r0
    2476:	cf 91       	pop	r28
    2478:	df 91       	pop	r29
    247a:	08 95       	ret

0000247c <TIMER1_voidSetOCR1>:

void TIMER1_voidSetOCR1(u16 Copy_u16Value){
    247c:	df 93       	push	r29
    247e:	cf 93       	push	r28
    2480:	00 d0       	rcall	.+0      	; 0x2482 <TIMER1_voidSetOCR1+0x6>
    2482:	cd b7       	in	r28, 0x3d	; 61
    2484:	de b7       	in	r29, 0x3e	; 62
    2486:	9a 83       	std	Y+2, r25	; 0x02
    2488:	89 83       	std	Y+1, r24	; 0x01
	#if TIMER_SELECT == TIMER1A
		OCR1A=Copy_u16Value;
    248a:	ea e4       	ldi	r30, 0x4A	; 74
    248c:	f0 e0       	ldi	r31, 0x00	; 0
    248e:	89 81       	ldd	r24, Y+1	; 0x01
    2490:	9a 81       	ldd	r25, Y+2	; 0x02
    2492:	91 83       	std	Z+1, r25	; 0x01
    2494:	80 83       	st	Z, r24
	#elif TIMER_SELECT == TIMER1B
		OCR1B=Copy_u16Value;
	#endif	
}
    2496:	0f 90       	pop	r0
    2498:	0f 90       	pop	r0
    249a:	cf 91       	pop	r28
    249c:	df 91       	pop	r29
    249e:	08 95       	ret

000024a0 <TIMER1_voidSetICR1>:

void TIMER1_voidSetICR1(u16 Copy_u16Value){
    24a0:	df 93       	push	r29
    24a2:	cf 93       	push	r28
    24a4:	00 d0       	rcall	.+0      	; 0x24a6 <TIMER1_voidSetICR1+0x6>
    24a6:	cd b7       	in	r28, 0x3d	; 61
    24a8:	de b7       	in	r29, 0x3e	; 62
    24aa:	9a 83       	std	Y+2, r25	; 0x02
    24ac:	89 83       	std	Y+1, r24	; 0x01
	
	ICR1=Copy_u16Value;
    24ae:	e6 e4       	ldi	r30, 0x46	; 70
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	89 81       	ldd	r24, Y+1	; 0x01
    24b4:	9a 81       	ldd	r25, Y+2	; 0x02
    24b6:	91 83       	std	Z+1, r25	; 0x01
    24b8:	80 83       	st	Z, r24
}
    24ba:	0f 90       	pop	r0
    24bc:	0f 90       	pop	r0
    24be:	cf 91       	pop	r28
    24c0:	df 91       	pop	r29
    24c2:	08 95       	ret

000024c4 <TIMER1_u16GetICR1>:

u16 TIMER1_u16GetICR1(){
    24c4:	df 93       	push	r29
    24c6:	cf 93       	push	r28
    24c8:	cd b7       	in	r28, 0x3d	; 61
    24ca:	de b7       	in	r29, 0x3e	; 62
	
	return ICR1;
    24cc:	e6 e4       	ldi	r30, 0x46	; 70
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	80 81       	ld	r24, Z
    24d2:	91 81       	ldd	r25, Z+1	; 0x01
}
    24d4:	cf 91       	pop	r28
    24d6:	df 91       	pop	r29
    24d8:	08 95       	ret

000024da <TIMER1_voidPreLoad>:

void TIMER1_voidPreLoad(u16 Copy_u16Value){
    24da:	df 93       	push	r29
    24dc:	cf 93       	push	r28
    24de:	00 d0       	rcall	.+0      	; 0x24e0 <TIMER1_voidPreLoad+0x6>
    24e0:	cd b7       	in	r28, 0x3d	; 61
    24e2:	de b7       	in	r29, 0x3e	; 62
    24e4:	9a 83       	std	Y+2, r25	; 0x02
    24e6:	89 83       	std	Y+1, r24	; 0x01
	
	TCNT1=Copy_u16Value;
    24e8:	ec e4       	ldi	r30, 0x4C	; 76
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
    24ee:	9a 81       	ldd	r25, Y+2	; 0x02
    24f0:	91 83       	std	Z+1, r25	; 0x01
    24f2:	80 83       	st	Z, r24
}
    24f4:	0f 90       	pop	r0
    24f6:	0f 90       	pop	r0
    24f8:	cf 91       	pop	r28
    24fa:	df 91       	pop	r29
    24fc:	08 95       	ret

000024fe <TIMER1_voidSetTimer>:


void TIMER1_voidSetTimer(u32 Copy_u32TimeMS){
    24fe:	ef 92       	push	r14
    2500:	ff 92       	push	r15
    2502:	0f 93       	push	r16
    2504:	1f 93       	push	r17
    2506:	df 93       	push	r29
    2508:	cf 93       	push	r28
    250a:	cd b7       	in	r28, 0x3d	; 61
    250c:	de b7       	in	r29, 0x3e	; 62
    250e:	68 97       	sbiw	r28, 0x18	; 24
    2510:	0f b6       	in	r0, 0x3f	; 63
    2512:	f8 94       	cli
    2514:	de bf       	out	0x3e, r29	; 62
    2516:	0f be       	out	0x3f, r0	; 63
    2518:	cd bf       	out	0x3d, r28	; 61
    251a:	6d 8b       	std	Y+21, r22	; 0x15
    251c:	7e 8b       	std	Y+22, r23	; 0x16
    251e:	8f 8b       	std	Y+23, r24	; 0x17
    2520:	98 8f       	std	Y+24, r25	; 0x18
	
	u32 MAX_NUM;
	#if Waveform_MODE == NORMAL
		MAX_NUM=MAX_16BIT_REG;
    2522:	8f ef       	ldi	r24, 0xFF	; 255
    2524:	9f ef       	ldi	r25, 0xFF	; 255
    2526:	a0 e0       	ldi	r26, 0x00	; 0
    2528:	b0 e0       	ldi	r27, 0x00	; 0
    252a:	89 8b       	std	Y+17, r24	; 0x11
    252c:	9a 8b       	std	Y+18, r25	; 0x12
    252e:	ab 8b       	std	Y+19, r26	; 0x13
    2530:	bc 8b       	std	Y+20, r27	; 0x14
		MAX_NUM=OCR1A;
	#elif Waveform_MODE == CTC_ICR1
		MAX_NUM=ICR1;
	#endif
	
	u32 TIMER_freq=CPU_FREQUENCY/PreScaler;
    2532:	20 91 80 01 	lds	r18, 0x0180
    2536:	30 91 81 01 	lds	r19, 0x0181
    253a:	40 91 82 01 	lds	r20, 0x0182
    253e:	50 91 83 01 	lds	r21, 0x0183
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	92 e1       	ldi	r25, 0x12	; 18
    2546:	aa e7       	ldi	r26, 0x7A	; 122
    2548:	b0 e0       	ldi	r27, 0x00	; 0
    254a:	bc 01       	movw	r22, r24
    254c:	cd 01       	movw	r24, r26
    254e:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <__udivmodsi4>
    2552:	da 01       	movw	r26, r20
    2554:	c9 01       	movw	r24, r18
    2556:	8d 87       	std	Y+13, r24	; 0x0d
    2558:	9e 87       	std	Y+14, r25	; 0x0e
    255a:	af 87       	std	Y+15, r26	; 0x0f
    255c:	b8 8b       	std	Y+16, r27	; 0x10
	f32 Tick_Time=MICRO_IN_SEC/TIMER_freq;
    255e:	80 e4       	ldi	r24, 0x40	; 64
    2560:	92 e4       	ldi	r25, 0x42	; 66
    2562:	af e0       	ldi	r26, 0x0F	; 15
    2564:	b0 e0       	ldi	r27, 0x00	; 0
    2566:	2d 85       	ldd	r18, Y+13	; 0x0d
    2568:	3e 85       	ldd	r19, Y+14	; 0x0e
    256a:	4f 85       	ldd	r20, Y+15	; 0x0f
    256c:	58 89       	ldd	r21, Y+16	; 0x10
    256e:	bc 01       	movw	r22, r24
    2570:	cd 01       	movw	r24, r26
    2572:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <__udivmodsi4>
    2576:	da 01       	movw	r26, r20
    2578:	c9 01       	movw	r24, r18
    257a:	bc 01       	movw	r22, r24
    257c:	cd 01       	movw	r24, r26
    257e:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2582:	dc 01       	movw	r26, r24
    2584:	cb 01       	movw	r24, r22
    2586:	89 87       	std	Y+9, r24	; 0x09
    2588:	9a 87       	std	Y+10, r25	; 0x0a
    258a:	ab 87       	std	Y+11, r26	; 0x0b
    258c:	bc 87       	std	Y+12, r27	; 0x0c
	u32 OverFlow_Time=Tick_Time*MAX_NUM;
    258e:	69 89       	ldd	r22, Y+17	; 0x11
    2590:	7a 89       	ldd	r23, Y+18	; 0x12
    2592:	8b 89       	ldd	r24, Y+19	; 0x13
    2594:	9c 89       	ldd	r25, Y+20	; 0x14
    2596:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	bc 01       	movw	r22, r24
    25a0:	cd 01       	movw	r24, r26
    25a2:	29 85       	ldd	r18, Y+9	; 0x09
    25a4:	3a 85       	ldd	r19, Y+10	; 0x0a
    25a6:	4b 85       	ldd	r20, Y+11	; 0x0b
    25a8:	5c 85       	ldd	r21, Y+12	; 0x0c
    25aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	bc 01       	movw	r22, r24
    25b4:	cd 01       	movw	r24, r26
    25b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	8d 83       	std	Y+5, r24	; 0x05
    25c0:	9e 83       	std	Y+6, r25	; 0x06
    25c2:	af 83       	std	Y+7, r26	; 0x07
    25c4:	b8 87       	std	Y+8, r27	; 0x08
	
	TIMER=(Copy_u32TimeMS*MICRO_IN_MILLI)/OverFlow_Time;
    25c6:	8d 89       	ldd	r24, Y+21	; 0x15
    25c8:	9e 89       	ldd	r25, Y+22	; 0x16
    25ca:	af 89       	ldd	r26, Y+23	; 0x17
    25cc:	b8 8d       	ldd	r27, Y+24	; 0x18
    25ce:	28 ee       	ldi	r18, 0xE8	; 232
    25d0:	33 e0       	ldi	r19, 0x03	; 3
    25d2:	40 e0       	ldi	r20, 0x00	; 0
    25d4:	50 e0       	ldi	r21, 0x00	; 0
    25d6:	bc 01       	movw	r22, r24
    25d8:	cd 01       	movw	r24, r26
    25da:	0e 94 89 15 	call	0x2b12	; 0x2b12 <__mulsi3>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	2d 81       	ldd	r18, Y+5	; 0x05
    25e4:	3e 81       	ldd	r19, Y+6	; 0x06
    25e6:	4f 81       	ldd	r20, Y+7	; 0x07
    25e8:	58 85       	ldd	r21, Y+8	; 0x08
    25ea:	bc 01       	movw	r22, r24
    25ec:	cd 01       	movw	r24, r26
    25ee:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <__udivmodsi4>
    25f2:	da 01       	movw	r26, r20
    25f4:	c9 01       	movw	r24, r18
    25f6:	80 93 7c 01 	sts	0x017C, r24
    25fa:	90 93 7d 01 	sts	0x017D, r25
    25fe:	a0 93 7e 01 	sts	0x017E, r26
    2602:	b0 93 7f 01 	sts	0x017F, r27
	f32 remainder=((Copy_u32TimeMS*MICRO_IN_MILLI)%OverFlow_Time)/(f32)OverFlow_Time;
    2606:	8d 89       	ldd	r24, Y+21	; 0x15
    2608:	9e 89       	ldd	r25, Y+22	; 0x16
    260a:	af 89       	ldd	r26, Y+23	; 0x17
    260c:	b8 8d       	ldd	r27, Y+24	; 0x18
    260e:	28 ee       	ldi	r18, 0xE8	; 232
    2610:	33 e0       	ldi	r19, 0x03	; 3
    2612:	40 e0       	ldi	r20, 0x00	; 0
    2614:	50 e0       	ldi	r21, 0x00	; 0
    2616:	bc 01       	movw	r22, r24
    2618:	cd 01       	movw	r24, r26
    261a:	0e 94 89 15 	call	0x2b12	; 0x2b12 <__mulsi3>
    261e:	dc 01       	movw	r26, r24
    2620:	cb 01       	movw	r24, r22
    2622:	2d 81       	ldd	r18, Y+5	; 0x05
    2624:	3e 81       	ldd	r19, Y+6	; 0x06
    2626:	4f 81       	ldd	r20, Y+7	; 0x07
    2628:	58 85       	ldd	r21, Y+8	; 0x08
    262a:	bc 01       	movw	r22, r24
    262c:	cd 01       	movw	r24, r26
    262e:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <__udivmodsi4>
    2632:	dc 01       	movw	r26, r24
    2634:	cb 01       	movw	r24, r22
    2636:	bc 01       	movw	r22, r24
    2638:	cd 01       	movw	r24, r26
    263a:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    263e:	7b 01       	movw	r14, r22
    2640:	8c 01       	movw	r16, r24
    2642:	6d 81       	ldd	r22, Y+5	; 0x05
    2644:	7e 81       	ldd	r23, Y+6	; 0x06
    2646:	8f 81       	ldd	r24, Y+7	; 0x07
    2648:	98 85       	ldd	r25, Y+8	; 0x08
    264a:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    264e:	9b 01       	movw	r18, r22
    2650:	ac 01       	movw	r20, r24
    2652:	c8 01       	movw	r24, r16
    2654:	b7 01       	movw	r22, r14
    2656:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	89 83       	std	Y+1, r24	; 0x01
    2660:	9a 83       	std	Y+2, r25	; 0x02
    2662:	ab 83       	std	Y+3, r26	; 0x03
    2664:	bc 83       	std	Y+4, r27	; 0x04
	PreLoad=(1-remainder)*MAX_NUM;
    2666:	60 e0       	ldi	r22, 0x00	; 0
    2668:	70 e0       	ldi	r23, 0x00	; 0
    266a:	80 e8       	ldi	r24, 0x80	; 128
    266c:	9f e3       	ldi	r25, 0x3F	; 63
    266e:	29 81       	ldd	r18, Y+1	; 0x01
    2670:	3a 81       	ldd	r19, Y+2	; 0x02
    2672:	4b 81       	ldd	r20, Y+3	; 0x03
    2674:	5c 81       	ldd	r21, Y+4	; 0x04
    2676:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    267a:	dc 01       	movw	r26, r24
    267c:	cb 01       	movw	r24, r22
    267e:	7c 01       	movw	r14, r24
    2680:	8d 01       	movw	r16, r26
    2682:	69 89       	ldd	r22, Y+17	; 0x11
    2684:	7a 89       	ldd	r23, Y+18	; 0x12
    2686:	8b 89       	ldd	r24, Y+19	; 0x13
    2688:	9c 89       	ldd	r25, Y+20	; 0x14
    268a:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    268e:	9b 01       	movw	r18, r22
    2690:	ac 01       	movw	r20, r24
    2692:	c8 01       	movw	r24, r16
    2694:	b7 01       	movw	r22, r14
    2696:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	bc 01       	movw	r22, r24
    26a0:	cd 01       	movw	r24, r26
    26a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	80 93 84 01 	sts	0x0184, r24
    26ae:	90 93 85 01 	sts	0x0185, r25
    26b2:	a0 93 86 01 	sts	0x0186, r26
    26b6:	b0 93 87 01 	sts	0x0187, r27
	
	TIMER1_voidPreLoad(PreLoad);
    26ba:	80 91 84 01 	lds	r24, 0x0184
    26be:	90 91 85 01 	lds	r25, 0x0185
    26c2:	a0 91 86 01 	lds	r26, 0x0186
    26c6:	b0 91 87 01 	lds	r27, 0x0187
    26ca:	0e 94 6d 12 	call	0x24da	; 0x24da <TIMER1_voidPreLoad>
}
    26ce:	68 96       	adiw	r28, 0x18	; 24
    26d0:	0f b6       	in	r0, 0x3f	; 63
    26d2:	f8 94       	cli
    26d4:	de bf       	out	0x3e, r29	; 62
    26d6:	0f be       	out	0x3f, r0	; 63
    26d8:	cd bf       	out	0x3d, r28	; 61
    26da:	cf 91       	pop	r28
    26dc:	df 91       	pop	r29
    26de:	1f 91       	pop	r17
    26e0:	0f 91       	pop	r16
    26e2:	ff 90       	pop	r15
    26e4:	ef 90       	pop	r14
    26e6:	08 95       	ret

000026e8 <TIMER1_ICU_SetCallBack>:

void TIMER1_ICU_SetCallBack(void(*ptr)(void)){
    26e8:	df 93       	push	r29
    26ea:	cf 93       	push	r28
    26ec:	00 d0       	rcall	.+0      	; 0x26ee <TIMER1_ICU_SetCallBack+0x6>
    26ee:	cd b7       	in	r28, 0x3d	; 61
    26f0:	de b7       	in	r29, 0x3e	; 62
    26f2:	9a 83       	std	Y+2, r25	; 0x02
    26f4:	89 83       	std	Y+1, r24	; 0x01
	
	TIMER1_ICU_GPfun=ptr;
    26f6:	89 81       	ldd	r24, Y+1	; 0x01
    26f8:	9a 81       	ldd	r25, Y+2	; 0x02
    26fa:	90 93 6f 01 	sts	0x016F, r25
    26fe:	80 93 6e 01 	sts	0x016E, r24
}
    2702:	0f 90       	pop	r0
    2704:	0f 90       	pop	r0
    2706:	cf 91       	pop	r28
    2708:	df 91       	pop	r29
    270a:	08 95       	ret

0000270c <TIMER1_CTCA_SetCallBack>:

void TIMER1_CTCA_SetCallBack(void(*ptr)(void)){
    270c:	df 93       	push	r29
    270e:	cf 93       	push	r28
    2710:	00 d0       	rcall	.+0      	; 0x2712 <TIMER1_CTCA_SetCallBack+0x6>
    2712:	cd b7       	in	r28, 0x3d	; 61
    2714:	de b7       	in	r29, 0x3e	; 62
    2716:	9a 83       	std	Y+2, r25	; 0x02
    2718:	89 83       	std	Y+1, r24	; 0x01
	
	TIMER1_CTCA_GPfun=ptr;
    271a:	89 81       	ldd	r24, Y+1	; 0x01
    271c:	9a 81       	ldd	r25, Y+2	; 0x02
    271e:	90 93 6b 01 	sts	0x016B, r25
    2722:	80 93 6a 01 	sts	0x016A, r24
}
    2726:	0f 90       	pop	r0
    2728:	0f 90       	pop	r0
    272a:	cf 91       	pop	r28
    272c:	df 91       	pop	r29
    272e:	08 95       	ret

00002730 <TIMER1_CTCB_SetCallBack>:

void TIMER1_CTCB_SetCallBack(void(*ptr)(void)){
    2730:	df 93       	push	r29
    2732:	cf 93       	push	r28
    2734:	00 d0       	rcall	.+0      	; 0x2736 <TIMER1_CTCB_SetCallBack+0x6>
    2736:	cd b7       	in	r28, 0x3d	; 61
    2738:	de b7       	in	r29, 0x3e	; 62
    273a:	9a 83       	std	Y+2, r25	; 0x02
    273c:	89 83       	std	Y+1, r24	; 0x01
	
	TIMER1_CTCB_GPfun=ptr;
    273e:	89 81       	ldd	r24, Y+1	; 0x01
    2740:	9a 81       	ldd	r25, Y+2	; 0x02
    2742:	90 93 6d 01 	sts	0x016D, r25
    2746:	80 93 6c 01 	sts	0x016C, r24
}
    274a:	0f 90       	pop	r0
    274c:	0f 90       	pop	r0
    274e:	cf 91       	pop	r28
    2750:	df 91       	pop	r29
    2752:	08 95       	ret

00002754 <TIMER1_NORMAL_SetCallBack>:

void TIMER1_NORMAL_SetCallBack(void(*ptr)(void)){
    2754:	df 93       	push	r29
    2756:	cf 93       	push	r28
    2758:	00 d0       	rcall	.+0      	; 0x275a <TIMER1_NORMAL_SetCallBack+0x6>
    275a:	cd b7       	in	r28, 0x3d	; 61
    275c:	de b7       	in	r29, 0x3e	; 62
    275e:	9a 83       	std	Y+2, r25	; 0x02
    2760:	89 83       	std	Y+1, r24	; 0x01
			
	TIMER1_NORMAL_GPfun=ptr;
    2762:	89 81       	ldd	r24, Y+1	; 0x01
    2764:	9a 81       	ldd	r25, Y+2	; 0x02
    2766:	90 93 69 01 	sts	0x0169, r25
    276a:	80 93 68 01 	sts	0x0168, r24
}
    276e:	0f 90       	pop	r0
    2770:	0f 90       	pop	r0
    2772:	cf 91       	pop	r28
    2774:	df 91       	pop	r29
    2776:	08 95       	ret

00002778 <__vector_6>:

void __vector_6()__attribute__((signal));   // TIMER1_ICU
void __vector_6(){
    2778:	1f 92       	push	r1
    277a:	0f 92       	push	r0
    277c:	0f b6       	in	r0, 0x3f	; 63
    277e:	0f 92       	push	r0
    2780:	11 24       	eor	r1, r1
    2782:	2f 93       	push	r18
    2784:	3f 93       	push	r19
    2786:	4f 93       	push	r20
    2788:	5f 93       	push	r21
    278a:	6f 93       	push	r22
    278c:	7f 93       	push	r23
    278e:	8f 93       	push	r24
    2790:	9f 93       	push	r25
    2792:	af 93       	push	r26
    2794:	bf 93       	push	r27
    2796:	ef 93       	push	r30
    2798:	ff 93       	push	r31
    279a:	df 93       	push	r29
    279c:	cf 93       	push	r28
    279e:	cd b7       	in	r28, 0x3d	; 61
    27a0:	de b7       	in	r29, 0x3e	; 62

	if(TIMER1_ICU_GPfun!=NULL){
    27a2:	80 91 6e 01 	lds	r24, 0x016E
    27a6:	90 91 6f 01 	lds	r25, 0x016F
    27aa:	00 97       	sbiw	r24, 0x00	; 0
    27ac:	29 f0       	breq	.+10     	; 0x27b8 <__vector_6+0x40>
		TIMER1_ICU_GPfun();
    27ae:	e0 91 6e 01 	lds	r30, 0x016E
    27b2:	f0 91 6f 01 	lds	r31, 0x016F
    27b6:	09 95       	icall
	}
}
    27b8:	cf 91       	pop	r28
    27ba:	df 91       	pop	r29
    27bc:	ff 91       	pop	r31
    27be:	ef 91       	pop	r30
    27c0:	bf 91       	pop	r27
    27c2:	af 91       	pop	r26
    27c4:	9f 91       	pop	r25
    27c6:	8f 91       	pop	r24
    27c8:	7f 91       	pop	r23
    27ca:	6f 91       	pop	r22
    27cc:	5f 91       	pop	r21
    27ce:	4f 91       	pop	r20
    27d0:	3f 91       	pop	r19
    27d2:	2f 91       	pop	r18
    27d4:	0f 90       	pop	r0
    27d6:	0f be       	out	0x3f, r0	; 63
    27d8:	0f 90       	pop	r0
    27da:	1f 90       	pop	r1
    27dc:	18 95       	reti

000027de <__vector_7>:

void __vector_7()__attribute__((signal));   // TIMER1_CTCA
void __vector_7(){
    27de:	1f 92       	push	r1
    27e0:	0f 92       	push	r0
    27e2:	0f b6       	in	r0, 0x3f	; 63
    27e4:	0f 92       	push	r0
    27e6:	11 24       	eor	r1, r1
    27e8:	2f 93       	push	r18
    27ea:	3f 93       	push	r19
    27ec:	4f 93       	push	r20
    27ee:	5f 93       	push	r21
    27f0:	6f 93       	push	r22
    27f2:	7f 93       	push	r23
    27f4:	8f 93       	push	r24
    27f6:	9f 93       	push	r25
    27f8:	af 93       	push	r26
    27fa:	bf 93       	push	r27
    27fc:	ef 93       	push	r30
    27fe:	ff 93       	push	r31
    2800:	df 93       	push	r29
    2802:	cf 93       	push	r28
    2804:	cd b7       	in	r28, 0x3d	; 61
    2806:	de b7       	in	r29, 0x3e	; 62
	
	static u32 counter=0;
	
	if(counter==TIMER+1){
    2808:	80 91 7c 01 	lds	r24, 0x017C
    280c:	90 91 7d 01 	lds	r25, 0x017D
    2810:	a0 91 7e 01 	lds	r26, 0x017E
    2814:	b0 91 7f 01 	lds	r27, 0x017F
    2818:	9c 01       	movw	r18, r24
    281a:	ad 01       	movw	r20, r26
    281c:	2f 5f       	subi	r18, 0xFF	; 255
    281e:	3f 4f       	sbci	r19, 0xFF	; 255
    2820:	4f 4f       	sbci	r20, 0xFF	; 255
    2822:	5f 4f       	sbci	r21, 0xFF	; 255
    2824:	80 91 70 01 	lds	r24, 0x0170
    2828:	90 91 71 01 	lds	r25, 0x0171
    282c:	a0 91 72 01 	lds	r26, 0x0172
    2830:	b0 91 73 01 	lds	r27, 0x0173
    2834:	28 17       	cp	r18, r24
    2836:	39 07       	cpc	r19, r25
    2838:	4a 07       	cpc	r20, r26
    283a:	5b 07       	cpc	r21, r27
    283c:	f1 f4       	brne	.+60     	; 0x287a <__vector_7+0x9c>
		if(TIMER1_CTCA_GPfun!=NULL){
    283e:	80 91 6a 01 	lds	r24, 0x016A
    2842:	90 91 6b 01 	lds	r25, 0x016B
    2846:	00 97       	sbiw	r24, 0x00	; 0
    2848:	29 f0       	breq	.+10     	; 0x2854 <__vector_7+0x76>
			TIMER1_CTCA_GPfun();
    284a:	e0 91 6a 01 	lds	r30, 0x016A
    284e:	f0 91 6b 01 	lds	r31, 0x016B
    2852:	09 95       	icall
		}
		counter=0;
    2854:	10 92 70 01 	sts	0x0170, r1
    2858:	10 92 71 01 	sts	0x0171, r1
    285c:	10 92 72 01 	sts	0x0172, r1
    2860:	10 92 73 01 	sts	0x0173, r1
		TIMER1_voidPreLoad(PreLoad);
    2864:	80 91 84 01 	lds	r24, 0x0184
    2868:	90 91 85 01 	lds	r25, 0x0185
    286c:	a0 91 86 01 	lds	r26, 0x0186
    2870:	b0 91 87 01 	lds	r27, 0x0187
    2874:	0e 94 6d 12 	call	0x24da	; 0x24da <TIMER1_voidPreLoad>
    2878:	13 c0       	rjmp	.+38     	; 0x28a0 <__vector_7+0xc2>
	}
	else{
		counter++;
    287a:	80 91 70 01 	lds	r24, 0x0170
    287e:	90 91 71 01 	lds	r25, 0x0171
    2882:	a0 91 72 01 	lds	r26, 0x0172
    2886:	b0 91 73 01 	lds	r27, 0x0173
    288a:	01 96       	adiw	r24, 0x01	; 1
    288c:	a1 1d       	adc	r26, r1
    288e:	b1 1d       	adc	r27, r1
    2890:	80 93 70 01 	sts	0x0170, r24
    2894:	90 93 71 01 	sts	0x0171, r25
    2898:	a0 93 72 01 	sts	0x0172, r26
    289c:	b0 93 73 01 	sts	0x0173, r27
	}
}
    28a0:	cf 91       	pop	r28
    28a2:	df 91       	pop	r29
    28a4:	ff 91       	pop	r31
    28a6:	ef 91       	pop	r30
    28a8:	bf 91       	pop	r27
    28aa:	af 91       	pop	r26
    28ac:	9f 91       	pop	r25
    28ae:	8f 91       	pop	r24
    28b0:	7f 91       	pop	r23
    28b2:	6f 91       	pop	r22
    28b4:	5f 91       	pop	r21
    28b6:	4f 91       	pop	r20
    28b8:	3f 91       	pop	r19
    28ba:	2f 91       	pop	r18
    28bc:	0f 90       	pop	r0
    28be:	0f be       	out	0x3f, r0	; 63
    28c0:	0f 90       	pop	r0
    28c2:	1f 90       	pop	r1
    28c4:	18 95       	reti

000028c6 <__vector_8>:

void __vector_8()__attribute__((signal));   // TIMER1_CTCB
void __vector_8(){
    28c6:	1f 92       	push	r1
    28c8:	0f 92       	push	r0
    28ca:	0f b6       	in	r0, 0x3f	; 63
    28cc:	0f 92       	push	r0
    28ce:	11 24       	eor	r1, r1
    28d0:	2f 93       	push	r18
    28d2:	3f 93       	push	r19
    28d4:	4f 93       	push	r20
    28d6:	5f 93       	push	r21
    28d8:	6f 93       	push	r22
    28da:	7f 93       	push	r23
    28dc:	8f 93       	push	r24
    28de:	9f 93       	push	r25
    28e0:	af 93       	push	r26
    28e2:	bf 93       	push	r27
    28e4:	ef 93       	push	r30
    28e6:	ff 93       	push	r31
    28e8:	df 93       	push	r29
    28ea:	cf 93       	push	r28
    28ec:	cd b7       	in	r28, 0x3d	; 61
    28ee:	de b7       	in	r29, 0x3e	; 62
	
	static u32 counter=0;
	
	if(counter==TIMER+1){
    28f0:	80 91 7c 01 	lds	r24, 0x017C
    28f4:	90 91 7d 01 	lds	r25, 0x017D
    28f8:	a0 91 7e 01 	lds	r26, 0x017E
    28fc:	b0 91 7f 01 	lds	r27, 0x017F
    2900:	9c 01       	movw	r18, r24
    2902:	ad 01       	movw	r20, r26
    2904:	2f 5f       	subi	r18, 0xFF	; 255
    2906:	3f 4f       	sbci	r19, 0xFF	; 255
    2908:	4f 4f       	sbci	r20, 0xFF	; 255
    290a:	5f 4f       	sbci	r21, 0xFF	; 255
    290c:	80 91 74 01 	lds	r24, 0x0174
    2910:	90 91 75 01 	lds	r25, 0x0175
    2914:	a0 91 76 01 	lds	r26, 0x0176
    2918:	b0 91 77 01 	lds	r27, 0x0177
    291c:	28 17       	cp	r18, r24
    291e:	39 07       	cpc	r19, r25
    2920:	4a 07       	cpc	r20, r26
    2922:	5b 07       	cpc	r21, r27
    2924:	f1 f4       	brne	.+60     	; 0x2962 <__vector_8+0x9c>
		if(TIMER1_CTCB_GPfun!=NULL){
    2926:	80 91 6c 01 	lds	r24, 0x016C
    292a:	90 91 6d 01 	lds	r25, 0x016D
    292e:	00 97       	sbiw	r24, 0x00	; 0
    2930:	29 f0       	breq	.+10     	; 0x293c <__vector_8+0x76>
			TIMER1_CTCB_GPfun();
    2932:	e0 91 6c 01 	lds	r30, 0x016C
    2936:	f0 91 6d 01 	lds	r31, 0x016D
    293a:	09 95       	icall
		}
		counter=0;
    293c:	10 92 74 01 	sts	0x0174, r1
    2940:	10 92 75 01 	sts	0x0175, r1
    2944:	10 92 76 01 	sts	0x0176, r1
    2948:	10 92 77 01 	sts	0x0177, r1
		TIMER1_voidPreLoad(PreLoad);
    294c:	80 91 84 01 	lds	r24, 0x0184
    2950:	90 91 85 01 	lds	r25, 0x0185
    2954:	a0 91 86 01 	lds	r26, 0x0186
    2958:	b0 91 87 01 	lds	r27, 0x0187
    295c:	0e 94 6d 12 	call	0x24da	; 0x24da <TIMER1_voidPreLoad>
    2960:	13 c0       	rjmp	.+38     	; 0x2988 <__vector_8+0xc2>
	}
	else{
		counter++;
    2962:	80 91 74 01 	lds	r24, 0x0174
    2966:	90 91 75 01 	lds	r25, 0x0175
    296a:	a0 91 76 01 	lds	r26, 0x0176
    296e:	b0 91 77 01 	lds	r27, 0x0177
    2972:	01 96       	adiw	r24, 0x01	; 1
    2974:	a1 1d       	adc	r26, r1
    2976:	b1 1d       	adc	r27, r1
    2978:	80 93 74 01 	sts	0x0174, r24
    297c:	90 93 75 01 	sts	0x0175, r25
    2980:	a0 93 76 01 	sts	0x0176, r26
    2984:	b0 93 77 01 	sts	0x0177, r27
	}
}
    2988:	cf 91       	pop	r28
    298a:	df 91       	pop	r29
    298c:	ff 91       	pop	r31
    298e:	ef 91       	pop	r30
    2990:	bf 91       	pop	r27
    2992:	af 91       	pop	r26
    2994:	9f 91       	pop	r25
    2996:	8f 91       	pop	r24
    2998:	7f 91       	pop	r23
    299a:	6f 91       	pop	r22
    299c:	5f 91       	pop	r21
    299e:	4f 91       	pop	r20
    29a0:	3f 91       	pop	r19
    29a2:	2f 91       	pop	r18
    29a4:	0f 90       	pop	r0
    29a6:	0f be       	out	0x3f, r0	; 63
    29a8:	0f 90       	pop	r0
    29aa:	1f 90       	pop	r1
    29ac:	18 95       	reti

000029ae <__vector_9>:

void __vector_9()__attribute__((signal));   // TIMER1_NORMAL
void __vector_9(){
    29ae:	1f 92       	push	r1
    29b0:	0f 92       	push	r0
    29b2:	0f b6       	in	r0, 0x3f	; 63
    29b4:	0f 92       	push	r0
    29b6:	11 24       	eor	r1, r1
    29b8:	2f 93       	push	r18
    29ba:	3f 93       	push	r19
    29bc:	4f 93       	push	r20
    29be:	5f 93       	push	r21
    29c0:	6f 93       	push	r22
    29c2:	7f 93       	push	r23
    29c4:	8f 93       	push	r24
    29c6:	9f 93       	push	r25
    29c8:	af 93       	push	r26
    29ca:	bf 93       	push	r27
    29cc:	ef 93       	push	r30
    29ce:	ff 93       	push	r31
    29d0:	df 93       	push	r29
    29d2:	cf 93       	push	r28
    29d4:	cd b7       	in	r28, 0x3d	; 61
    29d6:	de b7       	in	r29, 0x3e	; 62
	
	static u32 counter=0;
	
	if(counter==TIMER+1){
    29d8:	80 91 7c 01 	lds	r24, 0x017C
    29dc:	90 91 7d 01 	lds	r25, 0x017D
    29e0:	a0 91 7e 01 	lds	r26, 0x017E
    29e4:	b0 91 7f 01 	lds	r27, 0x017F
    29e8:	9c 01       	movw	r18, r24
    29ea:	ad 01       	movw	r20, r26
    29ec:	2f 5f       	subi	r18, 0xFF	; 255
    29ee:	3f 4f       	sbci	r19, 0xFF	; 255
    29f0:	4f 4f       	sbci	r20, 0xFF	; 255
    29f2:	5f 4f       	sbci	r21, 0xFF	; 255
    29f4:	80 91 78 01 	lds	r24, 0x0178
    29f8:	90 91 79 01 	lds	r25, 0x0179
    29fc:	a0 91 7a 01 	lds	r26, 0x017A
    2a00:	b0 91 7b 01 	lds	r27, 0x017B
    2a04:	28 17       	cp	r18, r24
    2a06:	39 07       	cpc	r19, r25
    2a08:	4a 07       	cpc	r20, r26
    2a0a:	5b 07       	cpc	r21, r27
    2a0c:	f1 f4       	brne	.+60     	; 0x2a4a <__vector_9+0x9c>
		if(TIMER1_NORMAL_GPfun!=NULL){
    2a0e:	80 91 68 01 	lds	r24, 0x0168
    2a12:	90 91 69 01 	lds	r25, 0x0169
    2a16:	00 97       	sbiw	r24, 0x00	; 0
    2a18:	29 f0       	breq	.+10     	; 0x2a24 <__vector_9+0x76>
			TIMER1_NORMAL_GPfun();
    2a1a:	e0 91 68 01 	lds	r30, 0x0168
    2a1e:	f0 91 69 01 	lds	r31, 0x0169
    2a22:	09 95       	icall
		}
		counter=0;
    2a24:	10 92 78 01 	sts	0x0178, r1
    2a28:	10 92 79 01 	sts	0x0179, r1
    2a2c:	10 92 7a 01 	sts	0x017A, r1
    2a30:	10 92 7b 01 	sts	0x017B, r1
		TIMER1_voidPreLoad(PreLoad);
    2a34:	80 91 84 01 	lds	r24, 0x0184
    2a38:	90 91 85 01 	lds	r25, 0x0185
    2a3c:	a0 91 86 01 	lds	r26, 0x0186
    2a40:	b0 91 87 01 	lds	r27, 0x0187
    2a44:	0e 94 6d 12 	call	0x24da	; 0x24da <TIMER1_voidPreLoad>
    2a48:	13 c0       	rjmp	.+38     	; 0x2a70 <__vector_9+0xc2>
	}
	else{
		counter++;
    2a4a:	80 91 78 01 	lds	r24, 0x0178
    2a4e:	90 91 79 01 	lds	r25, 0x0179
    2a52:	a0 91 7a 01 	lds	r26, 0x017A
    2a56:	b0 91 7b 01 	lds	r27, 0x017B
    2a5a:	01 96       	adiw	r24, 0x01	; 1
    2a5c:	a1 1d       	adc	r26, r1
    2a5e:	b1 1d       	adc	r27, r1
    2a60:	80 93 78 01 	sts	0x0178, r24
    2a64:	90 93 79 01 	sts	0x0179, r25
    2a68:	a0 93 7a 01 	sts	0x017A, r26
    2a6c:	b0 93 7b 01 	sts	0x017B, r27
	}
    2a70:	cf 91       	pop	r28
    2a72:	df 91       	pop	r29
    2a74:	ff 91       	pop	r31
    2a76:	ef 91       	pop	r30
    2a78:	bf 91       	pop	r27
    2a7a:	af 91       	pop	r26
    2a7c:	9f 91       	pop	r25
    2a7e:	8f 91       	pop	r24
    2a80:	7f 91       	pop	r23
    2a82:	6f 91       	pop	r22
    2a84:	5f 91       	pop	r21
    2a86:	4f 91       	pop	r20
    2a88:	3f 91       	pop	r19
    2a8a:	2f 91       	pop	r18
    2a8c:	0f 90       	pop	r0
    2a8e:	0f be       	out	0x3f, r0	; 63
    2a90:	0f 90       	pop	r0
    2a92:	1f 90       	pop	r1
    2a94:	18 95       	reti

00002a96 <main>:
#include "Bit_Math.h"
#include "DIO_interface.h"
#include "SERVO_interface.h"
#include "ADC_interface.h"

int main(){
    2a96:	df 93       	push	r29
    2a98:	cf 93       	push	r28
    2a9a:	cd b7       	in	r28, 0x3d	; 61
    2a9c:	de b7       	in	r29, 0x3e	; 62
    2a9e:	27 97       	sbiw	r28, 0x07	; 7
    2aa0:	0f b6       	in	r0, 0x3f	; 63
    2aa2:	f8 94       	cli
    2aa4:	de bf       	out	0x3e, r29	; 62
    2aa6:	0f be       	out	0x3f, r0	; 63
    2aa8:	cd bf       	out	0x3d, r28	; 61
	u16 reading;
	u8 angle;
	f32 slop;

	DIO_voidSetPinDirection(PORTD,PIN5,PIN_OUTPUT);
    2aaa:	83 e0       	ldi	r24, 0x03	; 3
    2aac:	65 e0       	ldi	r22, 0x05	; 5
    2aae:	41 e0       	ldi	r20, 0x01	; 1
    2ab0:	0e 94 25 09 	call	0x124a	; 0x124a <DIO_voidSetPinDirection>

	ADC_voidInitialize(ADC0);
    2ab4:	80 e0       	ldi	r24, 0x00	; 0
    2ab6:	0e 94 75 07 	call	0xeea	; 0xeea <ADC_voidInitialize>
	slop=60.0/341;
    2aba:	8b e0       	ldi	r24, 0x0B	; 11
    2abc:	9d e2       	ldi	r25, 0x2D	; 45
    2abe:	a4 e3       	ldi	r26, 0x34	; 52
    2ac0:	be e3       	ldi	r27, 0x3E	; 62
    2ac2:	89 83       	std	Y+1, r24	; 0x01
    2ac4:	9a 83       	std	Y+2, r25	; 0x02
    2ac6:	ab 83       	std	Y+3, r26	; 0x03
    2ac8:	bc 83       	std	Y+4, r27	; 0x04

	while(1){
		reading=ADC_voidStartConversion();
    2aca:	0e 94 13 09 	call	0x1226	; 0x1226 <ADC_voidStartConversion>
    2ace:	9f 83       	std	Y+7, r25	; 0x07
    2ad0:	8e 83       	std	Y+6, r24	; 0x06
		angle=slop*reading;
    2ad2:	8e 81       	ldd	r24, Y+6	; 0x06
    2ad4:	9f 81       	ldd	r25, Y+7	; 0x07
    2ad6:	cc 01       	movw	r24, r24
    2ad8:	a0 e0       	ldi	r26, 0x00	; 0
    2ada:	b0 e0       	ldi	r27, 0x00	; 0
    2adc:	bc 01       	movw	r22, r24
    2ade:	cd 01       	movw	r24, r26
    2ae0:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	bc 01       	movw	r22, r24
    2aea:	cd 01       	movw	r24, r26
    2aec:	29 81       	ldd	r18, Y+1	; 0x01
    2aee:	3a 81       	ldd	r19, Y+2	; 0x02
    2af0:	4b 81       	ldd	r20, Y+3	; 0x03
    2af2:	5c 81       	ldd	r21, Y+4	; 0x04
    2af4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	bc 01       	movw	r22, r24
    2afe:	cd 01       	movw	r24, r26
    2b00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	8d 83       	std	Y+5, r24	; 0x05
		SERVO_voidSetAngle(angle);
    2b0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b0c:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <SERVO_voidSetAngle>
    2b10:	dc cf       	rjmp	.-72     	; 0x2aca <main+0x34>

00002b12 <__mulsi3>:
    2b12:	62 9f       	mul	r22, r18
    2b14:	d0 01       	movw	r26, r0
    2b16:	73 9f       	mul	r23, r19
    2b18:	f0 01       	movw	r30, r0
    2b1a:	82 9f       	mul	r24, r18
    2b1c:	e0 0d       	add	r30, r0
    2b1e:	f1 1d       	adc	r31, r1
    2b20:	64 9f       	mul	r22, r20
    2b22:	e0 0d       	add	r30, r0
    2b24:	f1 1d       	adc	r31, r1
    2b26:	92 9f       	mul	r25, r18
    2b28:	f0 0d       	add	r31, r0
    2b2a:	83 9f       	mul	r24, r19
    2b2c:	f0 0d       	add	r31, r0
    2b2e:	74 9f       	mul	r23, r20
    2b30:	f0 0d       	add	r31, r0
    2b32:	65 9f       	mul	r22, r21
    2b34:	f0 0d       	add	r31, r0
    2b36:	99 27       	eor	r25, r25
    2b38:	72 9f       	mul	r23, r18
    2b3a:	b0 0d       	add	r27, r0
    2b3c:	e1 1d       	adc	r30, r1
    2b3e:	f9 1f       	adc	r31, r25
    2b40:	63 9f       	mul	r22, r19
    2b42:	b0 0d       	add	r27, r0
    2b44:	e1 1d       	adc	r30, r1
    2b46:	f9 1f       	adc	r31, r25
    2b48:	bd 01       	movw	r22, r26
    2b4a:	cf 01       	movw	r24, r30
    2b4c:	11 24       	eor	r1, r1
    2b4e:	08 95       	ret

00002b50 <__udivmodsi4>:
    2b50:	a1 e2       	ldi	r26, 0x21	; 33
    2b52:	1a 2e       	mov	r1, r26
    2b54:	aa 1b       	sub	r26, r26
    2b56:	bb 1b       	sub	r27, r27
    2b58:	fd 01       	movw	r30, r26
    2b5a:	0d c0       	rjmp	.+26     	; 0x2b76 <__udivmodsi4_ep>

00002b5c <__udivmodsi4_loop>:
    2b5c:	aa 1f       	adc	r26, r26
    2b5e:	bb 1f       	adc	r27, r27
    2b60:	ee 1f       	adc	r30, r30
    2b62:	ff 1f       	adc	r31, r31
    2b64:	a2 17       	cp	r26, r18
    2b66:	b3 07       	cpc	r27, r19
    2b68:	e4 07       	cpc	r30, r20
    2b6a:	f5 07       	cpc	r31, r21
    2b6c:	20 f0       	brcs	.+8      	; 0x2b76 <__udivmodsi4_ep>
    2b6e:	a2 1b       	sub	r26, r18
    2b70:	b3 0b       	sbc	r27, r19
    2b72:	e4 0b       	sbc	r30, r20
    2b74:	f5 0b       	sbc	r31, r21

00002b76 <__udivmodsi4_ep>:
    2b76:	66 1f       	adc	r22, r22
    2b78:	77 1f       	adc	r23, r23
    2b7a:	88 1f       	adc	r24, r24
    2b7c:	99 1f       	adc	r25, r25
    2b7e:	1a 94       	dec	r1
    2b80:	69 f7       	brne	.-38     	; 0x2b5c <__udivmodsi4_loop>
    2b82:	60 95       	com	r22
    2b84:	70 95       	com	r23
    2b86:	80 95       	com	r24
    2b88:	90 95       	com	r25
    2b8a:	9b 01       	movw	r18, r22
    2b8c:	ac 01       	movw	r20, r24
    2b8e:	bd 01       	movw	r22, r26
    2b90:	cf 01       	movw	r24, r30
    2b92:	08 95       	ret

00002b94 <__prologue_saves__>:
    2b94:	2f 92       	push	r2
    2b96:	3f 92       	push	r3
    2b98:	4f 92       	push	r4
    2b9a:	5f 92       	push	r5
    2b9c:	6f 92       	push	r6
    2b9e:	7f 92       	push	r7
    2ba0:	8f 92       	push	r8
    2ba2:	9f 92       	push	r9
    2ba4:	af 92       	push	r10
    2ba6:	bf 92       	push	r11
    2ba8:	cf 92       	push	r12
    2baa:	df 92       	push	r13
    2bac:	ef 92       	push	r14
    2bae:	ff 92       	push	r15
    2bb0:	0f 93       	push	r16
    2bb2:	1f 93       	push	r17
    2bb4:	cf 93       	push	r28
    2bb6:	df 93       	push	r29
    2bb8:	cd b7       	in	r28, 0x3d	; 61
    2bba:	de b7       	in	r29, 0x3e	; 62
    2bbc:	ca 1b       	sub	r28, r26
    2bbe:	db 0b       	sbc	r29, r27
    2bc0:	0f b6       	in	r0, 0x3f	; 63
    2bc2:	f8 94       	cli
    2bc4:	de bf       	out	0x3e, r29	; 62
    2bc6:	0f be       	out	0x3f, r0	; 63
    2bc8:	cd bf       	out	0x3d, r28	; 61
    2bca:	09 94       	ijmp

00002bcc <__epilogue_restores__>:
    2bcc:	2a 88       	ldd	r2, Y+18	; 0x12
    2bce:	39 88       	ldd	r3, Y+17	; 0x11
    2bd0:	48 88       	ldd	r4, Y+16	; 0x10
    2bd2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2bd4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2bd6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2bd8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2bda:	9b 84       	ldd	r9, Y+11	; 0x0b
    2bdc:	aa 84       	ldd	r10, Y+10	; 0x0a
    2bde:	b9 84       	ldd	r11, Y+9	; 0x09
    2be0:	c8 84       	ldd	r12, Y+8	; 0x08
    2be2:	df 80       	ldd	r13, Y+7	; 0x07
    2be4:	ee 80       	ldd	r14, Y+6	; 0x06
    2be6:	fd 80       	ldd	r15, Y+5	; 0x05
    2be8:	0c 81       	ldd	r16, Y+4	; 0x04
    2bea:	1b 81       	ldd	r17, Y+3	; 0x03
    2bec:	aa 81       	ldd	r26, Y+2	; 0x02
    2bee:	b9 81       	ldd	r27, Y+1	; 0x01
    2bf0:	ce 0f       	add	r28, r30
    2bf2:	d1 1d       	adc	r29, r1
    2bf4:	0f b6       	in	r0, 0x3f	; 63
    2bf6:	f8 94       	cli
    2bf8:	de bf       	out	0x3e, r29	; 62
    2bfa:	0f be       	out	0x3f, r0	; 63
    2bfc:	cd bf       	out	0x3d, r28	; 61
    2bfe:	ed 01       	movw	r28, r26
    2c00:	08 95       	ret

00002c02 <_exit>:
    2c02:	f8 94       	cli

00002c04 <__stop_program>:
    2c04:	ff cf       	rjmp	.-2      	; 0x2c04 <__stop_program>
