
ICU_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002fa8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000136  00800060  00002fa8  0000303c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  00800196  00800196  00003172  2**0
                  ALLOC
  3 .stab         000022e0  00000000  00000000  00003174  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000143b  00000000  00000000  00005454  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000688f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00006a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00006c21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000902c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000a3b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b588  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000b748  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000ba3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c3ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 d2 13 	jmp	0x27a4	; 0x27a4 <__vector_6>
      1c:	0c 94 05 14 	jmp	0x280a	; 0x280a <__vector_7>
      20:	0c 94 79 14 	jmp	0x28f2	; 0x28f2 <__vector_8>
      24:	0c 94 ed 14 	jmp	0x29da	; 0x29da <__vector_9>
      28:	0c 94 da 10 	jmp	0x21b4	; 0x21b4 <__vector_10>
      2c:	0c 94 4e 11 	jmp	0x229c	; 0x229c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ea       	ldi	r30, 0xA8	; 168
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3c       	cpi	r26, 0xC2	; 194
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <main>
      8a:	0c 94 d2 17 	jmp	0x2fa4	; 0x2fa4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 22 17 	jmp	0x2e44	; 0x2e44 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e8       	ldi	r26, 0x8E	; 142
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3e 17 	jmp	0x2e7c	; 0x2e7c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2e 17 	jmp	0x2e5c	; 0x2e5c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4a 17 	jmp	0x2e94	; 0x2e94 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2e 17 	jmp	0x2e5c	; 0x2e5c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4a 17 	jmp	0x2e94	; 0x2e94 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 22 17 	jmp	0x2e44	; 0x2e44 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e8       	ldi	r24, 0x8E	; 142
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3e 17 	jmp	0x2e7c	; 0x2e7c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2a 17 	jmp	0x2e54	; 0x2e54 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6e e8       	ldi	r22, 0x8E	; 142
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 46 17 	jmp	0x2e8c	; 0x2e8c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 2e 17 	jmp	0x2e5c	; 0x2e5c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 4a 17 	jmp	0x2e94	; 0x2e94 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 2e 17 	jmp	0x2e5c	; 0x2e5c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 4a 17 	jmp	0x2e94	; 0x2e94 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 2e 17 	jmp	0x2e5c	; 0x2e5c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 4a 17 	jmp	0x2e94	; 0x2e94 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 32 17 	jmp	0x2e64	; 0x2e64 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 4e 17 	jmp	0x2e9c	; 0x2e9c <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 2a 17 	jmp	0x2e54	; 0x2e54 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 46 17 	jmp	0x2e8c	; 0x2e8c <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ea 56       	subi	r30, 0x6A	; 106
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <DIO_voidSetPinDirection>:
#include "Bit_Math.h"
#include "DIO_config.h"
#include "DIO_private.h"
#include "DIO_interface.h"

void DIO_voidSetPinDirection(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinDir){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	27 97       	sbiw	r28, 0x07	; 7
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	89 83       	std	Y+1, r24	; 0x01
     e44:	6a 83       	std	Y+2, r22	; 0x02
     e46:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinDir==PIN_OUTPUT){     //output
     e48:	8b 81       	ldd	r24, Y+3	; 0x03
     e4a:	81 30       	cpi	r24, 0x01	; 1
     e4c:	09 f0       	breq	.+2      	; 0xe50 <DIO_voidSetPinDirection+0x22>
     e4e:	6f c0       	rjmp	.+222    	; 0xf2e <DIO_voidSetPinDirection+0x100>
		switch(Copy_u8PortID){
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	28 2f       	mov	r18, r24
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	3f 83       	std	Y+7, r19	; 0x07
     e58:	2e 83       	std	Y+6, r18	; 0x06
     e5a:	8e 81       	ldd	r24, Y+6	; 0x06
     e5c:	9f 81       	ldd	r25, Y+7	; 0x07
     e5e:	81 30       	cpi	r24, 0x01	; 1
     e60:	91 05       	cpc	r25, r1
     e62:	49 f1       	breq	.+82     	; 0xeb6 <DIO_voidSetPinDirection+0x88>
     e64:	2e 81       	ldd	r18, Y+6	; 0x06
     e66:	3f 81       	ldd	r19, Y+7	; 0x07
     e68:	22 30       	cpi	r18, 0x02	; 2
     e6a:	31 05       	cpc	r19, r1
     e6c:	2c f4       	brge	.+10     	; 0xe78 <DIO_voidSetPinDirection+0x4a>
     e6e:	8e 81       	ldd	r24, Y+6	; 0x06
     e70:	9f 81       	ldd	r25, Y+7	; 0x07
     e72:	00 97       	sbiw	r24, 0x00	; 0
     e74:	61 f0       	breq	.+24     	; 0xe8e <DIO_voidSetPinDirection+0x60>
     e76:	d2 c0       	rjmp	.+420    	; 0x101c <DIO_voidSetPinDirection+0x1ee>
     e78:	2e 81       	ldd	r18, Y+6	; 0x06
     e7a:	3f 81       	ldd	r19, Y+7	; 0x07
     e7c:	22 30       	cpi	r18, 0x02	; 2
     e7e:	31 05       	cpc	r19, r1
     e80:	71 f1       	breq	.+92     	; 0xede <DIO_voidSetPinDirection+0xb0>
     e82:	8e 81       	ldd	r24, Y+6	; 0x06
     e84:	9f 81       	ldd	r25, Y+7	; 0x07
     e86:	83 30       	cpi	r24, 0x03	; 3
     e88:	91 05       	cpc	r25, r1
     e8a:	e9 f1       	breq	.+122    	; 0xf06 <DIO_voidSetPinDirection+0xd8>
     e8c:	c7 c0       	rjmp	.+398    	; 0x101c <DIO_voidSetPinDirection+0x1ee>
			case PORTA/*Port A*/: SetBit(DDRA_REG,Copy_u8PinID);break;
     e8e:	aa e3       	ldi	r26, 0x3A	; 58
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	ea e3       	ldi	r30, 0x3A	; 58
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <DIO_voidSetPinDirection+0x7e>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <DIO_voidSetPinDirection+0x7a>
     eb0:	84 2b       	or	r24, r20
     eb2:	8c 93       	st	X, r24
     eb4:	b3 c0       	rjmp	.+358    	; 0x101c <DIO_voidSetPinDirection+0x1ee>
			case PORTB/*Port B*/: SetBit(DDRB_REG,Copy_u8PinID);break;
     eb6:	a7 e3       	ldi	r26, 0x37	; 55
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e7 e3       	ldi	r30, 0x37	; 55
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	48 2f       	mov	r20, r24
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	02 2e       	mov	r0, r18
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <DIO_voidSetPinDirection+0xa6>
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	0a 94       	dec	r0
     ed6:	e2 f7       	brpl	.-8      	; 0xed0 <DIO_voidSetPinDirection+0xa2>
     ed8:	84 2b       	or	r24, r20
     eda:	8c 93       	st	X, r24
     edc:	9f c0       	rjmp	.+318    	; 0x101c <DIO_voidSetPinDirection+0x1ee>
			case PORTC/*Port C*/: SetBit(DDRC_REG,Copy_u8PinID);break;
     ede:	a4 e3       	ldi	r26, 0x34	; 52
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e4 e3       	ldi	r30, 0x34	; 52
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	48 2f       	mov	r20, r24
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	02 2e       	mov	r0, r18
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <DIO_voidSetPinDirection+0xce>
     ef8:	88 0f       	add	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	0a 94       	dec	r0
     efe:	e2 f7       	brpl	.-8      	; 0xef8 <DIO_voidSetPinDirection+0xca>
     f00:	84 2b       	or	r24, r20
     f02:	8c 93       	st	X, r24
     f04:	8b c0       	rjmp	.+278    	; 0x101c <DIO_voidSetPinDirection+0x1ee>
			case PORTD/*Port D*/: SetBit(DDRD_REG,Copy_u8PinID);break;
     f06:	a1 e3       	ldi	r26, 0x31	; 49
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e1 e3       	ldi	r30, 0x31	; 49
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	48 2f       	mov	r20, r24
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	28 2f       	mov	r18, r24
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	02 2e       	mov	r0, r18
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <DIO_voidSetPinDirection+0xf6>
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	0a 94       	dec	r0
     f26:	e2 f7       	brpl	.-8      	; 0xf20 <DIO_voidSetPinDirection+0xf2>
     f28:	84 2b       	or	r24, r20
     f2a:	8c 93       	st	X, r24
     f2c:	77 c0       	rjmp	.+238    	; 0x101c <DIO_voidSetPinDirection+0x1ee>
		}
	}
	else if(Copy_u8PinDir==PIN_INPUT){ //input
     f2e:	8b 81       	ldd	r24, Y+3	; 0x03
     f30:	88 23       	and	r24, r24
     f32:	09 f0       	breq	.+2      	; 0xf36 <DIO_voidSetPinDirection+0x108>
     f34:	73 c0       	rjmp	.+230    	; 0x101c <DIO_voidSetPinDirection+0x1ee>
		switch(Copy_u8PortID){
     f36:	89 81       	ldd	r24, Y+1	; 0x01
     f38:	28 2f       	mov	r18, r24
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	3d 83       	std	Y+5, r19	; 0x05
     f3e:	2c 83       	std	Y+4, r18	; 0x04
     f40:	8c 81       	ldd	r24, Y+4	; 0x04
     f42:	9d 81       	ldd	r25, Y+5	; 0x05
     f44:	81 30       	cpi	r24, 0x01	; 1
     f46:	91 05       	cpc	r25, r1
     f48:	59 f1       	breq	.+86     	; 0xfa0 <DIO_voidSetPinDirection+0x172>
     f4a:	2c 81       	ldd	r18, Y+4	; 0x04
     f4c:	3d 81       	ldd	r19, Y+5	; 0x05
     f4e:	22 30       	cpi	r18, 0x02	; 2
     f50:	31 05       	cpc	r19, r1
     f52:	2c f4       	brge	.+10     	; 0xf5e <DIO_voidSetPinDirection+0x130>
     f54:	8c 81       	ldd	r24, Y+4	; 0x04
     f56:	9d 81       	ldd	r25, Y+5	; 0x05
     f58:	00 97       	sbiw	r24, 0x00	; 0
     f5a:	69 f0       	breq	.+26     	; 0xf76 <DIO_voidSetPinDirection+0x148>
     f5c:	5f c0       	rjmp	.+190    	; 0x101c <DIO_voidSetPinDirection+0x1ee>
     f5e:	2c 81       	ldd	r18, Y+4	; 0x04
     f60:	3d 81       	ldd	r19, Y+5	; 0x05
     f62:	22 30       	cpi	r18, 0x02	; 2
     f64:	31 05       	cpc	r19, r1
     f66:	89 f1       	breq	.+98     	; 0xfca <DIO_voidSetPinDirection+0x19c>
     f68:	8c 81       	ldd	r24, Y+4	; 0x04
     f6a:	9d 81       	ldd	r25, Y+5	; 0x05
     f6c:	83 30       	cpi	r24, 0x03	; 3
     f6e:	91 05       	cpc	r25, r1
     f70:	09 f4       	brne	.+2      	; 0xf74 <DIO_voidSetPinDirection+0x146>
     f72:	40 c0       	rjmp	.+128    	; 0xff4 <DIO_voidSetPinDirection+0x1c6>
     f74:	53 c0       	rjmp	.+166    	; 0x101c <DIO_voidSetPinDirection+0x1ee>
			case PORTA/*Port A*/: ClrBit(DDRA_REG,Copy_u8PinID);break;
     f76:	aa e3       	ldi	r26, 0x3A	; 58
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	ea e3       	ldi	r30, 0x3A	; 58
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	48 2f       	mov	r20, r24
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	02 2e       	mov	r0, r18
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <DIO_voidSetPinDirection+0x166>
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	0a 94       	dec	r0
     f96:	e2 f7       	brpl	.-8      	; 0xf90 <DIO_voidSetPinDirection+0x162>
     f98:	80 95       	com	r24
     f9a:	84 23       	and	r24, r20
     f9c:	8c 93       	st	X, r24
     f9e:	3e c0       	rjmp	.+124    	; 0x101c <DIO_voidSetPinDirection+0x1ee>
			case PORTB/*Port B*/: ClrBit(DDRB_REG,Copy_u8PinID);break;
     fa0:	a7 e3       	ldi	r26, 0x37	; 55
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e7 e3       	ldi	r30, 0x37	; 55
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	48 2f       	mov	r20, r24
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	02 2e       	mov	r0, r18
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <DIO_voidSetPinDirection+0x190>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	0a 94       	dec	r0
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <DIO_voidSetPinDirection+0x18c>
     fc2:	80 95       	com	r24
     fc4:	84 23       	and	r24, r20
     fc6:	8c 93       	st	X, r24
     fc8:	29 c0       	rjmp	.+82     	; 0x101c <DIO_voidSetPinDirection+0x1ee>
			case PORTC/*Port C*/: ClrBit(DDRC_REG,Copy_u8PinID);break;
     fca:	a4 e3       	ldi	r26, 0x34	; 52
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	e4 e3       	ldi	r30, 0x34	; 52
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	48 2f       	mov	r20, r24
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	02 2e       	mov	r0, r18
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <DIO_voidSetPinDirection+0x1ba>
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	0a 94       	dec	r0
     fea:	e2 f7       	brpl	.-8      	; 0xfe4 <DIO_voidSetPinDirection+0x1b6>
     fec:	80 95       	com	r24
     fee:	84 23       	and	r24, r20
     ff0:	8c 93       	st	X, r24
     ff2:	14 c0       	rjmp	.+40     	; 0x101c <DIO_voidSetPinDirection+0x1ee>
			case PORTD/*Port D*/: ClrBit(DDRD_REG,Copy_u8PinID);break;
     ff4:	a1 e3       	ldi	r26, 0x31	; 49
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	e1 e3       	ldi	r30, 0x31	; 49
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	48 2f       	mov	r20, r24
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	02 2e       	mov	r0, r18
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <DIO_voidSetPinDirection+0x1e4>
    100e:	88 0f       	add	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	0a 94       	dec	r0
    1014:	e2 f7       	brpl	.-8      	; 0x100e <DIO_voidSetPinDirection+0x1e0>
    1016:	80 95       	com	r24
    1018:	84 23       	and	r24, r20
    101a:	8c 93       	st	X, r24
		}
	}
}
    101c:	27 96       	adiw	r28, 0x07	; 7
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	de bf       	out	0x3e, r29	; 62
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	cd bf       	out	0x3d, r28	; 61
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	08 95       	ret

0000102e <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    1036:	27 97       	sbiw	r28, 0x07	; 7
    1038:	0f b6       	in	r0, 0x3f	; 63
    103a:	f8 94       	cli
    103c:	de bf       	out	0x3e, r29	; 62
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	cd bf       	out	0x3d, r28	; 61
    1042:	89 83       	std	Y+1, r24	; 0x01
    1044:	6a 83       	std	Y+2, r22	; 0x02
    1046:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinValue==PIN_HIGH){      //high
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	81 30       	cpi	r24, 0x01	; 1
    104c:	09 f0       	breq	.+2      	; 0x1050 <DIO_voidSetPinValue+0x22>
    104e:	6f c0       	rjmp	.+222    	; 0x112e <DIO_voidSetPinValue+0x100>
		switch(Copy_u8PortID){
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	3f 83       	std	Y+7, r19	; 0x07
    1058:	2e 83       	std	Y+6, r18	; 0x06
    105a:	8e 81       	ldd	r24, Y+6	; 0x06
    105c:	9f 81       	ldd	r25, Y+7	; 0x07
    105e:	81 30       	cpi	r24, 0x01	; 1
    1060:	91 05       	cpc	r25, r1
    1062:	49 f1       	breq	.+82     	; 0x10b6 <DIO_voidSetPinValue+0x88>
    1064:	2e 81       	ldd	r18, Y+6	; 0x06
    1066:	3f 81       	ldd	r19, Y+7	; 0x07
    1068:	22 30       	cpi	r18, 0x02	; 2
    106a:	31 05       	cpc	r19, r1
    106c:	2c f4       	brge	.+10     	; 0x1078 <DIO_voidSetPinValue+0x4a>
    106e:	8e 81       	ldd	r24, Y+6	; 0x06
    1070:	9f 81       	ldd	r25, Y+7	; 0x07
    1072:	00 97       	sbiw	r24, 0x00	; 0
    1074:	61 f0       	breq	.+24     	; 0x108e <DIO_voidSetPinValue+0x60>
    1076:	d2 c0       	rjmp	.+420    	; 0x121c <DIO_voidSetPinValue+0x1ee>
    1078:	2e 81       	ldd	r18, Y+6	; 0x06
    107a:	3f 81       	ldd	r19, Y+7	; 0x07
    107c:	22 30       	cpi	r18, 0x02	; 2
    107e:	31 05       	cpc	r19, r1
    1080:	71 f1       	breq	.+92     	; 0x10de <DIO_voidSetPinValue+0xb0>
    1082:	8e 81       	ldd	r24, Y+6	; 0x06
    1084:	9f 81       	ldd	r25, Y+7	; 0x07
    1086:	83 30       	cpi	r24, 0x03	; 3
    1088:	91 05       	cpc	r25, r1
    108a:	e9 f1       	breq	.+122    	; 0x1106 <DIO_voidSetPinValue+0xd8>
    108c:	c7 c0       	rjmp	.+398    	; 0x121c <DIO_voidSetPinValue+0x1ee>
			case PORTA/*Port A*/: SetBit(PORTA_REG,Copy_u8PinID);break;
    108e:	ab e3       	ldi	r26, 0x3B	; 59
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	eb e3       	ldi	r30, 0x3B	; 59
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	48 2f       	mov	r20, r24
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	02 2e       	mov	r0, r18
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <DIO_voidSetPinValue+0x7e>
    10a8:	88 0f       	add	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	0a 94       	dec	r0
    10ae:	e2 f7       	brpl	.-8      	; 0x10a8 <DIO_voidSetPinValue+0x7a>
    10b0:	84 2b       	or	r24, r20
    10b2:	8c 93       	st	X, r24
    10b4:	b3 c0       	rjmp	.+358    	; 0x121c <DIO_voidSetPinValue+0x1ee>
			case PORTB/*Port B*/: SetBit(PORTB_REG,Copy_u8PinID);break;
    10b6:	a8 e3       	ldi	r26, 0x38	; 56
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	e8 e3       	ldi	r30, 0x38	; 56
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	48 2f       	mov	r20, r24
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	28 2f       	mov	r18, r24
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	02 2e       	mov	r0, r18
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <DIO_voidSetPinValue+0xa6>
    10d0:	88 0f       	add	r24, r24
    10d2:	99 1f       	adc	r25, r25
    10d4:	0a 94       	dec	r0
    10d6:	e2 f7       	brpl	.-8      	; 0x10d0 <DIO_voidSetPinValue+0xa2>
    10d8:	84 2b       	or	r24, r20
    10da:	8c 93       	st	X, r24
    10dc:	9f c0       	rjmp	.+318    	; 0x121c <DIO_voidSetPinValue+0x1ee>
			case PORTC/*Port C*/: SetBit(PORTC_REG,Copy_u8PinID);break;
    10de:	a5 e3       	ldi	r26, 0x35	; 53
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e5 e3       	ldi	r30, 0x35	; 53
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	48 2f       	mov	r20, r24
    10ea:	8a 81       	ldd	r24, Y+2	; 0x02
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	02 2e       	mov	r0, r18
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <DIO_voidSetPinValue+0xce>
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	0a 94       	dec	r0
    10fe:	e2 f7       	brpl	.-8      	; 0x10f8 <DIO_voidSetPinValue+0xca>
    1100:	84 2b       	or	r24, r20
    1102:	8c 93       	st	X, r24
    1104:	8b c0       	rjmp	.+278    	; 0x121c <DIO_voidSetPinValue+0x1ee>
			case PORTD/*Port D*/: SetBit(PORTD_REG,Copy_u8PinID);break;
    1106:	a2 e3       	ldi	r26, 0x32	; 50
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	e2 e3       	ldi	r30, 0x32	; 50
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	48 2f       	mov	r20, r24
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	02 2e       	mov	r0, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <DIO_voidSetPinValue+0xf6>
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	0a 94       	dec	r0
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <DIO_voidSetPinValue+0xf2>
    1128:	84 2b       	or	r24, r20
    112a:	8c 93       	st	X, r24
    112c:	77 c0       	rjmp	.+238    	; 0x121c <DIO_voidSetPinValue+0x1ee>
		}
	}
	else if(Copy_u8PinValue==PIN_LOW){  //low
    112e:	8b 81       	ldd	r24, Y+3	; 0x03
    1130:	88 23       	and	r24, r24
    1132:	09 f0       	breq	.+2      	; 0x1136 <DIO_voidSetPinValue+0x108>
    1134:	73 c0       	rjmp	.+230    	; 0x121c <DIO_voidSetPinValue+0x1ee>
		switch(Copy_u8PortID){
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	28 2f       	mov	r18, r24
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	3d 83       	std	Y+5, r19	; 0x05
    113e:	2c 83       	std	Y+4, r18	; 0x04
    1140:	8c 81       	ldd	r24, Y+4	; 0x04
    1142:	9d 81       	ldd	r25, Y+5	; 0x05
    1144:	81 30       	cpi	r24, 0x01	; 1
    1146:	91 05       	cpc	r25, r1
    1148:	59 f1       	breq	.+86     	; 0x11a0 <DIO_voidSetPinValue+0x172>
    114a:	2c 81       	ldd	r18, Y+4	; 0x04
    114c:	3d 81       	ldd	r19, Y+5	; 0x05
    114e:	22 30       	cpi	r18, 0x02	; 2
    1150:	31 05       	cpc	r19, r1
    1152:	2c f4       	brge	.+10     	; 0x115e <DIO_voidSetPinValue+0x130>
    1154:	8c 81       	ldd	r24, Y+4	; 0x04
    1156:	9d 81       	ldd	r25, Y+5	; 0x05
    1158:	00 97       	sbiw	r24, 0x00	; 0
    115a:	69 f0       	breq	.+26     	; 0x1176 <DIO_voidSetPinValue+0x148>
    115c:	5f c0       	rjmp	.+190    	; 0x121c <DIO_voidSetPinValue+0x1ee>
    115e:	2c 81       	ldd	r18, Y+4	; 0x04
    1160:	3d 81       	ldd	r19, Y+5	; 0x05
    1162:	22 30       	cpi	r18, 0x02	; 2
    1164:	31 05       	cpc	r19, r1
    1166:	89 f1       	breq	.+98     	; 0x11ca <DIO_voidSetPinValue+0x19c>
    1168:	8c 81       	ldd	r24, Y+4	; 0x04
    116a:	9d 81       	ldd	r25, Y+5	; 0x05
    116c:	83 30       	cpi	r24, 0x03	; 3
    116e:	91 05       	cpc	r25, r1
    1170:	09 f4       	brne	.+2      	; 0x1174 <DIO_voidSetPinValue+0x146>
    1172:	40 c0       	rjmp	.+128    	; 0x11f4 <DIO_voidSetPinValue+0x1c6>
    1174:	53 c0       	rjmp	.+166    	; 0x121c <DIO_voidSetPinValue+0x1ee>
			case PORTA/*Port A*/: ClrBit(PORTA_REG,Copy_u8PinID);break;
    1176:	ab e3       	ldi	r26, 0x3B	; 59
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	eb e3       	ldi	r30, 0x3B	; 59
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	48 2f       	mov	r20, r24
    1182:	8a 81       	ldd	r24, Y+2	; 0x02
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	02 2e       	mov	r0, r18
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <DIO_voidSetPinValue+0x166>
    1190:	88 0f       	add	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	0a 94       	dec	r0
    1196:	e2 f7       	brpl	.-8      	; 0x1190 <DIO_voidSetPinValue+0x162>
    1198:	80 95       	com	r24
    119a:	84 23       	and	r24, r20
    119c:	8c 93       	st	X, r24
    119e:	3e c0       	rjmp	.+124    	; 0x121c <DIO_voidSetPinValue+0x1ee>
			case PORTB/*Port B*/: ClrBit(PORTB_REG,Copy_u8PinID);break;
    11a0:	a8 e3       	ldi	r26, 0x38	; 56
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	e8 e3       	ldi	r30, 0x38	; 56
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	48 2f       	mov	r20, r24
    11ac:	8a 81       	ldd	r24, Y+2	; 0x02
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	02 2e       	mov	r0, r18
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <DIO_voidSetPinValue+0x190>
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	0a 94       	dec	r0
    11c0:	e2 f7       	brpl	.-8      	; 0x11ba <DIO_voidSetPinValue+0x18c>
    11c2:	80 95       	com	r24
    11c4:	84 23       	and	r24, r20
    11c6:	8c 93       	st	X, r24
    11c8:	29 c0       	rjmp	.+82     	; 0x121c <DIO_voidSetPinValue+0x1ee>
			case PORTC/*Port C*/: ClrBit(PORTC_REG,Copy_u8PinID);break;
    11ca:	a5 e3       	ldi	r26, 0x35	; 53
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e5 e3       	ldi	r30, 0x35	; 53
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	48 2f       	mov	r20, r24
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	02 2e       	mov	r0, r18
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <DIO_voidSetPinValue+0x1ba>
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	0a 94       	dec	r0
    11ea:	e2 f7       	brpl	.-8      	; 0x11e4 <DIO_voidSetPinValue+0x1b6>
    11ec:	80 95       	com	r24
    11ee:	84 23       	and	r24, r20
    11f0:	8c 93       	st	X, r24
    11f2:	14 c0       	rjmp	.+40     	; 0x121c <DIO_voidSetPinValue+0x1ee>
			case PORTD/*Port D*/: ClrBit(PORTD_REG,Copy_u8PinID);break;
    11f4:	a2 e3       	ldi	r26, 0x32	; 50
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	e2 e3       	ldi	r30, 0x32	; 50
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	48 2f       	mov	r20, r24
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	02 2e       	mov	r0, r18
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <DIO_voidSetPinValue+0x1e4>
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	0a 94       	dec	r0
    1214:	e2 f7       	brpl	.-8      	; 0x120e <DIO_voidSetPinValue+0x1e0>
    1216:	80 95       	com	r24
    1218:	84 23       	and	r24, r20
    121a:	8c 93       	st	X, r24
		}
	}	
}
    121c:	27 96       	adiw	r28, 0x07	; 7
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	de bf       	out	0x3e, r29	; 62
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	08 95       	ret

0000122e <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(u8 Copy_u8PortID,u8 Copy_u8PortDir){
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	00 d0       	rcall	.+0      	; 0x1234 <DIO_voidSetPortDirection+0x6>
    1234:	00 d0       	rcall	.+0      	; 0x1236 <DIO_voidSetPortDirection+0x8>
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
    123a:	89 83       	std	Y+1, r24	; 0x01
    123c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortID){
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	3c 83       	std	Y+4, r19	; 0x04
    1246:	2b 83       	std	Y+3, r18	; 0x03
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	9c 81       	ldd	r25, Y+4	; 0x04
    124c:	81 30       	cpi	r24, 0x01	; 1
    124e:	91 05       	cpc	r25, r1
    1250:	d1 f0       	breq	.+52     	; 0x1286 <DIO_voidSetPortDirection+0x58>
    1252:	2b 81       	ldd	r18, Y+3	; 0x03
    1254:	3c 81       	ldd	r19, Y+4	; 0x04
    1256:	22 30       	cpi	r18, 0x02	; 2
    1258:	31 05       	cpc	r19, r1
    125a:	2c f4       	brge	.+10     	; 0x1266 <DIO_voidSetPortDirection+0x38>
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	9c 81       	ldd	r25, Y+4	; 0x04
    1260:	00 97       	sbiw	r24, 0x00	; 0
    1262:	61 f0       	breq	.+24     	; 0x127c <DIO_voidSetPortDirection+0x4e>
    1264:	1e c0       	rjmp	.+60     	; 0x12a2 <DIO_voidSetPortDirection+0x74>
    1266:	2b 81       	ldd	r18, Y+3	; 0x03
    1268:	3c 81       	ldd	r19, Y+4	; 0x04
    126a:	22 30       	cpi	r18, 0x02	; 2
    126c:	31 05       	cpc	r19, r1
    126e:	81 f0       	breq	.+32     	; 0x1290 <DIO_voidSetPortDirection+0x62>
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	9c 81       	ldd	r25, Y+4	; 0x04
    1274:	83 30       	cpi	r24, 0x03	; 3
    1276:	91 05       	cpc	r25, r1
    1278:	81 f0       	breq	.+32     	; 0x129a <DIO_voidSetPortDirection+0x6c>
    127a:	13 c0       	rjmp	.+38     	; 0x12a2 <DIO_voidSetPortDirection+0x74>
		case PORTA/*Port A*/: DDRA_REG=Copy_u8PortDir;break;
    127c:	ea e3       	ldi	r30, 0x3A	; 58
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	80 83       	st	Z, r24
    1284:	0e c0       	rjmp	.+28     	; 0x12a2 <DIO_voidSetPortDirection+0x74>
		case PORTB/*Port B*/: DDRB_REG=Copy_u8PortDir;break;
    1286:	e7 e3       	ldi	r30, 0x37	; 55
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	80 83       	st	Z, r24
    128e:	09 c0       	rjmp	.+18     	; 0x12a2 <DIO_voidSetPortDirection+0x74>
		case PORTC/*Port C*/: DDRC_REG=Copy_u8PortDir;break;
    1290:	e4 e3       	ldi	r30, 0x34	; 52
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	80 83       	st	Z, r24
    1298:	04 c0       	rjmp	.+8      	; 0x12a2 <DIO_voidSetPortDirection+0x74>
		case PORTD/*Port D*/: DDRD_REG=Copy_u8PortDir;break;
    129a:	e1 e3       	ldi	r30, 0x31	; 49
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	80 83       	st	Z, r24
	}
}
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	cf 91       	pop	r28
    12ac:	df 91       	pop	r29
    12ae:	08 95       	ret

000012b0 <DIO_voidSetAllPortInput>:

void DIO_voidSetAllPortInput(u8 Copy_u8PortID){
    12b0:	df 93       	push	r29
    12b2:	cf 93       	push	r28
    12b4:	00 d0       	rcall	.+0      	; 0x12b6 <DIO_voidSetAllPortInput+0x6>
    12b6:	0f 92       	push	r0
    12b8:	cd b7       	in	r28, 0x3d	; 61
    12ba:	de b7       	in	r29, 0x3e	; 62
    12bc:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID){
    12be:	89 81       	ldd	r24, Y+1	; 0x01
    12c0:	28 2f       	mov	r18, r24
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	3b 83       	std	Y+3, r19	; 0x03
    12c6:	2a 83       	std	Y+2, r18	; 0x02
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	9b 81       	ldd	r25, Y+3	; 0x03
    12cc:	81 30       	cpi	r24, 0x01	; 1
    12ce:	91 05       	cpc	r25, r1
    12d0:	c9 f0       	breq	.+50     	; 0x1304 <DIO_voidSetAllPortInput+0x54>
    12d2:	2a 81       	ldd	r18, Y+2	; 0x02
    12d4:	3b 81       	ldd	r19, Y+3	; 0x03
    12d6:	22 30       	cpi	r18, 0x02	; 2
    12d8:	31 05       	cpc	r19, r1
    12da:	2c f4       	brge	.+10     	; 0x12e6 <DIO_voidSetAllPortInput+0x36>
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	9b 81       	ldd	r25, Y+3	; 0x03
    12e0:	00 97       	sbiw	r24, 0x00	; 0
    12e2:	61 f0       	breq	.+24     	; 0x12fc <DIO_voidSetAllPortInput+0x4c>
    12e4:	1a c0       	rjmp	.+52     	; 0x131a <DIO_voidSetAllPortInput+0x6a>
    12e6:	2a 81       	ldd	r18, Y+2	; 0x02
    12e8:	3b 81       	ldd	r19, Y+3	; 0x03
    12ea:	22 30       	cpi	r18, 0x02	; 2
    12ec:	31 05       	cpc	r19, r1
    12ee:	71 f0       	breq	.+28     	; 0x130c <DIO_voidSetAllPortInput+0x5c>
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	9b 81       	ldd	r25, Y+3	; 0x03
    12f4:	83 30       	cpi	r24, 0x03	; 3
    12f6:	91 05       	cpc	r25, r1
    12f8:	69 f0       	breq	.+26     	; 0x1314 <DIO_voidSetAllPortInput+0x64>
    12fa:	0f c0       	rjmp	.+30     	; 0x131a <DIO_voidSetAllPortInput+0x6a>
		case PORTA/*Port A*/: DDRA_REG=PORT_INPUT;break;
    12fc:	ea e3       	ldi	r30, 0x3A	; 58
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	10 82       	st	Z, r1
    1302:	0b c0       	rjmp	.+22     	; 0x131a <DIO_voidSetAllPortInput+0x6a>
		case PORTB/*Port B*/: DDRB_REG=PORT_INPUT;break;
    1304:	e7 e3       	ldi	r30, 0x37	; 55
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	10 82       	st	Z, r1
    130a:	07 c0       	rjmp	.+14     	; 0x131a <DIO_voidSetAllPortInput+0x6a>
		case PORTC/*Port C*/: DDRC_REG=PORT_INPUT;break;
    130c:	e4 e3       	ldi	r30, 0x34	; 52
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	10 82       	st	Z, r1
    1312:	03 c0       	rjmp	.+6      	; 0x131a <DIO_voidSetAllPortInput+0x6a>
		case PORTD/*Port D*/: DDRD_REG=PORT_INPUT;break;
    1314:	e1 e3       	ldi	r30, 0x31	; 49
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	10 82       	st	Z, r1
	}
}
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	08 95       	ret

00001326 <DIO_voidSetAllPortOutput>:

void DIO_voidSetAllPortOutput(u8 Copy_u8PortID){
    1326:	df 93       	push	r29
    1328:	cf 93       	push	r28
    132a:	00 d0       	rcall	.+0      	; 0x132c <DIO_voidSetAllPortOutput+0x6>
    132c:	0f 92       	push	r0
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
    1332:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID){
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	3b 83       	std	Y+3, r19	; 0x03
    133c:	2a 83       	std	Y+2, r18	; 0x02
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	9b 81       	ldd	r25, Y+3	; 0x03
    1342:	81 30       	cpi	r24, 0x01	; 1
    1344:	91 05       	cpc	r25, r1
    1346:	d1 f0       	breq	.+52     	; 0x137c <DIO_voidSetAllPortOutput+0x56>
    1348:	2a 81       	ldd	r18, Y+2	; 0x02
    134a:	3b 81       	ldd	r19, Y+3	; 0x03
    134c:	22 30       	cpi	r18, 0x02	; 2
    134e:	31 05       	cpc	r19, r1
    1350:	2c f4       	brge	.+10     	; 0x135c <DIO_voidSetAllPortOutput+0x36>
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	9b 81       	ldd	r25, Y+3	; 0x03
    1356:	00 97       	sbiw	r24, 0x00	; 0
    1358:	61 f0       	breq	.+24     	; 0x1372 <DIO_voidSetAllPortOutput+0x4c>
    135a:	1e c0       	rjmp	.+60     	; 0x1398 <DIO_voidSetAllPortOutput+0x72>
    135c:	2a 81       	ldd	r18, Y+2	; 0x02
    135e:	3b 81       	ldd	r19, Y+3	; 0x03
    1360:	22 30       	cpi	r18, 0x02	; 2
    1362:	31 05       	cpc	r19, r1
    1364:	81 f0       	breq	.+32     	; 0x1386 <DIO_voidSetAllPortOutput+0x60>
    1366:	8a 81       	ldd	r24, Y+2	; 0x02
    1368:	9b 81       	ldd	r25, Y+3	; 0x03
    136a:	83 30       	cpi	r24, 0x03	; 3
    136c:	91 05       	cpc	r25, r1
    136e:	81 f0       	breq	.+32     	; 0x1390 <DIO_voidSetAllPortOutput+0x6a>
    1370:	13 c0       	rjmp	.+38     	; 0x1398 <DIO_voidSetAllPortOutput+0x72>
		case PORTA/*Port A*/: DDRA_REG=PORT_OUTPUT;break;
    1372:	ea e3       	ldi	r30, 0x3A	; 58
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	8f ef       	ldi	r24, 0xFF	; 255
    1378:	80 83       	st	Z, r24
    137a:	0e c0       	rjmp	.+28     	; 0x1398 <DIO_voidSetAllPortOutput+0x72>
		case PORTB/*Port B*/: DDRB_REG=PORT_OUTPUT;break;
    137c:	e7 e3       	ldi	r30, 0x37	; 55
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	8f ef       	ldi	r24, 0xFF	; 255
    1382:	80 83       	st	Z, r24
    1384:	09 c0       	rjmp	.+18     	; 0x1398 <DIO_voidSetAllPortOutput+0x72>
		case PORTC/*Port C*/: DDRC_REG=PORT_OUTPUT;break;
    1386:	e4 e3       	ldi	r30, 0x34	; 52
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	8f ef       	ldi	r24, 0xFF	; 255
    138c:	80 83       	st	Z, r24
    138e:	04 c0       	rjmp	.+8      	; 0x1398 <DIO_voidSetAllPortOutput+0x72>
		case PORTD/*Port D*/: DDRD_REG=PORT_OUTPUT;break;
    1390:	e1 e3       	ldi	r30, 0x31	; 49
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	8f ef       	ldi	r24, 0xFF	; 255
    1396:	80 83       	st	Z, r24
	}
}
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	cf 91       	pop	r28
    13a0:	df 91       	pop	r29
    13a2:	08 95       	ret

000013a4 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 Copy_u8PortID,u8 Copy_u8PortValue){
    13a4:	df 93       	push	r29
    13a6:	cf 93       	push	r28
    13a8:	00 d0       	rcall	.+0      	; 0x13aa <DIO_voidSetPortValue+0x6>
    13aa:	00 d0       	rcall	.+0      	; 0x13ac <DIO_voidSetPortValue+0x8>
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
    13b0:	89 83       	std	Y+1, r24	; 0x01
    13b2:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortID){
    13b4:	89 81       	ldd	r24, Y+1	; 0x01
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	3c 83       	std	Y+4, r19	; 0x04
    13bc:	2b 83       	std	Y+3, r18	; 0x03
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	9c 81       	ldd	r25, Y+4	; 0x04
    13c2:	81 30       	cpi	r24, 0x01	; 1
    13c4:	91 05       	cpc	r25, r1
    13c6:	d1 f0       	breq	.+52     	; 0x13fc <DIO_voidSetPortValue+0x58>
    13c8:	2b 81       	ldd	r18, Y+3	; 0x03
    13ca:	3c 81       	ldd	r19, Y+4	; 0x04
    13cc:	22 30       	cpi	r18, 0x02	; 2
    13ce:	31 05       	cpc	r19, r1
    13d0:	2c f4       	brge	.+10     	; 0x13dc <DIO_voidSetPortValue+0x38>
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	9c 81       	ldd	r25, Y+4	; 0x04
    13d6:	00 97       	sbiw	r24, 0x00	; 0
    13d8:	61 f0       	breq	.+24     	; 0x13f2 <DIO_voidSetPortValue+0x4e>
    13da:	1e c0       	rjmp	.+60     	; 0x1418 <DIO_voidSetPortValue+0x74>
    13dc:	2b 81       	ldd	r18, Y+3	; 0x03
    13de:	3c 81       	ldd	r19, Y+4	; 0x04
    13e0:	22 30       	cpi	r18, 0x02	; 2
    13e2:	31 05       	cpc	r19, r1
    13e4:	81 f0       	breq	.+32     	; 0x1406 <DIO_voidSetPortValue+0x62>
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ea:	83 30       	cpi	r24, 0x03	; 3
    13ec:	91 05       	cpc	r25, r1
    13ee:	81 f0       	breq	.+32     	; 0x1410 <DIO_voidSetPortValue+0x6c>
    13f0:	13 c0       	rjmp	.+38     	; 0x1418 <DIO_voidSetPortValue+0x74>
		case PORTA/*Port A*/: PORTA_REG=Copy_u8PortValue;break;
    13f2:	eb e3       	ldi	r30, 0x3B	; 59
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	80 83       	st	Z, r24
    13fa:	0e c0       	rjmp	.+28     	; 0x1418 <DIO_voidSetPortValue+0x74>
		case PORTB/*Port B*/: PORTB_REG=Copy_u8PortValue;break;
    13fc:	e8 e3       	ldi	r30, 0x38	; 56
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	80 83       	st	Z, r24
    1404:	09 c0       	rjmp	.+18     	; 0x1418 <DIO_voidSetPortValue+0x74>
		case PORTC/*Port C*/: PORTC_REG=Copy_u8PortValue;break;
    1406:	e5 e3       	ldi	r30, 0x35	; 53
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	80 83       	st	Z, r24
    140e:	04 c0       	rjmp	.+8      	; 0x1418 <DIO_voidSetPortValue+0x74>
		case PORTD/*Port D*/: PORTD_REG=Copy_u8PortValue;break;
    1410:	e2 e3       	ldi	r30, 0x32	; 50
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	80 83       	st	Z, r24
	}
}
    1418:	0f 90       	pop	r0
    141a:	0f 90       	pop	r0
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	cf 91       	pop	r28
    1422:	df 91       	pop	r29
    1424:	08 95       	ret

00001426 <DIO_voidSetAllPortLow>:

void DIO_voidSetAllPortLow(u8 Copy_u8PortID){
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	00 d0       	rcall	.+0      	; 0x142c <DIO_voidSetAllPortLow+0x6>
    142c:	0f 92       	push	r0
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    1432:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID){
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	3b 83       	std	Y+3, r19	; 0x03
    143c:	2a 83       	std	Y+2, r18	; 0x02
    143e:	8a 81       	ldd	r24, Y+2	; 0x02
    1440:	9b 81       	ldd	r25, Y+3	; 0x03
    1442:	81 30       	cpi	r24, 0x01	; 1
    1444:	91 05       	cpc	r25, r1
    1446:	c9 f0       	breq	.+50     	; 0x147a <DIO_voidSetAllPortLow+0x54>
    1448:	2a 81       	ldd	r18, Y+2	; 0x02
    144a:	3b 81       	ldd	r19, Y+3	; 0x03
    144c:	22 30       	cpi	r18, 0x02	; 2
    144e:	31 05       	cpc	r19, r1
    1450:	2c f4       	brge	.+10     	; 0x145c <DIO_voidSetAllPortLow+0x36>
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	9b 81       	ldd	r25, Y+3	; 0x03
    1456:	00 97       	sbiw	r24, 0x00	; 0
    1458:	61 f0       	breq	.+24     	; 0x1472 <DIO_voidSetAllPortLow+0x4c>
    145a:	1a c0       	rjmp	.+52     	; 0x1490 <DIO_voidSetAllPortLow+0x6a>
    145c:	2a 81       	ldd	r18, Y+2	; 0x02
    145e:	3b 81       	ldd	r19, Y+3	; 0x03
    1460:	22 30       	cpi	r18, 0x02	; 2
    1462:	31 05       	cpc	r19, r1
    1464:	71 f0       	breq	.+28     	; 0x1482 <DIO_voidSetAllPortLow+0x5c>
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	9b 81       	ldd	r25, Y+3	; 0x03
    146a:	83 30       	cpi	r24, 0x03	; 3
    146c:	91 05       	cpc	r25, r1
    146e:	69 f0       	breq	.+26     	; 0x148a <DIO_voidSetAllPortLow+0x64>
    1470:	0f c0       	rjmp	.+30     	; 0x1490 <DIO_voidSetAllPortLow+0x6a>
		case PORTA/*Port A*/: PORTA_REG=PORT_LOW;break;
    1472:	eb e3       	ldi	r30, 0x3B	; 59
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	10 82       	st	Z, r1
    1478:	0b c0       	rjmp	.+22     	; 0x1490 <DIO_voidSetAllPortLow+0x6a>
		case PORTB/*Port B*/: PORTB_REG=PORT_LOW;break;
    147a:	e8 e3       	ldi	r30, 0x38	; 56
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	10 82       	st	Z, r1
    1480:	07 c0       	rjmp	.+14     	; 0x1490 <DIO_voidSetAllPortLow+0x6a>
		case PORTC/*Port C*/: PORTC_REG=PORT_LOW;break;
    1482:	e5 e3       	ldi	r30, 0x35	; 53
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	10 82       	st	Z, r1
    1488:	03 c0       	rjmp	.+6      	; 0x1490 <DIO_voidSetAllPortLow+0x6a>
		case PORTD/*Port D*/: PORTD_REG=PORT_LOW;break;
    148a:	e2 e3       	ldi	r30, 0x32	; 50
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	10 82       	st	Z, r1
	}
}
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	cf 91       	pop	r28
    1498:	df 91       	pop	r29
    149a:	08 95       	ret

0000149c <DIO_voidSetAllPortHigh>:

void DIO_voidSetAllPortHigh(u8 Copy_u8PortID){
    149c:	df 93       	push	r29
    149e:	cf 93       	push	r28
    14a0:	00 d0       	rcall	.+0      	; 0x14a2 <DIO_voidSetAllPortHigh+0x6>
    14a2:	0f 92       	push	r0
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
    14a8:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID){
    14aa:	89 81       	ldd	r24, Y+1	; 0x01
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	3b 83       	std	Y+3, r19	; 0x03
    14b2:	2a 83       	std	Y+2, r18	; 0x02
    14b4:	8a 81       	ldd	r24, Y+2	; 0x02
    14b6:	9b 81       	ldd	r25, Y+3	; 0x03
    14b8:	81 30       	cpi	r24, 0x01	; 1
    14ba:	91 05       	cpc	r25, r1
    14bc:	d1 f0       	breq	.+52     	; 0x14f2 <DIO_voidSetAllPortHigh+0x56>
    14be:	2a 81       	ldd	r18, Y+2	; 0x02
    14c0:	3b 81       	ldd	r19, Y+3	; 0x03
    14c2:	22 30       	cpi	r18, 0x02	; 2
    14c4:	31 05       	cpc	r19, r1
    14c6:	2c f4       	brge	.+10     	; 0x14d2 <DIO_voidSetAllPortHigh+0x36>
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	9b 81       	ldd	r25, Y+3	; 0x03
    14cc:	00 97       	sbiw	r24, 0x00	; 0
    14ce:	61 f0       	breq	.+24     	; 0x14e8 <DIO_voidSetAllPortHigh+0x4c>
    14d0:	1e c0       	rjmp	.+60     	; 0x150e <DIO_voidSetAllPortHigh+0x72>
    14d2:	2a 81       	ldd	r18, Y+2	; 0x02
    14d4:	3b 81       	ldd	r19, Y+3	; 0x03
    14d6:	22 30       	cpi	r18, 0x02	; 2
    14d8:	31 05       	cpc	r19, r1
    14da:	81 f0       	breq	.+32     	; 0x14fc <DIO_voidSetAllPortHigh+0x60>
    14dc:	8a 81       	ldd	r24, Y+2	; 0x02
    14de:	9b 81       	ldd	r25, Y+3	; 0x03
    14e0:	83 30       	cpi	r24, 0x03	; 3
    14e2:	91 05       	cpc	r25, r1
    14e4:	81 f0       	breq	.+32     	; 0x1506 <DIO_voidSetAllPortHigh+0x6a>
    14e6:	13 c0       	rjmp	.+38     	; 0x150e <DIO_voidSetAllPortHigh+0x72>
		case PORTA/*Port A*/: PORTA_REG=PORT_HIGH;break;
    14e8:	eb e3       	ldi	r30, 0x3B	; 59
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	8f ef       	ldi	r24, 0xFF	; 255
    14ee:	80 83       	st	Z, r24
    14f0:	0e c0       	rjmp	.+28     	; 0x150e <DIO_voidSetAllPortHigh+0x72>
		case PORTB/*Port B*/: PORTB_REG=PORT_HIGH;break;
    14f2:	e8 e3       	ldi	r30, 0x38	; 56
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	8f ef       	ldi	r24, 0xFF	; 255
    14f8:	80 83       	st	Z, r24
    14fa:	09 c0       	rjmp	.+18     	; 0x150e <DIO_voidSetAllPortHigh+0x72>
		case PORTC/*Port C*/: PORTC_REG=PORT_HIGH;break;
    14fc:	e5 e3       	ldi	r30, 0x35	; 53
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	8f ef       	ldi	r24, 0xFF	; 255
    1502:	80 83       	st	Z, r24
    1504:	04 c0       	rjmp	.+8      	; 0x150e <DIO_voidSetAllPortHigh+0x72>
		case PORTD/*Port D*/: PORTD_REG=PORT_HIGH;break;
    1506:	e2 e3       	ldi	r30, 0x32	; 50
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	8f ef       	ldi	r24, 0xFF	; 255
    150c:	80 83       	st	Z, r24
	}
}
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	cf 91       	pop	r28
    1516:	df 91       	pop	r29
    1518:	08 95       	ret

0000151a <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID){
    151a:	df 93       	push	r29
    151c:	cf 93       	push	r28
    151e:	00 d0       	rcall	.+0      	; 0x1520 <DIO_u8GetPinValue+0x6>
    1520:	00 d0       	rcall	.+0      	; 0x1522 <DIO_u8GetPinValue+0x8>
    1522:	0f 92       	push	r0
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
    1528:	8a 83       	std	Y+2, r24	; 0x02
    152a:	6b 83       	std	Y+3, r22	; 0x03
	u8 value;
	switch(Copy_u8PortID){
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	28 2f       	mov	r18, r24
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	3d 83       	std	Y+5, r19	; 0x05
    1534:	2c 83       	std	Y+4, r18	; 0x04
    1536:	4c 81       	ldd	r20, Y+4	; 0x04
    1538:	5d 81       	ldd	r21, Y+5	; 0x05
    153a:	41 30       	cpi	r20, 0x01	; 1
    153c:	51 05       	cpc	r21, r1
    153e:	41 f1       	breq	.+80     	; 0x1590 <DIO_u8GetPinValue+0x76>
    1540:	8c 81       	ldd	r24, Y+4	; 0x04
    1542:	9d 81       	ldd	r25, Y+5	; 0x05
    1544:	82 30       	cpi	r24, 0x02	; 2
    1546:	91 05       	cpc	r25, r1
    1548:	34 f4       	brge	.+12     	; 0x1556 <DIO_u8GetPinValue+0x3c>
    154a:	2c 81       	ldd	r18, Y+4	; 0x04
    154c:	3d 81       	ldd	r19, Y+5	; 0x05
    154e:	21 15       	cp	r18, r1
    1550:	31 05       	cpc	r19, r1
    1552:	61 f0       	breq	.+24     	; 0x156c <DIO_u8GetPinValue+0x52>
    1554:	52 c0       	rjmp	.+164    	; 0x15fa <DIO_u8GetPinValue+0xe0>
    1556:	4c 81       	ldd	r20, Y+4	; 0x04
    1558:	5d 81       	ldd	r21, Y+5	; 0x05
    155a:	42 30       	cpi	r20, 0x02	; 2
    155c:	51 05       	cpc	r21, r1
    155e:	51 f1       	breq	.+84     	; 0x15b4 <DIO_u8GetPinValue+0x9a>
    1560:	8c 81       	ldd	r24, Y+4	; 0x04
    1562:	9d 81       	ldd	r25, Y+5	; 0x05
    1564:	83 30       	cpi	r24, 0x03	; 3
    1566:	91 05       	cpc	r25, r1
    1568:	b9 f1       	breq	.+110    	; 0x15d8 <DIO_u8GetPinValue+0xbe>
    156a:	47 c0       	rjmp	.+142    	; 0x15fa <DIO_u8GetPinValue+0xe0>
		case PORTA/*Port A*/: value=GetBit(PINA_REG,Copy_u8PinID);break;
    156c:	e9 e3       	ldi	r30, 0x39	; 57
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	28 2f       	mov	r18, r24
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	88 2f       	mov	r24, r24
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	a9 01       	movw	r20, r18
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <DIO_u8GetPinValue+0x6a>
    1580:	55 95       	asr	r21
    1582:	47 95       	ror	r20
    1584:	8a 95       	dec	r24
    1586:	e2 f7       	brpl	.-8      	; 0x1580 <DIO_u8GetPinValue+0x66>
    1588:	ca 01       	movw	r24, r20
    158a:	81 70       	andi	r24, 0x01	; 1
    158c:	89 83       	std	Y+1, r24	; 0x01
    158e:	35 c0       	rjmp	.+106    	; 0x15fa <DIO_u8GetPinValue+0xe0>
		case PORTB/*Port B*/: value=GetBit(PINB_REG,Copy_u8PinID);break;
    1590:	e6 e3       	ldi	r30, 0x36	; 54
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	28 2f       	mov	r18, r24
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	88 2f       	mov	r24, r24
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	a9 01       	movw	r20, r18
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <DIO_u8GetPinValue+0x8e>
    15a4:	55 95       	asr	r21
    15a6:	47 95       	ror	r20
    15a8:	8a 95       	dec	r24
    15aa:	e2 f7       	brpl	.-8      	; 0x15a4 <DIO_u8GetPinValue+0x8a>
    15ac:	ca 01       	movw	r24, r20
    15ae:	81 70       	andi	r24, 0x01	; 1
    15b0:	89 83       	std	Y+1, r24	; 0x01
    15b2:	23 c0       	rjmp	.+70     	; 0x15fa <DIO_u8GetPinValue+0xe0>
		case PORTC/*Port C*/: value=GetBit(PINC_REG,Copy_u8PinID);break;
    15b4:	e3 e3       	ldi	r30, 0x33	; 51
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	28 2f       	mov	r18, r24
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	88 2f       	mov	r24, r24
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	a9 01       	movw	r20, r18
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <DIO_u8GetPinValue+0xb2>
    15c8:	55 95       	asr	r21
    15ca:	47 95       	ror	r20
    15cc:	8a 95       	dec	r24
    15ce:	e2 f7       	brpl	.-8      	; 0x15c8 <DIO_u8GetPinValue+0xae>
    15d0:	ca 01       	movw	r24, r20
    15d2:	81 70       	andi	r24, 0x01	; 1
    15d4:	89 83       	std	Y+1, r24	; 0x01
    15d6:	11 c0       	rjmp	.+34     	; 0x15fa <DIO_u8GetPinValue+0xe0>
		case PORTD/*Port D*/: value=GetBit(PIND_REG,Copy_u8PinID);break;
    15d8:	e0 e3       	ldi	r30, 0x30	; 48
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	88 2f       	mov	r24, r24
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	a9 01       	movw	r20, r18
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <DIO_u8GetPinValue+0xd6>
    15ec:	55 95       	asr	r21
    15ee:	47 95       	ror	r20
    15f0:	8a 95       	dec	r24
    15f2:	e2 f7       	brpl	.-8      	; 0x15ec <DIO_u8GetPinValue+0xd2>
    15f4:	ca 01       	movw	r24, r20
    15f6:	81 70       	andi	r24, 0x01	; 1
    15f8:	89 83       	std	Y+1, r24	; 0x01
	}
	return value;
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    15fc:	0f 90       	pop	r0
    15fe:	0f 90       	pop	r0
    1600:	0f 90       	pop	r0
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	cf 91       	pop	r28
    1608:	df 91       	pop	r29
    160a:	08 95       	ret

0000160c <DIO_voidTogglePinValue>:

void DIO_voidTogglePinValue(u8 Copy_u8PortID,u8 Copy_u8PinID){
    160c:	df 93       	push	r29
    160e:	cf 93       	push	r28
    1610:	00 d0       	rcall	.+0      	; 0x1612 <DIO_voidTogglePinValue+0x6>
    1612:	00 d0       	rcall	.+0      	; 0x1614 <DIO_voidTogglePinValue+0x8>
    1614:	cd b7       	in	r28, 0x3d	; 61
    1616:	de b7       	in	r29, 0x3e	; 62
    1618:	89 83       	std	Y+1, r24	; 0x01
    161a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortID){
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	28 2f       	mov	r18, r24
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	3c 83       	std	Y+4, r19	; 0x04
    1624:	2b 83       	std	Y+3, r18	; 0x03
    1626:	8b 81       	ldd	r24, Y+3	; 0x03
    1628:	9c 81       	ldd	r25, Y+4	; 0x04
    162a:	81 30       	cpi	r24, 0x01	; 1
    162c:	91 05       	cpc	r25, r1
    162e:	49 f1       	breq	.+82     	; 0x1682 <DIO_voidTogglePinValue+0x76>
    1630:	2b 81       	ldd	r18, Y+3	; 0x03
    1632:	3c 81       	ldd	r19, Y+4	; 0x04
    1634:	22 30       	cpi	r18, 0x02	; 2
    1636:	31 05       	cpc	r19, r1
    1638:	2c f4       	brge	.+10     	; 0x1644 <DIO_voidTogglePinValue+0x38>
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	9c 81       	ldd	r25, Y+4	; 0x04
    163e:	00 97       	sbiw	r24, 0x00	; 0
    1640:	61 f0       	breq	.+24     	; 0x165a <DIO_voidTogglePinValue+0x4e>
    1642:	5a c0       	rjmp	.+180    	; 0x16f8 <DIO_voidTogglePinValue+0xec>
    1644:	2b 81       	ldd	r18, Y+3	; 0x03
    1646:	3c 81       	ldd	r19, Y+4	; 0x04
    1648:	22 30       	cpi	r18, 0x02	; 2
    164a:	31 05       	cpc	r19, r1
    164c:	71 f1       	breq	.+92     	; 0x16aa <DIO_voidTogglePinValue+0x9e>
    164e:	8b 81       	ldd	r24, Y+3	; 0x03
    1650:	9c 81       	ldd	r25, Y+4	; 0x04
    1652:	83 30       	cpi	r24, 0x03	; 3
    1654:	91 05       	cpc	r25, r1
    1656:	e9 f1       	breq	.+122    	; 0x16d2 <DIO_voidTogglePinValue+0xc6>
    1658:	4f c0       	rjmp	.+158    	; 0x16f8 <DIO_voidTogglePinValue+0xec>
		case PORTA/*Port A*/: TogBit(PORTA_REG,Copy_u8PinID);break;
    165a:	ab e3       	ldi	r26, 0x3B	; 59
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	eb e3       	ldi	r30, 0x3B	; 59
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	48 2f       	mov	r20, r24
    1666:	8a 81       	ldd	r24, Y+2	; 0x02
    1668:	28 2f       	mov	r18, r24
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	02 2e       	mov	r0, r18
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <DIO_voidTogglePinValue+0x6c>
    1674:	88 0f       	add	r24, r24
    1676:	99 1f       	adc	r25, r25
    1678:	0a 94       	dec	r0
    167a:	e2 f7       	brpl	.-8      	; 0x1674 <DIO_voidTogglePinValue+0x68>
    167c:	84 27       	eor	r24, r20
    167e:	8c 93       	st	X, r24
    1680:	3b c0       	rjmp	.+118    	; 0x16f8 <DIO_voidTogglePinValue+0xec>
		case PORTB/*Port B*/: TogBit(PORTB_REG,Copy_u8PinID);break;
    1682:	a8 e3       	ldi	r26, 0x38	; 56
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	e8 e3       	ldi	r30, 0x38	; 56
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	48 2f       	mov	r20, r24
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	28 2f       	mov	r18, r24
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	02 2e       	mov	r0, r18
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <DIO_voidTogglePinValue+0x94>
    169c:	88 0f       	add	r24, r24
    169e:	99 1f       	adc	r25, r25
    16a0:	0a 94       	dec	r0
    16a2:	e2 f7       	brpl	.-8      	; 0x169c <DIO_voidTogglePinValue+0x90>
    16a4:	84 27       	eor	r24, r20
    16a6:	8c 93       	st	X, r24
    16a8:	27 c0       	rjmp	.+78     	; 0x16f8 <DIO_voidTogglePinValue+0xec>
		case PORTC/*Port C*/: TogBit(PORTC_REG,Copy_u8PinID);break;
    16aa:	a5 e3       	ldi	r26, 0x35	; 53
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e5 e3       	ldi	r30, 0x35	; 53
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	48 2f       	mov	r20, r24
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	02 2e       	mov	r0, r18
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <DIO_voidTogglePinValue+0xbc>
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	0a 94       	dec	r0
    16ca:	e2 f7       	brpl	.-8      	; 0x16c4 <DIO_voidTogglePinValue+0xb8>
    16cc:	84 27       	eor	r24, r20
    16ce:	8c 93       	st	X, r24
    16d0:	13 c0       	rjmp	.+38     	; 0x16f8 <DIO_voidTogglePinValue+0xec>
		case PORTD/*Port D*/: TogBit(PORTD_REG,Copy_u8PinID);break;
    16d2:	a2 e3       	ldi	r26, 0x32	; 50
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e2 e3       	ldi	r30, 0x32	; 50
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	48 2f       	mov	r20, r24
    16de:	8a 81       	ldd	r24, Y+2	; 0x02
    16e0:	28 2f       	mov	r18, r24
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	02 2e       	mov	r0, r18
    16ea:	02 c0       	rjmp	.+4      	; 0x16f0 <DIO_voidTogglePinValue+0xe4>
    16ec:	88 0f       	add	r24, r24
    16ee:	99 1f       	adc	r25, r25
    16f0:	0a 94       	dec	r0
    16f2:	e2 f7       	brpl	.-8      	; 0x16ec <DIO_voidTogglePinValue+0xe0>
    16f4:	84 27       	eor	r24, r20
    16f6:	8c 93       	st	X, r24
	}
}
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	cf 91       	pop	r28
    1702:	df 91       	pop	r29
    1704:	08 95       	ret

00001706 <GIE_voidEnable>:
#include "Bit_Math.h"
#include "DIO_interface.h"
#include "GIE_private.h"
#include "GIE_interface.h"

void GIE_voidEnable(){
    1706:	df 93       	push	r29
    1708:	cf 93       	push	r28
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62

	SetBit(SREG,PIN7);
    170e:	af e5       	ldi	r26, 0x5F	; 95
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	ef e5       	ldi	r30, 0x5F	; 95
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	80 68       	ori	r24, 0x80	; 128
    171a:	8c 93       	st	X, r24
}
    171c:	cf 91       	pop	r28
    171e:	df 91       	pop	r29
    1720:	08 95       	ret

00001722 <GIE_voidDisable>:

void GIE_voidDisable(){
    1722:	df 93       	push	r29
    1724:	cf 93       	push	r28
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62

	ClrBit(SREG,PIN7);
    172a:	af e5       	ldi	r26, 0x5F	; 95
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	ef e5       	ldi	r30, 0x5F	; 95
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	8f 77       	andi	r24, 0x7F	; 127
    1736:	8c 93       	st	X, r24
    1738:	cf 91       	pop	r28
    173a:	df 91       	pop	r29
    173c:	08 95       	ret

0000173e <LCD_voidIntialize>:
#include "LCD_config.h"
#include "LCD_interface.h"
#include "avr/delay.h"


void LCD_voidIntialize(){
    173e:	df 93       	push	r29
    1740:	cf 93       	push	r28
    1742:	cd b7       	in	r28, 0x3d	; 61
    1744:	de b7       	in	r29, 0x3e	; 62
    1746:	aa 97       	sbiw	r28, 0x2a	; 42
    1748:	0f b6       	in	r0, 0x3f	; 63
    174a:	f8 94       	cli
    174c:	de bf       	out	0x3e, r29	; 62
    174e:	0f be       	out	0x3f, r0	; 63
    1750:	cd bf       	out	0x3d, r28	; 61
	
	DIO_voidSetAllPortOutput(LCD_DATA_PORT);
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	0e 94 93 09 	call	0x1326	; 0x1326 <DIO_voidSetAllPortOutput>
	
	DIO_voidSetPinDirection(LCD_CONTROL_PORT,RS,PIN_OUTPUT);
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	60 e0       	ldi	r22, 0x00	; 0
    175c:	41 e0       	ldi	r20, 0x01	; 1
    175e:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT,RW,PIN_OUTPUT);
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	61 e0       	ldi	r22, 0x01	; 1
    1766:	41 e0       	ldi	r20, 0x01	; 1
    1768:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT,EN,PIN_OUTPUT);
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	62 e0       	ldi	r22, 0x02	; 2
    1770:	41 e0       	ldi	r20, 0x01	; 1
    1772:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidSetPinDirection>
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	a0 ef       	ldi	r26, 0xF0	; 240
    177c:	b1 e4       	ldi	r27, 0x41	; 65
    177e:	8f a3       	std	Y+39, r24	; 0x27
    1780:	98 a7       	std	Y+40, r25	; 0x28
    1782:	a9 a7       	std	Y+41, r26	; 0x29
    1784:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1786:	6f a1       	ldd	r22, Y+39	; 0x27
    1788:	78 a5       	ldd	r23, Y+40	; 0x28
    178a:	89 a5       	ldd	r24, Y+41	; 0x29
    178c:	9a a5       	ldd	r25, Y+42	; 0x2a
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	4a ef       	ldi	r20, 0xFA	; 250
    1794:	54 e4       	ldi	r21, 0x44	; 68
    1796:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    179a:	dc 01       	movw	r26, r24
    179c:	cb 01       	movw	r24, r22
    179e:	8b a3       	std	Y+35, r24	; 0x23
    17a0:	9c a3       	std	Y+36, r25	; 0x24
    17a2:	ad a3       	std	Y+37, r26	; 0x25
    17a4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17a6:	6b a1       	ldd	r22, Y+35	; 0x23
    17a8:	7c a1       	ldd	r23, Y+36	; 0x24
    17aa:	8d a1       	ldd	r24, Y+37	; 0x25
    17ac:	9e a1       	ldd	r25, Y+38	; 0x26
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	40 e8       	ldi	r20, 0x80	; 128
    17b4:	5f e3       	ldi	r21, 0x3F	; 63
    17b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17ba:	88 23       	and	r24, r24
    17bc:	2c f4       	brge	.+10     	; 0x17c8 <LCD_voidIntialize+0x8a>
		__ticks = 1;
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	9a a3       	std	Y+34, r25	; 0x22
    17c4:	89 a3       	std	Y+33, r24	; 0x21
    17c6:	3f c0       	rjmp	.+126    	; 0x1846 <LCD_voidIntialize+0x108>
	else if (__tmp > 65535)
    17c8:	6b a1       	ldd	r22, Y+35	; 0x23
    17ca:	7c a1       	ldd	r23, Y+36	; 0x24
    17cc:	8d a1       	ldd	r24, Y+37	; 0x25
    17ce:	9e a1       	ldd	r25, Y+38	; 0x26
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	3f ef       	ldi	r19, 0xFF	; 255
    17d4:	4f e7       	ldi	r20, 0x7F	; 127
    17d6:	57 e4       	ldi	r21, 0x47	; 71
    17d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17dc:	18 16       	cp	r1, r24
    17de:	4c f5       	brge	.+82     	; 0x1832 <LCD_voidIntialize+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e0:	6f a1       	ldd	r22, Y+39	; 0x27
    17e2:	78 a5       	ldd	r23, Y+40	; 0x28
    17e4:	89 a5       	ldd	r24, Y+41	; 0x29
    17e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	40 e2       	ldi	r20, 0x20	; 32
    17ee:	51 e4       	ldi	r21, 0x41	; 65
    17f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	bc 01       	movw	r22, r24
    17fa:	cd 01       	movw	r24, r26
    17fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	9a a3       	std	Y+34, r25	; 0x22
    1806:	89 a3       	std	Y+33, r24	; 0x21
    1808:	0f c0       	rjmp	.+30     	; 0x1828 <LCD_voidIntialize+0xea>
    180a:	88 ec       	ldi	r24, 0xC8	; 200
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	98 a3       	std	Y+32, r25	; 0x20
    1810:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1812:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1814:	98 a1       	ldd	r25, Y+32	; 0x20
    1816:	01 97       	sbiw	r24, 0x01	; 1
    1818:	f1 f7       	brne	.-4      	; 0x1816 <LCD_voidIntialize+0xd8>
    181a:	98 a3       	std	Y+32, r25	; 0x20
    181c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    181e:	89 a1       	ldd	r24, Y+33	; 0x21
    1820:	9a a1       	ldd	r25, Y+34	; 0x22
    1822:	01 97       	sbiw	r24, 0x01	; 1
    1824:	9a a3       	std	Y+34, r25	; 0x22
    1826:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1828:	89 a1       	ldd	r24, Y+33	; 0x21
    182a:	9a a1       	ldd	r25, Y+34	; 0x22
    182c:	00 97       	sbiw	r24, 0x00	; 0
    182e:	69 f7       	brne	.-38     	; 0x180a <LCD_voidIntialize+0xcc>
    1830:	14 c0       	rjmp	.+40     	; 0x185a <LCD_voidIntialize+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1832:	6b a1       	ldd	r22, Y+35	; 0x23
    1834:	7c a1       	ldd	r23, Y+36	; 0x24
    1836:	8d a1       	ldd	r24, Y+37	; 0x25
    1838:	9e a1       	ldd	r25, Y+38	; 0x26
    183a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	9a a3       	std	Y+34, r25	; 0x22
    1844:	89 a3       	std	Y+33, r24	; 0x21
    1846:	89 a1       	ldd	r24, Y+33	; 0x21
    1848:	9a a1       	ldd	r25, Y+34	; 0x22
    184a:	9e 8f       	std	Y+30, r25	; 0x1e
    184c:	8d 8f       	std	Y+29, r24	; 0x1d
    184e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1850:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	f1 f7       	brne	.-4      	; 0x1852 <LCD_voidIntialize+0x114>
    1856:	9e 8f       	std	Y+30, r25	; 0x1e
    1858:	8d 8f       	std	Y+29, r24	; 0x1d
	
	_delay_ms(30);
	LCD_voidWriteCommand(FUN_SET_COMMAND);
    185a:	88 e3       	ldi	r24, 0x38	; 56
    185c:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <LCD_voidWriteCommand>
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	a0 e0       	ldi	r26, 0x00	; 0
    1866:	b0 e4       	ldi	r27, 0x40	; 64
    1868:	89 8f       	std	Y+25, r24	; 0x19
    186a:	9a 8f       	std	Y+26, r25	; 0x1a
    186c:	ab 8f       	std	Y+27, r26	; 0x1b
    186e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1870:	69 8d       	ldd	r22, Y+25	; 0x19
    1872:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1874:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1876:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	4a ef       	ldi	r20, 0xFA	; 250
    187e:	54 e4       	ldi	r21, 0x44	; 68
    1880:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1884:	dc 01       	movw	r26, r24
    1886:	cb 01       	movw	r24, r22
    1888:	8d 8b       	std	Y+21, r24	; 0x15
    188a:	9e 8b       	std	Y+22, r25	; 0x16
    188c:	af 8b       	std	Y+23, r26	; 0x17
    188e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1890:	6d 89       	ldd	r22, Y+21	; 0x15
    1892:	7e 89       	ldd	r23, Y+22	; 0x16
    1894:	8f 89       	ldd	r24, Y+23	; 0x17
    1896:	98 8d       	ldd	r25, Y+24	; 0x18
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	40 e8       	ldi	r20, 0x80	; 128
    189e:	5f e3       	ldi	r21, 0x3F	; 63
    18a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18a4:	88 23       	and	r24, r24
    18a6:	2c f4       	brge	.+10     	; 0x18b2 <LCD_voidIntialize+0x174>
		__ticks = 1;
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	9c 8b       	std	Y+20, r25	; 0x14
    18ae:	8b 8b       	std	Y+19, r24	; 0x13
    18b0:	3f c0       	rjmp	.+126    	; 0x1930 <LCD_voidIntialize+0x1f2>
	else if (__tmp > 65535)
    18b2:	6d 89       	ldd	r22, Y+21	; 0x15
    18b4:	7e 89       	ldd	r23, Y+22	; 0x16
    18b6:	8f 89       	ldd	r24, Y+23	; 0x17
    18b8:	98 8d       	ldd	r25, Y+24	; 0x18
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	3f ef       	ldi	r19, 0xFF	; 255
    18be:	4f e7       	ldi	r20, 0x7F	; 127
    18c0:	57 e4       	ldi	r21, 0x47	; 71
    18c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18c6:	18 16       	cp	r1, r24
    18c8:	4c f5       	brge	.+82     	; 0x191c <LCD_voidIntialize+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ca:	69 8d       	ldd	r22, Y+25	; 0x19
    18cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	40 e2       	ldi	r20, 0x20	; 32
    18d8:	51 e4       	ldi	r21, 0x41	; 65
    18da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	bc 01       	movw	r22, r24
    18e4:	cd 01       	movw	r24, r26
    18e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	9c 8b       	std	Y+20, r25	; 0x14
    18f0:	8b 8b       	std	Y+19, r24	; 0x13
    18f2:	0f c0       	rjmp	.+30     	; 0x1912 <LCD_voidIntialize+0x1d4>
    18f4:	88 ec       	ldi	r24, 0xC8	; 200
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	9a 8b       	std	Y+18, r25	; 0x12
    18fa:	89 8b       	std	Y+17, r24	; 0x11
    18fc:	89 89       	ldd	r24, Y+17	; 0x11
    18fe:	9a 89       	ldd	r25, Y+18	; 0x12
    1900:	01 97       	sbiw	r24, 0x01	; 1
    1902:	f1 f7       	brne	.-4      	; 0x1900 <LCD_voidIntialize+0x1c2>
    1904:	9a 8b       	std	Y+18, r25	; 0x12
    1906:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1908:	8b 89       	ldd	r24, Y+19	; 0x13
    190a:	9c 89       	ldd	r25, Y+20	; 0x14
    190c:	01 97       	sbiw	r24, 0x01	; 1
    190e:	9c 8b       	std	Y+20, r25	; 0x14
    1910:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1912:	8b 89       	ldd	r24, Y+19	; 0x13
    1914:	9c 89       	ldd	r25, Y+20	; 0x14
    1916:	00 97       	sbiw	r24, 0x00	; 0
    1918:	69 f7       	brne	.-38     	; 0x18f4 <LCD_voidIntialize+0x1b6>
    191a:	14 c0       	rjmp	.+40     	; 0x1944 <LCD_voidIntialize+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    191c:	6d 89       	ldd	r22, Y+21	; 0x15
    191e:	7e 89       	ldd	r23, Y+22	; 0x16
    1920:	8f 89       	ldd	r24, Y+23	; 0x17
    1922:	98 8d       	ldd	r25, Y+24	; 0x18
    1924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1928:	dc 01       	movw	r26, r24
    192a:	cb 01       	movw	r24, r22
    192c:	9c 8b       	std	Y+20, r25	; 0x14
    192e:	8b 8b       	std	Y+19, r24	; 0x13
    1930:	8b 89       	ldd	r24, Y+19	; 0x13
    1932:	9c 89       	ldd	r25, Y+20	; 0x14
    1934:	98 8b       	std	Y+16, r25	; 0x10
    1936:	8f 87       	std	Y+15, r24	; 0x0f
    1938:	8f 85       	ldd	r24, Y+15	; 0x0f
    193a:	98 89       	ldd	r25, Y+16	; 0x10
    193c:	01 97       	sbiw	r24, 0x01	; 1
    193e:	f1 f7       	brne	.-4      	; 0x193c <LCD_voidIntialize+0x1fe>
    1940:	98 8b       	std	Y+16, r25	; 0x10
    1942:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_voidWriteCommand(DISPLAY_CONTROL_COMMAND);
    1944:	8c e0       	ldi	r24, 0x0C	; 12
    1946:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <LCD_voidWriteCommand>
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	a0 e0       	ldi	r26, 0x00	; 0
    1950:	b0 e4       	ldi	r27, 0x40	; 64
    1952:	8b 87       	std	Y+11, r24	; 0x0b
    1954:	9c 87       	std	Y+12, r25	; 0x0c
    1956:	ad 87       	std	Y+13, r26	; 0x0d
    1958:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    195a:	6b 85       	ldd	r22, Y+11	; 0x0b
    195c:	7c 85       	ldd	r23, Y+12	; 0x0c
    195e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1960:	9e 85       	ldd	r25, Y+14	; 0x0e
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	4a ef       	ldi	r20, 0xFA	; 250
    1968:	54 e4       	ldi	r21, 0x44	; 68
    196a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	8f 83       	std	Y+7, r24	; 0x07
    1974:	98 87       	std	Y+8, r25	; 0x08
    1976:	a9 87       	std	Y+9, r26	; 0x09
    1978:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    197a:	6f 81       	ldd	r22, Y+7	; 0x07
    197c:	78 85       	ldd	r23, Y+8	; 0x08
    197e:	89 85       	ldd	r24, Y+9	; 0x09
    1980:	9a 85       	ldd	r25, Y+10	; 0x0a
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	40 e8       	ldi	r20, 0x80	; 128
    1988:	5f e3       	ldi	r21, 0x3F	; 63
    198a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    198e:	88 23       	and	r24, r24
    1990:	2c f4       	brge	.+10     	; 0x199c <LCD_voidIntialize+0x25e>
		__ticks = 1;
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	9e 83       	std	Y+6, r25	; 0x06
    1998:	8d 83       	std	Y+5, r24	; 0x05
    199a:	3f c0       	rjmp	.+126    	; 0x1a1a <LCD_voidIntialize+0x2dc>
	else if (__tmp > 65535)
    199c:	6f 81       	ldd	r22, Y+7	; 0x07
    199e:	78 85       	ldd	r23, Y+8	; 0x08
    19a0:	89 85       	ldd	r24, Y+9	; 0x09
    19a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	3f ef       	ldi	r19, 0xFF	; 255
    19a8:	4f e7       	ldi	r20, 0x7F	; 127
    19aa:	57 e4       	ldi	r21, 0x47	; 71
    19ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19b0:	18 16       	cp	r1, r24
    19b2:	4c f5       	brge	.+82     	; 0x1a06 <LCD_voidIntialize+0x2c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    19b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    19b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	40 e2       	ldi	r20, 0x20	; 32
    19c2:	51 e4       	ldi	r21, 0x41	; 65
    19c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	bc 01       	movw	r22, r24
    19ce:	cd 01       	movw	r24, r26
    19d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	9e 83       	std	Y+6, r25	; 0x06
    19da:	8d 83       	std	Y+5, r24	; 0x05
    19dc:	0f c0       	rjmp	.+30     	; 0x19fc <LCD_voidIntialize+0x2be>
    19de:	88 ec       	ldi	r24, 0xC8	; 200
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	9c 83       	std	Y+4, r25	; 0x04
    19e4:	8b 83       	std	Y+3, r24	; 0x03
    19e6:	8b 81       	ldd	r24, Y+3	; 0x03
    19e8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ea:	01 97       	sbiw	r24, 0x01	; 1
    19ec:	f1 f7       	brne	.-4      	; 0x19ea <LCD_voidIntialize+0x2ac>
    19ee:	9c 83       	std	Y+4, r25	; 0x04
    19f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f2:	8d 81       	ldd	r24, Y+5	; 0x05
    19f4:	9e 81       	ldd	r25, Y+6	; 0x06
    19f6:	01 97       	sbiw	r24, 0x01	; 1
    19f8:	9e 83       	std	Y+6, r25	; 0x06
    19fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19fc:	8d 81       	ldd	r24, Y+5	; 0x05
    19fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1a00:	00 97       	sbiw	r24, 0x00	; 0
    1a02:	69 f7       	brne	.-38     	; 0x19de <LCD_voidIntialize+0x2a0>
    1a04:	14 c0       	rjmp	.+40     	; 0x1a2e <LCD_voidIntialize+0x2f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a06:	6f 81       	ldd	r22, Y+7	; 0x07
    1a08:	78 85       	ldd	r23, Y+8	; 0x08
    1a0a:	89 85       	ldd	r24, Y+9	; 0x09
    1a0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	9e 83       	std	Y+6, r25	; 0x06
    1a18:	8d 83       	std	Y+5, r24	; 0x05
    1a1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1e:	9a 83       	std	Y+2, r25	; 0x02
    1a20:	89 83       	std	Y+1, r24	; 0x01
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
    1a24:	9a 81       	ldd	r25, Y+2	; 0x02
    1a26:	01 97       	sbiw	r24, 0x01	; 1
    1a28:	f1 f7       	brne	.-4      	; 0x1a26 <LCD_voidIntialize+0x2e8>
    1a2a:	9a 83       	std	Y+2, r25	; 0x02
    1a2c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_voidWriteCommand(CLEAR_COMMAND);
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <LCD_voidWriteCommand>
	
}
    1a34:	aa 96       	adiw	r28, 0x2a	; 42
    1a36:	0f b6       	in	r0, 0x3f	; 63
    1a38:	f8 94       	cli
    1a3a:	de bf       	out	0x3e, r29	; 62
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	cd bf       	out	0x3d, r28	; 61
    1a40:	cf 91       	pop	r28
    1a42:	df 91       	pop	r29
    1a44:	08 95       	ret

00001a46 <LCD_voidWriteCommand>:

void LCD_voidWriteCommand(u8 Copy_u8Command){
    1a46:	df 93       	push	r29
    1a48:	cf 93       	push	r28
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
    1a4e:	2f 97       	sbiw	r28, 0x0f	; 15
    1a50:	0f b6       	in	r0, 0x3f	; 63
    1a52:	f8 94       	cli
    1a54:	de bf       	out	0x3e, r29	; 62
    1a56:	0f be       	out	0x3f, r0	; 63
    1a58:	cd bf       	out	0x3d, r28	; 61
    1a5a:	8f 87       	std	Y+15, r24	; 0x0f

	DIO_voidSetPinValue(LCD_CONTROL_PORT,RS,PIN_LOW);
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	60 e0       	ldi	r22, 0x00	; 0
    1a60:	40 e0       	ldi	r20, 0x00	; 0
    1a62:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT,RW,PIN_LOW);
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	61 e0       	ldi	r22, 0x01	; 1
    1a6a:	40 e0       	ldi	r20, 0x00	; 0
    1a6c:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_voidSetPinValue>
	
	DIO_voidSetPortValue(LCD_DATA_PORT,Copy_u8Command);
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a74:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <DIO_voidSetPortValue>
	
	DIO_voidSetPinValue(LCD_CONTROL_PORT,EN,PIN_HIGH);
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	62 e0       	ldi	r22, 0x02	; 2
    1a7c:	41 e0       	ldi	r20, 0x01	; 1
    1a7e:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_voidSetPinValue>
    1a82:	80 e0       	ldi	r24, 0x00	; 0
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	a0 e0       	ldi	r26, 0x00	; 0
    1a88:	b0 e4       	ldi	r27, 0x40	; 64
    1a8a:	8b 87       	std	Y+11, r24	; 0x0b
    1a8c:	9c 87       	std	Y+12, r25	; 0x0c
    1a8e:	ad 87       	std	Y+13, r26	; 0x0d
    1a90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a92:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a94:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	4a ef       	ldi	r20, 0xFA	; 250
    1aa0:	54 e4       	ldi	r21, 0x44	; 68
    1aa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	8f 83       	std	Y+7, r24	; 0x07
    1aac:	98 87       	std	Y+8, r25	; 0x08
    1aae:	a9 87       	std	Y+9, r26	; 0x09
    1ab0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ab2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ab4:	78 85       	ldd	r23, Y+8	; 0x08
    1ab6:	89 85       	ldd	r24, Y+9	; 0x09
    1ab8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	40 e8       	ldi	r20, 0x80	; 128
    1ac0:	5f e3       	ldi	r21, 0x3F	; 63
    1ac2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ac6:	88 23       	and	r24, r24
    1ac8:	2c f4       	brge	.+10     	; 0x1ad4 <LCD_voidWriteCommand+0x8e>
		__ticks = 1;
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	9e 83       	std	Y+6, r25	; 0x06
    1ad0:	8d 83       	std	Y+5, r24	; 0x05
    1ad2:	3f c0       	rjmp	.+126    	; 0x1b52 <LCD_voidWriteCommand+0x10c>
	else if (__tmp > 65535)
    1ad4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad6:	78 85       	ldd	r23, Y+8	; 0x08
    1ad8:	89 85       	ldd	r24, Y+9	; 0x09
    1ada:	9a 85       	ldd	r25, Y+10	; 0x0a
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	3f ef       	ldi	r19, 0xFF	; 255
    1ae0:	4f e7       	ldi	r20, 0x7F	; 127
    1ae2:	57 e4       	ldi	r21, 0x47	; 71
    1ae4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ae8:	18 16       	cp	r1, r24
    1aea:	4c f5       	brge	.+82     	; 0x1b3e <LCD_voidWriteCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aec:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aee:	7c 85       	ldd	r23, Y+12	; 0x0c
    1af0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1af2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	40 e2       	ldi	r20, 0x20	; 32
    1afa:	51 e4       	ldi	r21, 0x41	; 65
    1afc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	bc 01       	movw	r22, r24
    1b06:	cd 01       	movw	r24, r26
    1b08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	9e 83       	std	Y+6, r25	; 0x06
    1b12:	8d 83       	std	Y+5, r24	; 0x05
    1b14:	0f c0       	rjmp	.+30     	; 0x1b34 <LCD_voidWriteCommand+0xee>
    1b16:	88 ec       	ldi	r24, 0xC8	; 200
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	9c 83       	std	Y+4, r25	; 0x04
    1b1c:	8b 83       	std	Y+3, r24	; 0x03
    1b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b20:	9c 81       	ldd	r25, Y+4	; 0x04
    1b22:	01 97       	sbiw	r24, 0x01	; 1
    1b24:	f1 f7       	brne	.-4      	; 0x1b22 <LCD_voidWriteCommand+0xdc>
    1b26:	9c 83       	std	Y+4, r25	; 0x04
    1b28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b2e:	01 97       	sbiw	r24, 0x01	; 1
    1b30:	9e 83       	std	Y+6, r25	; 0x06
    1b32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b34:	8d 81       	ldd	r24, Y+5	; 0x05
    1b36:	9e 81       	ldd	r25, Y+6	; 0x06
    1b38:	00 97       	sbiw	r24, 0x00	; 0
    1b3a:	69 f7       	brne	.-38     	; 0x1b16 <LCD_voidWriteCommand+0xd0>
    1b3c:	14 c0       	rjmp	.+40     	; 0x1b66 <LCD_voidWriteCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b40:	78 85       	ldd	r23, Y+8	; 0x08
    1b42:	89 85       	ldd	r24, Y+9	; 0x09
    1b44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	9e 83       	std	Y+6, r25	; 0x06
    1b50:	8d 83       	std	Y+5, r24	; 0x05
    1b52:	8d 81       	ldd	r24, Y+5	; 0x05
    1b54:	9e 81       	ldd	r25, Y+6	; 0x06
    1b56:	9a 83       	std	Y+2, r25	; 0x02
    1b58:	89 83       	std	Y+1, r24	; 0x01
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
    1b5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5e:	01 97       	sbiw	r24, 0x01	; 1
    1b60:	f1 f7       	brne	.-4      	; 0x1b5e <LCD_voidWriteCommand+0x118>
    1b62:	9a 83       	std	Y+2, r25	; 0x02
    1b64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CONTROL_PORT,EN,PIN_LOW);
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	62 e0       	ldi	r22, 0x02	; 2
    1b6a:	40 e0       	ldi	r20, 0x00	; 0
    1b6c:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_voidSetPinValue>
}
    1b70:	2f 96       	adiw	r28, 0x0f	; 15
    1b72:	0f b6       	in	r0, 0x3f	; 63
    1b74:	f8 94       	cli
    1b76:	de bf       	out	0x3e, r29	; 62
    1b78:	0f be       	out	0x3f, r0	; 63
    1b7a:	cd bf       	out	0x3d, r28	; 61
    1b7c:	cf 91       	pop	r28
    1b7e:	df 91       	pop	r29
    1b80:	08 95       	ret

00001b82 <LCD_voidWriteData>:

void LCD_voidWriteData(u8 Copy_u8Data){
    1b82:	df 93       	push	r29
    1b84:	cf 93       	push	r28
    1b86:	cd b7       	in	r28, 0x3d	; 61
    1b88:	de b7       	in	r29, 0x3e	; 62
    1b8a:	2f 97       	sbiw	r28, 0x0f	; 15
    1b8c:	0f b6       	in	r0, 0x3f	; 63
    1b8e:	f8 94       	cli
    1b90:	de bf       	out	0x3e, r29	; 62
    1b92:	0f be       	out	0x3f, r0	; 63
    1b94:	cd bf       	out	0x3d, r28	; 61
    1b96:	8f 87       	std	Y+15, r24	; 0x0f

	DIO_voidSetPinValue(LCD_CONTROL_PORT,RS,PIN_HIGH);
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	60 e0       	ldi	r22, 0x00	; 0
    1b9c:	41 e0       	ldi	r20, 0x01	; 1
    1b9e:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT,RW,PIN_LOW);
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	61 e0       	ldi	r22, 0x01	; 1
    1ba6:	40 e0       	ldi	r20, 0x00	; 0
    1ba8:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_voidSetPinValue>
	
	DIO_voidSetPortValue(LCD_DATA_PORT,Copy_u8Data);
    1bac:	80 e0       	ldi	r24, 0x00	; 0
    1bae:	6f 85       	ldd	r22, Y+15	; 0x0f
    1bb0:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <DIO_voidSetPortValue>
	
	DIO_voidSetPinValue(LCD_CONTROL_PORT,EN,PIN_HIGH);
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	62 e0       	ldi	r22, 0x02	; 2
    1bb8:	41 e0       	ldi	r20, 0x01	; 1
    1bba:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_voidSetPinValue>
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	a0 e0       	ldi	r26, 0x00	; 0
    1bc4:	b0 e4       	ldi	r27, 0x40	; 64
    1bc6:	8b 87       	std	Y+11, r24	; 0x0b
    1bc8:	9c 87       	std	Y+12, r25	; 0x0c
    1bca:	ad 87       	std	Y+13, r26	; 0x0d
    1bcc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bce:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	4a ef       	ldi	r20, 0xFA	; 250
    1bdc:	54 e4       	ldi	r21, 0x44	; 68
    1bde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be2:	dc 01       	movw	r26, r24
    1be4:	cb 01       	movw	r24, r22
    1be6:	8f 83       	std	Y+7, r24	; 0x07
    1be8:	98 87       	std	Y+8, r25	; 0x08
    1bea:	a9 87       	std	Y+9, r26	; 0x09
    1bec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bee:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf0:	78 85       	ldd	r23, Y+8	; 0x08
    1bf2:	89 85       	ldd	r24, Y+9	; 0x09
    1bf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	40 e8       	ldi	r20, 0x80	; 128
    1bfc:	5f e3       	ldi	r21, 0x3F	; 63
    1bfe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c02:	88 23       	and	r24, r24
    1c04:	2c f4       	brge	.+10     	; 0x1c10 <LCD_voidWriteData+0x8e>
		__ticks = 1;
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	9e 83       	std	Y+6, r25	; 0x06
    1c0c:	8d 83       	std	Y+5, r24	; 0x05
    1c0e:	3f c0       	rjmp	.+126    	; 0x1c8e <LCD_voidWriteData+0x10c>
	else if (__tmp > 65535)
    1c10:	6f 81       	ldd	r22, Y+7	; 0x07
    1c12:	78 85       	ldd	r23, Y+8	; 0x08
    1c14:	89 85       	ldd	r24, Y+9	; 0x09
    1c16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	3f ef       	ldi	r19, 0xFF	; 255
    1c1c:	4f e7       	ldi	r20, 0x7F	; 127
    1c1e:	57 e4       	ldi	r21, 0x47	; 71
    1c20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c24:	18 16       	cp	r1, r24
    1c26:	4c f5       	brge	.+82     	; 0x1c7a <LCD_voidWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	40 e2       	ldi	r20, 0x20	; 32
    1c36:	51 e4       	ldi	r21, 0x41	; 65
    1c38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	cb 01       	movw	r24, r22
    1c40:	bc 01       	movw	r22, r24
    1c42:	cd 01       	movw	r24, r26
    1c44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c48:	dc 01       	movw	r26, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	9e 83       	std	Y+6, r25	; 0x06
    1c4e:	8d 83       	std	Y+5, r24	; 0x05
    1c50:	0f c0       	rjmp	.+30     	; 0x1c70 <LCD_voidWriteData+0xee>
    1c52:	88 ec       	ldi	r24, 0xC8	; 200
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	9c 83       	std	Y+4, r25	; 0x04
    1c58:	8b 83       	std	Y+3, r24	; 0x03
    1c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5e:	01 97       	sbiw	r24, 0x01	; 1
    1c60:	f1 f7       	brne	.-4      	; 0x1c5e <LCD_voidWriteData+0xdc>
    1c62:	9c 83       	std	Y+4, r25	; 0x04
    1c64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c66:	8d 81       	ldd	r24, Y+5	; 0x05
    1c68:	9e 81       	ldd	r25, Y+6	; 0x06
    1c6a:	01 97       	sbiw	r24, 0x01	; 1
    1c6c:	9e 83       	std	Y+6, r25	; 0x06
    1c6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c70:	8d 81       	ldd	r24, Y+5	; 0x05
    1c72:	9e 81       	ldd	r25, Y+6	; 0x06
    1c74:	00 97       	sbiw	r24, 0x00	; 0
    1c76:	69 f7       	brne	.-38     	; 0x1c52 <LCD_voidWriteData+0xd0>
    1c78:	14 c0       	rjmp	.+40     	; 0x1ca2 <LCD_voidWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c7c:	78 85       	ldd	r23, Y+8	; 0x08
    1c7e:	89 85       	ldd	r24, Y+9	; 0x09
    1c80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c86:	dc 01       	movw	r26, r24
    1c88:	cb 01       	movw	r24, r22
    1c8a:	9e 83       	std	Y+6, r25	; 0x06
    1c8c:	8d 83       	std	Y+5, r24	; 0x05
    1c8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c90:	9e 81       	ldd	r25, Y+6	; 0x06
    1c92:	9a 83       	std	Y+2, r25	; 0x02
    1c94:	89 83       	std	Y+1, r24	; 0x01
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
    1c98:	9a 81       	ldd	r25, Y+2	; 0x02
    1c9a:	01 97       	sbiw	r24, 0x01	; 1
    1c9c:	f1 f7       	brne	.-4      	; 0x1c9a <LCD_voidWriteData+0x118>
    1c9e:	9a 83       	std	Y+2, r25	; 0x02
    1ca0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CONTROL_PORT,EN,PIN_LOW);
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	62 e0       	ldi	r22, 0x02	; 2
    1ca6:	40 e0       	ldi	r20, 0x00	; 0
    1ca8:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_voidSetPinValue>
}
    1cac:	2f 96       	adiw	r28, 0x0f	; 15
    1cae:	0f b6       	in	r0, 0x3f	; 63
    1cb0:	f8 94       	cli
    1cb2:	de bf       	out	0x3e, r29	; 62
    1cb4:	0f be       	out	0x3f, r0	; 63
    1cb6:	cd bf       	out	0x3d, r28	; 61
    1cb8:	cf 91       	pop	r28
    1cba:	df 91       	pop	r29
    1cbc:	08 95       	ret

00001cbe <LCD_voidGoToXY>:

void LCD_voidGoToXY(u8 Copy_u8X,u8 Copy_u8Y){
    1cbe:	df 93       	push	r29
    1cc0:	cf 93       	push	r28
    1cc2:	00 d0       	rcall	.+0      	; 0x1cc4 <LCD_voidGoToXY+0x6>
    1cc4:	00 d0       	rcall	.+0      	; 0x1cc6 <LCD_voidGoToXY+0x8>
    1cc6:	cd b7       	in	r28, 0x3d	; 61
    1cc8:	de b7       	in	r29, 0x3e	; 62
    1cca:	89 83       	std	Y+1, r24	; 0x01
    1ccc:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8X){
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
    1cd0:	28 2f       	mov	r18, r24
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	3c 83       	std	Y+4, r19	; 0x04
    1cd6:	2b 83       	std	Y+3, r18	; 0x03
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	9c 81       	ldd	r25, Y+4	; 0x04
    1cdc:	00 97       	sbiw	r24, 0x00	; 0
    1cde:	31 f0       	breq	.+12     	; 0x1cec <LCD_voidGoToXY+0x2e>
    1ce0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ce2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ce4:	21 30       	cpi	r18, 0x01	; 1
    1ce6:	31 05       	cpc	r19, r1
    1ce8:	31 f0       	breq	.+12     	; 0x1cf6 <LCD_voidGoToXY+0x38>
    1cea:	09 c0       	rjmp	.+18     	; 0x1cfe <LCD_voidGoToXY+0x40>
		case LINE0:
			LCD_voidWriteCommand(LINE0_ADDRESS+Copy_u8Y);
    1cec:	8a 81       	ldd	r24, Y+2	; 0x02
    1cee:	80 58       	subi	r24, 0x80	; 128
    1cf0:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <LCD_voidWriteCommand>
    1cf4:	04 c0       	rjmp	.+8      	; 0x1cfe <LCD_voidGoToXY+0x40>
			break;
		case LINE1:
			LCD_voidWriteCommand(LINE1_ADDRESS+Copy_u8Y);
    1cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf8:	80 54       	subi	r24, 0x40	; 64
    1cfa:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <LCD_voidWriteCommand>
	}
}
    1cfe:	0f 90       	pop	r0
    1d00:	0f 90       	pop	r0
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	cf 91       	pop	r28
    1d08:	df 91       	pop	r29
    1d0a:	08 95       	ret

00001d0c <LCD_voidWriteString>:


void LCD_voidWriteString(u8 *Copy_u8String){
    1d0c:	df 93       	push	r29
    1d0e:	cf 93       	push	r28
    1d10:	00 d0       	rcall	.+0      	; 0x1d12 <LCD_voidWriteString+0x6>
    1d12:	0f 92       	push	r0
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
    1d18:	9b 83       	std	Y+3, r25	; 0x03
    1d1a:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    1d1c:	19 82       	std	Y+1, r1	; 0x01
    1d1e:	0e c0       	rjmp	.+28     	; 0x1d3c <LCD_voidWriteString+0x30>
	while(Copy_u8String[i]!='\0'){
		LCD_voidWriteData(Copy_u8String[i]);
    1d20:	89 81       	ldd	r24, Y+1	; 0x01
    1d22:	28 2f       	mov	r18, r24
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	8a 81       	ldd	r24, Y+2	; 0x02
    1d28:	9b 81       	ldd	r25, Y+3	; 0x03
    1d2a:	fc 01       	movw	r30, r24
    1d2c:	e2 0f       	add	r30, r18
    1d2e:	f3 1f       	adc	r31, r19
    1d30:	80 81       	ld	r24, Z
    1d32:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_voidWriteData>
		i++;
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	8f 5f       	subi	r24, 0xFF	; 255
    1d3a:	89 83       	std	Y+1, r24	; 0x01
}


void LCD_voidWriteString(u8 *Copy_u8String){
	u8 i=0;
	while(Copy_u8String[i]!='\0'){
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	28 2f       	mov	r18, r24
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	8a 81       	ldd	r24, Y+2	; 0x02
    1d44:	9b 81       	ldd	r25, Y+3	; 0x03
    1d46:	fc 01       	movw	r30, r24
    1d48:	e2 0f       	add	r30, r18
    1d4a:	f3 1f       	adc	r31, r19
    1d4c:	80 81       	ld	r24, Z
    1d4e:	88 23       	and	r24, r24
    1d50:	39 f7       	brne	.-50     	; 0x1d20 <LCD_voidWriteString+0x14>
		LCD_voidWriteData(Copy_u8String[i]);
		i++;
	}
}
    1d52:	0f 90       	pop	r0
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	cf 91       	pop	r28
    1d5a:	df 91       	pop	r29
    1d5c:	08 95       	ret

00001d5e <LCD_voidWriteNumber>:

void LCD_voidWriteNumber(u32 Copy_u32Number){
    1d5e:	0f 93       	push	r16
    1d60:	1f 93       	push	r17
    1d62:	df 93       	push	r29
    1d64:	cf 93       	push	r28
    1d66:	cd b7       	in	r28, 0x3d	; 61
    1d68:	de b7       	in	r29, 0x3e	; 62
    1d6a:	60 97       	sbiw	r28, 0x10	; 16
    1d6c:	0f b6       	in	r0, 0x3f	; 63
    1d6e:	f8 94       	cli
    1d70:	de bf       	out	0x3e, r29	; 62
    1d72:	0f be       	out	0x3f, r0	; 63
    1d74:	cd bf       	out	0x3d, r28	; 61
    1d76:	6d 87       	std	Y+13, r22	; 0x0d
    1d78:	7e 87       	std	Y+14, r23	; 0x0e
    1d7a:	8f 87       	std	Y+15, r24	; 0x0f
    1d7c:	98 8b       	std	Y+16, r25	; 0x10
	u8 arr[MAX_INT_DIGITS];
	u8 i=0;
    1d7e:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u32Number==0){
    1d80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d84:	af 85       	ldd	r26, Y+15	; 0x0f
    1d86:	b8 89       	ldd	r27, Y+16	; 0x10
    1d88:	00 97       	sbiw	r24, 0x00	; 0
    1d8a:	a1 05       	cpc	r26, r1
    1d8c:	b1 05       	cpc	r27, r1
    1d8e:	89 f5       	brne	.+98     	; 0x1df2 <LCD_voidWriteNumber+0x94>
		LCD_voidWriteData(ZERO_ASCII);
    1d90:	80 e3       	ldi	r24, 0x30	; 48
    1d92:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_voidWriteData>
    1d96:	4d c0       	rjmp	.+154    	; 0x1e32 <LCD_voidWriteNumber+0xd4>
	}
	else{
		while(Copy_u32Number>0){
			arr[i]=Copy_u32Number%10;
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	08 2f       	mov	r16, r24
    1d9c:	10 e0       	ldi	r17, 0x00	; 0
    1d9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1da0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1da2:	af 85       	ldd	r26, Y+15	; 0x0f
    1da4:	b8 89       	ldd	r27, Y+16	; 0x10
    1da6:	2a e0       	ldi	r18, 0x0A	; 10
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	40 e0       	ldi	r20, 0x00	; 0
    1dac:	50 e0       	ldi	r21, 0x00	; 0
    1dae:	bc 01       	movw	r22, r24
    1db0:	cd 01       	movw	r24, r26
    1db2:	0e 94 00 17 	call	0x2e00	; 0x2e00 <__udivmodsi4>
    1db6:	dc 01       	movw	r26, r24
    1db8:	cb 01       	movw	r24, r22
    1dba:	28 2f       	mov	r18, r24
    1dbc:	ce 01       	movw	r24, r28
    1dbe:	03 96       	adiw	r24, 0x03	; 3
    1dc0:	fc 01       	movw	r30, r24
    1dc2:	e0 0f       	add	r30, r16
    1dc4:	f1 1f       	adc	r31, r17
    1dc6:	20 83       	st	Z, r18
			Copy_u32Number/=10;
    1dc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dca:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dcc:	af 85       	ldd	r26, Y+15	; 0x0f
    1dce:	b8 89       	ldd	r27, Y+16	; 0x10
    1dd0:	2a e0       	ldi	r18, 0x0A	; 10
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	40 e0       	ldi	r20, 0x00	; 0
    1dd6:	50 e0       	ldi	r21, 0x00	; 0
    1dd8:	bc 01       	movw	r22, r24
    1dda:	cd 01       	movw	r24, r26
    1ddc:	0e 94 00 17 	call	0x2e00	; 0x2e00 <__udivmodsi4>
    1de0:	da 01       	movw	r26, r20
    1de2:	c9 01       	movw	r24, r18
    1de4:	8d 87       	std	Y+13, r24	; 0x0d
    1de6:	9e 87       	std	Y+14, r25	; 0x0e
    1de8:	af 87       	std	Y+15, r26	; 0x0f
    1dea:	b8 8b       	std	Y+16, r27	; 0x10
			i++;
    1dec:	8a 81       	ldd	r24, Y+2	; 0x02
    1dee:	8f 5f       	subi	r24, 0xFF	; 255
    1df0:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
	if(Copy_u32Number==0){
		LCD_voidWriteData(ZERO_ASCII);
	}
	else{
		while(Copy_u32Number>0){
    1df2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1df4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df6:	af 85       	ldd	r26, Y+15	; 0x0f
    1df8:	b8 89       	ldd	r27, Y+16	; 0x10
    1dfa:	00 97       	sbiw	r24, 0x00	; 0
    1dfc:	a1 05       	cpc	r26, r1
    1dfe:	b1 05       	cpc	r27, r1
    1e00:	59 f6       	brne	.-106    	; 0x1d98 <LCD_voidWriteNumber+0x3a>
			arr[i]=Copy_u32Number%10;
			Copy_u32Number/=10;
			i++;
		}
		for(u8 j=i;j>0;j--){
    1e02:	8a 81       	ldd	r24, Y+2	; 0x02
    1e04:	89 83       	std	Y+1, r24	; 0x01
    1e06:	12 c0       	rjmp	.+36     	; 0x1e2c <LCD_voidWriteNumber+0xce>
			LCD_voidWriteData(arr[j-1]+ZERO_ASCII);
    1e08:	89 81       	ldd	r24, Y+1	; 0x01
    1e0a:	88 2f       	mov	r24, r24
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	9c 01       	movw	r18, r24
    1e10:	21 50       	subi	r18, 0x01	; 1
    1e12:	30 40       	sbci	r19, 0x00	; 0
    1e14:	ce 01       	movw	r24, r28
    1e16:	03 96       	adiw	r24, 0x03	; 3
    1e18:	fc 01       	movw	r30, r24
    1e1a:	e2 0f       	add	r30, r18
    1e1c:	f3 1f       	adc	r31, r19
    1e1e:	80 81       	ld	r24, Z
    1e20:	80 5d       	subi	r24, 0xD0	; 208
    1e22:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_voidWriteData>
		while(Copy_u32Number>0){
			arr[i]=Copy_u32Number%10;
			Copy_u32Number/=10;
			i++;
		}
		for(u8 j=i;j>0;j--){
    1e26:	89 81       	ldd	r24, Y+1	; 0x01
    1e28:	81 50       	subi	r24, 0x01	; 1
    1e2a:	89 83       	std	Y+1, r24	; 0x01
    1e2c:	89 81       	ldd	r24, Y+1	; 0x01
    1e2e:	88 23       	and	r24, r24
    1e30:	59 f7       	brne	.-42     	; 0x1e08 <LCD_voidWriteNumber+0xaa>
			LCD_voidWriteData(arr[j-1]+ZERO_ASCII);
		}		
	}
}
    1e32:	60 96       	adiw	r28, 0x10	; 16
    1e34:	0f b6       	in	r0, 0x3f	; 63
    1e36:	f8 94       	cli
    1e38:	de bf       	out	0x3e, r29	; 62
    1e3a:	0f be       	out	0x3f, r0	; 63
    1e3c:	cd bf       	out	0x3d, r28	; 61
    1e3e:	cf 91       	pop	r28
    1e40:	df 91       	pop	r29
    1e42:	1f 91       	pop	r17
    1e44:	0f 91       	pop	r16
    1e46:	08 95       	ret

00001e48 <LCD_voidWriteSpecialCharacter>:

void LCD_voidWriteSpecialCharacter(u8 *patern,u8 Copy_u32Char,u8 Copy_u8X,u8 Copy_u8Y){
    1e48:	df 93       	push	r29
    1e4a:	cf 93       	push	r28
    1e4c:	00 d0       	rcall	.+0      	; 0x1e4e <LCD_voidWriteSpecialCharacter+0x6>
    1e4e:	00 d0       	rcall	.+0      	; 0x1e50 <LCD_voidWriteSpecialCharacter+0x8>
    1e50:	00 d0       	rcall	.+0      	; 0x1e52 <LCD_voidWriteSpecialCharacter+0xa>
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
    1e56:	9b 83       	std	Y+3, r25	; 0x03
    1e58:	8a 83       	std	Y+2, r24	; 0x02
    1e5a:	6c 83       	std	Y+4, r22	; 0x04
    1e5c:	4d 83       	std	Y+5, r20	; 0x05
    1e5e:	2e 83       	std	Y+6, r18	; 0x06
	LCD_voidWriteCommand(CGRAM_ADDRESS+Copy_u32Char*NO_BLOCK_BYTES);
    1e60:	8c 81       	ldd	r24, Y+4	; 0x04
    1e62:	88 2f       	mov	r24, r24
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	08 96       	adiw	r24, 0x08	; 8
    1e68:	88 0f       	add	r24, r24
    1e6a:	99 1f       	adc	r25, r25
    1e6c:	88 0f       	add	r24, r24
    1e6e:	99 1f       	adc	r25, r25
    1e70:	88 0f       	add	r24, r24
    1e72:	99 1f       	adc	r25, r25
    1e74:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <LCD_voidWriteCommand>
	for(u8 i=0;i<NO_BLOCK_BYTES;i++){
    1e78:	19 82       	std	Y+1, r1	; 0x01
    1e7a:	0e c0       	rjmp	.+28     	; 0x1e98 <LCD_voidWriteSpecialCharacter+0x50>
		LCD_voidWriteData(patern[i]);
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	28 2f       	mov	r18, r24
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	8a 81       	ldd	r24, Y+2	; 0x02
    1e84:	9b 81       	ldd	r25, Y+3	; 0x03
    1e86:	fc 01       	movw	r30, r24
    1e88:	e2 0f       	add	r30, r18
    1e8a:	f3 1f       	adc	r31, r19
    1e8c:	80 81       	ld	r24, Z
    1e8e:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_voidWriteData>
	}
}

void LCD_voidWriteSpecialCharacter(u8 *patern,u8 Copy_u32Char,u8 Copy_u8X,u8 Copy_u8Y){
	LCD_voidWriteCommand(CGRAM_ADDRESS+Copy_u32Char*NO_BLOCK_BYTES);
	for(u8 i=0;i<NO_BLOCK_BYTES;i++){
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
    1e94:	8f 5f       	subi	r24, 0xFF	; 255
    1e96:	89 83       	std	Y+1, r24	; 0x01
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
    1e9a:	88 30       	cpi	r24, 0x08	; 8
    1e9c:	78 f3       	brcs	.-34     	; 0x1e7c <LCD_voidWriteSpecialCharacter+0x34>
		LCD_voidWriteData(patern[i]);
	}
	LCD_voidGoToXY(Copy_u8X,Copy_u8Y);
    1e9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea0:	6e 81       	ldd	r22, Y+6	; 0x06
    1ea2:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <LCD_voidGoToXY>
	LCD_voidWriteData(Copy_u32Char);
    1ea6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea8:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_voidWriteData>
}
    1eac:	26 96       	adiw	r28, 0x06	; 6
    1eae:	0f b6       	in	r0, 0x3f	; 63
    1eb0:	f8 94       	cli
    1eb2:	de bf       	out	0x3e, r29	; 62
    1eb4:	0f be       	out	0x3f, r0	; 63
    1eb6:	cd bf       	out	0x3d, r28	; 61
    1eb8:	cf 91       	pop	r28
    1eba:	df 91       	pop	r29
    1ebc:	08 95       	ret

00001ebe <LCD_voidClearDisplay>:

void LCD_voidClearDisplay(){
    1ebe:	df 93       	push	r29
    1ec0:	cf 93       	push	r28
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
	LCD_voidWriteCommand(CLEAR_COMMAND);
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <LCD_voidWriteCommand>
    1ecc:	cf 91       	pop	r28
    1ece:	df 91       	pop	r29
    1ed0:	08 95       	ret

00001ed2 <TIMER0_voidInitialize>:
void (*TIMER0_NORMAL_GPfun)(void)=NULL;
void (*TIMER0_CTC_GPfun)(void)=NULL;

u32 TIMER,PreLoad,PreScaler;

void TIMER0_voidInitialize(){
    1ed2:	df 93       	push	r29
    1ed4:	cf 93       	push	r28
    1ed6:	cd b7       	in	r28, 0x3d	; 61
    1ed8:	de b7       	in	r29, 0x3e	; 62
	SetBit(TCCR0,PIN0);
	ClrBit(TCCR0,PIN1);
	ClrBit(TCCR0,PIN2);
	PreScaler=1;
#elif Clock_Select == clk_8
	ClrBit(TCCR0,PIN0);
    1eda:	a3 e5       	ldi	r26, 0x53	; 83
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	e3 e5       	ldi	r30, 0x53	; 83
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	80 81       	ld	r24, Z
    1ee4:	8e 7f       	andi	r24, 0xFE	; 254
    1ee6:	8c 93       	st	X, r24
	SetBit(TCCR0,PIN1);
    1ee8:	a3 e5       	ldi	r26, 0x53	; 83
    1eea:	b0 e0       	ldi	r27, 0x00	; 0
    1eec:	e3 e5       	ldi	r30, 0x53	; 83
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	80 81       	ld	r24, Z
    1ef2:	82 60       	ori	r24, 0x02	; 2
    1ef4:	8c 93       	st	X, r24
	ClrBit(TCCR0,PIN2);
    1ef6:	a3 e5       	ldi	r26, 0x53	; 83
    1ef8:	b0 e0       	ldi	r27, 0x00	; 0
    1efa:	e3 e5       	ldi	r30, 0x53	; 83
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	80 81       	ld	r24, Z
    1f00:	8b 7f       	andi	r24, 0xFB	; 251
    1f02:	8c 93       	st	X, r24
	PreScaler=8;
    1f04:	88 e0       	ldi	r24, 0x08	; 8
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	a0 e0       	ldi	r26, 0x00	; 0
    1f0a:	b0 e0       	ldi	r27, 0x00	; 0
    1f0c:	80 93 ba 01 	sts	0x01BA, r24
    1f10:	90 93 bb 01 	sts	0x01BB, r25
    1f14:	a0 93 bc 01 	sts	0x01BC, r26
    1f18:	b0 93 bd 01 	sts	0x01BD, r27
	ClrBit(TCCR0,PIN5);
#elif Compare_Output_Mode == Toggle_OC0
	SetBit(TCCR0,PIN4);
	ClrBit(TCCR0,PIN5);
#elif (Compare_Output_Mode == Clear_OC0)||(Compare_Output_Mode == Clear_Match_Set_Bottom)||(Compare_Output_Mode == Clear_Up_Set_Down)
	ClrBit(TCCR0,PIN4);
    1f1c:	a3 e5       	ldi	r26, 0x53	; 83
    1f1e:	b0 e0       	ldi	r27, 0x00	; 0
    1f20:	e3 e5       	ldi	r30, 0x53	; 83
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	80 81       	ld	r24, Z
    1f26:	8f 7e       	andi	r24, 0xEF	; 239
    1f28:	8c 93       	st	X, r24
	SetBit(TCCR0,PIN5);
    1f2a:	a3 e5       	ldi	r26, 0x53	; 83
    1f2c:	b0 e0       	ldi	r27, 0x00	; 0
    1f2e:	e3 e5       	ldi	r30, 0x53	; 83
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	80 81       	ld	r24, Z
    1f34:	80 62       	ori	r24, 0x20	; 32
    1f36:	8c 93       	st	X, r24
#elif Waveform_MODE == CTC
	SetBit(TCCR0,PIN3);
	ClrBit(TCCR0,PIN6);
	SetBit(TIMSK,PIN1);
#elif Waveform_MODE == Fast_PWM
	SetBit(TCCR0,PIN3);
    1f38:	a3 e5       	ldi	r26, 0x53	; 83
    1f3a:	b0 e0       	ldi	r27, 0x00	; 0
    1f3c:	e3 e5       	ldi	r30, 0x53	; 83
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	80 81       	ld	r24, Z
    1f42:	88 60       	ori	r24, 0x08	; 8
    1f44:	8c 93       	st	X, r24
	SetBit(TCCR0,PIN6);
    1f46:	a3 e5       	ldi	r26, 0x53	; 83
    1f48:	b0 e0       	ldi	r27, 0x00	; 0
    1f4a:	e3 e5       	ldi	r30, 0x53	; 83
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	80 64       	ori	r24, 0x40	; 64
    1f52:	8c 93       	st	X, r24
#endif
}
    1f54:	cf 91       	pop	r28
    1f56:	df 91       	pop	r29
    1f58:	08 95       	ret

00001f5a <TIMER0_voidPreLoad>:

void TIMER0_voidPreLoad(u8 Copy_u8Value){
    1f5a:	df 93       	push	r29
    1f5c:	cf 93       	push	r28
    1f5e:	0f 92       	push	r0
    1f60:	cd b7       	in	r28, 0x3d	; 61
    1f62:	de b7       	in	r29, 0x3e	; 62
    1f64:	89 83       	std	Y+1, r24	; 0x01
	
	TCNT0=Copy_u8Value;
    1f66:	e2 e5       	ldi	r30, 0x52	; 82
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	89 81       	ldd	r24, Y+1	; 0x01
    1f6c:	80 83       	st	Z, r24
}
    1f6e:	0f 90       	pop	r0
    1f70:	cf 91       	pop	r28
    1f72:	df 91       	pop	r29
    1f74:	08 95       	ret

00001f76 <TIMER0_voidSetOCR0>:

void TIMER0_voidSetOCR0(u8 Copy_u8Value){
    1f76:	df 93       	push	r29
    1f78:	cf 93       	push	r28
    1f7a:	0f 92       	push	r0
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62
    1f80:	89 83       	std	Y+1, r24	; 0x01
	
	OCR0=Copy_u8Value;
    1f82:	ec e5       	ldi	r30, 0x5C	; 92
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	89 81       	ldd	r24, Y+1	; 0x01
    1f88:	80 83       	st	Z, r24
}
    1f8a:	0f 90       	pop	r0
    1f8c:	cf 91       	pop	r28
    1f8e:	df 91       	pop	r29
    1f90:	08 95       	ret

00001f92 <TIMER0_voidSetTimer>:

void TIMER0_voidSetTimer(u32 Copy_u32TimeMS){
    1f92:	ef 92       	push	r14
    1f94:	ff 92       	push	r15
    1f96:	0f 93       	push	r16
    1f98:	1f 93       	push	r17
    1f9a:	df 93       	push	r29
    1f9c:	cf 93       	push	r28
    1f9e:	cd b7       	in	r28, 0x3d	; 61
    1fa0:	de b7       	in	r29, 0x3e	; 62
    1fa2:	68 97       	sbiw	r28, 0x18	; 24
    1fa4:	0f b6       	in	r0, 0x3f	; 63
    1fa6:	f8 94       	cli
    1fa8:	de bf       	out	0x3e, r29	; 62
    1faa:	0f be       	out	0x3f, r0	; 63
    1fac:	cd bf       	out	0x3d, r28	; 61
    1fae:	6d 8b       	std	Y+21, r22	; 0x15
    1fb0:	7e 8b       	std	Y+22, r23	; 0x16
    1fb2:	8f 8b       	std	Y+23, r24	; 0x17
    1fb4:	98 8f       	std	Y+24, r25	; 0x18
	}
	else if(Waveform_MODE == CTC){
		MAX_NUM=OCR0;
	}
	
	u32 TIMER_freq=CPU_FREQUENCY/PreScaler;
    1fb6:	20 91 ba 01 	lds	r18, 0x01BA
    1fba:	30 91 bb 01 	lds	r19, 0x01BB
    1fbe:	40 91 bc 01 	lds	r20, 0x01BC
    1fc2:	50 91 bd 01 	lds	r21, 0x01BD
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	92 e1       	ldi	r25, 0x12	; 18
    1fca:	aa e7       	ldi	r26, 0x7A	; 122
    1fcc:	b0 e0       	ldi	r27, 0x00	; 0
    1fce:	bc 01       	movw	r22, r24
    1fd0:	cd 01       	movw	r24, r26
    1fd2:	0e 94 00 17 	call	0x2e00	; 0x2e00 <__udivmodsi4>
    1fd6:	da 01       	movw	r26, r20
    1fd8:	c9 01       	movw	r24, r18
    1fda:	8d 87       	std	Y+13, r24	; 0x0d
    1fdc:	9e 87       	std	Y+14, r25	; 0x0e
    1fde:	af 87       	std	Y+15, r26	; 0x0f
    1fe0:	b8 8b       	std	Y+16, r27	; 0x10
	f32 Tick_Time=MICRO_IN_SEC/TIMER_freq;
    1fe2:	80 e4       	ldi	r24, 0x40	; 64
    1fe4:	92 e4       	ldi	r25, 0x42	; 66
    1fe6:	af e0       	ldi	r26, 0x0F	; 15
    1fe8:	b0 e0       	ldi	r27, 0x00	; 0
    1fea:	2d 85       	ldd	r18, Y+13	; 0x0d
    1fec:	3e 85       	ldd	r19, Y+14	; 0x0e
    1fee:	4f 85       	ldd	r20, Y+15	; 0x0f
    1ff0:	58 89       	ldd	r21, Y+16	; 0x10
    1ff2:	bc 01       	movw	r22, r24
    1ff4:	cd 01       	movw	r24, r26
    1ff6:	0e 94 00 17 	call	0x2e00	; 0x2e00 <__udivmodsi4>
    1ffa:	da 01       	movw	r26, r20
    1ffc:	c9 01       	movw	r24, r18
    1ffe:	bc 01       	movw	r22, r24
    2000:	cd 01       	movw	r24, r26
    2002:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	89 87       	std	Y+9, r24	; 0x09
    200c:	9a 87       	std	Y+10, r25	; 0x0a
    200e:	ab 87       	std	Y+11, r26	; 0x0b
    2010:	bc 87       	std	Y+12, r27	; 0x0c
	u32 OverFlow_Time=Tick_Time*MAX_NUM;
    2012:	69 89       	ldd	r22, Y+17	; 0x11
    2014:	7a 89       	ldd	r23, Y+18	; 0x12
    2016:	8b 89       	ldd	r24, Y+19	; 0x13
    2018:	9c 89       	ldd	r25, Y+20	; 0x14
    201a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    201e:	dc 01       	movw	r26, r24
    2020:	cb 01       	movw	r24, r22
    2022:	bc 01       	movw	r22, r24
    2024:	cd 01       	movw	r24, r26
    2026:	29 85       	ldd	r18, Y+9	; 0x09
    2028:	3a 85       	ldd	r19, Y+10	; 0x0a
    202a:	4b 85       	ldd	r20, Y+11	; 0x0b
    202c:	5c 85       	ldd	r21, Y+12	; 0x0c
    202e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	bc 01       	movw	r22, r24
    2038:	cd 01       	movw	r24, r26
    203a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203e:	dc 01       	movw	r26, r24
    2040:	cb 01       	movw	r24, r22
    2042:	8d 83       	std	Y+5, r24	; 0x05
    2044:	9e 83       	std	Y+6, r25	; 0x06
    2046:	af 83       	std	Y+7, r26	; 0x07
    2048:	b8 87       	std	Y+8, r27	; 0x08
	
	TIMER=(Copy_u32TimeMS*MICRO_IN_MILLI)/OverFlow_Time;
    204a:	8d 89       	ldd	r24, Y+21	; 0x15
    204c:	9e 89       	ldd	r25, Y+22	; 0x16
    204e:	af 89       	ldd	r26, Y+23	; 0x17
    2050:	b8 8d       	ldd	r27, Y+24	; 0x18
    2052:	28 ee       	ldi	r18, 0xE8	; 232
    2054:	33 e0       	ldi	r19, 0x03	; 3
    2056:	40 e0       	ldi	r20, 0x00	; 0
    2058:	50 e0       	ldi	r21, 0x00	; 0
    205a:	bc 01       	movw	r22, r24
    205c:	cd 01       	movw	r24, r26
    205e:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <__mulsi3>
    2062:	dc 01       	movw	r26, r24
    2064:	cb 01       	movw	r24, r22
    2066:	2d 81       	ldd	r18, Y+5	; 0x05
    2068:	3e 81       	ldd	r19, Y+6	; 0x06
    206a:	4f 81       	ldd	r20, Y+7	; 0x07
    206c:	58 85       	ldd	r21, Y+8	; 0x08
    206e:	bc 01       	movw	r22, r24
    2070:	cd 01       	movw	r24, r26
    2072:	0e 94 00 17 	call	0x2e00	; 0x2e00 <__udivmodsi4>
    2076:	da 01       	movw	r26, r20
    2078:	c9 01       	movw	r24, r18
    207a:	80 93 b6 01 	sts	0x01B6, r24
    207e:	90 93 b7 01 	sts	0x01B7, r25
    2082:	a0 93 b8 01 	sts	0x01B8, r26
    2086:	b0 93 b9 01 	sts	0x01B9, r27
	f32 remainder=((Copy_u32TimeMS*MICRO_IN_MILLI)%OverFlow_Time)/(f32)OverFlow_Time;
    208a:	8d 89       	ldd	r24, Y+21	; 0x15
    208c:	9e 89       	ldd	r25, Y+22	; 0x16
    208e:	af 89       	ldd	r26, Y+23	; 0x17
    2090:	b8 8d       	ldd	r27, Y+24	; 0x18
    2092:	28 ee       	ldi	r18, 0xE8	; 232
    2094:	33 e0       	ldi	r19, 0x03	; 3
    2096:	40 e0       	ldi	r20, 0x00	; 0
    2098:	50 e0       	ldi	r21, 0x00	; 0
    209a:	bc 01       	movw	r22, r24
    209c:	cd 01       	movw	r24, r26
    209e:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <__mulsi3>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	2d 81       	ldd	r18, Y+5	; 0x05
    20a8:	3e 81       	ldd	r19, Y+6	; 0x06
    20aa:	4f 81       	ldd	r20, Y+7	; 0x07
    20ac:	58 85       	ldd	r21, Y+8	; 0x08
    20ae:	bc 01       	movw	r22, r24
    20b0:	cd 01       	movw	r24, r26
    20b2:	0e 94 00 17 	call	0x2e00	; 0x2e00 <__udivmodsi4>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	bc 01       	movw	r22, r24
    20bc:	cd 01       	movw	r24, r26
    20be:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    20c2:	7b 01       	movw	r14, r22
    20c4:	8c 01       	movw	r16, r24
    20c6:	6d 81       	ldd	r22, Y+5	; 0x05
    20c8:	7e 81       	ldd	r23, Y+6	; 0x06
    20ca:	8f 81       	ldd	r24, Y+7	; 0x07
    20cc:	98 85       	ldd	r25, Y+8	; 0x08
    20ce:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    20d2:	9b 01       	movw	r18, r22
    20d4:	ac 01       	movw	r20, r24
    20d6:	c8 01       	movw	r24, r16
    20d8:	b7 01       	movw	r22, r14
    20da:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20de:	dc 01       	movw	r26, r24
    20e0:	cb 01       	movw	r24, r22
    20e2:	89 83       	std	Y+1, r24	; 0x01
    20e4:	9a 83       	std	Y+2, r25	; 0x02
    20e6:	ab 83       	std	Y+3, r26	; 0x03
    20e8:	bc 83       	std	Y+4, r27	; 0x04
	PreLoad=(1-remainder)*MAX_NUM;
    20ea:	60 e0       	ldi	r22, 0x00	; 0
    20ec:	70 e0       	ldi	r23, 0x00	; 0
    20ee:	80 e8       	ldi	r24, 0x80	; 128
    20f0:	9f e3       	ldi	r25, 0x3F	; 63
    20f2:	29 81       	ldd	r18, Y+1	; 0x01
    20f4:	3a 81       	ldd	r19, Y+2	; 0x02
    20f6:	4b 81       	ldd	r20, Y+3	; 0x03
    20f8:	5c 81       	ldd	r21, Y+4	; 0x04
    20fa:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	7c 01       	movw	r14, r24
    2104:	8d 01       	movw	r16, r26
    2106:	69 89       	ldd	r22, Y+17	; 0x11
    2108:	7a 89       	ldd	r23, Y+18	; 0x12
    210a:	8b 89       	ldd	r24, Y+19	; 0x13
    210c:	9c 89       	ldd	r25, Y+20	; 0x14
    210e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2112:	9b 01       	movw	r18, r22
    2114:	ac 01       	movw	r20, r24
    2116:	c8 01       	movw	r24, r16
    2118:	b7 01       	movw	r22, r14
    211a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	bc 01       	movw	r22, r24
    2124:	cd 01       	movw	r24, r26
    2126:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	80 93 be 01 	sts	0x01BE, r24
    2132:	90 93 bf 01 	sts	0x01BF, r25
    2136:	a0 93 c0 01 	sts	0x01C0, r26
    213a:	b0 93 c1 01 	sts	0x01C1, r27
	
	TIMER0_voidPreLoad(PreLoad);
    213e:	80 91 be 01 	lds	r24, 0x01BE
    2142:	90 91 bf 01 	lds	r25, 0x01BF
    2146:	a0 91 c0 01 	lds	r26, 0x01C0
    214a:	b0 91 c1 01 	lds	r27, 0x01C1
    214e:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <TIMER0_voidPreLoad>
}
    2152:	68 96       	adiw	r28, 0x18	; 24
    2154:	0f b6       	in	r0, 0x3f	; 63
    2156:	f8 94       	cli
    2158:	de bf       	out	0x3e, r29	; 62
    215a:	0f be       	out	0x3f, r0	; 63
    215c:	cd bf       	out	0x3d, r28	; 61
    215e:	cf 91       	pop	r28
    2160:	df 91       	pop	r29
    2162:	1f 91       	pop	r17
    2164:	0f 91       	pop	r16
    2166:	ff 90       	pop	r15
    2168:	ef 90       	pop	r14
    216a:	08 95       	ret

0000216c <TIMER0_NORMAL_SetCallBack>:

void TIMER0_NORMAL_SetCallBack(void(*ptr)(void)){
    216c:	df 93       	push	r29
    216e:	cf 93       	push	r28
    2170:	00 d0       	rcall	.+0      	; 0x2172 <TIMER0_NORMAL_SetCallBack+0x6>
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
    2176:	9a 83       	std	Y+2, r25	; 0x02
    2178:	89 83       	std	Y+1, r24	; 0x01
			
	TIMER0_NORMAL_GPfun=ptr;
    217a:	89 81       	ldd	r24, Y+1	; 0x01
    217c:	9a 81       	ldd	r25, Y+2	; 0x02
    217e:	90 93 97 01 	sts	0x0197, r25
    2182:	80 93 96 01 	sts	0x0196, r24
}
    2186:	0f 90       	pop	r0
    2188:	0f 90       	pop	r0
    218a:	cf 91       	pop	r28
    218c:	df 91       	pop	r29
    218e:	08 95       	ret

00002190 <TIMER0_CTC_SetCallBack>:

void TIMER0_CTC_SetCallBack(void(*ptr)(void)){
    2190:	df 93       	push	r29
    2192:	cf 93       	push	r28
    2194:	00 d0       	rcall	.+0      	; 0x2196 <TIMER0_CTC_SetCallBack+0x6>
    2196:	cd b7       	in	r28, 0x3d	; 61
    2198:	de b7       	in	r29, 0x3e	; 62
    219a:	9a 83       	std	Y+2, r25	; 0x02
    219c:	89 83       	std	Y+1, r24	; 0x01
	
	TIMER0_CTC_GPfun=ptr;
    219e:	89 81       	ldd	r24, Y+1	; 0x01
    21a0:	9a 81       	ldd	r25, Y+2	; 0x02
    21a2:	90 93 99 01 	sts	0x0199, r25
    21a6:	80 93 98 01 	sts	0x0198, r24
}
    21aa:	0f 90       	pop	r0
    21ac:	0f 90       	pop	r0
    21ae:	cf 91       	pop	r28
    21b0:	df 91       	pop	r29
    21b2:	08 95       	ret

000021b4 <__vector_10>:

void __vector_10()__attribute__((signal));   // TIMER0_CTC
void __vector_10(){
    21b4:	1f 92       	push	r1
    21b6:	0f 92       	push	r0
    21b8:	0f b6       	in	r0, 0x3f	; 63
    21ba:	0f 92       	push	r0
    21bc:	11 24       	eor	r1, r1
    21be:	2f 93       	push	r18
    21c0:	3f 93       	push	r19
    21c2:	4f 93       	push	r20
    21c4:	5f 93       	push	r21
    21c6:	6f 93       	push	r22
    21c8:	7f 93       	push	r23
    21ca:	8f 93       	push	r24
    21cc:	9f 93       	push	r25
    21ce:	af 93       	push	r26
    21d0:	bf 93       	push	r27
    21d2:	ef 93       	push	r30
    21d4:	ff 93       	push	r31
    21d6:	df 93       	push	r29
    21d8:	cf 93       	push	r28
    21da:	cd b7       	in	r28, 0x3d	; 61
    21dc:	de b7       	in	r29, 0x3e	; 62
	
	static u32 counter=0;
	
	if(counter==TIMER+1){
    21de:	80 91 b6 01 	lds	r24, 0x01B6
    21e2:	90 91 b7 01 	lds	r25, 0x01B7
    21e6:	a0 91 b8 01 	lds	r26, 0x01B8
    21ea:	b0 91 b9 01 	lds	r27, 0x01B9
    21ee:	9c 01       	movw	r18, r24
    21f0:	ad 01       	movw	r20, r26
    21f2:	2f 5f       	subi	r18, 0xFF	; 255
    21f4:	3f 4f       	sbci	r19, 0xFF	; 255
    21f6:	4f 4f       	sbci	r20, 0xFF	; 255
    21f8:	5f 4f       	sbci	r21, 0xFF	; 255
    21fa:	80 91 9a 01 	lds	r24, 0x019A
    21fe:	90 91 9b 01 	lds	r25, 0x019B
    2202:	a0 91 9c 01 	lds	r26, 0x019C
    2206:	b0 91 9d 01 	lds	r27, 0x019D
    220a:	28 17       	cp	r18, r24
    220c:	39 07       	cpc	r19, r25
    220e:	4a 07       	cpc	r20, r26
    2210:	5b 07       	cpc	r21, r27
    2212:	f1 f4       	brne	.+60     	; 0x2250 <__vector_10+0x9c>
		if(TIMER0_CTC_GPfun!=NULL){
    2214:	80 91 98 01 	lds	r24, 0x0198
    2218:	90 91 99 01 	lds	r25, 0x0199
    221c:	00 97       	sbiw	r24, 0x00	; 0
    221e:	29 f0       	breq	.+10     	; 0x222a <__vector_10+0x76>
			TIMER0_CTC_GPfun();
    2220:	e0 91 98 01 	lds	r30, 0x0198
    2224:	f0 91 99 01 	lds	r31, 0x0199
    2228:	09 95       	icall
		}
		counter=0;
    222a:	10 92 9a 01 	sts	0x019A, r1
    222e:	10 92 9b 01 	sts	0x019B, r1
    2232:	10 92 9c 01 	sts	0x019C, r1
    2236:	10 92 9d 01 	sts	0x019D, r1
		TIMER0_voidPreLoad(PreLoad);
    223a:	80 91 be 01 	lds	r24, 0x01BE
    223e:	90 91 bf 01 	lds	r25, 0x01BF
    2242:	a0 91 c0 01 	lds	r26, 0x01C0
    2246:	b0 91 c1 01 	lds	r27, 0x01C1
    224a:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <TIMER0_voidPreLoad>
    224e:	13 c0       	rjmp	.+38     	; 0x2276 <__vector_10+0xc2>
	}
	else{
		counter++;
    2250:	80 91 9a 01 	lds	r24, 0x019A
    2254:	90 91 9b 01 	lds	r25, 0x019B
    2258:	a0 91 9c 01 	lds	r26, 0x019C
    225c:	b0 91 9d 01 	lds	r27, 0x019D
    2260:	01 96       	adiw	r24, 0x01	; 1
    2262:	a1 1d       	adc	r26, r1
    2264:	b1 1d       	adc	r27, r1
    2266:	80 93 9a 01 	sts	0x019A, r24
    226a:	90 93 9b 01 	sts	0x019B, r25
    226e:	a0 93 9c 01 	sts	0x019C, r26
    2272:	b0 93 9d 01 	sts	0x019D, r27
	}
	
}
    2276:	cf 91       	pop	r28
    2278:	df 91       	pop	r29
    227a:	ff 91       	pop	r31
    227c:	ef 91       	pop	r30
    227e:	bf 91       	pop	r27
    2280:	af 91       	pop	r26
    2282:	9f 91       	pop	r25
    2284:	8f 91       	pop	r24
    2286:	7f 91       	pop	r23
    2288:	6f 91       	pop	r22
    228a:	5f 91       	pop	r21
    228c:	4f 91       	pop	r20
    228e:	3f 91       	pop	r19
    2290:	2f 91       	pop	r18
    2292:	0f 90       	pop	r0
    2294:	0f be       	out	0x3f, r0	; 63
    2296:	0f 90       	pop	r0
    2298:	1f 90       	pop	r1
    229a:	18 95       	reti

0000229c <__vector_11>:

void __vector_11()__attribute__((signal));   // TIMER0_NORMAL
void __vector_11(){
    229c:	1f 92       	push	r1
    229e:	0f 92       	push	r0
    22a0:	0f b6       	in	r0, 0x3f	; 63
    22a2:	0f 92       	push	r0
    22a4:	11 24       	eor	r1, r1
    22a6:	2f 93       	push	r18
    22a8:	3f 93       	push	r19
    22aa:	4f 93       	push	r20
    22ac:	5f 93       	push	r21
    22ae:	6f 93       	push	r22
    22b0:	7f 93       	push	r23
    22b2:	8f 93       	push	r24
    22b4:	9f 93       	push	r25
    22b6:	af 93       	push	r26
    22b8:	bf 93       	push	r27
    22ba:	ef 93       	push	r30
    22bc:	ff 93       	push	r31
    22be:	df 93       	push	r29
    22c0:	cf 93       	push	r28
    22c2:	cd b7       	in	r28, 0x3d	; 61
    22c4:	de b7       	in	r29, 0x3e	; 62
	
	static u32 counter=0;
	
	if(counter==TIMER+1){
    22c6:	80 91 b6 01 	lds	r24, 0x01B6
    22ca:	90 91 b7 01 	lds	r25, 0x01B7
    22ce:	a0 91 b8 01 	lds	r26, 0x01B8
    22d2:	b0 91 b9 01 	lds	r27, 0x01B9
    22d6:	9c 01       	movw	r18, r24
    22d8:	ad 01       	movw	r20, r26
    22da:	2f 5f       	subi	r18, 0xFF	; 255
    22dc:	3f 4f       	sbci	r19, 0xFF	; 255
    22de:	4f 4f       	sbci	r20, 0xFF	; 255
    22e0:	5f 4f       	sbci	r21, 0xFF	; 255
    22e2:	80 91 9e 01 	lds	r24, 0x019E
    22e6:	90 91 9f 01 	lds	r25, 0x019F
    22ea:	a0 91 a0 01 	lds	r26, 0x01A0
    22ee:	b0 91 a1 01 	lds	r27, 0x01A1
    22f2:	28 17       	cp	r18, r24
    22f4:	39 07       	cpc	r19, r25
    22f6:	4a 07       	cpc	r20, r26
    22f8:	5b 07       	cpc	r21, r27
    22fa:	f1 f4       	brne	.+60     	; 0x2338 <__vector_11+0x9c>
		if(TIMER0_NORMAL_GPfun!=NULL){
    22fc:	80 91 96 01 	lds	r24, 0x0196
    2300:	90 91 97 01 	lds	r25, 0x0197
    2304:	00 97       	sbiw	r24, 0x00	; 0
    2306:	29 f0       	breq	.+10     	; 0x2312 <__vector_11+0x76>
			TIMER0_NORMAL_GPfun();
    2308:	e0 91 96 01 	lds	r30, 0x0196
    230c:	f0 91 97 01 	lds	r31, 0x0197
    2310:	09 95       	icall
		}
		counter=0;
    2312:	10 92 9e 01 	sts	0x019E, r1
    2316:	10 92 9f 01 	sts	0x019F, r1
    231a:	10 92 a0 01 	sts	0x01A0, r1
    231e:	10 92 a1 01 	sts	0x01A1, r1
		TIMER0_voidPreLoad(PreLoad);
    2322:	80 91 be 01 	lds	r24, 0x01BE
    2326:	90 91 bf 01 	lds	r25, 0x01BF
    232a:	a0 91 c0 01 	lds	r26, 0x01C0
    232e:	b0 91 c1 01 	lds	r27, 0x01C1
    2332:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <TIMER0_voidPreLoad>
    2336:	13 c0       	rjmp	.+38     	; 0x235e <__vector_11+0xc2>
	}
	else{
		counter++;
    2338:	80 91 9e 01 	lds	r24, 0x019E
    233c:	90 91 9f 01 	lds	r25, 0x019F
    2340:	a0 91 a0 01 	lds	r26, 0x01A0
    2344:	b0 91 a1 01 	lds	r27, 0x01A1
    2348:	01 96       	adiw	r24, 0x01	; 1
    234a:	a1 1d       	adc	r26, r1
    234c:	b1 1d       	adc	r27, r1
    234e:	80 93 9e 01 	sts	0x019E, r24
    2352:	90 93 9f 01 	sts	0x019F, r25
    2356:	a0 93 a0 01 	sts	0x01A0, r26
    235a:	b0 93 a1 01 	sts	0x01A1, r27
	}
	
}
    235e:	cf 91       	pop	r28
    2360:	df 91       	pop	r29
    2362:	ff 91       	pop	r31
    2364:	ef 91       	pop	r30
    2366:	bf 91       	pop	r27
    2368:	af 91       	pop	r26
    236a:	9f 91       	pop	r25
    236c:	8f 91       	pop	r24
    236e:	7f 91       	pop	r23
    2370:	6f 91       	pop	r22
    2372:	5f 91       	pop	r21
    2374:	4f 91       	pop	r20
    2376:	3f 91       	pop	r19
    2378:	2f 91       	pop	r18
    237a:	0f 90       	pop	r0
    237c:	0f be       	out	0x3f, r0	; 63
    237e:	0f 90       	pop	r0
    2380:	1f 90       	pop	r1
    2382:	18 95       	reti

00002384 <TIMER1_voidInitialize>:
void (*TIMER1_CTCB_GPfun)(void)=NULL;
void (*TIMER1_ICU_GPfun)(void)=NULL;

u32 TIMER,PreLoad,PreScaler;

void TIMER1_voidInitialize(){
    2384:	df 93       	push	r29
    2386:	cf 93       	push	r28
    2388:	cd b7       	in	r28, 0x3d	; 61
    238a:	de b7       	in	r29, 0x3e	; 62
	SetBit(TCCR1B,PIN0);
	ClrBit(TCCR1B,PIN1);
	ClrBit(TCCR1B,PIN2);
	PreScaler=1;
#elif Clock_Select == clk_8
	ClrBit(TCCR1B,PIN0);
    238c:	ae e4       	ldi	r26, 0x4E	; 78
    238e:	b0 e0       	ldi	r27, 0x00	; 0
    2390:	ee e4       	ldi	r30, 0x4E	; 78
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	80 81       	ld	r24, Z
    2396:	8e 7f       	andi	r24, 0xFE	; 254
    2398:	8c 93       	st	X, r24
	SetBit(TCCR1B,PIN1);
    239a:	ae e4       	ldi	r26, 0x4E	; 78
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	ee e4       	ldi	r30, 0x4E	; 78
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	80 81       	ld	r24, Z
    23a4:	82 60       	ori	r24, 0x02	; 2
    23a6:	8c 93       	st	X, r24
	ClrBit(TCCR1B,PIN2);
    23a8:	ae e4       	ldi	r26, 0x4E	; 78
    23aa:	b0 e0       	ldi	r27, 0x00	; 0
    23ac:	ee e4       	ldi	r30, 0x4E	; 78
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	80 81       	ld	r24, Z
    23b2:	8b 7f       	andi	r24, 0xFB	; 251
    23b4:	8c 93       	st	X, r24
	PreScaler=8;
    23b6:	88 e0       	ldi	r24, 0x08	; 8
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	a0 e0       	ldi	r26, 0x00	; 0
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	80 93 ba 01 	sts	0x01BA, r24
    23c2:	90 93 bb 01 	sts	0x01BB, r25
    23c6:	a0 93 bc 01 	sts	0x01BC, r26
    23ca:	b0 93 bd 01 	sts	0x01BD, r27
#endif

/************ Compare Output Mode *********/
#if TIMER_SELECT == TIMER1A
	#if Compare_Output_Mode == OC1_Disconnected
		ClrBit(TCCR1A,PIN6);
    23ce:	af e4       	ldi	r26, 0x4F	; 79
    23d0:	b0 e0       	ldi	r27, 0x00	; 0
    23d2:	ef e4       	ldi	r30, 0x4F	; 79
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	80 81       	ld	r24, Z
    23d8:	8f 7b       	andi	r24, 0xBF	; 191
    23da:	8c 93       	st	X, r24
		ClrBit(TCCR1A,PIN7);
    23dc:	af e4       	ldi	r26, 0x4F	; 79
    23de:	b0 e0       	ldi	r27, 0x00	; 0
    23e0:	ef e4       	ldi	r30, 0x4F	; 79
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	80 81       	ld	r24, Z
    23e6:	8f 77       	andi	r24, 0x7F	; 127
    23e8:	8c 93       	st	X, r24
	#endif
#endif

/************ Waveform Generation Mode *********/
#if Waveform_MODE == NORMAL
	ClrBit(TCCR1A,PIN0);
    23ea:	af e4       	ldi	r26, 0x4F	; 79
    23ec:	b0 e0       	ldi	r27, 0x00	; 0
    23ee:	ef e4       	ldi	r30, 0x4F	; 79
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	80 81       	ld	r24, Z
    23f4:	8e 7f       	andi	r24, 0xFE	; 254
    23f6:	8c 93       	st	X, r24
	ClrBit(TCCR1A,PIN1);
    23f8:	af e4       	ldi	r26, 0x4F	; 79
    23fa:	b0 e0       	ldi	r27, 0x00	; 0
    23fc:	ef e4       	ldi	r30, 0x4F	; 79
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	80 81       	ld	r24, Z
    2402:	8d 7f       	andi	r24, 0xFD	; 253
    2404:	8c 93       	st	X, r24
	ClrBit(TCCR1B,PIN3);
    2406:	ae e4       	ldi	r26, 0x4E	; 78
    2408:	b0 e0       	ldi	r27, 0x00	; 0
    240a:	ee e4       	ldi	r30, 0x4E	; 78
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	80 81       	ld	r24, Z
    2410:	87 7f       	andi	r24, 0xF7	; 247
    2412:	8c 93       	st	X, r24
	ClrBit(TCCR1B,PIN4);
    2414:	ae e4       	ldi	r26, 0x4E	; 78
    2416:	b0 e0       	ldi	r27, 0x00	; 0
    2418:	ee e4       	ldi	r30, 0x4E	; 78
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	80 81       	ld	r24, Z
    241e:	8f 7e       	andi	r24, 0xEF	; 239
    2420:	8c 93       	st	X, r24
	SetBit(TIMSK,PIN2);
    2422:	a9 e5       	ldi	r26, 0x59	; 89
    2424:	b0 e0       	ldi	r27, 0x00	; 0
    2426:	e9 e5       	ldi	r30, 0x59	; 89
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	80 81       	ld	r24, Z
    242c:	84 60       	ori	r24, 0x04	; 4
    242e:	8c 93       	st	X, r24
	SetBit(TCCR1A,PIN0);
	SetBit(TCCR1A,PIN1);
	SetBit(TCCR1B,PIN3);
	SetBit(TCCR1B,PIN4);
#endif
}
    2430:	cf 91       	pop	r28
    2432:	df 91       	pop	r29
    2434:	08 95       	ret

00002436 <TIMER1_voidEnableICU>:

void TIMER1_voidEnableICU(){
    2436:	df 93       	push	r29
    2438:	cf 93       	push	r28
    243a:	cd b7       	in	r28, 0x3d	; 61
    243c:	de b7       	in	r29, 0x3e	; 62
	
	SetBit(TIMSK,PIN5);
    243e:	a9 e5       	ldi	r26, 0x59	; 89
    2440:	b0 e0       	ldi	r27, 0x00	; 0
    2442:	e9 e5       	ldi	r30, 0x59	; 89
    2444:	f0 e0       	ldi	r31, 0x00	; 0
    2446:	80 81       	ld	r24, Z
    2448:	80 62       	ori	r24, 0x20	; 32
    244a:	8c 93       	st	X, r24
}
    244c:	cf 91       	pop	r28
    244e:	df 91       	pop	r29
    2450:	08 95       	ret

00002452 <TIMER1_voidICUEdge>:

void TIMER1_voidICUEdge(u8 Copy_u8ICUEdge){
    2452:	df 93       	push	r29
    2454:	cf 93       	push	r28
    2456:	00 d0       	rcall	.+0      	; 0x2458 <TIMER1_voidICUEdge+0x6>
    2458:	0f 92       	push	r0
    245a:	cd b7       	in	r28, 0x3d	; 61
    245c:	de b7       	in	r29, 0x3e	; 62
    245e:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8ICUEdge){
    2460:	89 81       	ldd	r24, Y+1	; 0x01
    2462:	28 2f       	mov	r18, r24
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	3b 83       	std	Y+3, r19	; 0x03
    2468:	2a 83       	std	Y+2, r18	; 0x02
    246a:	8a 81       	ldd	r24, Y+2	; 0x02
    246c:	9b 81       	ldd	r25, Y+3	; 0x03
    246e:	00 97       	sbiw	r24, 0x00	; 0
    2470:	31 f0       	breq	.+12     	; 0x247e <TIMER1_voidICUEdge+0x2c>
    2472:	2a 81       	ldd	r18, Y+2	; 0x02
    2474:	3b 81       	ldd	r19, Y+3	; 0x03
    2476:	21 30       	cpi	r18, 0x01	; 1
    2478:	31 05       	cpc	r19, r1
    247a:	49 f0       	breq	.+18     	; 0x248e <TIMER1_voidICUEdge+0x3c>
    247c:	0f c0       	rjmp	.+30     	; 0x249c <TIMER1_voidICUEdge+0x4a>
		case RISING_EDGE:
			SetBit(TCCR1B,PIN6);
    247e:	ae e4       	ldi	r26, 0x4E	; 78
    2480:	b0 e0       	ldi	r27, 0x00	; 0
    2482:	ee e4       	ldi	r30, 0x4E	; 78
    2484:	f0 e0       	ldi	r31, 0x00	; 0
    2486:	80 81       	ld	r24, Z
    2488:	80 64       	ori	r24, 0x40	; 64
    248a:	8c 93       	st	X, r24
    248c:	07 c0       	rjmp	.+14     	; 0x249c <TIMER1_voidICUEdge+0x4a>
			break;
		case FALLING_EDGE:
			ClrBit(TCCR1B,PIN6);
    248e:	ae e4       	ldi	r26, 0x4E	; 78
    2490:	b0 e0       	ldi	r27, 0x00	; 0
    2492:	ee e4       	ldi	r30, 0x4E	; 78
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	80 81       	ld	r24, Z
    2498:	8f 7b       	andi	r24, 0xBF	; 191
    249a:	8c 93       	st	X, r24
			break;
	}
}
    249c:	0f 90       	pop	r0
    249e:	0f 90       	pop	r0
    24a0:	0f 90       	pop	r0
    24a2:	cf 91       	pop	r28
    24a4:	df 91       	pop	r29
    24a6:	08 95       	ret

000024a8 <TIMER1_voidSetOCR1>:

void TIMER1_voidSetOCR1(u16 Copy_u16Value){
    24a8:	df 93       	push	r29
    24aa:	cf 93       	push	r28
    24ac:	00 d0       	rcall	.+0      	; 0x24ae <TIMER1_voidSetOCR1+0x6>
    24ae:	cd b7       	in	r28, 0x3d	; 61
    24b0:	de b7       	in	r29, 0x3e	; 62
    24b2:	9a 83       	std	Y+2, r25	; 0x02
    24b4:	89 83       	std	Y+1, r24	; 0x01
	#if TIMER_SELECT == TIMER1A
		OCR1A=Copy_u16Value;
    24b6:	ea e4       	ldi	r30, 0x4A	; 74
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	89 81       	ldd	r24, Y+1	; 0x01
    24bc:	9a 81       	ldd	r25, Y+2	; 0x02
    24be:	91 83       	std	Z+1, r25	; 0x01
    24c0:	80 83       	st	Z, r24
	#elif TIMER_SELECT == TIMER1B
		OCR1B=Copy_u16Value;
	#endif	
}
    24c2:	0f 90       	pop	r0
    24c4:	0f 90       	pop	r0
    24c6:	cf 91       	pop	r28
    24c8:	df 91       	pop	r29
    24ca:	08 95       	ret

000024cc <TIMER1_voidSetICR1>:

void TIMER1_voidSetICR1(u16 Copy_u16Value){
    24cc:	df 93       	push	r29
    24ce:	cf 93       	push	r28
    24d0:	00 d0       	rcall	.+0      	; 0x24d2 <TIMER1_voidSetICR1+0x6>
    24d2:	cd b7       	in	r28, 0x3d	; 61
    24d4:	de b7       	in	r29, 0x3e	; 62
    24d6:	9a 83       	std	Y+2, r25	; 0x02
    24d8:	89 83       	std	Y+1, r24	; 0x01
	
	ICR1=Copy_u16Value;
    24da:	e6 e4       	ldi	r30, 0x46	; 70
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	89 81       	ldd	r24, Y+1	; 0x01
    24e0:	9a 81       	ldd	r25, Y+2	; 0x02
    24e2:	91 83       	std	Z+1, r25	; 0x01
    24e4:	80 83       	st	Z, r24
}
    24e6:	0f 90       	pop	r0
    24e8:	0f 90       	pop	r0
    24ea:	cf 91       	pop	r28
    24ec:	df 91       	pop	r29
    24ee:	08 95       	ret

000024f0 <TIMER1_u16GetICR1>:

u16 TIMER1_u16GetICR1(){
    24f0:	df 93       	push	r29
    24f2:	cf 93       	push	r28
    24f4:	cd b7       	in	r28, 0x3d	; 61
    24f6:	de b7       	in	r29, 0x3e	; 62
	
	return ICR1;
    24f8:	e6 e4       	ldi	r30, 0x46	; 70
    24fa:	f0 e0       	ldi	r31, 0x00	; 0
    24fc:	80 81       	ld	r24, Z
    24fe:	91 81       	ldd	r25, Z+1	; 0x01
}
    2500:	cf 91       	pop	r28
    2502:	df 91       	pop	r29
    2504:	08 95       	ret

00002506 <TIMER1_voidPreLoad>:

void TIMER1_voidPreLoad(u16 Copy_u16Value){
    2506:	df 93       	push	r29
    2508:	cf 93       	push	r28
    250a:	00 d0       	rcall	.+0      	; 0x250c <TIMER1_voidPreLoad+0x6>
    250c:	cd b7       	in	r28, 0x3d	; 61
    250e:	de b7       	in	r29, 0x3e	; 62
    2510:	9a 83       	std	Y+2, r25	; 0x02
    2512:	89 83       	std	Y+1, r24	; 0x01
	
	TCNT1=Copy_u16Value;
    2514:	ec e4       	ldi	r30, 0x4C	; 76
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	89 81       	ldd	r24, Y+1	; 0x01
    251a:	9a 81       	ldd	r25, Y+2	; 0x02
    251c:	91 83       	std	Z+1, r25	; 0x01
    251e:	80 83       	st	Z, r24
}
    2520:	0f 90       	pop	r0
    2522:	0f 90       	pop	r0
    2524:	cf 91       	pop	r28
    2526:	df 91       	pop	r29
    2528:	08 95       	ret

0000252a <TIMER1_voidSetTimer>:


void TIMER1_voidSetTimer(u32 Copy_u32TimeMS){
    252a:	ef 92       	push	r14
    252c:	ff 92       	push	r15
    252e:	0f 93       	push	r16
    2530:	1f 93       	push	r17
    2532:	df 93       	push	r29
    2534:	cf 93       	push	r28
    2536:	cd b7       	in	r28, 0x3d	; 61
    2538:	de b7       	in	r29, 0x3e	; 62
    253a:	68 97       	sbiw	r28, 0x18	; 24
    253c:	0f b6       	in	r0, 0x3f	; 63
    253e:	f8 94       	cli
    2540:	de bf       	out	0x3e, r29	; 62
    2542:	0f be       	out	0x3f, r0	; 63
    2544:	cd bf       	out	0x3d, r28	; 61
    2546:	6d 8b       	std	Y+21, r22	; 0x15
    2548:	7e 8b       	std	Y+22, r23	; 0x16
    254a:	8f 8b       	std	Y+23, r24	; 0x17
    254c:	98 8f       	std	Y+24, r25	; 0x18
	
	u32 MAX_NUM;
	#if Waveform_MODE == NORMAL
		MAX_NUM=MAX_16BIT_REG;
    254e:	8f ef       	ldi	r24, 0xFF	; 255
    2550:	9f ef       	ldi	r25, 0xFF	; 255
    2552:	a0 e0       	ldi	r26, 0x00	; 0
    2554:	b0 e0       	ldi	r27, 0x00	; 0
    2556:	89 8b       	std	Y+17, r24	; 0x11
    2558:	9a 8b       	std	Y+18, r25	; 0x12
    255a:	ab 8b       	std	Y+19, r26	; 0x13
    255c:	bc 8b       	std	Y+20, r27	; 0x14
		MAX_NUM=OCR1A;
	#elif Waveform_MODE == CTC_ICR1
		MAX_NUM=ICR1;
	#endif
	
	u32 TIMER_freq=CPU_FREQUENCY/PreScaler;
    255e:	20 91 ba 01 	lds	r18, 0x01BA
    2562:	30 91 bb 01 	lds	r19, 0x01BB
    2566:	40 91 bc 01 	lds	r20, 0x01BC
    256a:	50 91 bd 01 	lds	r21, 0x01BD
    256e:	80 e0       	ldi	r24, 0x00	; 0
    2570:	92 e1       	ldi	r25, 0x12	; 18
    2572:	aa e7       	ldi	r26, 0x7A	; 122
    2574:	b0 e0       	ldi	r27, 0x00	; 0
    2576:	bc 01       	movw	r22, r24
    2578:	cd 01       	movw	r24, r26
    257a:	0e 94 00 17 	call	0x2e00	; 0x2e00 <__udivmodsi4>
    257e:	da 01       	movw	r26, r20
    2580:	c9 01       	movw	r24, r18
    2582:	8d 87       	std	Y+13, r24	; 0x0d
    2584:	9e 87       	std	Y+14, r25	; 0x0e
    2586:	af 87       	std	Y+15, r26	; 0x0f
    2588:	b8 8b       	std	Y+16, r27	; 0x10
	f32 Tick_Time=MICRO_IN_SEC/TIMER_freq;
    258a:	80 e4       	ldi	r24, 0x40	; 64
    258c:	92 e4       	ldi	r25, 0x42	; 66
    258e:	af e0       	ldi	r26, 0x0F	; 15
    2590:	b0 e0       	ldi	r27, 0x00	; 0
    2592:	2d 85       	ldd	r18, Y+13	; 0x0d
    2594:	3e 85       	ldd	r19, Y+14	; 0x0e
    2596:	4f 85       	ldd	r20, Y+15	; 0x0f
    2598:	58 89       	ldd	r21, Y+16	; 0x10
    259a:	bc 01       	movw	r22, r24
    259c:	cd 01       	movw	r24, r26
    259e:	0e 94 00 17 	call	0x2e00	; 0x2e00 <__udivmodsi4>
    25a2:	da 01       	movw	r26, r20
    25a4:	c9 01       	movw	r24, r18
    25a6:	bc 01       	movw	r22, r24
    25a8:	cd 01       	movw	r24, r26
    25aa:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	89 87       	std	Y+9, r24	; 0x09
    25b4:	9a 87       	std	Y+10, r25	; 0x0a
    25b6:	ab 87       	std	Y+11, r26	; 0x0b
    25b8:	bc 87       	std	Y+12, r27	; 0x0c
	u32 OverFlow_Time=Tick_Time*MAX_NUM;
    25ba:	69 89       	ldd	r22, Y+17	; 0x11
    25bc:	7a 89       	ldd	r23, Y+18	; 0x12
    25be:	8b 89       	ldd	r24, Y+19	; 0x13
    25c0:	9c 89       	ldd	r25, Y+20	; 0x14
    25c2:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	bc 01       	movw	r22, r24
    25cc:	cd 01       	movw	r24, r26
    25ce:	29 85       	ldd	r18, Y+9	; 0x09
    25d0:	3a 85       	ldd	r19, Y+10	; 0x0a
    25d2:	4b 85       	ldd	r20, Y+11	; 0x0b
    25d4:	5c 85       	ldd	r21, Y+12	; 0x0c
    25d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25da:	dc 01       	movw	r26, r24
    25dc:	cb 01       	movw	r24, r22
    25de:	bc 01       	movw	r22, r24
    25e0:	cd 01       	movw	r24, r26
    25e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e6:	dc 01       	movw	r26, r24
    25e8:	cb 01       	movw	r24, r22
    25ea:	8d 83       	std	Y+5, r24	; 0x05
    25ec:	9e 83       	std	Y+6, r25	; 0x06
    25ee:	af 83       	std	Y+7, r26	; 0x07
    25f0:	b8 87       	std	Y+8, r27	; 0x08
	
	TIMER=(Copy_u32TimeMS*MICRO_IN_MILLI)/OverFlow_Time;
    25f2:	8d 89       	ldd	r24, Y+21	; 0x15
    25f4:	9e 89       	ldd	r25, Y+22	; 0x16
    25f6:	af 89       	ldd	r26, Y+23	; 0x17
    25f8:	b8 8d       	ldd	r27, Y+24	; 0x18
    25fa:	28 ee       	ldi	r18, 0xE8	; 232
    25fc:	33 e0       	ldi	r19, 0x03	; 3
    25fe:	40 e0       	ldi	r20, 0x00	; 0
    2600:	50 e0       	ldi	r21, 0x00	; 0
    2602:	bc 01       	movw	r22, r24
    2604:	cd 01       	movw	r24, r26
    2606:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <__mulsi3>
    260a:	dc 01       	movw	r26, r24
    260c:	cb 01       	movw	r24, r22
    260e:	2d 81       	ldd	r18, Y+5	; 0x05
    2610:	3e 81       	ldd	r19, Y+6	; 0x06
    2612:	4f 81       	ldd	r20, Y+7	; 0x07
    2614:	58 85       	ldd	r21, Y+8	; 0x08
    2616:	bc 01       	movw	r22, r24
    2618:	cd 01       	movw	r24, r26
    261a:	0e 94 00 17 	call	0x2e00	; 0x2e00 <__udivmodsi4>
    261e:	da 01       	movw	r26, r20
    2620:	c9 01       	movw	r24, r18
    2622:	80 93 b6 01 	sts	0x01B6, r24
    2626:	90 93 b7 01 	sts	0x01B7, r25
    262a:	a0 93 b8 01 	sts	0x01B8, r26
    262e:	b0 93 b9 01 	sts	0x01B9, r27
	f32 remainder=((Copy_u32TimeMS*MICRO_IN_MILLI)%OverFlow_Time)/(f32)OverFlow_Time;
    2632:	8d 89       	ldd	r24, Y+21	; 0x15
    2634:	9e 89       	ldd	r25, Y+22	; 0x16
    2636:	af 89       	ldd	r26, Y+23	; 0x17
    2638:	b8 8d       	ldd	r27, Y+24	; 0x18
    263a:	28 ee       	ldi	r18, 0xE8	; 232
    263c:	33 e0       	ldi	r19, 0x03	; 3
    263e:	40 e0       	ldi	r20, 0x00	; 0
    2640:	50 e0       	ldi	r21, 0x00	; 0
    2642:	bc 01       	movw	r22, r24
    2644:	cd 01       	movw	r24, r26
    2646:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <__mulsi3>
    264a:	dc 01       	movw	r26, r24
    264c:	cb 01       	movw	r24, r22
    264e:	2d 81       	ldd	r18, Y+5	; 0x05
    2650:	3e 81       	ldd	r19, Y+6	; 0x06
    2652:	4f 81       	ldd	r20, Y+7	; 0x07
    2654:	58 85       	ldd	r21, Y+8	; 0x08
    2656:	bc 01       	movw	r22, r24
    2658:	cd 01       	movw	r24, r26
    265a:	0e 94 00 17 	call	0x2e00	; 0x2e00 <__udivmodsi4>
    265e:	dc 01       	movw	r26, r24
    2660:	cb 01       	movw	r24, r22
    2662:	bc 01       	movw	r22, r24
    2664:	cd 01       	movw	r24, r26
    2666:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    266a:	7b 01       	movw	r14, r22
    266c:	8c 01       	movw	r16, r24
    266e:	6d 81       	ldd	r22, Y+5	; 0x05
    2670:	7e 81       	ldd	r23, Y+6	; 0x06
    2672:	8f 81       	ldd	r24, Y+7	; 0x07
    2674:	98 85       	ldd	r25, Y+8	; 0x08
    2676:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    267a:	9b 01       	movw	r18, r22
    267c:	ac 01       	movw	r20, r24
    267e:	c8 01       	movw	r24, r16
    2680:	b7 01       	movw	r22, r14
    2682:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2686:	dc 01       	movw	r26, r24
    2688:	cb 01       	movw	r24, r22
    268a:	89 83       	std	Y+1, r24	; 0x01
    268c:	9a 83       	std	Y+2, r25	; 0x02
    268e:	ab 83       	std	Y+3, r26	; 0x03
    2690:	bc 83       	std	Y+4, r27	; 0x04
	PreLoad=(1-remainder)*MAX_NUM;
    2692:	60 e0       	ldi	r22, 0x00	; 0
    2694:	70 e0       	ldi	r23, 0x00	; 0
    2696:	80 e8       	ldi	r24, 0x80	; 128
    2698:	9f e3       	ldi	r25, 0x3F	; 63
    269a:	29 81       	ldd	r18, Y+1	; 0x01
    269c:	3a 81       	ldd	r19, Y+2	; 0x02
    269e:	4b 81       	ldd	r20, Y+3	; 0x03
    26a0:	5c 81       	ldd	r21, Y+4	; 0x04
    26a2:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	7c 01       	movw	r14, r24
    26ac:	8d 01       	movw	r16, r26
    26ae:	69 89       	ldd	r22, Y+17	; 0x11
    26b0:	7a 89       	ldd	r23, Y+18	; 0x12
    26b2:	8b 89       	ldd	r24, Y+19	; 0x13
    26b4:	9c 89       	ldd	r25, Y+20	; 0x14
    26b6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    26ba:	9b 01       	movw	r18, r22
    26bc:	ac 01       	movw	r20, r24
    26be:	c8 01       	movw	r24, r16
    26c0:	b7 01       	movw	r22, r14
    26c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c6:	dc 01       	movw	r26, r24
    26c8:	cb 01       	movw	r24, r22
    26ca:	bc 01       	movw	r22, r24
    26cc:	cd 01       	movw	r24, r26
    26ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d2:	dc 01       	movw	r26, r24
    26d4:	cb 01       	movw	r24, r22
    26d6:	80 93 be 01 	sts	0x01BE, r24
    26da:	90 93 bf 01 	sts	0x01BF, r25
    26de:	a0 93 c0 01 	sts	0x01C0, r26
    26e2:	b0 93 c1 01 	sts	0x01C1, r27
	
	TIMER1_voidPreLoad(PreLoad);
    26e6:	80 91 be 01 	lds	r24, 0x01BE
    26ea:	90 91 bf 01 	lds	r25, 0x01BF
    26ee:	a0 91 c0 01 	lds	r26, 0x01C0
    26f2:	b0 91 c1 01 	lds	r27, 0x01C1
    26f6:	0e 94 83 12 	call	0x2506	; 0x2506 <TIMER1_voidPreLoad>
}
    26fa:	68 96       	adiw	r28, 0x18	; 24
    26fc:	0f b6       	in	r0, 0x3f	; 63
    26fe:	f8 94       	cli
    2700:	de bf       	out	0x3e, r29	; 62
    2702:	0f be       	out	0x3f, r0	; 63
    2704:	cd bf       	out	0x3d, r28	; 61
    2706:	cf 91       	pop	r28
    2708:	df 91       	pop	r29
    270a:	1f 91       	pop	r17
    270c:	0f 91       	pop	r16
    270e:	ff 90       	pop	r15
    2710:	ef 90       	pop	r14
    2712:	08 95       	ret

00002714 <TIMER1_ICU_SetCallBack>:

void TIMER1_ICU_SetCallBack(void(*ptr)(void)){
    2714:	df 93       	push	r29
    2716:	cf 93       	push	r28
    2718:	00 d0       	rcall	.+0      	; 0x271a <TIMER1_ICU_SetCallBack+0x6>
    271a:	cd b7       	in	r28, 0x3d	; 61
    271c:	de b7       	in	r29, 0x3e	; 62
    271e:	9a 83       	std	Y+2, r25	; 0x02
    2720:	89 83       	std	Y+1, r24	; 0x01
	
	TIMER1_ICU_GPfun=ptr;
    2722:	89 81       	ldd	r24, Y+1	; 0x01
    2724:	9a 81       	ldd	r25, Y+2	; 0x02
    2726:	90 93 a9 01 	sts	0x01A9, r25
    272a:	80 93 a8 01 	sts	0x01A8, r24
}
    272e:	0f 90       	pop	r0
    2730:	0f 90       	pop	r0
    2732:	cf 91       	pop	r28
    2734:	df 91       	pop	r29
    2736:	08 95       	ret

00002738 <TIMER1_CTCA_SetCallBack>:

void TIMER1_CTCA_SetCallBack(void(*ptr)(void)){
    2738:	df 93       	push	r29
    273a:	cf 93       	push	r28
    273c:	00 d0       	rcall	.+0      	; 0x273e <TIMER1_CTCA_SetCallBack+0x6>
    273e:	cd b7       	in	r28, 0x3d	; 61
    2740:	de b7       	in	r29, 0x3e	; 62
    2742:	9a 83       	std	Y+2, r25	; 0x02
    2744:	89 83       	std	Y+1, r24	; 0x01
	
	TIMER1_CTCA_GPfun=ptr;
    2746:	89 81       	ldd	r24, Y+1	; 0x01
    2748:	9a 81       	ldd	r25, Y+2	; 0x02
    274a:	90 93 a5 01 	sts	0x01A5, r25
    274e:	80 93 a4 01 	sts	0x01A4, r24
}
    2752:	0f 90       	pop	r0
    2754:	0f 90       	pop	r0
    2756:	cf 91       	pop	r28
    2758:	df 91       	pop	r29
    275a:	08 95       	ret

0000275c <TIMER1_CTCB_SetCallBack>:

void TIMER1_CTCB_SetCallBack(void(*ptr)(void)){
    275c:	df 93       	push	r29
    275e:	cf 93       	push	r28
    2760:	00 d0       	rcall	.+0      	; 0x2762 <TIMER1_CTCB_SetCallBack+0x6>
    2762:	cd b7       	in	r28, 0x3d	; 61
    2764:	de b7       	in	r29, 0x3e	; 62
    2766:	9a 83       	std	Y+2, r25	; 0x02
    2768:	89 83       	std	Y+1, r24	; 0x01
	
	TIMER1_CTCB_GPfun=ptr;
    276a:	89 81       	ldd	r24, Y+1	; 0x01
    276c:	9a 81       	ldd	r25, Y+2	; 0x02
    276e:	90 93 a7 01 	sts	0x01A7, r25
    2772:	80 93 a6 01 	sts	0x01A6, r24
}
    2776:	0f 90       	pop	r0
    2778:	0f 90       	pop	r0
    277a:	cf 91       	pop	r28
    277c:	df 91       	pop	r29
    277e:	08 95       	ret

00002780 <TIMER1_NORMAL_SetCallBack>:

void TIMER1_NORMAL_SetCallBack(void(*ptr)(void)){
    2780:	df 93       	push	r29
    2782:	cf 93       	push	r28
    2784:	00 d0       	rcall	.+0      	; 0x2786 <TIMER1_NORMAL_SetCallBack+0x6>
    2786:	cd b7       	in	r28, 0x3d	; 61
    2788:	de b7       	in	r29, 0x3e	; 62
    278a:	9a 83       	std	Y+2, r25	; 0x02
    278c:	89 83       	std	Y+1, r24	; 0x01
			
	TIMER1_NORMAL_GPfun=ptr;
    278e:	89 81       	ldd	r24, Y+1	; 0x01
    2790:	9a 81       	ldd	r25, Y+2	; 0x02
    2792:	90 93 a3 01 	sts	0x01A3, r25
    2796:	80 93 a2 01 	sts	0x01A2, r24
}
    279a:	0f 90       	pop	r0
    279c:	0f 90       	pop	r0
    279e:	cf 91       	pop	r28
    27a0:	df 91       	pop	r29
    27a2:	08 95       	ret

000027a4 <__vector_6>:

void __vector_6()__attribute__((signal));   // TIMER1_ICU
void __vector_6(){
    27a4:	1f 92       	push	r1
    27a6:	0f 92       	push	r0
    27a8:	0f b6       	in	r0, 0x3f	; 63
    27aa:	0f 92       	push	r0
    27ac:	11 24       	eor	r1, r1
    27ae:	2f 93       	push	r18
    27b0:	3f 93       	push	r19
    27b2:	4f 93       	push	r20
    27b4:	5f 93       	push	r21
    27b6:	6f 93       	push	r22
    27b8:	7f 93       	push	r23
    27ba:	8f 93       	push	r24
    27bc:	9f 93       	push	r25
    27be:	af 93       	push	r26
    27c0:	bf 93       	push	r27
    27c2:	ef 93       	push	r30
    27c4:	ff 93       	push	r31
    27c6:	df 93       	push	r29
    27c8:	cf 93       	push	r28
    27ca:	cd b7       	in	r28, 0x3d	; 61
    27cc:	de b7       	in	r29, 0x3e	; 62

	if(TIMER1_ICU_GPfun!=NULL){
    27ce:	80 91 a8 01 	lds	r24, 0x01A8
    27d2:	90 91 a9 01 	lds	r25, 0x01A9
    27d6:	00 97       	sbiw	r24, 0x00	; 0
    27d8:	29 f0       	breq	.+10     	; 0x27e4 <__vector_6+0x40>
		TIMER1_ICU_GPfun();
    27da:	e0 91 a8 01 	lds	r30, 0x01A8
    27de:	f0 91 a9 01 	lds	r31, 0x01A9
    27e2:	09 95       	icall
	}
}
    27e4:	cf 91       	pop	r28
    27e6:	df 91       	pop	r29
    27e8:	ff 91       	pop	r31
    27ea:	ef 91       	pop	r30
    27ec:	bf 91       	pop	r27
    27ee:	af 91       	pop	r26
    27f0:	9f 91       	pop	r25
    27f2:	8f 91       	pop	r24
    27f4:	7f 91       	pop	r23
    27f6:	6f 91       	pop	r22
    27f8:	5f 91       	pop	r21
    27fa:	4f 91       	pop	r20
    27fc:	3f 91       	pop	r19
    27fe:	2f 91       	pop	r18
    2800:	0f 90       	pop	r0
    2802:	0f be       	out	0x3f, r0	; 63
    2804:	0f 90       	pop	r0
    2806:	1f 90       	pop	r1
    2808:	18 95       	reti

0000280a <__vector_7>:

void __vector_7()__attribute__((signal));   // TIMER1_CTCA
void __vector_7(){
    280a:	1f 92       	push	r1
    280c:	0f 92       	push	r0
    280e:	0f b6       	in	r0, 0x3f	; 63
    2810:	0f 92       	push	r0
    2812:	11 24       	eor	r1, r1
    2814:	2f 93       	push	r18
    2816:	3f 93       	push	r19
    2818:	4f 93       	push	r20
    281a:	5f 93       	push	r21
    281c:	6f 93       	push	r22
    281e:	7f 93       	push	r23
    2820:	8f 93       	push	r24
    2822:	9f 93       	push	r25
    2824:	af 93       	push	r26
    2826:	bf 93       	push	r27
    2828:	ef 93       	push	r30
    282a:	ff 93       	push	r31
    282c:	df 93       	push	r29
    282e:	cf 93       	push	r28
    2830:	cd b7       	in	r28, 0x3d	; 61
    2832:	de b7       	in	r29, 0x3e	; 62
	
	static u32 counter=0;
	
	if(counter==TIMER+1){
    2834:	80 91 b6 01 	lds	r24, 0x01B6
    2838:	90 91 b7 01 	lds	r25, 0x01B7
    283c:	a0 91 b8 01 	lds	r26, 0x01B8
    2840:	b0 91 b9 01 	lds	r27, 0x01B9
    2844:	9c 01       	movw	r18, r24
    2846:	ad 01       	movw	r20, r26
    2848:	2f 5f       	subi	r18, 0xFF	; 255
    284a:	3f 4f       	sbci	r19, 0xFF	; 255
    284c:	4f 4f       	sbci	r20, 0xFF	; 255
    284e:	5f 4f       	sbci	r21, 0xFF	; 255
    2850:	80 91 aa 01 	lds	r24, 0x01AA
    2854:	90 91 ab 01 	lds	r25, 0x01AB
    2858:	a0 91 ac 01 	lds	r26, 0x01AC
    285c:	b0 91 ad 01 	lds	r27, 0x01AD
    2860:	28 17       	cp	r18, r24
    2862:	39 07       	cpc	r19, r25
    2864:	4a 07       	cpc	r20, r26
    2866:	5b 07       	cpc	r21, r27
    2868:	f1 f4       	brne	.+60     	; 0x28a6 <__vector_7+0x9c>
		if(TIMER1_CTCA_GPfun!=NULL){
    286a:	80 91 a4 01 	lds	r24, 0x01A4
    286e:	90 91 a5 01 	lds	r25, 0x01A5
    2872:	00 97       	sbiw	r24, 0x00	; 0
    2874:	29 f0       	breq	.+10     	; 0x2880 <__vector_7+0x76>
			TIMER1_CTCA_GPfun();
    2876:	e0 91 a4 01 	lds	r30, 0x01A4
    287a:	f0 91 a5 01 	lds	r31, 0x01A5
    287e:	09 95       	icall
		}
		counter=0;
    2880:	10 92 aa 01 	sts	0x01AA, r1
    2884:	10 92 ab 01 	sts	0x01AB, r1
    2888:	10 92 ac 01 	sts	0x01AC, r1
    288c:	10 92 ad 01 	sts	0x01AD, r1
		TIMER1_voidPreLoad(PreLoad);
    2890:	80 91 be 01 	lds	r24, 0x01BE
    2894:	90 91 bf 01 	lds	r25, 0x01BF
    2898:	a0 91 c0 01 	lds	r26, 0x01C0
    289c:	b0 91 c1 01 	lds	r27, 0x01C1
    28a0:	0e 94 83 12 	call	0x2506	; 0x2506 <TIMER1_voidPreLoad>
    28a4:	13 c0       	rjmp	.+38     	; 0x28cc <__vector_7+0xc2>
	}
	else{
		counter++;
    28a6:	80 91 aa 01 	lds	r24, 0x01AA
    28aa:	90 91 ab 01 	lds	r25, 0x01AB
    28ae:	a0 91 ac 01 	lds	r26, 0x01AC
    28b2:	b0 91 ad 01 	lds	r27, 0x01AD
    28b6:	01 96       	adiw	r24, 0x01	; 1
    28b8:	a1 1d       	adc	r26, r1
    28ba:	b1 1d       	adc	r27, r1
    28bc:	80 93 aa 01 	sts	0x01AA, r24
    28c0:	90 93 ab 01 	sts	0x01AB, r25
    28c4:	a0 93 ac 01 	sts	0x01AC, r26
    28c8:	b0 93 ad 01 	sts	0x01AD, r27
	}
}
    28cc:	cf 91       	pop	r28
    28ce:	df 91       	pop	r29
    28d0:	ff 91       	pop	r31
    28d2:	ef 91       	pop	r30
    28d4:	bf 91       	pop	r27
    28d6:	af 91       	pop	r26
    28d8:	9f 91       	pop	r25
    28da:	8f 91       	pop	r24
    28dc:	7f 91       	pop	r23
    28de:	6f 91       	pop	r22
    28e0:	5f 91       	pop	r21
    28e2:	4f 91       	pop	r20
    28e4:	3f 91       	pop	r19
    28e6:	2f 91       	pop	r18
    28e8:	0f 90       	pop	r0
    28ea:	0f be       	out	0x3f, r0	; 63
    28ec:	0f 90       	pop	r0
    28ee:	1f 90       	pop	r1
    28f0:	18 95       	reti

000028f2 <__vector_8>:

void __vector_8()__attribute__((signal));   // TIMER1_CTCB
void __vector_8(){
    28f2:	1f 92       	push	r1
    28f4:	0f 92       	push	r0
    28f6:	0f b6       	in	r0, 0x3f	; 63
    28f8:	0f 92       	push	r0
    28fa:	11 24       	eor	r1, r1
    28fc:	2f 93       	push	r18
    28fe:	3f 93       	push	r19
    2900:	4f 93       	push	r20
    2902:	5f 93       	push	r21
    2904:	6f 93       	push	r22
    2906:	7f 93       	push	r23
    2908:	8f 93       	push	r24
    290a:	9f 93       	push	r25
    290c:	af 93       	push	r26
    290e:	bf 93       	push	r27
    2910:	ef 93       	push	r30
    2912:	ff 93       	push	r31
    2914:	df 93       	push	r29
    2916:	cf 93       	push	r28
    2918:	cd b7       	in	r28, 0x3d	; 61
    291a:	de b7       	in	r29, 0x3e	; 62
	
	static u32 counter=0;
	
	if(counter==TIMER+1){
    291c:	80 91 b6 01 	lds	r24, 0x01B6
    2920:	90 91 b7 01 	lds	r25, 0x01B7
    2924:	a0 91 b8 01 	lds	r26, 0x01B8
    2928:	b0 91 b9 01 	lds	r27, 0x01B9
    292c:	9c 01       	movw	r18, r24
    292e:	ad 01       	movw	r20, r26
    2930:	2f 5f       	subi	r18, 0xFF	; 255
    2932:	3f 4f       	sbci	r19, 0xFF	; 255
    2934:	4f 4f       	sbci	r20, 0xFF	; 255
    2936:	5f 4f       	sbci	r21, 0xFF	; 255
    2938:	80 91 ae 01 	lds	r24, 0x01AE
    293c:	90 91 af 01 	lds	r25, 0x01AF
    2940:	a0 91 b0 01 	lds	r26, 0x01B0
    2944:	b0 91 b1 01 	lds	r27, 0x01B1
    2948:	28 17       	cp	r18, r24
    294a:	39 07       	cpc	r19, r25
    294c:	4a 07       	cpc	r20, r26
    294e:	5b 07       	cpc	r21, r27
    2950:	f1 f4       	brne	.+60     	; 0x298e <__vector_8+0x9c>
		if(TIMER1_CTCB_GPfun!=NULL){
    2952:	80 91 a6 01 	lds	r24, 0x01A6
    2956:	90 91 a7 01 	lds	r25, 0x01A7
    295a:	00 97       	sbiw	r24, 0x00	; 0
    295c:	29 f0       	breq	.+10     	; 0x2968 <__vector_8+0x76>
			TIMER1_CTCB_GPfun();
    295e:	e0 91 a6 01 	lds	r30, 0x01A6
    2962:	f0 91 a7 01 	lds	r31, 0x01A7
    2966:	09 95       	icall
		}
		counter=0;
    2968:	10 92 ae 01 	sts	0x01AE, r1
    296c:	10 92 af 01 	sts	0x01AF, r1
    2970:	10 92 b0 01 	sts	0x01B0, r1
    2974:	10 92 b1 01 	sts	0x01B1, r1
		TIMER1_voidPreLoad(PreLoad);
    2978:	80 91 be 01 	lds	r24, 0x01BE
    297c:	90 91 bf 01 	lds	r25, 0x01BF
    2980:	a0 91 c0 01 	lds	r26, 0x01C0
    2984:	b0 91 c1 01 	lds	r27, 0x01C1
    2988:	0e 94 83 12 	call	0x2506	; 0x2506 <TIMER1_voidPreLoad>
    298c:	13 c0       	rjmp	.+38     	; 0x29b4 <__vector_8+0xc2>
	}
	else{
		counter++;
    298e:	80 91 ae 01 	lds	r24, 0x01AE
    2992:	90 91 af 01 	lds	r25, 0x01AF
    2996:	a0 91 b0 01 	lds	r26, 0x01B0
    299a:	b0 91 b1 01 	lds	r27, 0x01B1
    299e:	01 96       	adiw	r24, 0x01	; 1
    29a0:	a1 1d       	adc	r26, r1
    29a2:	b1 1d       	adc	r27, r1
    29a4:	80 93 ae 01 	sts	0x01AE, r24
    29a8:	90 93 af 01 	sts	0x01AF, r25
    29ac:	a0 93 b0 01 	sts	0x01B0, r26
    29b0:	b0 93 b1 01 	sts	0x01B1, r27
	}
}
    29b4:	cf 91       	pop	r28
    29b6:	df 91       	pop	r29
    29b8:	ff 91       	pop	r31
    29ba:	ef 91       	pop	r30
    29bc:	bf 91       	pop	r27
    29be:	af 91       	pop	r26
    29c0:	9f 91       	pop	r25
    29c2:	8f 91       	pop	r24
    29c4:	7f 91       	pop	r23
    29c6:	6f 91       	pop	r22
    29c8:	5f 91       	pop	r21
    29ca:	4f 91       	pop	r20
    29cc:	3f 91       	pop	r19
    29ce:	2f 91       	pop	r18
    29d0:	0f 90       	pop	r0
    29d2:	0f be       	out	0x3f, r0	; 63
    29d4:	0f 90       	pop	r0
    29d6:	1f 90       	pop	r1
    29d8:	18 95       	reti

000029da <__vector_9>:

void __vector_9()__attribute__((signal));   // TIMER1_NORMAL
void __vector_9(){
    29da:	1f 92       	push	r1
    29dc:	0f 92       	push	r0
    29de:	0f b6       	in	r0, 0x3f	; 63
    29e0:	0f 92       	push	r0
    29e2:	11 24       	eor	r1, r1
    29e4:	2f 93       	push	r18
    29e6:	3f 93       	push	r19
    29e8:	4f 93       	push	r20
    29ea:	5f 93       	push	r21
    29ec:	6f 93       	push	r22
    29ee:	7f 93       	push	r23
    29f0:	8f 93       	push	r24
    29f2:	9f 93       	push	r25
    29f4:	af 93       	push	r26
    29f6:	bf 93       	push	r27
    29f8:	ef 93       	push	r30
    29fa:	ff 93       	push	r31
    29fc:	df 93       	push	r29
    29fe:	cf 93       	push	r28
    2a00:	cd b7       	in	r28, 0x3d	; 61
    2a02:	de b7       	in	r29, 0x3e	; 62
	
	static u32 counter=0;
	
	if(counter==TIMER+1){
    2a04:	80 91 b6 01 	lds	r24, 0x01B6
    2a08:	90 91 b7 01 	lds	r25, 0x01B7
    2a0c:	a0 91 b8 01 	lds	r26, 0x01B8
    2a10:	b0 91 b9 01 	lds	r27, 0x01B9
    2a14:	9c 01       	movw	r18, r24
    2a16:	ad 01       	movw	r20, r26
    2a18:	2f 5f       	subi	r18, 0xFF	; 255
    2a1a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a1c:	4f 4f       	sbci	r20, 0xFF	; 255
    2a1e:	5f 4f       	sbci	r21, 0xFF	; 255
    2a20:	80 91 b2 01 	lds	r24, 0x01B2
    2a24:	90 91 b3 01 	lds	r25, 0x01B3
    2a28:	a0 91 b4 01 	lds	r26, 0x01B4
    2a2c:	b0 91 b5 01 	lds	r27, 0x01B5
    2a30:	28 17       	cp	r18, r24
    2a32:	39 07       	cpc	r19, r25
    2a34:	4a 07       	cpc	r20, r26
    2a36:	5b 07       	cpc	r21, r27
    2a38:	f1 f4       	brne	.+60     	; 0x2a76 <__vector_9+0x9c>
		if(TIMER1_NORMAL_GPfun!=NULL){
    2a3a:	80 91 a2 01 	lds	r24, 0x01A2
    2a3e:	90 91 a3 01 	lds	r25, 0x01A3
    2a42:	00 97       	sbiw	r24, 0x00	; 0
    2a44:	29 f0       	breq	.+10     	; 0x2a50 <__vector_9+0x76>
			TIMER1_NORMAL_GPfun();
    2a46:	e0 91 a2 01 	lds	r30, 0x01A2
    2a4a:	f0 91 a3 01 	lds	r31, 0x01A3
    2a4e:	09 95       	icall
		}
		counter=0;
    2a50:	10 92 b2 01 	sts	0x01B2, r1
    2a54:	10 92 b3 01 	sts	0x01B3, r1
    2a58:	10 92 b4 01 	sts	0x01B4, r1
    2a5c:	10 92 b5 01 	sts	0x01B5, r1
		TIMER1_voidPreLoad(PreLoad);
    2a60:	80 91 be 01 	lds	r24, 0x01BE
    2a64:	90 91 bf 01 	lds	r25, 0x01BF
    2a68:	a0 91 c0 01 	lds	r26, 0x01C0
    2a6c:	b0 91 c1 01 	lds	r27, 0x01C1
    2a70:	0e 94 83 12 	call	0x2506	; 0x2506 <TIMER1_voidPreLoad>
    2a74:	13 c0       	rjmp	.+38     	; 0x2a9c <__vector_9+0xc2>
	}
	else{
		counter++;
    2a76:	80 91 b2 01 	lds	r24, 0x01B2
    2a7a:	90 91 b3 01 	lds	r25, 0x01B3
    2a7e:	a0 91 b4 01 	lds	r26, 0x01B4
    2a82:	b0 91 b5 01 	lds	r27, 0x01B5
    2a86:	01 96       	adiw	r24, 0x01	; 1
    2a88:	a1 1d       	adc	r26, r1
    2a8a:	b1 1d       	adc	r27, r1
    2a8c:	80 93 b2 01 	sts	0x01B2, r24
    2a90:	90 93 b3 01 	sts	0x01B3, r25
    2a94:	a0 93 b4 01 	sts	0x01B4, r26
    2a98:	b0 93 b5 01 	sts	0x01B5, r27
	}
    2a9c:	cf 91       	pop	r28
    2a9e:	df 91       	pop	r29
    2aa0:	ff 91       	pop	r31
    2aa2:	ef 91       	pop	r30
    2aa4:	bf 91       	pop	r27
    2aa6:	af 91       	pop	r26
    2aa8:	9f 91       	pop	r25
    2aaa:	8f 91       	pop	r24
    2aac:	7f 91       	pop	r23
    2aae:	6f 91       	pop	r22
    2ab0:	5f 91       	pop	r21
    2ab2:	4f 91       	pop	r20
    2ab4:	3f 91       	pop	r19
    2ab6:	2f 91       	pop	r18
    2ab8:	0f 90       	pop	r0
    2aba:	0f be       	out	0x3f, r0	; 63
    2abc:	0f 90       	pop	r0
    2abe:	1f 90       	pop	r1
    2ac0:	18 95       	reti

00002ac2 <main>:
#include <avr/interrupt.h>
#include <stdlib.h>
#include "LCD_interface.h"

int main ( )
{
    2ac2:	ef 92       	push	r14
    2ac4:	ff 92       	push	r15
    2ac6:	0f 93       	push	r16
    2ac8:	1f 93       	push	r17
    2aca:	df 93       	push	r29
    2acc:	cf 93       	push	r28
    2ace:	cd b7       	in	r28, 0x3d	; 61
    2ad0:	de b7       	in	r29, 0x3e	; 62
    2ad2:	e5 97       	sbiw	r28, 0x35	; 53
    2ad4:	0f b6       	in	r0, 0x3f	; 63
    2ad6:	f8 94       	cli
    2ad8:	de bf       	out	0x3e, r29	; 62
    2ada:	0f be       	out	0x3f, r0	; 63
    2adc:	cd bf       	out	0x3d, r28	; 61
	unsigned int a,b,c,high,period;
	char frequency[14],duty_cy[7];

	LCD_voidIntialize();
    2ade:	0e 94 9f 0b 	call	0x173e	; 0x173e <LCD_voidIntialize>
	PORTD = 0xFF;			/* Turn ON pull-up resistor */
    2ae2:	e2 e3       	ldi	r30, 0x32	; 50
    2ae4:	f0 e0       	ldi	r31, 0x00	; 0
    2ae6:	8f ef       	ldi	r24, 0xFF	; 255
    2ae8:	80 83       	st	Z, r24

	while(1)
	{
		TCCR1A = 0;
    2aea:	ef e4       	ldi	r30, 0x4F	; 79
    2aec:	f0 e0       	ldi	r31, 0x00	; 0
    2aee:	10 82       	st	Z, r1
		TCNT1=0;
    2af0:	ec e4       	ldi	r30, 0x4C	; 76
    2af2:	f0 e0       	ldi	r31, 0x00	; 0
    2af4:	11 82       	std	Z+1, r1	; 0x01
    2af6:	10 82       	st	Z, r1
		TIFR = (1<<ICF1);  	/* Clear ICF (Input Capture flag) flag */
    2af8:	e8 e5       	ldi	r30, 0x58	; 88
    2afa:	f0 e0       	ldi	r31, 0x00	; 0
    2afc:	80 e2       	ldi	r24, 0x20	; 32
    2afe:	80 83       	st	Z, r24

		TCCR1B = 0x41;  	/* Rising edge, no prescaler */
    2b00:	ee e4       	ldi	r30, 0x4E	; 78
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	81 e4       	ldi	r24, 0x41	; 65
    2b06:	80 83       	st	Z, r24
		while ((TIFR&(1<<ICF1)) == 0);
    2b08:	e8 e5       	ldi	r30, 0x58	; 88
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	80 81       	ld	r24, Z
    2b0e:	88 2f       	mov	r24, r24
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	80 72       	andi	r24, 0x20	; 32
    2b14:	90 70       	andi	r25, 0x00	; 0
    2b16:	00 97       	sbiw	r24, 0x00	; 0
    2b18:	b9 f3       	breq	.-18     	; 0x2b08 <main+0x46>
		a = ICR1;  		/* Take value of capture register */
    2b1a:	e6 e4       	ldi	r30, 0x46	; 70
    2b1c:	f0 e0       	ldi	r31, 0x00	; 0
    2b1e:	80 81       	ld	r24, Z
    2b20:	91 81       	ldd	r25, Z+1	; 0x01
    2b22:	98 a3       	std	Y+32, r25	; 0x20
    2b24:	8f 8f       	std	Y+31, r24	; 0x1f
		TIFR = (1<<ICF1);  	/* Clear ICF flag */
    2b26:	e8 e5       	ldi	r30, 0x58	; 88
    2b28:	f0 e0       	ldi	r31, 0x00	; 0
    2b2a:	80 e2       	ldi	r24, 0x20	; 32
    2b2c:	80 83       	st	Z, r24

		TCCR1B = 0x01;  	/* Falling edge, no prescaler */
    2b2e:	ee e4       	ldi	r30, 0x4E	; 78
    2b30:	f0 e0       	ldi	r31, 0x00	; 0
    2b32:	81 e0       	ldi	r24, 0x01	; 1
    2b34:	80 83       	st	Z, r24
		while ((TIFR&(1<<ICF1)) == 0);
    2b36:	e8 e5       	ldi	r30, 0x58	; 88
    2b38:	f0 e0       	ldi	r31, 0x00	; 0
    2b3a:	80 81       	ld	r24, Z
    2b3c:	88 2f       	mov	r24, r24
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	80 72       	andi	r24, 0x20	; 32
    2b42:	90 70       	andi	r25, 0x00	; 0
    2b44:	00 97       	sbiw	r24, 0x00	; 0
    2b46:	b9 f3       	breq	.-18     	; 0x2b36 <main+0x74>
		b = ICR1;  		/* Take value of capture register */
    2b48:	e6 e4       	ldi	r30, 0x46	; 70
    2b4a:	f0 e0       	ldi	r31, 0x00	; 0
    2b4c:	80 81       	ld	r24, Z
    2b4e:	91 81       	ldd	r25, Z+1	; 0x01
    2b50:	9e 8f       	std	Y+30, r25	; 0x1e
    2b52:	8d 8f       	std	Y+29, r24	; 0x1d
		TIFR = (1<<ICF1);  	/* Clear ICF flag */
    2b54:	e8 e5       	ldi	r30, 0x58	; 88
    2b56:	f0 e0       	ldi	r31, 0x00	; 0
    2b58:	80 e2       	ldi	r24, 0x20	; 32
    2b5a:	80 83       	st	Z, r24

		TCCR1B = 0x41;  	/* Rising edge, no prescaler */
    2b5c:	ee e4       	ldi	r30, 0x4E	; 78
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	81 e4       	ldi	r24, 0x41	; 65
    2b62:	80 83       	st	Z, r24
		while ((TIFR&(1<<ICF1)) == 0);
    2b64:	e8 e5       	ldi	r30, 0x58	; 88
    2b66:	f0 e0       	ldi	r31, 0x00	; 0
    2b68:	80 81       	ld	r24, Z
    2b6a:	88 2f       	mov	r24, r24
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	80 72       	andi	r24, 0x20	; 32
    2b70:	90 70       	andi	r25, 0x00	; 0
    2b72:	00 97       	sbiw	r24, 0x00	; 0
    2b74:	b9 f3       	breq	.-18     	; 0x2b64 <main+0xa2>
		c = ICR1;  		/* Take value of capture register */
    2b76:	e6 e4       	ldi	r30, 0x46	; 70
    2b78:	f0 e0       	ldi	r31, 0x00	; 0
    2b7a:	80 81       	ld	r24, Z
    2b7c:	91 81       	ldd	r25, Z+1	; 0x01
    2b7e:	9c 8f       	std	Y+28, r25	; 0x1c
    2b80:	8b 8f       	std	Y+27, r24	; 0x1b
		TIFR = (1<<ICF1);  	/* Clear ICF flag */
    2b82:	e8 e5       	ldi	r30, 0x58	; 88
    2b84:	f0 e0       	ldi	r31, 0x00	; 0
    2b86:	80 e2       	ldi	r24, 0x20	; 32
    2b88:	80 83       	st	Z, r24

		TCCR1B = 0;  		/* Stop the timer */
    2b8a:	ee e4       	ldi	r30, 0x4E	; 78
    2b8c:	f0 e0       	ldi	r31, 0x00	; 0
    2b8e:	10 82       	st	Z, r1

		if(a<b && b<c)  	/* Check for valid condition,
    2b90:	2f 8d       	ldd	r18, Y+31	; 0x1f
    2b92:	38 a1       	ldd	r19, Y+32	; 0x20
    2b94:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b96:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b98:	28 17       	cp	r18, r24
    2b9a:	39 07       	cpc	r19, r25
    2b9c:	08 f0       	brcs	.+2      	; 0x2ba0 <main+0xde>
    2b9e:	98 c0       	rjmp	.+304    	; 0x2cd0 <main+0x20e>
    2ba0:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2ba2:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2ba4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ba6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ba8:	28 17       	cp	r18, r24
    2baa:	39 07       	cpc	r19, r25
    2bac:	08 f0       	brcs	.+2      	; 0x2bb0 <main+0xee>
    2bae:	90 c0       	rjmp	.+288    	; 0x2cd0 <main+0x20e>
					to avoid timer overflow reading */
		{
			high=b-a;
    2bb0:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2bb2:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2bb4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bb6:	98 a1       	ldd	r25, Y+32	; 0x20
    2bb8:	a9 01       	movw	r20, r18
    2bba:	48 1b       	sub	r20, r24
    2bbc:	59 0b       	sbc	r21, r25
    2bbe:	ca 01       	movw	r24, r20
    2bc0:	9a 8f       	std	Y+26, r25	; 0x1a
    2bc2:	89 8f       	std	Y+25, r24	; 0x19
			period=c-a;
    2bc4:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2bc6:	3c 8d       	ldd	r19, Y+28	; 0x1c
    2bc8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bca:	98 a1       	ldd	r25, Y+32	; 0x20
    2bcc:	a9 01       	movw	r20, r18
    2bce:	48 1b       	sub	r20, r24
    2bd0:	59 0b       	sbc	r21, r25
    2bd2:	ca 01       	movw	r24, r20
    2bd4:	98 8f       	std	Y+24, r25	; 0x18
    2bd6:	8f 8b       	std	Y+23, r24	; 0x17

			long freq= F_CPU/period;/* Calculate frequency */
    2bd8:	8f 89       	ldd	r24, Y+23	; 0x17
    2bda:	98 8d       	ldd	r25, Y+24	; 0x18
    2bdc:	9c 01       	movw	r18, r24
    2bde:	40 e0       	ldi	r20, 0x00	; 0
    2be0:	50 e0       	ldi	r21, 0x00	; 0
    2be2:	80 e0       	ldi	r24, 0x00	; 0
    2be4:	92 e1       	ldi	r25, 0x12	; 18
    2be6:	aa e7       	ldi	r26, 0x7A	; 122
    2be8:	b0 e0       	ldi	r27, 0x00	; 0
    2bea:	bc 01       	movw	r22, r24
    2bec:	cd 01       	movw	r24, r26
    2bee:	0e 94 00 17 	call	0x2e00	; 0x2e00 <__udivmodsi4>
    2bf2:	da 01       	movw	r26, r20
    2bf4:	c9 01       	movw	r24, r18
    2bf6:	8b 8b       	std	Y+19, r24	; 0x13
    2bf8:	9c 8b       	std	Y+20, r25	; 0x14
    2bfa:	ad 8b       	std	Y+21, r26	; 0x15
    2bfc:	be 8b       	std	Y+22, r27	; 0x16

						/* Calculate duty cycle */
            		float duty_cycle =((float) high /(float)period)*100;
    2bfe:	89 8d       	ldd	r24, Y+25	; 0x19
    2c00:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c02:	cc 01       	movw	r24, r24
    2c04:	a0 e0       	ldi	r26, 0x00	; 0
    2c06:	b0 e0       	ldi	r27, 0x00	; 0
    2c08:	bc 01       	movw	r22, r24
    2c0a:	cd 01       	movw	r24, r26
    2c0c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2c10:	7b 01       	movw	r14, r22
    2c12:	8c 01       	movw	r16, r24
    2c14:	8f 89       	ldd	r24, Y+23	; 0x17
    2c16:	98 8d       	ldd	r25, Y+24	; 0x18
    2c18:	cc 01       	movw	r24, r24
    2c1a:	a0 e0       	ldi	r26, 0x00	; 0
    2c1c:	b0 e0       	ldi	r27, 0x00	; 0
    2c1e:	bc 01       	movw	r22, r24
    2c20:	cd 01       	movw	r24, r26
    2c22:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2c26:	9b 01       	movw	r18, r22
    2c28:	ac 01       	movw	r20, r24
    2c2a:	c8 01       	movw	r24, r16
    2c2c:	b7 01       	movw	r22, r14
    2c2e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c32:	dc 01       	movw	r26, r24
    2c34:	cb 01       	movw	r24, r22
    2c36:	bc 01       	movw	r22, r24
    2c38:	cd 01       	movw	r24, r26
    2c3a:	20 e0       	ldi	r18, 0x00	; 0
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	48 ec       	ldi	r20, 0xC8	; 200
    2c40:	52 e4       	ldi	r21, 0x42	; 66
    2c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c46:	dc 01       	movw	r26, r24
    2c48:	cb 01       	movw	r24, r22
    2c4a:	8f 87       	std	Y+15, r24	; 0x0f
    2c4c:	98 8b       	std	Y+16, r25	; 0x10
    2c4e:	a9 8b       	std	Y+17, r26	; 0x11
    2c50:	ba 8b       	std	Y+18, r27	; 0x12
			ltoa(freq,frequency,10);
    2c52:	8b 89       	ldd	r24, Y+19	; 0x13
    2c54:	9c 89       	ldd	r25, Y+20	; 0x14
    2c56:	ad 89       	ldd	r26, Y+21	; 0x15
    2c58:	be 89       	ldd	r27, Y+22	; 0x16
    2c5a:	9e 01       	movw	r18, r28
    2c5c:	2f 5d       	subi	r18, 0xDF	; 223
    2c5e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c60:	bc 01       	movw	r22, r24
    2c62:	cd 01       	movw	r24, r26
    2c64:	a9 01       	movw	r20, r18
    2c66:	2a e0       	ldi	r18, 0x0A	; 10
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <ltoa>

			itoa((int)duty_cycle,duty_cy,10);
    2c6e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2c70:	78 89       	ldd	r23, Y+16	; 0x10
    2c72:	89 89       	ldd	r24, Y+17	; 0x11
    2c74:	9a 89       	ldd	r25, Y+18	; 0x12
    2c76:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	9e 01       	movw	r18, r28
    2c80:	21 5d       	subi	r18, 0xD1	; 209
    2c82:	3f 4f       	sbci	r19, 0xFF	; 255
    2c84:	b9 01       	movw	r22, r18
    2c86:	4a e0       	ldi	r20, 0x0A	; 10
    2c88:	50 e0       	ldi	r21, 0x00	; 0
    2c8a:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <itoa>

			LCD_voidGoToXY(0,0);
    2c8e:	80 e0       	ldi	r24, 0x00	; 0
    2c90:	60 e0       	ldi	r22, 0x00	; 0
    2c92:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <LCD_voidGoToXY>
			LCD_voidWriteString("Freq: ");
    2c96:	80 e6       	ldi	r24, 0x60	; 96
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_voidWriteString>
			LCD_voidWriteString(frequency);
    2c9e:	ce 01       	movw	r24, r28
    2ca0:	81 96       	adiw	r24, 0x21	; 33
    2ca2:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_voidWriteString>
			LCD_voidWriteString(" Hz    ");
    2ca6:	87 e6       	ldi	r24, 0x67	; 103
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_voidWriteString>

			LCD_voidGoToXY(1,0);
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	60 e0       	ldi	r22, 0x00	; 0
    2cb2:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <LCD_voidGoToXY>
			LCD_voidWriteString("Duty: ");
    2cb6:	8f e6       	ldi	r24, 0x6F	; 111
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_voidWriteString>
			LCD_voidWriteString(duty_cy);
    2cbe:	ce 01       	movw	r24, r28
    2cc0:	8f 96       	adiw	r24, 0x2f	; 47
    2cc2:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_voidWriteString>
			LCD_voidWriteString(" %      ");
    2cc6:	86 e7       	ldi	r24, 0x76	; 118
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_voidWriteString>
    2cce:	06 c0       	rjmp	.+12     	; 0x2cdc <main+0x21a>

		}

		else
		{
			LCD_voidClearDisplay();
    2cd0:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <LCD_voidClearDisplay>
			LCD_voidWriteString("OUT OF RANGE!!");
    2cd4:	8f e7       	ldi	r24, 0x7F	; 127
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_voidWriteString>
    2cdc:	80 e0       	ldi	r24, 0x00	; 0
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	a8 e4       	ldi	r26, 0x48	; 72
    2ce2:	b2 e4       	ldi	r27, 0x42	; 66
    2ce4:	8b 87       	std	Y+11, r24	; 0x0b
    2ce6:	9c 87       	std	Y+12, r25	; 0x0c
    2ce8:	ad 87       	std	Y+13, r26	; 0x0d
    2cea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cec:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cee:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cf0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cf2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cf4:	20 e0       	ldi	r18, 0x00	; 0
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	4a ef       	ldi	r20, 0xFA	; 250
    2cfa:	54 e4       	ldi	r21, 0x44	; 68
    2cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d00:	dc 01       	movw	r26, r24
    2d02:	cb 01       	movw	r24, r22
    2d04:	8f 83       	std	Y+7, r24	; 0x07
    2d06:	98 87       	std	Y+8, r25	; 0x08
    2d08:	a9 87       	std	Y+9, r26	; 0x09
    2d0a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d0e:	78 85       	ldd	r23, Y+8	; 0x08
    2d10:	89 85       	ldd	r24, Y+9	; 0x09
    2d12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	40 e8       	ldi	r20, 0x80	; 128
    2d1a:	5f e3       	ldi	r21, 0x3F	; 63
    2d1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d20:	88 23       	and	r24, r24
    2d22:	2c f4       	brge	.+10     	; 0x2d2e <main+0x26c>
		__ticks = 1;
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	9e 83       	std	Y+6, r25	; 0x06
    2d2a:	8d 83       	std	Y+5, r24	; 0x05
    2d2c:	3f c0       	rjmp	.+126    	; 0x2dac <main+0x2ea>
	else if (__tmp > 65535)
    2d2e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d30:	78 85       	ldd	r23, Y+8	; 0x08
    2d32:	89 85       	ldd	r24, Y+9	; 0x09
    2d34:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	3f ef       	ldi	r19, 0xFF	; 255
    2d3a:	4f e7       	ldi	r20, 0x7F	; 127
    2d3c:	57 e4       	ldi	r21, 0x47	; 71
    2d3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d42:	18 16       	cp	r1, r24
    2d44:	4c f5       	brge	.+82     	; 0x2d98 <main+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d46:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d48:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d4e:	20 e0       	ldi	r18, 0x00	; 0
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	40 e2       	ldi	r20, 0x20	; 32
    2d54:	51 e4       	ldi	r21, 0x41	; 65
    2d56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	bc 01       	movw	r22, r24
    2d60:	cd 01       	movw	r24, r26
    2d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d66:	dc 01       	movw	r26, r24
    2d68:	cb 01       	movw	r24, r22
    2d6a:	9e 83       	std	Y+6, r25	; 0x06
    2d6c:	8d 83       	std	Y+5, r24	; 0x05
    2d6e:	0f c0       	rjmp	.+30     	; 0x2d8e <main+0x2cc>
    2d70:	88 ec       	ldi	r24, 0xC8	; 200
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	9c 83       	std	Y+4, r25	; 0x04
    2d76:	8b 83       	std	Y+3, r24	; 0x03
    2d78:	8b 81       	ldd	r24, Y+3	; 0x03
    2d7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d7c:	01 97       	sbiw	r24, 0x01	; 1
    2d7e:	f1 f7       	brne	.-4      	; 0x2d7c <main+0x2ba>
    2d80:	9c 83       	std	Y+4, r25	; 0x04
    2d82:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d84:	8d 81       	ldd	r24, Y+5	; 0x05
    2d86:	9e 81       	ldd	r25, Y+6	; 0x06
    2d88:	01 97       	sbiw	r24, 0x01	; 1
    2d8a:	9e 83       	std	Y+6, r25	; 0x06
    2d8c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d90:	9e 81       	ldd	r25, Y+6	; 0x06
    2d92:	00 97       	sbiw	r24, 0x00	; 0
    2d94:	69 f7       	brne	.-38     	; 0x2d70 <main+0x2ae>
    2d96:	a9 ce       	rjmp	.-686    	; 0x2aea <main+0x28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d98:	6f 81       	ldd	r22, Y+7	; 0x07
    2d9a:	78 85       	ldd	r23, Y+8	; 0x08
    2d9c:	89 85       	ldd	r24, Y+9	; 0x09
    2d9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2da0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da4:	dc 01       	movw	r26, r24
    2da6:	cb 01       	movw	r24, r22
    2da8:	9e 83       	std	Y+6, r25	; 0x06
    2daa:	8d 83       	std	Y+5, r24	; 0x05
    2dac:	8d 81       	ldd	r24, Y+5	; 0x05
    2dae:	9e 81       	ldd	r25, Y+6	; 0x06
    2db0:	9a 83       	std	Y+2, r25	; 0x02
    2db2:	89 83       	std	Y+1, r24	; 0x01
    2db4:	89 81       	ldd	r24, Y+1	; 0x01
    2db6:	9a 81       	ldd	r25, Y+2	; 0x02
    2db8:	01 97       	sbiw	r24, 0x01	; 1
    2dba:	f1 f7       	brne	.-4      	; 0x2db8 <main+0x2f6>
    2dbc:	9a 83       	std	Y+2, r25	; 0x02
    2dbe:	89 83       	std	Y+1, r24	; 0x01
    2dc0:	94 ce       	rjmp	.-728    	; 0x2aea <main+0x28>

00002dc2 <__mulsi3>:
    2dc2:	62 9f       	mul	r22, r18
    2dc4:	d0 01       	movw	r26, r0
    2dc6:	73 9f       	mul	r23, r19
    2dc8:	f0 01       	movw	r30, r0
    2dca:	82 9f       	mul	r24, r18
    2dcc:	e0 0d       	add	r30, r0
    2dce:	f1 1d       	adc	r31, r1
    2dd0:	64 9f       	mul	r22, r20
    2dd2:	e0 0d       	add	r30, r0
    2dd4:	f1 1d       	adc	r31, r1
    2dd6:	92 9f       	mul	r25, r18
    2dd8:	f0 0d       	add	r31, r0
    2dda:	83 9f       	mul	r24, r19
    2ddc:	f0 0d       	add	r31, r0
    2dde:	74 9f       	mul	r23, r20
    2de0:	f0 0d       	add	r31, r0
    2de2:	65 9f       	mul	r22, r21
    2de4:	f0 0d       	add	r31, r0
    2de6:	99 27       	eor	r25, r25
    2de8:	72 9f       	mul	r23, r18
    2dea:	b0 0d       	add	r27, r0
    2dec:	e1 1d       	adc	r30, r1
    2dee:	f9 1f       	adc	r31, r25
    2df0:	63 9f       	mul	r22, r19
    2df2:	b0 0d       	add	r27, r0
    2df4:	e1 1d       	adc	r30, r1
    2df6:	f9 1f       	adc	r31, r25
    2df8:	bd 01       	movw	r22, r26
    2dfa:	cf 01       	movw	r24, r30
    2dfc:	11 24       	eor	r1, r1
    2dfe:	08 95       	ret

00002e00 <__udivmodsi4>:
    2e00:	a1 e2       	ldi	r26, 0x21	; 33
    2e02:	1a 2e       	mov	r1, r26
    2e04:	aa 1b       	sub	r26, r26
    2e06:	bb 1b       	sub	r27, r27
    2e08:	fd 01       	movw	r30, r26
    2e0a:	0d c0       	rjmp	.+26     	; 0x2e26 <__udivmodsi4_ep>

00002e0c <__udivmodsi4_loop>:
    2e0c:	aa 1f       	adc	r26, r26
    2e0e:	bb 1f       	adc	r27, r27
    2e10:	ee 1f       	adc	r30, r30
    2e12:	ff 1f       	adc	r31, r31
    2e14:	a2 17       	cp	r26, r18
    2e16:	b3 07       	cpc	r27, r19
    2e18:	e4 07       	cpc	r30, r20
    2e1a:	f5 07       	cpc	r31, r21
    2e1c:	20 f0       	brcs	.+8      	; 0x2e26 <__udivmodsi4_ep>
    2e1e:	a2 1b       	sub	r26, r18
    2e20:	b3 0b       	sbc	r27, r19
    2e22:	e4 0b       	sbc	r30, r20
    2e24:	f5 0b       	sbc	r31, r21

00002e26 <__udivmodsi4_ep>:
    2e26:	66 1f       	adc	r22, r22
    2e28:	77 1f       	adc	r23, r23
    2e2a:	88 1f       	adc	r24, r24
    2e2c:	99 1f       	adc	r25, r25
    2e2e:	1a 94       	dec	r1
    2e30:	69 f7       	brne	.-38     	; 0x2e0c <__udivmodsi4_loop>
    2e32:	60 95       	com	r22
    2e34:	70 95       	com	r23
    2e36:	80 95       	com	r24
    2e38:	90 95       	com	r25
    2e3a:	9b 01       	movw	r18, r22
    2e3c:	ac 01       	movw	r20, r24
    2e3e:	bd 01       	movw	r22, r26
    2e40:	cf 01       	movw	r24, r30
    2e42:	08 95       	ret

00002e44 <__prologue_saves__>:
    2e44:	2f 92       	push	r2
    2e46:	3f 92       	push	r3
    2e48:	4f 92       	push	r4
    2e4a:	5f 92       	push	r5
    2e4c:	6f 92       	push	r6
    2e4e:	7f 92       	push	r7
    2e50:	8f 92       	push	r8
    2e52:	9f 92       	push	r9
    2e54:	af 92       	push	r10
    2e56:	bf 92       	push	r11
    2e58:	cf 92       	push	r12
    2e5a:	df 92       	push	r13
    2e5c:	ef 92       	push	r14
    2e5e:	ff 92       	push	r15
    2e60:	0f 93       	push	r16
    2e62:	1f 93       	push	r17
    2e64:	cf 93       	push	r28
    2e66:	df 93       	push	r29
    2e68:	cd b7       	in	r28, 0x3d	; 61
    2e6a:	de b7       	in	r29, 0x3e	; 62
    2e6c:	ca 1b       	sub	r28, r26
    2e6e:	db 0b       	sbc	r29, r27
    2e70:	0f b6       	in	r0, 0x3f	; 63
    2e72:	f8 94       	cli
    2e74:	de bf       	out	0x3e, r29	; 62
    2e76:	0f be       	out	0x3f, r0	; 63
    2e78:	cd bf       	out	0x3d, r28	; 61
    2e7a:	09 94       	ijmp

00002e7c <__epilogue_restores__>:
    2e7c:	2a 88       	ldd	r2, Y+18	; 0x12
    2e7e:	39 88       	ldd	r3, Y+17	; 0x11
    2e80:	48 88       	ldd	r4, Y+16	; 0x10
    2e82:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e84:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e86:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e88:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e8a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e8c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e8e:	b9 84       	ldd	r11, Y+9	; 0x09
    2e90:	c8 84       	ldd	r12, Y+8	; 0x08
    2e92:	df 80       	ldd	r13, Y+7	; 0x07
    2e94:	ee 80       	ldd	r14, Y+6	; 0x06
    2e96:	fd 80       	ldd	r15, Y+5	; 0x05
    2e98:	0c 81       	ldd	r16, Y+4	; 0x04
    2e9a:	1b 81       	ldd	r17, Y+3	; 0x03
    2e9c:	aa 81       	ldd	r26, Y+2	; 0x02
    2e9e:	b9 81       	ldd	r27, Y+1	; 0x01
    2ea0:	ce 0f       	add	r28, r30
    2ea2:	d1 1d       	adc	r29, r1
    2ea4:	0f b6       	in	r0, 0x3f	; 63
    2ea6:	f8 94       	cli
    2ea8:	de bf       	out	0x3e, r29	; 62
    2eaa:	0f be       	out	0x3f, r0	; 63
    2eac:	cd bf       	out	0x3d, r28	; 61
    2eae:	ed 01       	movw	r28, r26
    2eb0:	08 95       	ret

00002eb2 <itoa>:
    2eb2:	fb 01       	movw	r30, r22
    2eb4:	9f 01       	movw	r18, r30
    2eb6:	e8 94       	clt
    2eb8:	42 30       	cpi	r20, 0x02	; 2
    2eba:	c4 f0       	brlt	.+48     	; 0x2eec <itoa+0x3a>
    2ebc:	45 32       	cpi	r20, 0x25	; 37
    2ebe:	b4 f4       	brge	.+44     	; 0x2eec <itoa+0x3a>
    2ec0:	4a 30       	cpi	r20, 0x0A	; 10
    2ec2:	29 f4       	brne	.+10     	; 0x2ece <itoa+0x1c>
    2ec4:	97 fb       	bst	r25, 7
    2ec6:	1e f4       	brtc	.+6      	; 0x2ece <itoa+0x1c>
    2ec8:	90 95       	com	r25
    2eca:	81 95       	neg	r24
    2ecc:	9f 4f       	sbci	r25, 0xFF	; 255
    2ece:	64 2f       	mov	r22, r20
    2ed0:	77 27       	eor	r23, r23
    2ed2:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <__udivmodhi4>
    2ed6:	80 5d       	subi	r24, 0xD0	; 208
    2ed8:	8a 33       	cpi	r24, 0x3A	; 58
    2eda:	0c f0       	brlt	.+2      	; 0x2ede <itoa+0x2c>
    2edc:	89 5d       	subi	r24, 0xD9	; 217
    2ede:	81 93       	st	Z+, r24
    2ee0:	cb 01       	movw	r24, r22
    2ee2:	00 97       	sbiw	r24, 0x00	; 0
    2ee4:	a1 f7       	brne	.-24     	; 0x2ece <itoa+0x1c>
    2ee6:	16 f4       	brtc	.+4      	; 0x2eec <itoa+0x3a>
    2ee8:	5d e2       	ldi	r21, 0x2D	; 45
    2eea:	51 93       	st	Z+, r21
    2eec:	10 82       	st	Z, r1
    2eee:	c9 01       	movw	r24, r18
    2ef0:	0c 94 ae 17 	jmp	0x2f5c	; 0x2f5c <strrev>

00002ef4 <ltoa>:
    2ef4:	fa 01       	movw	r30, r20
    2ef6:	cf 93       	push	r28
    2ef8:	ff 93       	push	r31
    2efa:	ef 93       	push	r30
    2efc:	22 30       	cpi	r18, 0x02	; 2
    2efe:	44 f1       	brlt	.+80     	; 0x2f50 <ltoa+0x5c>
    2f00:	25 32       	cpi	r18, 0x25	; 37
    2f02:	34 f5       	brge	.+76     	; 0x2f50 <ltoa+0x5c>
    2f04:	c2 2f       	mov	r28, r18
    2f06:	e8 94       	clt
    2f08:	ca 30       	cpi	r28, 0x0A	; 10
    2f0a:	49 f4       	brne	.+18     	; 0x2f1e <ltoa+0x2a>
    2f0c:	97 fb       	bst	r25, 7
    2f0e:	3e f4       	brtc	.+14     	; 0x2f1e <ltoa+0x2a>
    2f10:	90 95       	com	r25
    2f12:	80 95       	com	r24
    2f14:	70 95       	com	r23
    2f16:	61 95       	neg	r22
    2f18:	7f 4f       	sbci	r23, 0xFF	; 255
    2f1a:	8f 4f       	sbci	r24, 0xFF	; 255
    2f1c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f1e:	2c 2f       	mov	r18, r28
    2f20:	33 27       	eor	r19, r19
    2f22:	44 27       	eor	r20, r20
    2f24:	55 27       	eor	r21, r21
    2f26:	ff 93       	push	r31
    2f28:	ef 93       	push	r30
    2f2a:	0e 94 00 17 	call	0x2e00	; 0x2e00 <__udivmodsi4>
    2f2e:	ef 91       	pop	r30
    2f30:	ff 91       	pop	r31
    2f32:	60 5d       	subi	r22, 0xD0	; 208
    2f34:	6a 33       	cpi	r22, 0x3A	; 58
    2f36:	0c f0       	brlt	.+2      	; 0x2f3a <ltoa+0x46>
    2f38:	69 5d       	subi	r22, 0xD9	; 217
    2f3a:	61 93       	st	Z+, r22
    2f3c:	b9 01       	movw	r22, r18
    2f3e:	ca 01       	movw	r24, r20
    2f40:	60 50       	subi	r22, 0x00	; 0
    2f42:	70 40       	sbci	r23, 0x00	; 0
    2f44:	80 40       	sbci	r24, 0x00	; 0
    2f46:	90 40       	sbci	r25, 0x00	; 0
    2f48:	51 f7       	brne	.-44     	; 0x2f1e <ltoa+0x2a>
    2f4a:	16 f4       	brtc	.+4      	; 0x2f50 <ltoa+0x5c>
    2f4c:	cd e2       	ldi	r28, 0x2D	; 45
    2f4e:	c1 93       	st	Z+, r28
    2f50:	10 82       	st	Z, r1
    2f52:	8f 91       	pop	r24
    2f54:	9f 91       	pop	r25
    2f56:	cf 91       	pop	r28
    2f58:	0c 94 ae 17 	jmp	0x2f5c	; 0x2f5c <strrev>

00002f5c <strrev>:
    2f5c:	dc 01       	movw	r26, r24
    2f5e:	fc 01       	movw	r30, r24
    2f60:	67 2f       	mov	r22, r23
    2f62:	71 91       	ld	r23, Z+
    2f64:	77 23       	and	r23, r23
    2f66:	e1 f7       	brne	.-8      	; 0x2f60 <strrev+0x4>
    2f68:	32 97       	sbiw	r30, 0x02	; 2
    2f6a:	04 c0       	rjmp	.+8      	; 0x2f74 <strrev+0x18>
    2f6c:	7c 91       	ld	r23, X
    2f6e:	6d 93       	st	X+, r22
    2f70:	70 83       	st	Z, r23
    2f72:	62 91       	ld	r22, -Z
    2f74:	ae 17       	cp	r26, r30
    2f76:	bf 07       	cpc	r27, r31
    2f78:	c8 f3       	brcs	.-14     	; 0x2f6c <strrev+0x10>
    2f7a:	08 95       	ret

00002f7c <__udivmodhi4>:
    2f7c:	aa 1b       	sub	r26, r26
    2f7e:	bb 1b       	sub	r27, r27
    2f80:	51 e1       	ldi	r21, 0x11	; 17
    2f82:	07 c0       	rjmp	.+14     	; 0x2f92 <__udivmodhi4_ep>

00002f84 <__udivmodhi4_loop>:
    2f84:	aa 1f       	adc	r26, r26
    2f86:	bb 1f       	adc	r27, r27
    2f88:	a6 17       	cp	r26, r22
    2f8a:	b7 07       	cpc	r27, r23
    2f8c:	10 f0       	brcs	.+4      	; 0x2f92 <__udivmodhi4_ep>
    2f8e:	a6 1b       	sub	r26, r22
    2f90:	b7 0b       	sbc	r27, r23

00002f92 <__udivmodhi4_ep>:
    2f92:	88 1f       	adc	r24, r24
    2f94:	99 1f       	adc	r25, r25
    2f96:	5a 95       	dec	r21
    2f98:	a9 f7       	brne	.-22     	; 0x2f84 <__udivmodhi4_loop>
    2f9a:	80 95       	com	r24
    2f9c:	90 95       	com	r25
    2f9e:	bc 01       	movw	r22, r24
    2fa0:	cd 01       	movw	r24, r26
    2fa2:	08 95       	ret

00002fa4 <_exit>:
    2fa4:	f8 94       	cli

00002fa6 <__stop_program>:
    2fa6:	ff cf       	rjmp	.-2      	; 0x2fa6 <__stop_program>
