
test2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00002b58  00002bec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000033  00800168  00800168  00002cf4  2**0
                  ALLOC
  3 .stab         00001f20  00000000  00000000  00002cf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b57  00000000  00000000  00004c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000576b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b6  00000000  00000000  000058cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f0d  00000000  00000000  00005a81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010d2  00000000  00000000  0000798e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001030  00000000  00000000  00008a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009a90  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002e6  00000000  00000000  00009c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008f6  00000000  00000000  00009ef6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a7ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 12 0e 	jmp	0x1c24	; 0x1c24 <__vector_1>
       8:	0c 94 45 0e 	jmp	0x1c8a	; 0x1c8a <__vector_2>
       c:	0c 94 78 0e 	jmp	0x1cf0	; 0x1cf0 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__vector_6>
      1c:	0c 94 72 13 	jmp	0x26e4	; 0x26e4 <__vector_7>
      20:	0c 94 e6 13 	jmp	0x27cc	; 0x27cc <__vector_8>
      24:	0c 94 5a 14 	jmp	0x28b4	; 0x28b4 <__vector_9>
      28:	0c 94 47 10 	jmp	0x208e	; 0x208e <__vector_10>
      2c:	0c 94 bb 10 	jmp	0x2176	; 0x2176 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ab 39       	cpi	r26, 0x9B	; 155
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e8 e5       	ldi	r30, 0x58	; 88
      78:	fb e2       	ldi	r31, 0x2B	; 43
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <main>
      8a:	0c 94 aa 15 	jmp	0x2b54	; 0x2b54 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 73 15 	jmp	0x2ae6	; 0x2ae6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8f 15 	jmp	0x2b1e	; 0x2b1e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7f 15 	jmp	0x2afe	; 0x2afe <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9b 15 	jmp	0x2b36	; 0x2b36 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7f 15 	jmp	0x2afe	; 0x2afe <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9b 15 	jmp	0x2b36	; 0x2b36 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 73 15 	jmp	0x2ae6	; 0x2ae6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8f 15 	jmp	0x2b1e	; 0x2b1e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7b 15 	jmp	0x2af6	; 0x2af6 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 97 15 	jmp	0x2b2e	; 0x2b2e <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 7f 15 	jmp	0x2afe	; 0x2afe <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 9b 15 	jmp	0x2b36	; 0x2b36 <__epilogue_restores__+0x18>

000007ea <__fixsfsi>:
     7ea:	ac e0       	ldi	r26, 0x0C	; 12
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 83 15 	jmp	0x2b06	; 0x2b06 <__prologue_saves__+0x20>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	be 01       	movw	r22, r28
     804:	6b 5f       	subi	r22, 0xFB	; 251
     806:	7f 4f       	sbci	r23, 0xFF	; 255
     808:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     80c:	8d 81       	ldd	r24, Y+5	; 0x05
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	61 f1       	breq	.+88     	; 0x86a <__stack+0xb>
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	50 f1       	brcs	.+84     	; 0x86a <__stack+0xb>
     816:	84 30       	cpi	r24, 0x04	; 4
     818:	21 f4       	brne	.+8      	; 0x822 <__fixsfsi+0x38>
     81a:	8e 81       	ldd	r24, Y+6	; 0x06
     81c:	88 23       	and	r24, r24
     81e:	51 f1       	breq	.+84     	; 0x874 <__stack+0x15>
     820:	2e c0       	rjmp	.+92     	; 0x87e <__stack+0x1f>
     822:	2f 81       	ldd	r18, Y+7	; 0x07
     824:	38 85       	ldd	r19, Y+8	; 0x08
     826:	37 fd       	sbrc	r19, 7
     828:	20 c0       	rjmp	.+64     	; 0x86a <__stack+0xb>
     82a:	6e 81       	ldd	r22, Y+6	; 0x06
     82c:	2f 31       	cpi	r18, 0x1F	; 31
     82e:	31 05       	cpc	r19, r1
     830:	1c f0       	brlt	.+6      	; 0x838 <__fixsfsi+0x4e>
     832:	66 23       	and	r22, r22
     834:	f9 f0       	breq	.+62     	; 0x874 <__stack+0x15>
     836:	23 c0       	rjmp	.+70     	; 0x87e <__stack+0x1f>
     838:	8e e1       	ldi	r24, 0x1E	; 30
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	82 1b       	sub	r24, r18
     83e:	93 0b       	sbc	r25, r19
     840:	29 85       	ldd	r18, Y+9	; 0x09
     842:	3a 85       	ldd	r19, Y+10	; 0x0a
     844:	4b 85       	ldd	r20, Y+11	; 0x0b
     846:	5c 85       	ldd	r21, Y+12	; 0x0c
     848:	04 c0       	rjmp	.+8      	; 0x852 <__fixsfsi+0x68>
     84a:	56 95       	lsr	r21
     84c:	47 95       	ror	r20
     84e:	37 95       	ror	r19
     850:	27 95       	ror	r18
     852:	8a 95       	dec	r24
     854:	d2 f7       	brpl	.-12     	; 0x84a <__fixsfsi+0x60>
     856:	66 23       	and	r22, r22
     858:	b1 f0       	breq	.+44     	; 0x886 <__stack+0x27>
     85a:	50 95       	com	r21
     85c:	40 95       	com	r20
     85e:	30 95       	com	r19
     860:	21 95       	neg	r18
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	4f 4f       	sbci	r20, 0xFF	; 255
     866:	5f 4f       	sbci	r21, 0xFF	; 255
     868:	0e c0       	rjmp	.+28     	; 0x886 <__stack+0x27>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	09 c0       	rjmp	.+18     	; 0x886 <__stack+0x27>
     874:	2f ef       	ldi	r18, 0xFF	; 255
     876:	3f ef       	ldi	r19, 0xFF	; 255
     878:	4f ef       	ldi	r20, 0xFF	; 255
     87a:	5f e7       	ldi	r21, 0x7F	; 127
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e8       	ldi	r21, 0x80	; 128
     886:	b9 01       	movw	r22, r18
     888:	ca 01       	movw	r24, r20
     88a:	2c 96       	adiw	r28, 0x0c	; 12
     88c:	e2 e0       	ldi	r30, 0x02	; 2
     88e:	0c 94 9f 15 	jmp	0x2b3e	; 0x2b3e <__epilogue_restores__+0x20>

00000892 <__floatunsisf>:
     892:	a8 e0       	ldi	r26, 0x08	; 8
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	ef e4       	ldi	r30, 0x4F	; 79
     898:	f4 e0       	ldi	r31, 0x04	; 4
     89a:	0c 94 7b 15 	jmp	0x2af6	; 0x2af6 <__prologue_saves__+0x10>
     89e:	7b 01       	movw	r14, r22
     8a0:	8c 01       	movw	r16, r24
     8a2:	61 15       	cp	r22, r1
     8a4:	71 05       	cpc	r23, r1
     8a6:	81 05       	cpc	r24, r1
     8a8:	91 05       	cpc	r25, r1
     8aa:	19 f4       	brne	.+6      	; 0x8b2 <__floatunsisf+0x20>
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	89 83       	std	Y+1, r24	; 0x01
     8b0:	60 c0       	rjmp	.+192    	; 0x972 <__floatunsisf+0xe0>
     8b2:	83 e0       	ldi	r24, 0x03	; 3
     8b4:	89 83       	std	Y+1, r24	; 0x01
     8b6:	8e e1       	ldi	r24, 0x1E	; 30
     8b8:	c8 2e       	mov	r12, r24
     8ba:	d1 2c       	mov	r13, r1
     8bc:	dc 82       	std	Y+4, r13	; 0x04
     8be:	cb 82       	std	Y+3, r12	; 0x03
     8c0:	ed 82       	std	Y+5, r14	; 0x05
     8c2:	fe 82       	std	Y+6, r15	; 0x06
     8c4:	0f 83       	std	Y+7, r16	; 0x07
     8c6:	18 87       	std	Y+8, r17	; 0x08
     8c8:	c8 01       	movw	r24, r16
     8ca:	b7 01       	movw	r22, r14
     8cc:	0e 94 c2 04 	call	0x984	; 0x984 <__clzsi2>
     8d0:	fc 01       	movw	r30, r24
     8d2:	31 97       	sbiw	r30, 0x01	; 1
     8d4:	f7 ff       	sbrs	r31, 7
     8d6:	3b c0       	rjmp	.+118    	; 0x94e <__floatunsisf+0xbc>
     8d8:	22 27       	eor	r18, r18
     8da:	33 27       	eor	r19, r19
     8dc:	2e 1b       	sub	r18, r30
     8de:	3f 0b       	sbc	r19, r31
     8e0:	57 01       	movw	r10, r14
     8e2:	68 01       	movw	r12, r16
     8e4:	02 2e       	mov	r0, r18
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__floatunsisf+0x5e>
     8e8:	d6 94       	lsr	r13
     8ea:	c7 94       	ror	r12
     8ec:	b7 94       	ror	r11
     8ee:	a7 94       	ror	r10
     8f0:	0a 94       	dec	r0
     8f2:	d2 f7       	brpl	.-12     	; 0x8e8 <__floatunsisf+0x56>
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	a0 e0       	ldi	r26, 0x00	; 0
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	04 c0       	rjmp	.+8      	; 0x90e <__floatunsisf+0x7c>
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	aa 1f       	adc	r26, r26
     90c:	bb 1f       	adc	r27, r27
     90e:	2a 95       	dec	r18
     910:	d2 f7       	brpl	.-12     	; 0x906 <__floatunsisf+0x74>
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	a1 09       	sbc	r26, r1
     916:	b1 09       	sbc	r27, r1
     918:	8e 21       	and	r24, r14
     91a:	9f 21       	and	r25, r15
     91c:	a0 23       	and	r26, r16
     91e:	b1 23       	and	r27, r17
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	a1 05       	cpc	r26, r1
     924:	b1 05       	cpc	r27, r1
     926:	21 f0       	breq	.+8      	; 0x930 <__floatunsisf+0x9e>
     928:	41 e0       	ldi	r20, 0x01	; 1
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	4a 29       	or	r20, r10
     932:	5b 29       	or	r21, r11
     934:	6c 29       	or	r22, r12
     936:	7d 29       	or	r23, r13
     938:	4d 83       	std	Y+5, r20	; 0x05
     93a:	5e 83       	std	Y+6, r21	; 0x06
     93c:	6f 83       	std	Y+7, r22	; 0x07
     93e:	78 87       	std	Y+8, r23	; 0x08
     940:	8e e1       	ldi	r24, 0x1E	; 30
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	8e 1b       	sub	r24, r30
     946:	9f 0b       	sbc	r25, r31
     948:	9c 83       	std	Y+4, r25	; 0x04
     94a:	8b 83       	std	Y+3, r24	; 0x03
     94c:	12 c0       	rjmp	.+36     	; 0x972 <__floatunsisf+0xe0>
     94e:	30 97       	sbiw	r30, 0x00	; 0
     950:	81 f0       	breq	.+32     	; 0x972 <__floatunsisf+0xe0>
     952:	0e 2e       	mov	r0, r30
     954:	04 c0       	rjmp	.+8      	; 0x95e <__floatunsisf+0xcc>
     956:	ee 0c       	add	r14, r14
     958:	ff 1c       	adc	r15, r15
     95a:	00 1f       	adc	r16, r16
     95c:	11 1f       	adc	r17, r17
     95e:	0a 94       	dec	r0
     960:	d2 f7       	brpl	.-12     	; 0x956 <__floatunsisf+0xc4>
     962:	ed 82       	std	Y+5, r14	; 0x05
     964:	fe 82       	std	Y+6, r15	; 0x06
     966:	0f 83       	std	Y+7, r16	; 0x07
     968:	18 87       	std	Y+8, r17	; 0x08
     96a:	ce 1a       	sub	r12, r30
     96c:	df 0a       	sbc	r13, r31
     96e:	dc 82       	std	Y+4, r13	; 0x04
     970:	cb 82       	std	Y+3, r12	; 0x03
     972:	1a 82       	std	Y+2, r1	; 0x02
     974:	ce 01       	movw	r24, r28
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     97c:	28 96       	adiw	r28, 0x08	; 8
     97e:	ea e0       	ldi	r30, 0x0A	; 10
     980:	0c 94 97 15 	jmp	0x2b2e	; 0x2b2e <__epilogue_restores__+0x10>

00000984 <__clzsi2>:
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	7b 01       	movw	r14, r22
     98e:	8c 01       	movw	r16, r24
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	e8 16       	cp	r14, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	f8 06       	cpc	r15, r24
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	08 07       	cpc	r16, r24
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	18 07       	cpc	r17, r24
     9a0:	88 f4       	brcc	.+34     	; 0x9c4 <__clzsi2+0x40>
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	e8 16       	cp	r14, r24
     9a6:	f1 04       	cpc	r15, r1
     9a8:	01 05       	cpc	r16, r1
     9aa:	11 05       	cpc	r17, r1
     9ac:	31 f0       	breq	.+12     	; 0x9ba <__clzsi2+0x36>
     9ae:	28 f0       	brcs	.+10     	; 0x9ba <__clzsi2+0x36>
     9b0:	88 e0       	ldi	r24, 0x08	; 8
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a0 e0       	ldi	r26, 0x00	; 0
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	17 c0       	rjmp	.+46     	; 0x9e8 <__clzsi2+0x64>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	a0 e0       	ldi	r26, 0x00	; 0
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	12 c0       	rjmp	.+36     	; 0x9e8 <__clzsi2+0x64>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	e8 16       	cp	r14, r24
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	f8 06       	cpc	r15, r24
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	08 07       	cpc	r16, r24
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	18 07       	cpc	r17, r24
     9d4:	28 f0       	brcs	.+10     	; 0x9e0 <__clzsi2+0x5c>
     9d6:	88 e1       	ldi	r24, 0x18	; 24
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	a0 e0       	ldi	r26, 0x00	; 0
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__clzsi2+0x64>
     9e0:	80 e1       	ldi	r24, 0x10	; 16
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a0 e0       	ldi	r26, 0x00	; 0
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	20 e2       	ldi	r18, 0x20	; 32
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	28 1b       	sub	r18, r24
     9f2:	39 0b       	sbc	r19, r25
     9f4:	4a 0b       	sbc	r20, r26
     9f6:	5b 0b       	sbc	r21, r27
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__clzsi2+0x7e>
     9fa:	16 95       	lsr	r17
     9fc:	07 95       	ror	r16
     9fe:	f7 94       	ror	r15
     a00:	e7 94       	ror	r14
     a02:	8a 95       	dec	r24
     a04:	d2 f7       	brpl	.-12     	; 0x9fa <__clzsi2+0x76>
     a06:	f7 01       	movw	r30, r14
     a08:	e8 59       	subi	r30, 0x98	; 152
     a0a:	ff 4f       	sbci	r31, 0xFF	; 255
     a0c:	80 81       	ld	r24, Z
     a0e:	28 1b       	sub	r18, r24
     a10:	31 09       	sbc	r19, r1
     a12:	41 09       	sbc	r20, r1
     a14:	51 09       	sbc	r21, r1
     a16:	c9 01       	movw	r24, r18
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	08 95       	ret

00000a22 <__pack_f>:
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	fc 01       	movw	r30, r24
     a2e:	e4 80       	ldd	r14, Z+4	; 0x04
     a30:	f5 80       	ldd	r15, Z+5	; 0x05
     a32:	06 81       	ldd	r16, Z+6	; 0x06
     a34:	17 81       	ldd	r17, Z+7	; 0x07
     a36:	d1 80       	ldd	r13, Z+1	; 0x01
     a38:	80 81       	ld	r24, Z
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	48 f4       	brcc	.+18     	; 0xa50 <__pack_f+0x2e>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e1       	ldi	r26, 0x10	; 16
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e8 2a       	or	r14, r24
     a48:	f9 2a       	or	r15, r25
     a4a:	0a 2b       	or	r16, r26
     a4c:	1b 2b       	or	r17, r27
     a4e:	a5 c0       	rjmp	.+330    	; 0xb9a <__pack_f+0x178>
     a50:	84 30       	cpi	r24, 0x04	; 4
     a52:	09 f4       	brne	.+2      	; 0xa56 <__pack_f+0x34>
     a54:	9f c0       	rjmp	.+318    	; 0xb94 <__pack_f+0x172>
     a56:	82 30       	cpi	r24, 0x02	; 2
     a58:	21 f4       	brne	.+8      	; 0xa62 <__pack_f+0x40>
     a5a:	ee 24       	eor	r14, r14
     a5c:	ff 24       	eor	r15, r15
     a5e:	87 01       	movw	r16, r14
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <__pack_f+0x4a>
     a62:	e1 14       	cp	r14, r1
     a64:	f1 04       	cpc	r15, r1
     a66:	01 05       	cpc	r16, r1
     a68:	11 05       	cpc	r17, r1
     a6a:	19 f4       	brne	.+6      	; 0xa72 <__pack_f+0x50>
     a6c:	e0 e0       	ldi	r30, 0x00	; 0
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	96 c0       	rjmp	.+300    	; 0xb9e <__pack_f+0x17c>
     a72:	62 81       	ldd	r22, Z+2	; 0x02
     a74:	73 81       	ldd	r23, Z+3	; 0x03
     a76:	9f ef       	ldi	r25, 0xFF	; 255
     a78:	62 38       	cpi	r22, 0x82	; 130
     a7a:	79 07       	cpc	r23, r25
     a7c:	0c f0       	brlt	.+2      	; 0xa80 <__pack_f+0x5e>
     a7e:	5b c0       	rjmp	.+182    	; 0xb36 <__pack_f+0x114>
     a80:	22 e8       	ldi	r18, 0x82	; 130
     a82:	3f ef       	ldi	r19, 0xFF	; 255
     a84:	26 1b       	sub	r18, r22
     a86:	37 0b       	sbc	r19, r23
     a88:	2a 31       	cpi	r18, 0x1A	; 26
     a8a:	31 05       	cpc	r19, r1
     a8c:	2c f0       	brlt	.+10     	; 0xa98 <__pack_f+0x76>
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	2a c0       	rjmp	.+84     	; 0xaec <__pack_f+0xca>
     a98:	b8 01       	movw	r22, r16
     a9a:	a7 01       	movw	r20, r14
     a9c:	02 2e       	mov	r0, r18
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__pack_f+0x86>
     aa0:	76 95       	lsr	r23
     aa2:	67 95       	ror	r22
     aa4:	57 95       	ror	r21
     aa6:	47 95       	ror	r20
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__pack_f+0x7e>
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__pack_f+0x9c>
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	aa 1f       	adc	r26, r26
     abc:	bb 1f       	adc	r27, r27
     abe:	2a 95       	dec	r18
     ac0:	d2 f7       	brpl	.-12     	; 0xab6 <__pack_f+0x94>
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	a1 09       	sbc	r26, r1
     ac6:	b1 09       	sbc	r27, r1
     ac8:	8e 21       	and	r24, r14
     aca:	9f 21       	and	r25, r15
     acc:	a0 23       	and	r26, r16
     ace:	b1 23       	and	r27, r17
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	a1 05       	cpc	r26, r1
     ad4:	b1 05       	cpc	r27, r1
     ad6:	21 f0       	breq	.+8      	; 0xae0 <__pack_f+0xbe>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	9a 01       	movw	r18, r20
     ae2:	ab 01       	movw	r20, r22
     ae4:	28 2b       	or	r18, r24
     ae6:	39 2b       	or	r19, r25
     ae8:	4a 2b       	or	r20, r26
     aea:	5b 2b       	or	r21, r27
     aec:	da 01       	movw	r26, r20
     aee:	c9 01       	movw	r24, r18
     af0:	8f 77       	andi	r24, 0x7F	; 127
     af2:	90 70       	andi	r25, 0x00	; 0
     af4:	a0 70       	andi	r26, 0x00	; 0
     af6:	b0 70       	andi	r27, 0x00	; 0
     af8:	80 34       	cpi	r24, 0x40	; 64
     afa:	91 05       	cpc	r25, r1
     afc:	a1 05       	cpc	r26, r1
     afe:	b1 05       	cpc	r27, r1
     b00:	39 f4       	brne	.+14     	; 0xb10 <__pack_f+0xee>
     b02:	27 ff       	sbrs	r18, 7
     b04:	09 c0       	rjmp	.+18     	; 0xb18 <__pack_f+0xf6>
     b06:	20 5c       	subi	r18, 0xC0	; 192
     b08:	3f 4f       	sbci	r19, 0xFF	; 255
     b0a:	4f 4f       	sbci	r20, 0xFF	; 255
     b0c:	5f 4f       	sbci	r21, 0xFF	; 255
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__pack_f+0xf6>
     b10:	21 5c       	subi	r18, 0xC1	; 193
     b12:	3f 4f       	sbci	r19, 0xFF	; 255
     b14:	4f 4f       	sbci	r20, 0xFF	; 255
     b16:	5f 4f       	sbci	r21, 0xFF	; 255
     b18:	e0 e0       	ldi	r30, 0x00	; 0
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	3a 07       	cpc	r19, r26
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	4a 07       	cpc	r20, r26
     b26:	a0 e4       	ldi	r26, 0x40	; 64
     b28:	5a 07       	cpc	r21, r26
     b2a:	10 f0       	brcs	.+4      	; 0xb30 <__pack_f+0x10e>
     b2c:	e1 e0       	ldi	r30, 0x01	; 1
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	79 01       	movw	r14, r18
     b32:	8a 01       	movw	r16, r20
     b34:	27 c0       	rjmp	.+78     	; 0xb84 <__pack_f+0x162>
     b36:	60 38       	cpi	r22, 0x80	; 128
     b38:	71 05       	cpc	r23, r1
     b3a:	64 f5       	brge	.+88     	; 0xb94 <__pack_f+0x172>
     b3c:	fb 01       	movw	r30, r22
     b3e:	e1 58       	subi	r30, 0x81	; 129
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	d8 01       	movw	r26, r16
     b44:	c7 01       	movw	r24, r14
     b46:	8f 77       	andi	r24, 0x7F	; 127
     b48:	90 70       	andi	r25, 0x00	; 0
     b4a:	a0 70       	andi	r26, 0x00	; 0
     b4c:	b0 70       	andi	r27, 0x00	; 0
     b4e:	80 34       	cpi	r24, 0x40	; 64
     b50:	91 05       	cpc	r25, r1
     b52:	a1 05       	cpc	r26, r1
     b54:	b1 05       	cpc	r27, r1
     b56:	39 f4       	brne	.+14     	; 0xb66 <__pack_f+0x144>
     b58:	e7 fe       	sbrs	r14, 7
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <__pack_f+0x154>
     b5c:	80 e4       	ldi	r24, 0x40	; 64
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x14c>
     b66:	8f e3       	ldi	r24, 0x3F	; 63
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a0 e0       	ldi	r26, 0x00	; 0
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e8 0e       	add	r14, r24
     b70:	f9 1e       	adc	r15, r25
     b72:	0a 1f       	adc	r16, r26
     b74:	1b 1f       	adc	r17, r27
     b76:	17 ff       	sbrs	r17, 7
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <__pack_f+0x162>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	31 96       	adiw	r30, 0x01	; 1
     b84:	87 e0       	ldi	r24, 0x07	; 7
     b86:	16 95       	lsr	r17
     b88:	07 95       	ror	r16
     b8a:	f7 94       	ror	r15
     b8c:	e7 94       	ror	r14
     b8e:	8a 95       	dec	r24
     b90:	d1 f7       	brne	.-12     	; 0xb86 <__pack_f+0x164>
     b92:	05 c0       	rjmp	.+10     	; 0xb9e <__pack_f+0x17c>
     b94:	ee 24       	eor	r14, r14
     b96:	ff 24       	eor	r15, r15
     b98:	87 01       	movw	r16, r14
     b9a:	ef ef       	ldi	r30, 0xFF	; 255
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	6e 2f       	mov	r22, r30
     ba0:	67 95       	ror	r22
     ba2:	66 27       	eor	r22, r22
     ba4:	67 95       	ror	r22
     ba6:	90 2f       	mov	r25, r16
     ba8:	9f 77       	andi	r25, 0x7F	; 127
     baa:	d7 94       	ror	r13
     bac:	dd 24       	eor	r13, r13
     bae:	d7 94       	ror	r13
     bb0:	8e 2f       	mov	r24, r30
     bb2:	86 95       	lsr	r24
     bb4:	49 2f       	mov	r20, r25
     bb6:	46 2b       	or	r20, r22
     bb8:	58 2f       	mov	r21, r24
     bba:	5d 29       	or	r21, r13
     bbc:	b7 01       	movw	r22, r14
     bbe:	ca 01       	movw	r24, r20
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	08 95       	ret

00000bcc <__unpack_f>:
     bcc:	fc 01       	movw	r30, r24
     bce:	db 01       	movw	r26, r22
     bd0:	40 81       	ld	r20, Z
     bd2:	51 81       	ldd	r21, Z+1	; 0x01
     bd4:	22 81       	ldd	r18, Z+2	; 0x02
     bd6:	62 2f       	mov	r22, r18
     bd8:	6f 77       	andi	r22, 0x7F	; 127
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	22 1f       	adc	r18, r18
     bde:	22 27       	eor	r18, r18
     be0:	22 1f       	adc	r18, r18
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	89 2f       	mov	r24, r25
     be6:	88 0f       	add	r24, r24
     be8:	82 2b       	or	r24, r18
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	99 1f       	adc	r25, r25
     bf0:	99 27       	eor	r25, r25
     bf2:	99 1f       	adc	r25, r25
     bf4:	11 96       	adiw	r26, 0x01	; 1
     bf6:	9c 93       	st	X, r25
     bf8:	11 97       	sbiw	r26, 0x01	; 1
     bfa:	21 15       	cp	r18, r1
     bfc:	31 05       	cpc	r19, r1
     bfe:	a9 f5       	brne	.+106    	; 0xc6a <__unpack_f+0x9e>
     c00:	41 15       	cp	r20, r1
     c02:	51 05       	cpc	r21, r1
     c04:	61 05       	cpc	r22, r1
     c06:	71 05       	cpc	r23, r1
     c08:	11 f4       	brne	.+4      	; 0xc0e <__unpack_f+0x42>
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	37 c0       	rjmp	.+110    	; 0xc7c <__unpack_f+0xb0>
     c0e:	82 e8       	ldi	r24, 0x82	; 130
     c10:	9f ef       	ldi	r25, 0xFF	; 255
     c12:	13 96       	adiw	r26, 0x03	; 3
     c14:	9c 93       	st	X, r25
     c16:	8e 93       	st	-X, r24
     c18:	12 97       	sbiw	r26, 0x02	; 2
     c1a:	9a 01       	movw	r18, r20
     c1c:	ab 01       	movw	r20, r22
     c1e:	67 e0       	ldi	r22, 0x07	; 7
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	44 1f       	adc	r20, r20
     c26:	55 1f       	adc	r21, r21
     c28:	6a 95       	dec	r22
     c2a:	d1 f7       	brne	.-12     	; 0xc20 <__unpack_f+0x54>
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	8c 93       	st	X, r24
     c30:	0d c0       	rjmp	.+26     	; 0xc4c <__unpack_f+0x80>
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	44 1f       	adc	r20, r20
     c38:	55 1f       	adc	r21, r21
     c3a:	12 96       	adiw	r26, 0x02	; 2
     c3c:	8d 91       	ld	r24, X+
     c3e:	9c 91       	ld	r25, X
     c40:	13 97       	sbiw	r26, 0x03	; 3
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	13 96       	adiw	r26, 0x03	; 3
     c46:	9c 93       	st	X, r25
     c48:	8e 93       	st	-X, r24
     c4a:	12 97       	sbiw	r26, 0x02	; 2
     c4c:	20 30       	cpi	r18, 0x00	; 0
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	38 07       	cpc	r19, r24
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	48 07       	cpc	r20, r24
     c56:	80 e4       	ldi	r24, 0x40	; 64
     c58:	58 07       	cpc	r21, r24
     c5a:	58 f3       	brcs	.-42     	; 0xc32 <__unpack_f+0x66>
     c5c:	14 96       	adiw	r26, 0x04	; 4
     c5e:	2d 93       	st	X+, r18
     c60:	3d 93       	st	X+, r19
     c62:	4d 93       	st	X+, r20
     c64:	5c 93       	st	X, r21
     c66:	17 97       	sbiw	r26, 0x07	; 7
     c68:	08 95       	ret
     c6a:	2f 3f       	cpi	r18, 0xFF	; 255
     c6c:	31 05       	cpc	r19, r1
     c6e:	79 f4       	brne	.+30     	; 0xc8e <__unpack_f+0xc2>
     c70:	41 15       	cp	r20, r1
     c72:	51 05       	cpc	r21, r1
     c74:	61 05       	cpc	r22, r1
     c76:	71 05       	cpc	r23, r1
     c78:	19 f4       	brne	.+6      	; 0xc80 <__unpack_f+0xb4>
     c7a:	84 e0       	ldi	r24, 0x04	; 4
     c7c:	8c 93       	st	X, r24
     c7e:	08 95       	ret
     c80:	64 ff       	sbrs	r22, 4
     c82:	03 c0       	rjmp	.+6      	; 0xc8a <__unpack_f+0xbe>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8c 93       	st	X, r24
     c88:	12 c0       	rjmp	.+36     	; 0xcae <__unpack_f+0xe2>
     c8a:	1c 92       	st	X, r1
     c8c:	10 c0       	rjmp	.+32     	; 0xcae <__unpack_f+0xe2>
     c8e:	2f 57       	subi	r18, 0x7F	; 127
     c90:	30 40       	sbci	r19, 0x00	; 0
     c92:	13 96       	adiw	r26, 0x03	; 3
     c94:	3c 93       	st	X, r19
     c96:	2e 93       	st	-X, r18
     c98:	12 97       	sbiw	r26, 0x02	; 2
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	8c 93       	st	X, r24
     c9e:	87 e0       	ldi	r24, 0x07	; 7
     ca0:	44 0f       	add	r20, r20
     ca2:	55 1f       	adc	r21, r21
     ca4:	66 1f       	adc	r22, r22
     ca6:	77 1f       	adc	r23, r23
     ca8:	8a 95       	dec	r24
     caa:	d1 f7       	brne	.-12     	; 0xca0 <__unpack_f+0xd4>
     cac:	70 64       	ori	r23, 0x40	; 64
     cae:	14 96       	adiw	r26, 0x04	; 4
     cb0:	4d 93       	st	X+, r20
     cb2:	5d 93       	st	X+, r21
     cb4:	6d 93       	st	X+, r22
     cb6:	7c 93       	st	X, r23
     cb8:	17 97       	sbiw	r26, 0x07	; 7
     cba:	08 95       	ret

00000cbc <__fpcmp_parts_f>:
     cbc:	1f 93       	push	r17
     cbe:	dc 01       	movw	r26, r24
     cc0:	fb 01       	movw	r30, r22
     cc2:	9c 91       	ld	r25, X
     cc4:	92 30       	cpi	r25, 0x02	; 2
     cc6:	08 f4       	brcc	.+2      	; 0xcca <__fpcmp_parts_f+0xe>
     cc8:	47 c0       	rjmp	.+142    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cca:	80 81       	ld	r24, Z
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <__fpcmp_parts_f+0x16>
     cd0:	43 c0       	rjmp	.+134    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cd2:	94 30       	cpi	r25, 0x04	; 4
     cd4:	51 f4       	brne	.+20     	; 0xcea <__fpcmp_parts_f+0x2e>
     cd6:	11 96       	adiw	r26, 0x01	; 1
     cd8:	1c 91       	ld	r17, X
     cda:	84 30       	cpi	r24, 0x04	; 4
     cdc:	99 f5       	brne	.+102    	; 0xd44 <__fpcmp_parts_f+0x88>
     cde:	81 81       	ldd	r24, Z+1	; 0x01
     ce0:	68 2f       	mov	r22, r24
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	61 1b       	sub	r22, r17
     ce6:	71 09       	sbc	r23, r1
     ce8:	3f c0       	rjmp	.+126    	; 0xd68 <__fpcmp_parts_f+0xac>
     cea:	84 30       	cpi	r24, 0x04	; 4
     cec:	21 f0       	breq	.+8      	; 0xcf6 <__fpcmp_parts_f+0x3a>
     cee:	92 30       	cpi	r25, 0x02	; 2
     cf0:	31 f4       	brne	.+12     	; 0xcfe <__fpcmp_parts_f+0x42>
     cf2:	82 30       	cpi	r24, 0x02	; 2
     cf4:	b9 f1       	breq	.+110    	; 0xd64 <__fpcmp_parts_f+0xa8>
     cf6:	81 81       	ldd	r24, Z+1	; 0x01
     cf8:	88 23       	and	r24, r24
     cfa:	89 f1       	breq	.+98     	; 0xd5e <__fpcmp_parts_f+0xa2>
     cfc:	2d c0       	rjmp	.+90     	; 0xd58 <__fpcmp_parts_f+0x9c>
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	1c 91       	ld	r17, X
     d02:	11 97       	sbiw	r26, 0x01	; 1
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	f1 f0       	breq	.+60     	; 0xd44 <__fpcmp_parts_f+0x88>
     d08:	81 81       	ldd	r24, Z+1	; 0x01
     d0a:	18 17       	cp	r17, r24
     d0c:	d9 f4       	brne	.+54     	; 0xd44 <__fpcmp_parts_f+0x88>
     d0e:	12 96       	adiw	r26, 0x02	; 2
     d10:	2d 91       	ld	r18, X+
     d12:	3c 91       	ld	r19, X
     d14:	13 97       	sbiw	r26, 0x03	; 3
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	82 17       	cp	r24, r18
     d1c:	93 07       	cpc	r25, r19
     d1e:	94 f0       	brlt	.+36     	; 0xd44 <__fpcmp_parts_f+0x88>
     d20:	28 17       	cp	r18, r24
     d22:	39 07       	cpc	r19, r25
     d24:	bc f0       	brlt	.+46     	; 0xd54 <__fpcmp_parts_f+0x98>
     d26:	14 96       	adiw	r26, 0x04	; 4
     d28:	8d 91       	ld	r24, X+
     d2a:	9d 91       	ld	r25, X+
     d2c:	0d 90       	ld	r0, X+
     d2e:	bc 91       	ld	r27, X
     d30:	a0 2d       	mov	r26, r0
     d32:	24 81       	ldd	r18, Z+4	; 0x04
     d34:	35 81       	ldd	r19, Z+5	; 0x05
     d36:	46 81       	ldd	r20, Z+6	; 0x06
     d38:	57 81       	ldd	r21, Z+7	; 0x07
     d3a:	28 17       	cp	r18, r24
     d3c:	39 07       	cpc	r19, r25
     d3e:	4a 07       	cpc	r20, r26
     d40:	5b 07       	cpc	r21, r27
     d42:	18 f4       	brcc	.+6      	; 0xd4a <__fpcmp_parts_f+0x8e>
     d44:	11 23       	and	r17, r17
     d46:	41 f0       	breq	.+16     	; 0xd58 <__fpcmp_parts_f+0x9c>
     d48:	0a c0       	rjmp	.+20     	; 0xd5e <__fpcmp_parts_f+0xa2>
     d4a:	82 17       	cp	r24, r18
     d4c:	93 07       	cpc	r25, r19
     d4e:	a4 07       	cpc	r26, r20
     d50:	b5 07       	cpc	r27, r21
     d52:	40 f4       	brcc	.+16     	; 0xd64 <__fpcmp_parts_f+0xa8>
     d54:	11 23       	and	r17, r17
     d56:	19 f0       	breq	.+6      	; 0xd5e <__fpcmp_parts_f+0xa2>
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <__fpcmp_parts_f+0xac>
     d5e:	6f ef       	ldi	r22, 0xFF	; 255
     d60:	7f ef       	ldi	r23, 0xFF	; 255
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <__fpcmp_parts_f+0xac>
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	cb 01       	movw	r24, r22
     d6a:	1f 91       	pop	r17
     d6c:	08 95       	ret

00000d6e <ADC_voidInitialize>:
#include "Bit_Math.h"
#include "DIO_interface.h"
#include "ADC_private.h"
#include "ADC_interface.h"

void ADC_voidInitialize(u8 Copy_u8ADC_Channel){
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	00 d0       	rcall	.+0      	; 0xd74 <ADC_voidInitialize+0x6>
     d74:	0f 92       	push	r0
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
     d7a:	89 83       	std	Y+1, r24	; 0x01
	ClrBit(ADMUX,PIN7);
     d7c:	a7 e2       	ldi	r26, 0x27	; 39
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e7 e2       	ldi	r30, 0x27	; 39
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	8f 77       	andi	r24, 0x7F	; 127
     d88:	8c 93       	st	X, r24
	SetBit(ADMUX,PIN6);
     d8a:	a7 e2       	ldi	r26, 0x27	; 39
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e7 e2       	ldi	r30, 0x27	; 39
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	80 64       	ori	r24, 0x40	; 64
     d96:	8c 93       	st	X, r24
	ClrBit(ADMUX,PIN5);
     d98:	a7 e2       	ldi	r26, 0x27	; 39
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	e7 e2       	ldi	r30, 0x27	; 39
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	8f 7d       	andi	r24, 0xDF	; 223
     da4:	8c 93       	st	X, r24
	
	switch(Copy_u8ADC_Channel){
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	28 2f       	mov	r18, r24
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	3b 83       	std	Y+3, r19	; 0x03
     dae:	2a 83       	std	Y+2, r18	; 0x02
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
     db2:	9b 81       	ldd	r25, Y+3	; 0x03
     db4:	83 30       	cpi	r24, 0x03	; 3
     db6:	91 05       	cpc	r25, r1
     db8:	09 f4       	brne	.+2      	; 0xdbc <ADC_voidInitialize+0x4e>
     dba:	9b c0       	rjmp	.+310    	; 0xef2 <ADC_voidInitialize+0x184>
     dbc:	2a 81       	ldd	r18, Y+2	; 0x02
     dbe:	3b 81       	ldd	r19, Y+3	; 0x03
     dc0:	24 30       	cpi	r18, 0x04	; 4
     dc2:	31 05       	cpc	r19, r1
     dc4:	8c f4       	brge	.+34     	; 0xde8 <ADC_voidInitialize+0x7a>
     dc6:	8a 81       	ldd	r24, Y+2	; 0x02
     dc8:	9b 81       	ldd	r25, Y+3	; 0x03
     dca:	81 30       	cpi	r24, 0x01	; 1
     dcc:	91 05       	cpc	r25, r1
     dce:	09 f4       	brne	.+2      	; 0xdd2 <ADC_voidInitialize+0x64>
     dd0:	48 c0       	rjmp	.+144    	; 0xe62 <ADC_voidInitialize+0xf4>
     dd2:	2a 81       	ldd	r18, Y+2	; 0x02
     dd4:	3b 81       	ldd	r19, Y+3	; 0x03
     dd6:	22 30       	cpi	r18, 0x02	; 2
     dd8:	31 05       	cpc	r19, r1
     dda:	0c f0       	brlt	.+2      	; 0xdde <ADC_voidInitialize+0x70>
     ddc:	66 c0       	rjmp	.+204    	; 0xeaa <ADC_voidInitialize+0x13c>
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	9b 81       	ldd	r25, Y+3	; 0x03
     de2:	00 97       	sbiw	r24, 0x00	; 0
     de4:	d1 f0       	breq	.+52     	; 0xe1a <ADC_voidInitialize+0xac>
     de6:	38 c1       	rjmp	.+624    	; 0x1058 <ADC_voidInitialize+0x2ea>
     de8:	2a 81       	ldd	r18, Y+2	; 0x02
     dea:	3b 81       	ldd	r19, Y+3	; 0x03
     dec:	25 30       	cpi	r18, 0x05	; 5
     dee:	31 05       	cpc	r19, r1
     df0:	09 f4       	brne	.+2      	; 0xdf4 <ADC_voidInitialize+0x86>
     df2:	c7 c0       	rjmp	.+398    	; 0xf82 <ADC_voidInitialize+0x214>
     df4:	8a 81       	ldd	r24, Y+2	; 0x02
     df6:	9b 81       	ldd	r25, Y+3	; 0x03
     df8:	85 30       	cpi	r24, 0x05	; 5
     dfa:	91 05       	cpc	r25, r1
     dfc:	0c f4       	brge	.+2      	; 0xe00 <ADC_voidInitialize+0x92>
     dfe:	9d c0       	rjmp	.+314    	; 0xf3a <ADC_voidInitialize+0x1cc>
     e00:	2a 81       	ldd	r18, Y+2	; 0x02
     e02:	3b 81       	ldd	r19, Y+3	; 0x03
     e04:	26 30       	cpi	r18, 0x06	; 6
     e06:	31 05       	cpc	r19, r1
     e08:	09 f4       	brne	.+2      	; 0xe0c <ADC_voidInitialize+0x9e>
     e0a:	df c0       	rjmp	.+446    	; 0xfca <ADC_voidInitialize+0x25c>
     e0c:	8a 81       	ldd	r24, Y+2	; 0x02
     e0e:	9b 81       	ldd	r25, Y+3	; 0x03
     e10:	87 30       	cpi	r24, 0x07	; 7
     e12:	91 05       	cpc	r25, r1
     e14:	09 f4       	brne	.+2      	; 0xe18 <ADC_voidInitialize+0xaa>
     e16:	fd c0       	rjmp	.+506    	; 0x1012 <ADC_voidInitialize+0x2a4>
     e18:	1f c1       	rjmp	.+574    	; 0x1058 <ADC_voidInitialize+0x2ea>
		case ADC0:
			ClrBit(ADMUX,PIN4);
     e1a:	a7 e2       	ldi	r26, 0x27	; 39
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	e7 e2       	ldi	r30, 0x27	; 39
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	8f 7e       	andi	r24, 0xEF	; 239
     e26:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN3);
     e28:	a7 e2       	ldi	r26, 0x27	; 39
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e7 e2       	ldi	r30, 0x27	; 39
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	87 7f       	andi	r24, 0xF7	; 247
     e34:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN2);
     e36:	a7 e2       	ldi	r26, 0x27	; 39
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e7 e2       	ldi	r30, 0x27	; 39
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	8b 7f       	andi	r24, 0xFB	; 251
     e42:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN1);
     e44:	a7 e2       	ldi	r26, 0x27	; 39
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e7 e2       	ldi	r30, 0x27	; 39
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8d 7f       	andi	r24, 0xFD	; 253
     e50:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN0);
     e52:	a7 e2       	ldi	r26, 0x27	; 39
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e7 e2       	ldi	r30, 0x27	; 39
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8e 7f       	andi	r24, 0xFE	; 254
     e5e:	8c 93       	st	X, r24
     e60:	fb c0       	rjmp	.+502    	; 0x1058 <ADC_voidInitialize+0x2ea>
			break;
		case ADC1:
			ClrBit(ADMUX,PIN4);
     e62:	a7 e2       	ldi	r26, 0x27	; 39
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e7 e2       	ldi	r30, 0x27	; 39
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	8f 7e       	andi	r24, 0xEF	; 239
     e6e:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN3);
     e70:	a7 e2       	ldi	r26, 0x27	; 39
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	e7 e2       	ldi	r30, 0x27	; 39
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	87 7f       	andi	r24, 0xF7	; 247
     e7c:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN2);
     e7e:	a7 e2       	ldi	r26, 0x27	; 39
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e7 e2       	ldi	r30, 0x27	; 39
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	8b 7f       	andi	r24, 0xFB	; 251
     e8a:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN1);
     e8c:	a7 e2       	ldi	r26, 0x27	; 39
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e7 e2       	ldi	r30, 0x27	; 39
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	8d 7f       	andi	r24, 0xFD	; 253
     e98:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN0);
     e9a:	a7 e2       	ldi	r26, 0x27	; 39
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e7 e2       	ldi	r30, 0x27	; 39
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	81 60       	ori	r24, 0x01	; 1
     ea6:	8c 93       	st	X, r24
     ea8:	d7 c0       	rjmp	.+430    	; 0x1058 <ADC_voidInitialize+0x2ea>
			break;
		case ADC2:
			ClrBit(ADMUX,PIN4);
     eaa:	a7 e2       	ldi	r26, 0x27	; 39
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e7 e2       	ldi	r30, 0x27	; 39
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	8f 7e       	andi	r24, 0xEF	; 239
     eb6:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN3);
     eb8:	a7 e2       	ldi	r26, 0x27	; 39
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e7 e2       	ldi	r30, 0x27	; 39
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	87 7f       	andi	r24, 0xF7	; 247
     ec4:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN2);
     ec6:	a7 e2       	ldi	r26, 0x27	; 39
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	e7 e2       	ldi	r30, 0x27	; 39
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	8b 7f       	andi	r24, 0xFB	; 251
     ed2:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN1);
     ed4:	a7 e2       	ldi	r26, 0x27	; 39
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e7 e2       	ldi	r30, 0x27	; 39
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	82 60       	ori	r24, 0x02	; 2
     ee0:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN0);
     ee2:	a7 e2       	ldi	r26, 0x27	; 39
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e7 e2       	ldi	r30, 0x27	; 39
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	8e 7f       	andi	r24, 0xFE	; 254
     eee:	8c 93       	st	X, r24
     ef0:	b3 c0       	rjmp	.+358    	; 0x1058 <ADC_voidInitialize+0x2ea>
			break;
		case ADC3:
			ClrBit(ADMUX,PIN4);
     ef2:	a7 e2       	ldi	r26, 0x27	; 39
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e7 e2       	ldi	r30, 0x27	; 39
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	8f 7e       	andi	r24, 0xEF	; 239
     efe:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN3);
     f00:	a7 e2       	ldi	r26, 0x27	; 39
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e7 e2       	ldi	r30, 0x27	; 39
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	87 7f       	andi	r24, 0xF7	; 247
     f0c:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN2);
     f0e:	a7 e2       	ldi	r26, 0x27	; 39
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e7 e2       	ldi	r30, 0x27	; 39
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	8b 7f       	andi	r24, 0xFB	; 251
     f1a:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN1);
     f1c:	a7 e2       	ldi	r26, 0x27	; 39
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e7 e2       	ldi	r30, 0x27	; 39
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	82 60       	ori	r24, 0x02	; 2
     f28:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN0);
     f2a:	a7 e2       	ldi	r26, 0x27	; 39
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e7 e2       	ldi	r30, 0x27	; 39
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	81 60       	ori	r24, 0x01	; 1
     f36:	8c 93       	st	X, r24
     f38:	8f c0       	rjmp	.+286    	; 0x1058 <ADC_voidInitialize+0x2ea>
			break;
		case ADC4:
			ClrBit(ADMUX,PIN4);
     f3a:	a7 e2       	ldi	r26, 0x27	; 39
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e7 e2       	ldi	r30, 0x27	; 39
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	8f 7e       	andi	r24, 0xEF	; 239
     f46:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN3);
     f48:	a7 e2       	ldi	r26, 0x27	; 39
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	e7 e2       	ldi	r30, 0x27	; 39
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	87 7f       	andi	r24, 0xF7	; 247
     f54:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN2);
     f56:	a7 e2       	ldi	r26, 0x27	; 39
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	e7 e2       	ldi	r30, 0x27	; 39
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	84 60       	ori	r24, 0x04	; 4
     f62:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN1);
     f64:	a7 e2       	ldi	r26, 0x27	; 39
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e7 e2       	ldi	r30, 0x27	; 39
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	8d 7f       	andi	r24, 0xFD	; 253
     f70:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN0);
     f72:	a7 e2       	ldi	r26, 0x27	; 39
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e7 e2       	ldi	r30, 0x27	; 39
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	8e 7f       	andi	r24, 0xFE	; 254
     f7e:	8c 93       	st	X, r24
     f80:	6b c0       	rjmp	.+214    	; 0x1058 <ADC_voidInitialize+0x2ea>
			break;
		case ADC5:
			ClrBit(ADMUX,PIN4);
     f82:	a7 e2       	ldi	r26, 0x27	; 39
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e7 e2       	ldi	r30, 0x27	; 39
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	8f 7e       	andi	r24, 0xEF	; 239
     f8e:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN3);
     f90:	a7 e2       	ldi	r26, 0x27	; 39
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	e7 e2       	ldi	r30, 0x27	; 39
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	87 7f       	andi	r24, 0xF7	; 247
     f9c:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN2);
     f9e:	a7 e2       	ldi	r26, 0x27	; 39
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e7 e2       	ldi	r30, 0x27	; 39
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	84 60       	ori	r24, 0x04	; 4
     faa:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN1);
     fac:	a7 e2       	ldi	r26, 0x27	; 39
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	e7 e2       	ldi	r30, 0x27	; 39
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	8d 7f       	andi	r24, 0xFD	; 253
     fb8:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN0);
     fba:	a7 e2       	ldi	r26, 0x27	; 39
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e7 e2       	ldi	r30, 0x27	; 39
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	81 60       	ori	r24, 0x01	; 1
     fc6:	8c 93       	st	X, r24
     fc8:	47 c0       	rjmp	.+142    	; 0x1058 <ADC_voidInitialize+0x2ea>
			break;
		case ADC6:
			ClrBit(ADMUX,PIN4);
     fca:	a7 e2       	ldi	r26, 0x27	; 39
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	e7 e2       	ldi	r30, 0x27	; 39
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	8f 7e       	andi	r24, 0xEF	; 239
     fd6:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN3);
     fd8:	a7 e2       	ldi	r26, 0x27	; 39
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e7 e2       	ldi	r30, 0x27	; 39
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	87 7f       	andi	r24, 0xF7	; 247
     fe4:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN2);
     fe6:	a7 e2       	ldi	r26, 0x27	; 39
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	e7 e2       	ldi	r30, 0x27	; 39
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	84 60       	ori	r24, 0x04	; 4
     ff2:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN1);
     ff4:	a7 e2       	ldi	r26, 0x27	; 39
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	e7 e2       	ldi	r30, 0x27	; 39
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	82 60       	ori	r24, 0x02	; 2
    1000:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN0);
    1002:	a7 e2       	ldi	r26, 0x27	; 39
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e7 e2       	ldi	r30, 0x27	; 39
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	8e 7f       	andi	r24, 0xFE	; 254
    100e:	8c 93       	st	X, r24
    1010:	23 c0       	rjmp	.+70     	; 0x1058 <ADC_voidInitialize+0x2ea>
			break;
		case ADC7:
			ClrBit(ADMUX,PIN4);
    1012:	a7 e2       	ldi	r26, 0x27	; 39
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e7 e2       	ldi	r30, 0x27	; 39
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	8f 7e       	andi	r24, 0xEF	; 239
    101e:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN3);
    1020:	a7 e2       	ldi	r26, 0x27	; 39
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e7 e2       	ldi	r30, 0x27	; 39
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	87 7f       	andi	r24, 0xF7	; 247
    102c:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN2);
    102e:	a7 e2       	ldi	r26, 0x27	; 39
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e7 e2       	ldi	r30, 0x27	; 39
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	84 60       	ori	r24, 0x04	; 4
    103a:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN1);
    103c:	a7 e2       	ldi	r26, 0x27	; 39
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e7 e2       	ldi	r30, 0x27	; 39
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	82 60       	ori	r24, 0x02	; 2
    1048:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN0);
    104a:	a7 e2       	ldi	r26, 0x27	; 39
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e7 e2       	ldi	r30, 0x27	; 39
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	81 60       	ori	r24, 0x01	; 1
    1056:	8c 93       	st	X, r24
			break;
	}
	
	ClrBit(ADCSRA,PIN0);
    1058:	a6 e2       	ldi	r26, 0x26	; 38
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	e6 e2       	ldi	r30, 0x26	; 38
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	8e 7f       	andi	r24, 0xFE	; 254
    1064:	8c 93       	st	X, r24
	SetBit(ADCSRA,PIN1);
    1066:	a6 e2       	ldi	r26, 0x26	; 38
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e6 e2       	ldi	r30, 0x26	; 38
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	82 60       	ori	r24, 0x02	; 2
    1072:	8c 93       	st	X, r24
	SetBit(ADCSRA,PIN2);
    1074:	a6 e2       	ldi	r26, 0x26	; 38
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e6 e2       	ldi	r30, 0x26	; 38
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	84 60       	ori	r24, 0x04	; 4
    1080:	8c 93       	st	X, r24
	
	SetBit(ADCSRA,PIN7);
    1082:	a6 e2       	ldi	r26, 0x26	; 38
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e6 e2       	ldi	r30, 0x26	; 38
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	80 68       	ori	r24, 0x80	; 128
    108e:	8c 93       	st	X, r24
	SetBit(ADCSRA,PIN6);
    1090:	a6 e2       	ldi	r26, 0x26	; 38
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e6 e2       	ldi	r30, 0x26	; 38
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	80 64       	ori	r24, 0x40	; 64
    109c:	8c 93       	st	X, r24
}
    109e:	0f 90       	pop	r0
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	cf 91       	pop	r28
    10a6:	df 91       	pop	r29
    10a8:	08 95       	ret

000010aa <ADC_voidStartConversion>:

u16 ADC_voidStartConversion(){
    10aa:	df 93       	push	r29
    10ac:	cf 93       	push	r28
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
	
	SetBit(ADCSRA,PIN6);
    10b2:	a6 e2       	ldi	r26, 0x26	; 38
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e6 e2       	ldi	r30, 0x26	; 38
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	80 64       	ori	r24, 0x40	; 64
    10be:	8c 93       	st	X, r24
	return ADC;
    10c0:	e4 e2       	ldi	r30, 0x24	; 36
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	91 81       	ldd	r25, Z+1	; 0x01
    10c8:	cf 91       	pop	r28
    10ca:	df 91       	pop	r29
    10cc:	08 95       	ret

000010ce <DCMOTOR_voidInitialize>:
#include "DIO_interface.h"
#include "DCMOTOR_config.h"
#include "DCMOTOR_interface.h"


void DCMOTOR_voidInitialize(){
    10ce:	df 93       	push	r29
    10d0:	cf 93       	push	r28
    10d2:	cd b7       	in	r28, 0x3d	; 61
    10d4:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(DCMOTOR_PORT,DCMOTOR_CONTROL_0,PIN_OUTPUT);
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	60 e0       	ldi	r22, 0x00	; 0
    10da:	41 e0       	ldi	r20, 0x01	; 1
    10dc:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DCMOTOR_PORT,DCMOTOR_CONTROL_1,PIN_OUTPUT);
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	61 e0       	ldi	r22, 0x01	; 1
    10e4:	41 e0       	ldi	r20, 0x01	; 1
    10e6:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_voidSetPinDirection>
}
    10ea:	cf 91       	pop	r28
    10ec:	df 91       	pop	r29
    10ee:	08 95       	ret

000010f0 <DCMOTOR_voidSetDirection>:

void DCMOTOR_voidSetDirection(u8 Copy_u8Dirction){
    10f0:	df 93       	push	r29
    10f2:	cf 93       	push	r28
    10f4:	00 d0       	rcall	.+0      	; 0x10f6 <DCMOTOR_voidSetDirection+0x6>
    10f6:	0f 92       	push	r0
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Dirction){
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	3b 83       	std	Y+3, r19	; 0x03
    1106:	2a 83       	std	Y+2, r18	; 0x02
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	9b 81       	ldd	r25, Y+3	; 0x03
    110c:	81 30       	cpi	r24, 0x01	; 1
    110e:	91 05       	cpc	r25, r1
    1110:	a1 f0       	breq	.+40     	; 0x113a <DCMOTOR_voidSetDirection+0x4a>
    1112:	2a 81       	ldd	r18, Y+2	; 0x02
    1114:	3b 81       	ldd	r19, Y+3	; 0x03
    1116:	22 30       	cpi	r18, 0x02	; 2
    1118:	31 05       	cpc	r19, r1
    111a:	d1 f0       	breq	.+52     	; 0x1150 <DCMOTOR_voidSetDirection+0x60>
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	9b 81       	ldd	r25, Y+3	; 0x03
    1120:	00 97       	sbiw	r24, 0x00	; 0
    1122:	01 f5       	brne	.+64     	; 0x1164 <DCMOTOR_voidSetDirection+0x74>
		case STOP:
			DIO_voidSetPinValue(DCMOTOR_PORT,DCMOTOR_CONTROL_0,PIN_LOW);
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	60 e0       	ldi	r22, 0x00	; 0
    1128:	40 e0       	ldi	r20, 0x00	; 0
    112a:	0e 94 b8 09 	call	0x1370	; 0x1370 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DCMOTOR_PORT,DCMOTOR_CONTROL_1,PIN_LOW);
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	61 e0       	ldi	r22, 0x01	; 1
    1132:	40 e0       	ldi	r20, 0x00	; 0
    1134:	0e 94 b8 09 	call	0x1370	; 0x1370 <DIO_voidSetPinValue>
    1138:	15 c0       	rjmp	.+42     	; 0x1164 <DCMOTOR_voidSetDirection+0x74>
			break;
		case RIGHT:
			DIO_voidSetPinValue(DCMOTOR_PORT,DCMOTOR_CONTROL_0,PIN_HIGH);
    113a:	80 e0       	ldi	r24, 0x00	; 0
    113c:	60 e0       	ldi	r22, 0x00	; 0
    113e:	41 e0       	ldi	r20, 0x01	; 1
    1140:	0e 94 b8 09 	call	0x1370	; 0x1370 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DCMOTOR_PORT,DCMOTOR_CONTROL_1,PIN_LOW);	
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	61 e0       	ldi	r22, 0x01	; 1
    1148:	40 e0       	ldi	r20, 0x00	; 0
    114a:	0e 94 b8 09 	call	0x1370	; 0x1370 <DIO_voidSetPinValue>
    114e:	0a c0       	rjmp	.+20     	; 0x1164 <DCMOTOR_voidSetDirection+0x74>
			break;
		case LEFT:
			DIO_voidSetPinValue(DCMOTOR_PORT,DCMOTOR_CONTROL_0,PIN_LOW);
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	60 e0       	ldi	r22, 0x00	; 0
    1154:	40 e0       	ldi	r20, 0x00	; 0
    1156:	0e 94 b8 09 	call	0x1370	; 0x1370 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DCMOTOR_PORT,DCMOTOR_CONTROL_1,PIN_HIGH);
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	61 e0       	ldi	r22, 0x01	; 1
    115e:	41 e0       	ldi	r20, 0x01	; 1
    1160:	0e 94 b8 09 	call	0x1370	; 0x1370 <DIO_voidSetPinValue>
			break;
	}
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	08 95       	ret

00001170 <DIO_voidSetPinDirection>:
#include "Bit_Math.h"
#include "DIO_config.h"
#include "DIO_private.h"
#include "DIO_interface.h"

void DIO_voidSetPinDirection(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinDir){
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	27 97       	sbiw	r28, 0x07	; 7
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	f8 94       	cli
    117e:	de bf       	out	0x3e, r29	; 62
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	cd bf       	out	0x3d, r28	; 61
    1184:	89 83       	std	Y+1, r24	; 0x01
    1186:	6a 83       	std	Y+2, r22	; 0x02
    1188:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinDir==PIN_OUTPUT){     //output
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	81 30       	cpi	r24, 0x01	; 1
    118e:	09 f0       	breq	.+2      	; 0x1192 <DIO_voidSetPinDirection+0x22>
    1190:	6f c0       	rjmp	.+222    	; 0x1270 <DIO_voidSetPinDirection+0x100>
		switch(Copy_u8PortID){
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	3f 83       	std	Y+7, r19	; 0x07
    119a:	2e 83       	std	Y+6, r18	; 0x06
    119c:	8e 81       	ldd	r24, Y+6	; 0x06
    119e:	9f 81       	ldd	r25, Y+7	; 0x07
    11a0:	81 30       	cpi	r24, 0x01	; 1
    11a2:	91 05       	cpc	r25, r1
    11a4:	49 f1       	breq	.+82     	; 0x11f8 <DIO_voidSetPinDirection+0x88>
    11a6:	2e 81       	ldd	r18, Y+6	; 0x06
    11a8:	3f 81       	ldd	r19, Y+7	; 0x07
    11aa:	22 30       	cpi	r18, 0x02	; 2
    11ac:	31 05       	cpc	r19, r1
    11ae:	2c f4       	brge	.+10     	; 0x11ba <DIO_voidSetPinDirection+0x4a>
    11b0:	8e 81       	ldd	r24, Y+6	; 0x06
    11b2:	9f 81       	ldd	r25, Y+7	; 0x07
    11b4:	00 97       	sbiw	r24, 0x00	; 0
    11b6:	61 f0       	breq	.+24     	; 0x11d0 <DIO_voidSetPinDirection+0x60>
    11b8:	d2 c0       	rjmp	.+420    	; 0x135e <DIO_voidSetPinDirection+0x1ee>
    11ba:	2e 81       	ldd	r18, Y+6	; 0x06
    11bc:	3f 81       	ldd	r19, Y+7	; 0x07
    11be:	22 30       	cpi	r18, 0x02	; 2
    11c0:	31 05       	cpc	r19, r1
    11c2:	71 f1       	breq	.+92     	; 0x1220 <DIO_voidSetPinDirection+0xb0>
    11c4:	8e 81       	ldd	r24, Y+6	; 0x06
    11c6:	9f 81       	ldd	r25, Y+7	; 0x07
    11c8:	83 30       	cpi	r24, 0x03	; 3
    11ca:	91 05       	cpc	r25, r1
    11cc:	e9 f1       	breq	.+122    	; 0x1248 <DIO_voidSetPinDirection+0xd8>
    11ce:	c7 c0       	rjmp	.+398    	; 0x135e <DIO_voidSetPinDirection+0x1ee>
			case PORTA/*Port A*/: SetBit(DDRA_REG,Copy_u8PinID);break;
    11d0:	aa e3       	ldi	r26, 0x3A	; 58
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	ea e3       	ldi	r30, 0x3A	; 58
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	48 2f       	mov	r20, r24
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	02 2e       	mov	r0, r18
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <DIO_voidSetPinDirection+0x7e>
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	0a 94       	dec	r0
    11f0:	e2 f7       	brpl	.-8      	; 0x11ea <DIO_voidSetPinDirection+0x7a>
    11f2:	84 2b       	or	r24, r20
    11f4:	8c 93       	st	X, r24
    11f6:	b3 c0       	rjmp	.+358    	; 0x135e <DIO_voidSetPinDirection+0x1ee>
			case PORTB/*Port B*/: SetBit(DDRB_REG,Copy_u8PinID);break;
    11f8:	a7 e3       	ldi	r26, 0x37	; 55
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	e7 e3       	ldi	r30, 0x37	; 55
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	48 2f       	mov	r20, r24
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	02 2e       	mov	r0, r18
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <DIO_voidSetPinDirection+0xa6>
    1212:	88 0f       	add	r24, r24
    1214:	99 1f       	adc	r25, r25
    1216:	0a 94       	dec	r0
    1218:	e2 f7       	brpl	.-8      	; 0x1212 <DIO_voidSetPinDirection+0xa2>
    121a:	84 2b       	or	r24, r20
    121c:	8c 93       	st	X, r24
    121e:	9f c0       	rjmp	.+318    	; 0x135e <DIO_voidSetPinDirection+0x1ee>
			case PORTC/*Port C*/: SetBit(DDRC_REG,Copy_u8PinID);break;
    1220:	a4 e3       	ldi	r26, 0x34	; 52
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	e4 e3       	ldi	r30, 0x34	; 52
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	48 2f       	mov	r20, r24
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	28 2f       	mov	r18, r24
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	02 2e       	mov	r0, r18
    1238:	02 c0       	rjmp	.+4      	; 0x123e <DIO_voidSetPinDirection+0xce>
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	0a 94       	dec	r0
    1240:	e2 f7       	brpl	.-8      	; 0x123a <DIO_voidSetPinDirection+0xca>
    1242:	84 2b       	or	r24, r20
    1244:	8c 93       	st	X, r24
    1246:	8b c0       	rjmp	.+278    	; 0x135e <DIO_voidSetPinDirection+0x1ee>
			case PORTD/*Port D*/: SetBit(DDRD_REG,Copy_u8PinID);break;
    1248:	a1 e3       	ldi	r26, 0x31	; 49
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e1 e3       	ldi	r30, 0x31	; 49
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	48 2f       	mov	r20, r24
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	02 2e       	mov	r0, r18
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <DIO_voidSetPinDirection+0xf6>
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	0a 94       	dec	r0
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <DIO_voidSetPinDirection+0xf2>
    126a:	84 2b       	or	r24, r20
    126c:	8c 93       	st	X, r24
    126e:	77 c0       	rjmp	.+238    	; 0x135e <DIO_voidSetPinDirection+0x1ee>
		}
	}
	else if(Copy_u8PinDir==PIN_INPUT){ //input
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	88 23       	and	r24, r24
    1274:	09 f0       	breq	.+2      	; 0x1278 <DIO_voidSetPinDirection+0x108>
    1276:	73 c0       	rjmp	.+230    	; 0x135e <DIO_voidSetPinDirection+0x1ee>
		switch(Copy_u8PortID){
    1278:	89 81       	ldd	r24, Y+1	; 0x01
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	3d 83       	std	Y+5, r19	; 0x05
    1280:	2c 83       	std	Y+4, r18	; 0x04
    1282:	8c 81       	ldd	r24, Y+4	; 0x04
    1284:	9d 81       	ldd	r25, Y+5	; 0x05
    1286:	81 30       	cpi	r24, 0x01	; 1
    1288:	91 05       	cpc	r25, r1
    128a:	59 f1       	breq	.+86     	; 0x12e2 <DIO_voidSetPinDirection+0x172>
    128c:	2c 81       	ldd	r18, Y+4	; 0x04
    128e:	3d 81       	ldd	r19, Y+5	; 0x05
    1290:	22 30       	cpi	r18, 0x02	; 2
    1292:	31 05       	cpc	r19, r1
    1294:	2c f4       	brge	.+10     	; 0x12a0 <DIO_voidSetPinDirection+0x130>
    1296:	8c 81       	ldd	r24, Y+4	; 0x04
    1298:	9d 81       	ldd	r25, Y+5	; 0x05
    129a:	00 97       	sbiw	r24, 0x00	; 0
    129c:	69 f0       	breq	.+26     	; 0x12b8 <DIO_voidSetPinDirection+0x148>
    129e:	5f c0       	rjmp	.+190    	; 0x135e <DIO_voidSetPinDirection+0x1ee>
    12a0:	2c 81       	ldd	r18, Y+4	; 0x04
    12a2:	3d 81       	ldd	r19, Y+5	; 0x05
    12a4:	22 30       	cpi	r18, 0x02	; 2
    12a6:	31 05       	cpc	r19, r1
    12a8:	89 f1       	breq	.+98     	; 0x130c <DIO_voidSetPinDirection+0x19c>
    12aa:	8c 81       	ldd	r24, Y+4	; 0x04
    12ac:	9d 81       	ldd	r25, Y+5	; 0x05
    12ae:	83 30       	cpi	r24, 0x03	; 3
    12b0:	91 05       	cpc	r25, r1
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <DIO_voidSetPinDirection+0x146>
    12b4:	40 c0       	rjmp	.+128    	; 0x1336 <DIO_voidSetPinDirection+0x1c6>
    12b6:	53 c0       	rjmp	.+166    	; 0x135e <DIO_voidSetPinDirection+0x1ee>
			case PORTA/*Port A*/: ClrBit(DDRA_REG,Copy_u8PinID);break;
    12b8:	aa e3       	ldi	r26, 0x3A	; 58
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	ea e3       	ldi	r30, 0x3A	; 58
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	48 2f       	mov	r20, r24
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	02 2e       	mov	r0, r18
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <DIO_voidSetPinDirection+0x166>
    12d2:	88 0f       	add	r24, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	0a 94       	dec	r0
    12d8:	e2 f7       	brpl	.-8      	; 0x12d2 <DIO_voidSetPinDirection+0x162>
    12da:	80 95       	com	r24
    12dc:	84 23       	and	r24, r20
    12de:	8c 93       	st	X, r24
    12e0:	3e c0       	rjmp	.+124    	; 0x135e <DIO_voidSetPinDirection+0x1ee>
			case PORTB/*Port B*/: ClrBit(DDRB_REG,Copy_u8PinID);break;
    12e2:	a7 e3       	ldi	r26, 0x37	; 55
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e7 e3       	ldi	r30, 0x37	; 55
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	48 2f       	mov	r20, r24
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	02 2e       	mov	r0, r18
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <DIO_voidSetPinDirection+0x190>
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	0a 94       	dec	r0
    1302:	e2 f7       	brpl	.-8      	; 0x12fc <DIO_voidSetPinDirection+0x18c>
    1304:	80 95       	com	r24
    1306:	84 23       	and	r24, r20
    1308:	8c 93       	st	X, r24
    130a:	29 c0       	rjmp	.+82     	; 0x135e <DIO_voidSetPinDirection+0x1ee>
			case PORTC/*Port C*/: ClrBit(DDRC_REG,Copy_u8PinID);break;
    130c:	a4 e3       	ldi	r26, 0x34	; 52
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	e4 e3       	ldi	r30, 0x34	; 52
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	48 2f       	mov	r20, r24
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	02 2e       	mov	r0, r18
    1324:	02 c0       	rjmp	.+4      	; 0x132a <DIO_voidSetPinDirection+0x1ba>
    1326:	88 0f       	add	r24, r24
    1328:	99 1f       	adc	r25, r25
    132a:	0a 94       	dec	r0
    132c:	e2 f7       	brpl	.-8      	; 0x1326 <DIO_voidSetPinDirection+0x1b6>
    132e:	80 95       	com	r24
    1330:	84 23       	and	r24, r20
    1332:	8c 93       	st	X, r24
    1334:	14 c0       	rjmp	.+40     	; 0x135e <DIO_voidSetPinDirection+0x1ee>
			case PORTD/*Port D*/: ClrBit(DDRD_REG,Copy_u8PinID);break;
    1336:	a1 e3       	ldi	r26, 0x31	; 49
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	e1 e3       	ldi	r30, 0x31	; 49
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	48 2f       	mov	r20, r24
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	02 2e       	mov	r0, r18
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <DIO_voidSetPinDirection+0x1e4>
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	0a 94       	dec	r0
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <DIO_voidSetPinDirection+0x1e0>
    1358:	80 95       	com	r24
    135a:	84 23       	and	r24, r20
    135c:	8c 93       	st	X, r24
		}
	}
}
    135e:	27 96       	adiw	r28, 0x07	; 7
    1360:	0f b6       	in	r0, 0x3f	; 63
    1362:	f8 94       	cli
    1364:	de bf       	out	0x3e, r29	; 62
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	cd bf       	out	0x3d, r28	; 61
    136a:	cf 91       	pop	r28
    136c:	df 91       	pop	r29
    136e:	08 95       	ret

00001370 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
    1370:	df 93       	push	r29
    1372:	cf 93       	push	r28
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
    1378:	27 97       	sbiw	r28, 0x07	; 7
    137a:	0f b6       	in	r0, 0x3f	; 63
    137c:	f8 94       	cli
    137e:	de bf       	out	0x3e, r29	; 62
    1380:	0f be       	out	0x3f, r0	; 63
    1382:	cd bf       	out	0x3d, r28	; 61
    1384:	89 83       	std	Y+1, r24	; 0x01
    1386:	6a 83       	std	Y+2, r22	; 0x02
    1388:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinValue==PIN_HIGH){      //high
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	81 30       	cpi	r24, 0x01	; 1
    138e:	09 f0       	breq	.+2      	; 0x1392 <DIO_voidSetPinValue+0x22>
    1390:	6f c0       	rjmp	.+222    	; 0x1470 <DIO_voidSetPinValue+0x100>
		switch(Copy_u8PortID){
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	3f 83       	std	Y+7, r19	; 0x07
    139a:	2e 83       	std	Y+6, r18	; 0x06
    139c:	8e 81       	ldd	r24, Y+6	; 0x06
    139e:	9f 81       	ldd	r25, Y+7	; 0x07
    13a0:	81 30       	cpi	r24, 0x01	; 1
    13a2:	91 05       	cpc	r25, r1
    13a4:	49 f1       	breq	.+82     	; 0x13f8 <DIO_voidSetPinValue+0x88>
    13a6:	2e 81       	ldd	r18, Y+6	; 0x06
    13a8:	3f 81       	ldd	r19, Y+7	; 0x07
    13aa:	22 30       	cpi	r18, 0x02	; 2
    13ac:	31 05       	cpc	r19, r1
    13ae:	2c f4       	brge	.+10     	; 0x13ba <DIO_voidSetPinValue+0x4a>
    13b0:	8e 81       	ldd	r24, Y+6	; 0x06
    13b2:	9f 81       	ldd	r25, Y+7	; 0x07
    13b4:	00 97       	sbiw	r24, 0x00	; 0
    13b6:	61 f0       	breq	.+24     	; 0x13d0 <DIO_voidSetPinValue+0x60>
    13b8:	d2 c0       	rjmp	.+420    	; 0x155e <DIO_voidSetPinValue+0x1ee>
    13ba:	2e 81       	ldd	r18, Y+6	; 0x06
    13bc:	3f 81       	ldd	r19, Y+7	; 0x07
    13be:	22 30       	cpi	r18, 0x02	; 2
    13c0:	31 05       	cpc	r19, r1
    13c2:	71 f1       	breq	.+92     	; 0x1420 <DIO_voidSetPinValue+0xb0>
    13c4:	8e 81       	ldd	r24, Y+6	; 0x06
    13c6:	9f 81       	ldd	r25, Y+7	; 0x07
    13c8:	83 30       	cpi	r24, 0x03	; 3
    13ca:	91 05       	cpc	r25, r1
    13cc:	e9 f1       	breq	.+122    	; 0x1448 <DIO_voidSetPinValue+0xd8>
    13ce:	c7 c0       	rjmp	.+398    	; 0x155e <DIO_voidSetPinValue+0x1ee>
			case PORTA/*Port A*/: SetBit(PORTA_REG,Copy_u8PinID);break;
    13d0:	ab e3       	ldi	r26, 0x3B	; 59
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	eb e3       	ldi	r30, 0x3B	; 59
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	48 2f       	mov	r20, r24
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	02 2e       	mov	r0, r18
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <DIO_voidSetPinValue+0x7e>
    13ea:	88 0f       	add	r24, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	0a 94       	dec	r0
    13f0:	e2 f7       	brpl	.-8      	; 0x13ea <DIO_voidSetPinValue+0x7a>
    13f2:	84 2b       	or	r24, r20
    13f4:	8c 93       	st	X, r24
    13f6:	b3 c0       	rjmp	.+358    	; 0x155e <DIO_voidSetPinValue+0x1ee>
			case PORTB/*Port B*/: SetBit(PORTB_REG,Copy_u8PinID);break;
    13f8:	a8 e3       	ldi	r26, 0x38	; 56
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	e8 e3       	ldi	r30, 0x38	; 56
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	48 2f       	mov	r20, r24
    1404:	8a 81       	ldd	r24, Y+2	; 0x02
    1406:	28 2f       	mov	r18, r24
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	02 2e       	mov	r0, r18
    1410:	02 c0       	rjmp	.+4      	; 0x1416 <DIO_voidSetPinValue+0xa6>
    1412:	88 0f       	add	r24, r24
    1414:	99 1f       	adc	r25, r25
    1416:	0a 94       	dec	r0
    1418:	e2 f7       	brpl	.-8      	; 0x1412 <DIO_voidSetPinValue+0xa2>
    141a:	84 2b       	or	r24, r20
    141c:	8c 93       	st	X, r24
    141e:	9f c0       	rjmp	.+318    	; 0x155e <DIO_voidSetPinValue+0x1ee>
			case PORTC/*Port C*/: SetBit(PORTC_REG,Copy_u8PinID);break;
    1420:	a5 e3       	ldi	r26, 0x35	; 53
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	e5 e3       	ldi	r30, 0x35	; 53
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	48 2f       	mov	r20, r24
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	02 2e       	mov	r0, r18
    1438:	02 c0       	rjmp	.+4      	; 0x143e <DIO_voidSetPinValue+0xce>
    143a:	88 0f       	add	r24, r24
    143c:	99 1f       	adc	r25, r25
    143e:	0a 94       	dec	r0
    1440:	e2 f7       	brpl	.-8      	; 0x143a <DIO_voidSetPinValue+0xca>
    1442:	84 2b       	or	r24, r20
    1444:	8c 93       	st	X, r24
    1446:	8b c0       	rjmp	.+278    	; 0x155e <DIO_voidSetPinValue+0x1ee>
			case PORTD/*Port D*/: SetBit(PORTD_REG,Copy_u8PinID);break;
    1448:	a2 e3       	ldi	r26, 0x32	; 50
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	e2 e3       	ldi	r30, 0x32	; 50
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	48 2f       	mov	r20, r24
    1454:	8a 81       	ldd	r24, Y+2	; 0x02
    1456:	28 2f       	mov	r18, r24
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	02 2e       	mov	r0, r18
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <DIO_voidSetPinValue+0xf6>
    1462:	88 0f       	add	r24, r24
    1464:	99 1f       	adc	r25, r25
    1466:	0a 94       	dec	r0
    1468:	e2 f7       	brpl	.-8      	; 0x1462 <DIO_voidSetPinValue+0xf2>
    146a:	84 2b       	or	r24, r20
    146c:	8c 93       	st	X, r24
    146e:	77 c0       	rjmp	.+238    	; 0x155e <DIO_voidSetPinValue+0x1ee>
		}
	}
	else if(Copy_u8PinValue==PIN_LOW){  //low
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	88 23       	and	r24, r24
    1474:	09 f0       	breq	.+2      	; 0x1478 <DIO_voidSetPinValue+0x108>
    1476:	73 c0       	rjmp	.+230    	; 0x155e <DIO_voidSetPinValue+0x1ee>
		switch(Copy_u8PortID){
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	28 2f       	mov	r18, r24
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	3d 83       	std	Y+5, r19	; 0x05
    1480:	2c 83       	std	Y+4, r18	; 0x04
    1482:	8c 81       	ldd	r24, Y+4	; 0x04
    1484:	9d 81       	ldd	r25, Y+5	; 0x05
    1486:	81 30       	cpi	r24, 0x01	; 1
    1488:	91 05       	cpc	r25, r1
    148a:	59 f1       	breq	.+86     	; 0x14e2 <DIO_voidSetPinValue+0x172>
    148c:	2c 81       	ldd	r18, Y+4	; 0x04
    148e:	3d 81       	ldd	r19, Y+5	; 0x05
    1490:	22 30       	cpi	r18, 0x02	; 2
    1492:	31 05       	cpc	r19, r1
    1494:	2c f4       	brge	.+10     	; 0x14a0 <DIO_voidSetPinValue+0x130>
    1496:	8c 81       	ldd	r24, Y+4	; 0x04
    1498:	9d 81       	ldd	r25, Y+5	; 0x05
    149a:	00 97       	sbiw	r24, 0x00	; 0
    149c:	69 f0       	breq	.+26     	; 0x14b8 <DIO_voidSetPinValue+0x148>
    149e:	5f c0       	rjmp	.+190    	; 0x155e <DIO_voidSetPinValue+0x1ee>
    14a0:	2c 81       	ldd	r18, Y+4	; 0x04
    14a2:	3d 81       	ldd	r19, Y+5	; 0x05
    14a4:	22 30       	cpi	r18, 0x02	; 2
    14a6:	31 05       	cpc	r19, r1
    14a8:	89 f1       	breq	.+98     	; 0x150c <DIO_voidSetPinValue+0x19c>
    14aa:	8c 81       	ldd	r24, Y+4	; 0x04
    14ac:	9d 81       	ldd	r25, Y+5	; 0x05
    14ae:	83 30       	cpi	r24, 0x03	; 3
    14b0:	91 05       	cpc	r25, r1
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <DIO_voidSetPinValue+0x146>
    14b4:	40 c0       	rjmp	.+128    	; 0x1536 <DIO_voidSetPinValue+0x1c6>
    14b6:	53 c0       	rjmp	.+166    	; 0x155e <DIO_voidSetPinValue+0x1ee>
			case PORTA/*Port A*/: ClrBit(PORTA_REG,Copy_u8PinID);break;
    14b8:	ab e3       	ldi	r26, 0x3B	; 59
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	eb e3       	ldi	r30, 0x3B	; 59
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	48 2f       	mov	r20, r24
    14c4:	8a 81       	ldd	r24, Y+2	; 0x02
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	02 2e       	mov	r0, r18
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <DIO_voidSetPinValue+0x166>
    14d2:	88 0f       	add	r24, r24
    14d4:	99 1f       	adc	r25, r25
    14d6:	0a 94       	dec	r0
    14d8:	e2 f7       	brpl	.-8      	; 0x14d2 <DIO_voidSetPinValue+0x162>
    14da:	80 95       	com	r24
    14dc:	84 23       	and	r24, r20
    14de:	8c 93       	st	X, r24
    14e0:	3e c0       	rjmp	.+124    	; 0x155e <DIO_voidSetPinValue+0x1ee>
			case PORTB/*Port B*/: ClrBit(PORTB_REG,Copy_u8PinID);break;
    14e2:	a8 e3       	ldi	r26, 0x38	; 56
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	e8 e3       	ldi	r30, 0x38	; 56
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	48 2f       	mov	r20, r24
    14ee:	8a 81       	ldd	r24, Y+2	; 0x02
    14f0:	28 2f       	mov	r18, r24
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	02 2e       	mov	r0, r18
    14fa:	02 c0       	rjmp	.+4      	; 0x1500 <DIO_voidSetPinValue+0x190>
    14fc:	88 0f       	add	r24, r24
    14fe:	99 1f       	adc	r25, r25
    1500:	0a 94       	dec	r0
    1502:	e2 f7       	brpl	.-8      	; 0x14fc <DIO_voidSetPinValue+0x18c>
    1504:	80 95       	com	r24
    1506:	84 23       	and	r24, r20
    1508:	8c 93       	st	X, r24
    150a:	29 c0       	rjmp	.+82     	; 0x155e <DIO_voidSetPinValue+0x1ee>
			case PORTC/*Port C*/: ClrBit(PORTC_REG,Copy_u8PinID);break;
    150c:	a5 e3       	ldi	r26, 0x35	; 53
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	e5 e3       	ldi	r30, 0x35	; 53
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	48 2f       	mov	r20, r24
    1518:	8a 81       	ldd	r24, Y+2	; 0x02
    151a:	28 2f       	mov	r18, r24
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	02 2e       	mov	r0, r18
    1524:	02 c0       	rjmp	.+4      	; 0x152a <DIO_voidSetPinValue+0x1ba>
    1526:	88 0f       	add	r24, r24
    1528:	99 1f       	adc	r25, r25
    152a:	0a 94       	dec	r0
    152c:	e2 f7       	brpl	.-8      	; 0x1526 <DIO_voidSetPinValue+0x1b6>
    152e:	80 95       	com	r24
    1530:	84 23       	and	r24, r20
    1532:	8c 93       	st	X, r24
    1534:	14 c0       	rjmp	.+40     	; 0x155e <DIO_voidSetPinValue+0x1ee>
			case PORTD/*Port D*/: ClrBit(PORTD_REG,Copy_u8PinID);break;
    1536:	a2 e3       	ldi	r26, 0x32	; 50
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e2 e3       	ldi	r30, 0x32	; 50
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	48 2f       	mov	r20, r24
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	02 2e       	mov	r0, r18
    154e:	02 c0       	rjmp	.+4      	; 0x1554 <DIO_voidSetPinValue+0x1e4>
    1550:	88 0f       	add	r24, r24
    1552:	99 1f       	adc	r25, r25
    1554:	0a 94       	dec	r0
    1556:	e2 f7       	brpl	.-8      	; 0x1550 <DIO_voidSetPinValue+0x1e0>
    1558:	80 95       	com	r24
    155a:	84 23       	and	r24, r20
    155c:	8c 93       	st	X, r24
		}
	}	
}
    155e:	27 96       	adiw	r28, 0x07	; 7
    1560:	0f b6       	in	r0, 0x3f	; 63
    1562:	f8 94       	cli
    1564:	de bf       	out	0x3e, r29	; 62
    1566:	0f be       	out	0x3f, r0	; 63
    1568:	cd bf       	out	0x3d, r28	; 61
    156a:	cf 91       	pop	r28
    156c:	df 91       	pop	r29
    156e:	08 95       	ret

00001570 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(u8 Copy_u8PortID,u8 Copy_u8PortDir){
    1570:	df 93       	push	r29
    1572:	cf 93       	push	r28
    1574:	00 d0       	rcall	.+0      	; 0x1576 <DIO_voidSetPortDirection+0x6>
    1576:	00 d0       	rcall	.+0      	; 0x1578 <DIO_voidSetPortDirection+0x8>
    1578:	cd b7       	in	r28, 0x3d	; 61
    157a:	de b7       	in	r29, 0x3e	; 62
    157c:	89 83       	std	Y+1, r24	; 0x01
    157e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortID){
    1580:	89 81       	ldd	r24, Y+1	; 0x01
    1582:	28 2f       	mov	r18, r24
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	3c 83       	std	Y+4, r19	; 0x04
    1588:	2b 83       	std	Y+3, r18	; 0x03
    158a:	8b 81       	ldd	r24, Y+3	; 0x03
    158c:	9c 81       	ldd	r25, Y+4	; 0x04
    158e:	81 30       	cpi	r24, 0x01	; 1
    1590:	91 05       	cpc	r25, r1
    1592:	d1 f0       	breq	.+52     	; 0x15c8 <DIO_voidSetPortDirection+0x58>
    1594:	2b 81       	ldd	r18, Y+3	; 0x03
    1596:	3c 81       	ldd	r19, Y+4	; 0x04
    1598:	22 30       	cpi	r18, 0x02	; 2
    159a:	31 05       	cpc	r19, r1
    159c:	2c f4       	brge	.+10     	; 0x15a8 <DIO_voidSetPortDirection+0x38>
    159e:	8b 81       	ldd	r24, Y+3	; 0x03
    15a0:	9c 81       	ldd	r25, Y+4	; 0x04
    15a2:	00 97       	sbiw	r24, 0x00	; 0
    15a4:	61 f0       	breq	.+24     	; 0x15be <DIO_voidSetPortDirection+0x4e>
    15a6:	1e c0       	rjmp	.+60     	; 0x15e4 <DIO_voidSetPortDirection+0x74>
    15a8:	2b 81       	ldd	r18, Y+3	; 0x03
    15aa:	3c 81       	ldd	r19, Y+4	; 0x04
    15ac:	22 30       	cpi	r18, 0x02	; 2
    15ae:	31 05       	cpc	r19, r1
    15b0:	81 f0       	breq	.+32     	; 0x15d2 <DIO_voidSetPortDirection+0x62>
    15b2:	8b 81       	ldd	r24, Y+3	; 0x03
    15b4:	9c 81       	ldd	r25, Y+4	; 0x04
    15b6:	83 30       	cpi	r24, 0x03	; 3
    15b8:	91 05       	cpc	r25, r1
    15ba:	81 f0       	breq	.+32     	; 0x15dc <DIO_voidSetPortDirection+0x6c>
    15bc:	13 c0       	rjmp	.+38     	; 0x15e4 <DIO_voidSetPortDirection+0x74>
		case PORTA/*Port A*/: DDRA_REG=Copy_u8PortDir;break;
    15be:	ea e3       	ldi	r30, 0x3A	; 58
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	80 83       	st	Z, r24
    15c6:	0e c0       	rjmp	.+28     	; 0x15e4 <DIO_voidSetPortDirection+0x74>
		case PORTB/*Port B*/: DDRB_REG=Copy_u8PortDir;break;
    15c8:	e7 e3       	ldi	r30, 0x37	; 55
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	80 83       	st	Z, r24
    15d0:	09 c0       	rjmp	.+18     	; 0x15e4 <DIO_voidSetPortDirection+0x74>
		case PORTC/*Port C*/: DDRC_REG=Copy_u8PortDir;break;
    15d2:	e4 e3       	ldi	r30, 0x34	; 52
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	8a 81       	ldd	r24, Y+2	; 0x02
    15d8:	80 83       	st	Z, r24
    15da:	04 c0       	rjmp	.+8      	; 0x15e4 <DIO_voidSetPortDirection+0x74>
		case PORTD/*Port D*/: DDRD_REG=Copy_u8PortDir;break;
    15dc:	e1 e3       	ldi	r30, 0x31	; 49
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	80 83       	st	Z, r24
	}
}
    15e4:	0f 90       	pop	r0
    15e6:	0f 90       	pop	r0
    15e8:	0f 90       	pop	r0
    15ea:	0f 90       	pop	r0
    15ec:	cf 91       	pop	r28
    15ee:	df 91       	pop	r29
    15f0:	08 95       	ret

000015f2 <DIO_voidSetAllPortInput>:

void DIO_voidSetAllPortInput(u8 Copy_u8PortID){
    15f2:	df 93       	push	r29
    15f4:	cf 93       	push	r28
    15f6:	00 d0       	rcall	.+0      	; 0x15f8 <DIO_voidSetAllPortInput+0x6>
    15f8:	0f 92       	push	r0
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID){
    1600:	89 81       	ldd	r24, Y+1	; 0x01
    1602:	28 2f       	mov	r18, r24
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	3b 83       	std	Y+3, r19	; 0x03
    1608:	2a 83       	std	Y+2, r18	; 0x02
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	9b 81       	ldd	r25, Y+3	; 0x03
    160e:	81 30       	cpi	r24, 0x01	; 1
    1610:	91 05       	cpc	r25, r1
    1612:	c9 f0       	breq	.+50     	; 0x1646 <DIO_voidSetAllPortInput+0x54>
    1614:	2a 81       	ldd	r18, Y+2	; 0x02
    1616:	3b 81       	ldd	r19, Y+3	; 0x03
    1618:	22 30       	cpi	r18, 0x02	; 2
    161a:	31 05       	cpc	r19, r1
    161c:	2c f4       	brge	.+10     	; 0x1628 <DIO_voidSetAllPortInput+0x36>
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	9b 81       	ldd	r25, Y+3	; 0x03
    1622:	00 97       	sbiw	r24, 0x00	; 0
    1624:	61 f0       	breq	.+24     	; 0x163e <DIO_voidSetAllPortInput+0x4c>
    1626:	1a c0       	rjmp	.+52     	; 0x165c <DIO_voidSetAllPortInput+0x6a>
    1628:	2a 81       	ldd	r18, Y+2	; 0x02
    162a:	3b 81       	ldd	r19, Y+3	; 0x03
    162c:	22 30       	cpi	r18, 0x02	; 2
    162e:	31 05       	cpc	r19, r1
    1630:	71 f0       	breq	.+28     	; 0x164e <DIO_voidSetAllPortInput+0x5c>
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	9b 81       	ldd	r25, Y+3	; 0x03
    1636:	83 30       	cpi	r24, 0x03	; 3
    1638:	91 05       	cpc	r25, r1
    163a:	69 f0       	breq	.+26     	; 0x1656 <DIO_voidSetAllPortInput+0x64>
    163c:	0f c0       	rjmp	.+30     	; 0x165c <DIO_voidSetAllPortInput+0x6a>
		case PORTA/*Port A*/: DDRA_REG=PORT_INPUT;break;
    163e:	ea e3       	ldi	r30, 0x3A	; 58
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	10 82       	st	Z, r1
    1644:	0b c0       	rjmp	.+22     	; 0x165c <DIO_voidSetAllPortInput+0x6a>
		case PORTB/*Port B*/: DDRB_REG=PORT_INPUT;break;
    1646:	e7 e3       	ldi	r30, 0x37	; 55
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	10 82       	st	Z, r1
    164c:	07 c0       	rjmp	.+14     	; 0x165c <DIO_voidSetAllPortInput+0x6a>
		case PORTC/*Port C*/: DDRC_REG=PORT_INPUT;break;
    164e:	e4 e3       	ldi	r30, 0x34	; 52
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	10 82       	st	Z, r1
    1654:	03 c0       	rjmp	.+6      	; 0x165c <DIO_voidSetAllPortInput+0x6a>
		case PORTD/*Port D*/: DDRD_REG=PORT_INPUT;break;
    1656:	e1 e3       	ldi	r30, 0x31	; 49
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	10 82       	st	Z, r1
	}
}
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	cf 91       	pop	r28
    1664:	df 91       	pop	r29
    1666:	08 95       	ret

00001668 <DIO_voidSetAllPortOutput>:

void DIO_voidSetAllPortOutput(u8 Copy_u8PortID){
    1668:	df 93       	push	r29
    166a:	cf 93       	push	r28
    166c:	00 d0       	rcall	.+0      	; 0x166e <DIO_voidSetAllPortOutput+0x6>
    166e:	0f 92       	push	r0
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
    1674:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID){
    1676:	89 81       	ldd	r24, Y+1	; 0x01
    1678:	28 2f       	mov	r18, r24
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	3b 83       	std	Y+3, r19	; 0x03
    167e:	2a 83       	std	Y+2, r18	; 0x02
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	9b 81       	ldd	r25, Y+3	; 0x03
    1684:	81 30       	cpi	r24, 0x01	; 1
    1686:	91 05       	cpc	r25, r1
    1688:	d1 f0       	breq	.+52     	; 0x16be <DIO_voidSetAllPortOutput+0x56>
    168a:	2a 81       	ldd	r18, Y+2	; 0x02
    168c:	3b 81       	ldd	r19, Y+3	; 0x03
    168e:	22 30       	cpi	r18, 0x02	; 2
    1690:	31 05       	cpc	r19, r1
    1692:	2c f4       	brge	.+10     	; 0x169e <DIO_voidSetAllPortOutput+0x36>
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	9b 81       	ldd	r25, Y+3	; 0x03
    1698:	00 97       	sbiw	r24, 0x00	; 0
    169a:	61 f0       	breq	.+24     	; 0x16b4 <DIO_voidSetAllPortOutput+0x4c>
    169c:	1e c0       	rjmp	.+60     	; 0x16da <DIO_voidSetAllPortOutput+0x72>
    169e:	2a 81       	ldd	r18, Y+2	; 0x02
    16a0:	3b 81       	ldd	r19, Y+3	; 0x03
    16a2:	22 30       	cpi	r18, 0x02	; 2
    16a4:	31 05       	cpc	r19, r1
    16a6:	81 f0       	breq	.+32     	; 0x16c8 <DIO_voidSetAllPortOutput+0x60>
    16a8:	8a 81       	ldd	r24, Y+2	; 0x02
    16aa:	9b 81       	ldd	r25, Y+3	; 0x03
    16ac:	83 30       	cpi	r24, 0x03	; 3
    16ae:	91 05       	cpc	r25, r1
    16b0:	81 f0       	breq	.+32     	; 0x16d2 <DIO_voidSetAllPortOutput+0x6a>
    16b2:	13 c0       	rjmp	.+38     	; 0x16da <DIO_voidSetAllPortOutput+0x72>
		case PORTA/*Port A*/: DDRA_REG=PORT_OUTPUT;break;
    16b4:	ea e3       	ldi	r30, 0x3A	; 58
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	8f ef       	ldi	r24, 0xFF	; 255
    16ba:	80 83       	st	Z, r24
    16bc:	0e c0       	rjmp	.+28     	; 0x16da <DIO_voidSetAllPortOutput+0x72>
		case PORTB/*Port B*/: DDRB_REG=PORT_OUTPUT;break;
    16be:	e7 e3       	ldi	r30, 0x37	; 55
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	8f ef       	ldi	r24, 0xFF	; 255
    16c4:	80 83       	st	Z, r24
    16c6:	09 c0       	rjmp	.+18     	; 0x16da <DIO_voidSetAllPortOutput+0x72>
		case PORTC/*Port C*/: DDRC_REG=PORT_OUTPUT;break;
    16c8:	e4 e3       	ldi	r30, 0x34	; 52
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	8f ef       	ldi	r24, 0xFF	; 255
    16ce:	80 83       	st	Z, r24
    16d0:	04 c0       	rjmp	.+8      	; 0x16da <DIO_voidSetAllPortOutput+0x72>
		case PORTD/*Port D*/: DDRD_REG=PORT_OUTPUT;break;
    16d2:	e1 e3       	ldi	r30, 0x31	; 49
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	8f ef       	ldi	r24, 0xFF	; 255
    16d8:	80 83       	st	Z, r24
	}
}
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	cf 91       	pop	r28
    16e2:	df 91       	pop	r29
    16e4:	08 95       	ret

000016e6 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 Copy_u8PortID,u8 Copy_u8PortValue){
    16e6:	df 93       	push	r29
    16e8:	cf 93       	push	r28
    16ea:	00 d0       	rcall	.+0      	; 0x16ec <DIO_voidSetPortValue+0x6>
    16ec:	00 d0       	rcall	.+0      	; 0x16ee <DIO_voidSetPortValue+0x8>
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
    16f2:	89 83       	std	Y+1, r24	; 0x01
    16f4:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortID){
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	3c 83       	std	Y+4, r19	; 0x04
    16fe:	2b 83       	std	Y+3, r18	; 0x03
    1700:	8b 81       	ldd	r24, Y+3	; 0x03
    1702:	9c 81       	ldd	r25, Y+4	; 0x04
    1704:	81 30       	cpi	r24, 0x01	; 1
    1706:	91 05       	cpc	r25, r1
    1708:	d1 f0       	breq	.+52     	; 0x173e <DIO_voidSetPortValue+0x58>
    170a:	2b 81       	ldd	r18, Y+3	; 0x03
    170c:	3c 81       	ldd	r19, Y+4	; 0x04
    170e:	22 30       	cpi	r18, 0x02	; 2
    1710:	31 05       	cpc	r19, r1
    1712:	2c f4       	brge	.+10     	; 0x171e <DIO_voidSetPortValue+0x38>
    1714:	8b 81       	ldd	r24, Y+3	; 0x03
    1716:	9c 81       	ldd	r25, Y+4	; 0x04
    1718:	00 97       	sbiw	r24, 0x00	; 0
    171a:	61 f0       	breq	.+24     	; 0x1734 <DIO_voidSetPortValue+0x4e>
    171c:	1e c0       	rjmp	.+60     	; 0x175a <DIO_voidSetPortValue+0x74>
    171e:	2b 81       	ldd	r18, Y+3	; 0x03
    1720:	3c 81       	ldd	r19, Y+4	; 0x04
    1722:	22 30       	cpi	r18, 0x02	; 2
    1724:	31 05       	cpc	r19, r1
    1726:	81 f0       	breq	.+32     	; 0x1748 <DIO_voidSetPortValue+0x62>
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
    172a:	9c 81       	ldd	r25, Y+4	; 0x04
    172c:	83 30       	cpi	r24, 0x03	; 3
    172e:	91 05       	cpc	r25, r1
    1730:	81 f0       	breq	.+32     	; 0x1752 <DIO_voidSetPortValue+0x6c>
    1732:	13 c0       	rjmp	.+38     	; 0x175a <DIO_voidSetPortValue+0x74>
		case PORTA/*Port A*/: PORTA_REG=Copy_u8PortValue;break;
    1734:	eb e3       	ldi	r30, 0x3B	; 59
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	8a 81       	ldd	r24, Y+2	; 0x02
    173a:	80 83       	st	Z, r24
    173c:	0e c0       	rjmp	.+28     	; 0x175a <DIO_voidSetPortValue+0x74>
		case PORTB/*Port B*/: PORTB_REG=Copy_u8PortValue;break;
    173e:	e8 e3       	ldi	r30, 0x38	; 56
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	80 83       	st	Z, r24
    1746:	09 c0       	rjmp	.+18     	; 0x175a <DIO_voidSetPortValue+0x74>
		case PORTC/*Port C*/: PORTC_REG=Copy_u8PortValue;break;
    1748:	e5 e3       	ldi	r30, 0x35	; 53
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	8a 81       	ldd	r24, Y+2	; 0x02
    174e:	80 83       	st	Z, r24
    1750:	04 c0       	rjmp	.+8      	; 0x175a <DIO_voidSetPortValue+0x74>
		case PORTD/*Port D*/: PORTD_REG=Copy_u8PortValue;break;
    1752:	e2 e3       	ldi	r30, 0x32	; 50
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	8a 81       	ldd	r24, Y+2	; 0x02
    1758:	80 83       	st	Z, r24
	}
}
    175a:	0f 90       	pop	r0
    175c:	0f 90       	pop	r0
    175e:	0f 90       	pop	r0
    1760:	0f 90       	pop	r0
    1762:	cf 91       	pop	r28
    1764:	df 91       	pop	r29
    1766:	08 95       	ret

00001768 <DIO_voidSetAllPortLow>:

void DIO_voidSetAllPortLow(u8 Copy_u8PortID){
    1768:	df 93       	push	r29
    176a:	cf 93       	push	r28
    176c:	00 d0       	rcall	.+0      	; 0x176e <DIO_voidSetAllPortLow+0x6>
    176e:	0f 92       	push	r0
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
    1774:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID){
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	28 2f       	mov	r18, r24
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	3b 83       	std	Y+3, r19	; 0x03
    177e:	2a 83       	std	Y+2, r18	; 0x02
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	9b 81       	ldd	r25, Y+3	; 0x03
    1784:	81 30       	cpi	r24, 0x01	; 1
    1786:	91 05       	cpc	r25, r1
    1788:	c9 f0       	breq	.+50     	; 0x17bc <DIO_voidSetAllPortLow+0x54>
    178a:	2a 81       	ldd	r18, Y+2	; 0x02
    178c:	3b 81       	ldd	r19, Y+3	; 0x03
    178e:	22 30       	cpi	r18, 0x02	; 2
    1790:	31 05       	cpc	r19, r1
    1792:	2c f4       	brge	.+10     	; 0x179e <DIO_voidSetAllPortLow+0x36>
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	9b 81       	ldd	r25, Y+3	; 0x03
    1798:	00 97       	sbiw	r24, 0x00	; 0
    179a:	61 f0       	breq	.+24     	; 0x17b4 <DIO_voidSetAllPortLow+0x4c>
    179c:	1a c0       	rjmp	.+52     	; 0x17d2 <DIO_voidSetAllPortLow+0x6a>
    179e:	2a 81       	ldd	r18, Y+2	; 0x02
    17a0:	3b 81       	ldd	r19, Y+3	; 0x03
    17a2:	22 30       	cpi	r18, 0x02	; 2
    17a4:	31 05       	cpc	r19, r1
    17a6:	71 f0       	breq	.+28     	; 0x17c4 <DIO_voidSetAllPortLow+0x5c>
    17a8:	8a 81       	ldd	r24, Y+2	; 0x02
    17aa:	9b 81       	ldd	r25, Y+3	; 0x03
    17ac:	83 30       	cpi	r24, 0x03	; 3
    17ae:	91 05       	cpc	r25, r1
    17b0:	69 f0       	breq	.+26     	; 0x17cc <DIO_voidSetAllPortLow+0x64>
    17b2:	0f c0       	rjmp	.+30     	; 0x17d2 <DIO_voidSetAllPortLow+0x6a>
		case PORTA/*Port A*/: PORTA_REG=PORT_LOW;break;
    17b4:	eb e3       	ldi	r30, 0x3B	; 59
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	10 82       	st	Z, r1
    17ba:	0b c0       	rjmp	.+22     	; 0x17d2 <DIO_voidSetAllPortLow+0x6a>
		case PORTB/*Port B*/: PORTB_REG=PORT_LOW;break;
    17bc:	e8 e3       	ldi	r30, 0x38	; 56
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	10 82       	st	Z, r1
    17c2:	07 c0       	rjmp	.+14     	; 0x17d2 <DIO_voidSetAllPortLow+0x6a>
		case PORTC/*Port C*/: PORTC_REG=PORT_LOW;break;
    17c4:	e5 e3       	ldi	r30, 0x35	; 53
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	10 82       	st	Z, r1
    17ca:	03 c0       	rjmp	.+6      	; 0x17d2 <DIO_voidSetAllPortLow+0x6a>
		case PORTD/*Port D*/: PORTD_REG=PORT_LOW;break;
    17cc:	e2 e3       	ldi	r30, 0x32	; 50
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	10 82       	st	Z, r1
	}
}
    17d2:	0f 90       	pop	r0
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	cf 91       	pop	r28
    17da:	df 91       	pop	r29
    17dc:	08 95       	ret

000017de <DIO_voidSetAllPortHigh>:

void DIO_voidSetAllPortHigh(u8 Copy_u8PortID){
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	00 d0       	rcall	.+0      	; 0x17e4 <DIO_voidSetAllPortHigh+0x6>
    17e4:	0f 92       	push	r0
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    17ea:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID){
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	28 2f       	mov	r18, r24
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	3b 83       	std	Y+3, r19	; 0x03
    17f4:	2a 83       	std	Y+2, r18	; 0x02
    17f6:	8a 81       	ldd	r24, Y+2	; 0x02
    17f8:	9b 81       	ldd	r25, Y+3	; 0x03
    17fa:	81 30       	cpi	r24, 0x01	; 1
    17fc:	91 05       	cpc	r25, r1
    17fe:	d1 f0       	breq	.+52     	; 0x1834 <DIO_voidSetAllPortHigh+0x56>
    1800:	2a 81       	ldd	r18, Y+2	; 0x02
    1802:	3b 81       	ldd	r19, Y+3	; 0x03
    1804:	22 30       	cpi	r18, 0x02	; 2
    1806:	31 05       	cpc	r19, r1
    1808:	2c f4       	brge	.+10     	; 0x1814 <DIO_voidSetAllPortHigh+0x36>
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	9b 81       	ldd	r25, Y+3	; 0x03
    180e:	00 97       	sbiw	r24, 0x00	; 0
    1810:	61 f0       	breq	.+24     	; 0x182a <DIO_voidSetAllPortHigh+0x4c>
    1812:	1e c0       	rjmp	.+60     	; 0x1850 <DIO_voidSetAllPortHigh+0x72>
    1814:	2a 81       	ldd	r18, Y+2	; 0x02
    1816:	3b 81       	ldd	r19, Y+3	; 0x03
    1818:	22 30       	cpi	r18, 0x02	; 2
    181a:	31 05       	cpc	r19, r1
    181c:	81 f0       	breq	.+32     	; 0x183e <DIO_voidSetAllPortHigh+0x60>
    181e:	8a 81       	ldd	r24, Y+2	; 0x02
    1820:	9b 81       	ldd	r25, Y+3	; 0x03
    1822:	83 30       	cpi	r24, 0x03	; 3
    1824:	91 05       	cpc	r25, r1
    1826:	81 f0       	breq	.+32     	; 0x1848 <DIO_voidSetAllPortHigh+0x6a>
    1828:	13 c0       	rjmp	.+38     	; 0x1850 <DIO_voidSetAllPortHigh+0x72>
		case PORTA/*Port A*/: PORTA_REG=PORT_HIGH;break;
    182a:	eb e3       	ldi	r30, 0x3B	; 59
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	8f ef       	ldi	r24, 0xFF	; 255
    1830:	80 83       	st	Z, r24
    1832:	0e c0       	rjmp	.+28     	; 0x1850 <DIO_voidSetAllPortHigh+0x72>
		case PORTB/*Port B*/: PORTB_REG=PORT_HIGH;break;
    1834:	e8 e3       	ldi	r30, 0x38	; 56
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	8f ef       	ldi	r24, 0xFF	; 255
    183a:	80 83       	st	Z, r24
    183c:	09 c0       	rjmp	.+18     	; 0x1850 <DIO_voidSetAllPortHigh+0x72>
		case PORTC/*Port C*/: PORTC_REG=PORT_HIGH;break;
    183e:	e5 e3       	ldi	r30, 0x35	; 53
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	8f ef       	ldi	r24, 0xFF	; 255
    1844:	80 83       	st	Z, r24
    1846:	04 c0       	rjmp	.+8      	; 0x1850 <DIO_voidSetAllPortHigh+0x72>
		case PORTD/*Port D*/: PORTD_REG=PORT_HIGH;break;
    1848:	e2 e3       	ldi	r30, 0x32	; 50
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	8f ef       	ldi	r24, 0xFF	; 255
    184e:	80 83       	st	Z, r24
	}
}
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	0f 90       	pop	r0
    1856:	cf 91       	pop	r28
    1858:	df 91       	pop	r29
    185a:	08 95       	ret

0000185c <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID){
    185c:	df 93       	push	r29
    185e:	cf 93       	push	r28
    1860:	00 d0       	rcall	.+0      	; 0x1862 <DIO_u8GetPinValue+0x6>
    1862:	00 d0       	rcall	.+0      	; 0x1864 <DIO_u8GetPinValue+0x8>
    1864:	0f 92       	push	r0
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
    186a:	8a 83       	std	Y+2, r24	; 0x02
    186c:	6b 83       	std	Y+3, r22	; 0x03
	u8 value;
	switch(Copy_u8PortID){
    186e:	8a 81       	ldd	r24, Y+2	; 0x02
    1870:	28 2f       	mov	r18, r24
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	3d 83       	std	Y+5, r19	; 0x05
    1876:	2c 83       	std	Y+4, r18	; 0x04
    1878:	4c 81       	ldd	r20, Y+4	; 0x04
    187a:	5d 81       	ldd	r21, Y+5	; 0x05
    187c:	41 30       	cpi	r20, 0x01	; 1
    187e:	51 05       	cpc	r21, r1
    1880:	41 f1       	breq	.+80     	; 0x18d2 <DIO_u8GetPinValue+0x76>
    1882:	8c 81       	ldd	r24, Y+4	; 0x04
    1884:	9d 81       	ldd	r25, Y+5	; 0x05
    1886:	82 30       	cpi	r24, 0x02	; 2
    1888:	91 05       	cpc	r25, r1
    188a:	34 f4       	brge	.+12     	; 0x1898 <DIO_u8GetPinValue+0x3c>
    188c:	2c 81       	ldd	r18, Y+4	; 0x04
    188e:	3d 81       	ldd	r19, Y+5	; 0x05
    1890:	21 15       	cp	r18, r1
    1892:	31 05       	cpc	r19, r1
    1894:	61 f0       	breq	.+24     	; 0x18ae <DIO_u8GetPinValue+0x52>
    1896:	52 c0       	rjmp	.+164    	; 0x193c <DIO_u8GetPinValue+0xe0>
    1898:	4c 81       	ldd	r20, Y+4	; 0x04
    189a:	5d 81       	ldd	r21, Y+5	; 0x05
    189c:	42 30       	cpi	r20, 0x02	; 2
    189e:	51 05       	cpc	r21, r1
    18a0:	51 f1       	breq	.+84     	; 0x18f6 <DIO_u8GetPinValue+0x9a>
    18a2:	8c 81       	ldd	r24, Y+4	; 0x04
    18a4:	9d 81       	ldd	r25, Y+5	; 0x05
    18a6:	83 30       	cpi	r24, 0x03	; 3
    18a8:	91 05       	cpc	r25, r1
    18aa:	b9 f1       	breq	.+110    	; 0x191a <DIO_u8GetPinValue+0xbe>
    18ac:	47 c0       	rjmp	.+142    	; 0x193c <DIO_u8GetPinValue+0xe0>
		case PORTA/*Port A*/: value=GetBit(PINA_REG,Copy_u8PinID);break;
    18ae:	e9 e3       	ldi	r30, 0x39	; 57
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	28 2f       	mov	r18, r24
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	88 2f       	mov	r24, r24
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	a9 01       	movw	r20, r18
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <DIO_u8GetPinValue+0x6a>
    18c2:	55 95       	asr	r21
    18c4:	47 95       	ror	r20
    18c6:	8a 95       	dec	r24
    18c8:	e2 f7       	brpl	.-8      	; 0x18c2 <DIO_u8GetPinValue+0x66>
    18ca:	ca 01       	movw	r24, r20
    18cc:	81 70       	andi	r24, 0x01	; 1
    18ce:	89 83       	std	Y+1, r24	; 0x01
    18d0:	35 c0       	rjmp	.+106    	; 0x193c <DIO_u8GetPinValue+0xe0>
		case PORTB/*Port B*/: value=GetBit(PINB_REG,Copy_u8PinID);break;
    18d2:	e6 e3       	ldi	r30, 0x36	; 54
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	28 2f       	mov	r18, r24
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	8b 81       	ldd	r24, Y+3	; 0x03
    18de:	88 2f       	mov	r24, r24
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	a9 01       	movw	r20, r18
    18e4:	02 c0       	rjmp	.+4      	; 0x18ea <DIO_u8GetPinValue+0x8e>
    18e6:	55 95       	asr	r21
    18e8:	47 95       	ror	r20
    18ea:	8a 95       	dec	r24
    18ec:	e2 f7       	brpl	.-8      	; 0x18e6 <DIO_u8GetPinValue+0x8a>
    18ee:	ca 01       	movw	r24, r20
    18f0:	81 70       	andi	r24, 0x01	; 1
    18f2:	89 83       	std	Y+1, r24	; 0x01
    18f4:	23 c0       	rjmp	.+70     	; 0x193c <DIO_u8GetPinValue+0xe0>
		case PORTC/*Port C*/: value=GetBit(PINC_REG,Copy_u8PinID);break;
    18f6:	e3 e3       	ldi	r30, 0x33	; 51
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	28 2f       	mov	r18, r24
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	8b 81       	ldd	r24, Y+3	; 0x03
    1902:	88 2f       	mov	r24, r24
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	a9 01       	movw	r20, r18
    1908:	02 c0       	rjmp	.+4      	; 0x190e <DIO_u8GetPinValue+0xb2>
    190a:	55 95       	asr	r21
    190c:	47 95       	ror	r20
    190e:	8a 95       	dec	r24
    1910:	e2 f7       	brpl	.-8      	; 0x190a <DIO_u8GetPinValue+0xae>
    1912:	ca 01       	movw	r24, r20
    1914:	81 70       	andi	r24, 0x01	; 1
    1916:	89 83       	std	Y+1, r24	; 0x01
    1918:	11 c0       	rjmp	.+34     	; 0x193c <DIO_u8GetPinValue+0xe0>
		case PORTD/*Port D*/: value=GetBit(PIND_REG,Copy_u8PinID);break;
    191a:	e0 e3       	ldi	r30, 0x30	; 48
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	28 2f       	mov	r18, r24
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	88 2f       	mov	r24, r24
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	a9 01       	movw	r20, r18
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <DIO_u8GetPinValue+0xd6>
    192e:	55 95       	asr	r21
    1930:	47 95       	ror	r20
    1932:	8a 95       	dec	r24
    1934:	e2 f7       	brpl	.-8      	; 0x192e <DIO_u8GetPinValue+0xd2>
    1936:	ca 01       	movw	r24, r20
    1938:	81 70       	andi	r24, 0x01	; 1
    193a:	89 83       	std	Y+1, r24	; 0x01
	}
	return value;
    193c:	89 81       	ldd	r24, Y+1	; 0x01
}
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	0f 90       	pop	r0
    1946:	0f 90       	pop	r0
    1948:	cf 91       	pop	r28
    194a:	df 91       	pop	r29
    194c:	08 95       	ret

0000194e <DIO_voidTogglePinValue>:

void DIO_voidTogglePinValue(u8 Copy_u8PortID,u8 Copy_u8PinID){
    194e:	df 93       	push	r29
    1950:	cf 93       	push	r28
    1952:	00 d0       	rcall	.+0      	; 0x1954 <DIO_voidTogglePinValue+0x6>
    1954:	00 d0       	rcall	.+0      	; 0x1956 <DIO_voidTogglePinValue+0x8>
    1956:	cd b7       	in	r28, 0x3d	; 61
    1958:	de b7       	in	r29, 0x3e	; 62
    195a:	89 83       	std	Y+1, r24	; 0x01
    195c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortID){
    195e:	89 81       	ldd	r24, Y+1	; 0x01
    1960:	28 2f       	mov	r18, r24
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	3c 83       	std	Y+4, r19	; 0x04
    1966:	2b 83       	std	Y+3, r18	; 0x03
    1968:	8b 81       	ldd	r24, Y+3	; 0x03
    196a:	9c 81       	ldd	r25, Y+4	; 0x04
    196c:	81 30       	cpi	r24, 0x01	; 1
    196e:	91 05       	cpc	r25, r1
    1970:	49 f1       	breq	.+82     	; 0x19c4 <DIO_voidTogglePinValue+0x76>
    1972:	2b 81       	ldd	r18, Y+3	; 0x03
    1974:	3c 81       	ldd	r19, Y+4	; 0x04
    1976:	22 30       	cpi	r18, 0x02	; 2
    1978:	31 05       	cpc	r19, r1
    197a:	2c f4       	brge	.+10     	; 0x1986 <DIO_voidTogglePinValue+0x38>
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	9c 81       	ldd	r25, Y+4	; 0x04
    1980:	00 97       	sbiw	r24, 0x00	; 0
    1982:	61 f0       	breq	.+24     	; 0x199c <DIO_voidTogglePinValue+0x4e>
    1984:	5a c0       	rjmp	.+180    	; 0x1a3a <DIO_voidTogglePinValue+0xec>
    1986:	2b 81       	ldd	r18, Y+3	; 0x03
    1988:	3c 81       	ldd	r19, Y+4	; 0x04
    198a:	22 30       	cpi	r18, 0x02	; 2
    198c:	31 05       	cpc	r19, r1
    198e:	71 f1       	breq	.+92     	; 0x19ec <DIO_voidTogglePinValue+0x9e>
    1990:	8b 81       	ldd	r24, Y+3	; 0x03
    1992:	9c 81       	ldd	r25, Y+4	; 0x04
    1994:	83 30       	cpi	r24, 0x03	; 3
    1996:	91 05       	cpc	r25, r1
    1998:	e9 f1       	breq	.+122    	; 0x1a14 <DIO_voidTogglePinValue+0xc6>
    199a:	4f c0       	rjmp	.+158    	; 0x1a3a <DIO_voidTogglePinValue+0xec>
		case PORTA/*Port A*/: TogBit(PORTA_REG,Copy_u8PinID);break;
    199c:	ab e3       	ldi	r26, 0x3B	; 59
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	eb e3       	ldi	r30, 0x3B	; 59
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 81       	ld	r24, Z
    19a6:	48 2f       	mov	r20, r24
    19a8:	8a 81       	ldd	r24, Y+2	; 0x02
    19aa:	28 2f       	mov	r18, r24
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	02 2e       	mov	r0, r18
    19b4:	02 c0       	rjmp	.+4      	; 0x19ba <DIO_voidTogglePinValue+0x6c>
    19b6:	88 0f       	add	r24, r24
    19b8:	99 1f       	adc	r25, r25
    19ba:	0a 94       	dec	r0
    19bc:	e2 f7       	brpl	.-8      	; 0x19b6 <DIO_voidTogglePinValue+0x68>
    19be:	84 27       	eor	r24, r20
    19c0:	8c 93       	st	X, r24
    19c2:	3b c0       	rjmp	.+118    	; 0x1a3a <DIO_voidTogglePinValue+0xec>
		case PORTB/*Port B*/: TogBit(PORTB_REG,Copy_u8PinID);break;
    19c4:	a8 e3       	ldi	r26, 0x38	; 56
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	e8 e3       	ldi	r30, 0x38	; 56
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	48 2f       	mov	r20, r24
    19d0:	8a 81       	ldd	r24, Y+2	; 0x02
    19d2:	28 2f       	mov	r18, r24
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	02 2e       	mov	r0, r18
    19dc:	02 c0       	rjmp	.+4      	; 0x19e2 <DIO_voidTogglePinValue+0x94>
    19de:	88 0f       	add	r24, r24
    19e0:	99 1f       	adc	r25, r25
    19e2:	0a 94       	dec	r0
    19e4:	e2 f7       	brpl	.-8      	; 0x19de <DIO_voidTogglePinValue+0x90>
    19e6:	84 27       	eor	r24, r20
    19e8:	8c 93       	st	X, r24
    19ea:	27 c0       	rjmp	.+78     	; 0x1a3a <DIO_voidTogglePinValue+0xec>
		case PORTC/*Port C*/: TogBit(PORTC_REG,Copy_u8PinID);break;
    19ec:	a5 e3       	ldi	r26, 0x35	; 53
    19ee:	b0 e0       	ldi	r27, 0x00	; 0
    19f0:	e5 e3       	ldi	r30, 0x35	; 53
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	48 2f       	mov	r20, r24
    19f8:	8a 81       	ldd	r24, Y+2	; 0x02
    19fa:	28 2f       	mov	r18, r24
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	02 2e       	mov	r0, r18
    1a04:	02 c0       	rjmp	.+4      	; 0x1a0a <DIO_voidTogglePinValue+0xbc>
    1a06:	88 0f       	add	r24, r24
    1a08:	99 1f       	adc	r25, r25
    1a0a:	0a 94       	dec	r0
    1a0c:	e2 f7       	brpl	.-8      	; 0x1a06 <DIO_voidTogglePinValue+0xb8>
    1a0e:	84 27       	eor	r24, r20
    1a10:	8c 93       	st	X, r24
    1a12:	13 c0       	rjmp	.+38     	; 0x1a3a <DIO_voidTogglePinValue+0xec>
		case PORTD/*Port D*/: TogBit(PORTD_REG,Copy_u8PinID);break;
    1a14:	a2 e3       	ldi	r26, 0x32	; 50
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	e2 e3       	ldi	r30, 0x32	; 50
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	48 2f       	mov	r20, r24
    1a20:	8a 81       	ldd	r24, Y+2	; 0x02
    1a22:	28 2f       	mov	r18, r24
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	02 2e       	mov	r0, r18
    1a2c:	02 c0       	rjmp	.+4      	; 0x1a32 <DIO_voidTogglePinValue+0xe4>
    1a2e:	88 0f       	add	r24, r24
    1a30:	99 1f       	adc	r25, r25
    1a32:	0a 94       	dec	r0
    1a34:	e2 f7       	brpl	.-8      	; 0x1a2e <DIO_voidTogglePinValue+0xe0>
    1a36:	84 27       	eor	r24, r20
    1a38:	8c 93       	st	X, r24
	}
}
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	cf 91       	pop	r28
    1a44:	df 91       	pop	r29
    1a46:	08 95       	ret

00001a48 <EXTI_voidInitialize>:

void (*EXTI0_GPfun)(void)=NULL;
void (*EXTI1_GPfun)(void)=NULL;
void (*EXTI2_GPfun)(void)=NULL;

void EXTI_voidInitialize(u8 Copy_u8INR_Num,u8 Copy_SenseCase){
    1a48:	df 93       	push	r29
    1a4a:	cf 93       	push	r28
    1a4c:	cd b7       	in	r28, 0x3d	; 61
    1a4e:	de b7       	in	r29, 0x3e	; 62
    1a50:	2a 97       	sbiw	r28, 0x0a	; 10
    1a52:	0f b6       	in	r0, 0x3f	; 63
    1a54:	f8 94       	cli
    1a56:	de bf       	out	0x3e, r29	; 62
    1a58:	0f be       	out	0x3f, r0	; 63
    1a5a:	cd bf       	out	0x3d, r28	; 61
    1a5c:	89 83       	std	Y+1, r24	; 0x01
    1a5e:	6a 83       	std	Y+2, r22	; 0x02
	
	switch(Copy_u8INR_Num){
    1a60:	89 81       	ldd	r24, Y+1	; 0x01
    1a62:	28 2f       	mov	r18, r24
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	3a 87       	std	Y+10, r19	; 0x0a
    1a68:	29 87       	std	Y+9, r18	; 0x09
    1a6a:	89 85       	ldd	r24, Y+9	; 0x09
    1a6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a6e:	81 30       	cpi	r24, 0x01	; 1
    1a70:	91 05       	cpc	r25, r1
    1a72:	09 f4       	brne	.+2      	; 0x1a76 <EXTI_voidInitialize+0x2e>
    1a74:	3f c0       	rjmp	.+126    	; 0x1af4 <EXTI_voidInitialize+0xac>
    1a76:	29 85       	ldd	r18, Y+9	; 0x09
    1a78:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a7a:	22 30       	cpi	r18, 0x02	; 2
    1a7c:	31 05       	cpc	r19, r1
    1a7e:	09 f4       	brne	.+2      	; 0x1a82 <EXTI_voidInitialize+0x3a>
    1a80:	6d c0       	rjmp	.+218    	; 0x1b5c <EXTI_voidInitialize+0x114>
    1a82:	89 85       	ldd	r24, Y+9	; 0x09
    1a84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a86:	00 97       	sbiw	r24, 0x00	; 0
    1a88:	09 f0       	breq	.+2      	; 0x1a8c <EXTI_voidInitialize+0x44>
    1a8a:	8d c0       	rjmp	.+282    	; 0x1ba6 <EXTI_voidInitialize+0x15e>
		case EXTI0:
			SetBit(GICR,PIN6);
    1a8c:	ab e5       	ldi	r26, 0x5B	; 91
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	eb e5       	ldi	r30, 0x5B	; 91
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	80 64       	ori	r24, 0x40	; 64
    1a98:	8c 93       	st	X, r24
			switch(Copy_SenseCase){
    1a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9c:	28 2f       	mov	r18, r24
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	38 87       	std	Y+8, r19	; 0x08
    1aa2:	2f 83       	std	Y+7, r18	; 0x07
    1aa4:	8f 81       	ldd	r24, Y+7	; 0x07
    1aa6:	98 85       	ldd	r25, Y+8	; 0x08
    1aa8:	00 97       	sbiw	r24, 0x00	; 0
    1aaa:	31 f0       	breq	.+12     	; 0x1ab8 <EXTI_voidInitialize+0x70>
    1aac:	2f 81       	ldd	r18, Y+7	; 0x07
    1aae:	38 85       	ldd	r19, Y+8	; 0x08
    1ab0:	21 30       	cpi	r18, 0x01	; 1
    1ab2:	31 05       	cpc	r19, r1
    1ab4:	81 f0       	breq	.+32     	; 0x1ad6 <EXTI_voidInitialize+0x8e>
    1ab6:	77 c0       	rjmp	.+238    	; 0x1ba6 <EXTI_voidInitialize+0x15e>
				case RISING_EDGE:
					SetBit(MCUCR,PIN0);
    1ab8:	a5 e5       	ldi	r26, 0x55	; 85
    1aba:	b0 e0       	ldi	r27, 0x00	; 0
    1abc:	e5 e5       	ldi	r30, 0x55	; 85
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	81 60       	ori	r24, 0x01	; 1
    1ac4:	8c 93       	st	X, r24
					SetBit(MCUCR,PIN1);
    1ac6:	a5 e5       	ldi	r26, 0x55	; 85
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	e5 e5       	ldi	r30, 0x55	; 85
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	82 60       	ori	r24, 0x02	; 2
    1ad2:	8c 93       	st	X, r24
    1ad4:	68 c0       	rjmp	.+208    	; 0x1ba6 <EXTI_voidInitialize+0x15e>
					break;
				case FALLING_EDGE:
					ClrBit(MCUCR,PIN0);
    1ad6:	a5 e5       	ldi	r26, 0x55	; 85
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	e5 e5       	ldi	r30, 0x55	; 85
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	8e 7f       	andi	r24, 0xFE	; 254
    1ae2:	8c 93       	st	X, r24
					SetBit(MCUCR,PIN1);
    1ae4:	a5 e5       	ldi	r26, 0x55	; 85
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	e5 e5       	ldi	r30, 0x55	; 85
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	82 60       	ori	r24, 0x02	; 2
    1af0:	8c 93       	st	X, r24
    1af2:	59 c0       	rjmp	.+178    	; 0x1ba6 <EXTI_voidInitialize+0x15e>
					break;
			}
			break;
		case EXTI1:
			SetBit(GICR,PIN7);
    1af4:	ab e5       	ldi	r26, 0x5B	; 91
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	eb e5       	ldi	r30, 0x5B	; 91
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	80 68       	ori	r24, 0x80	; 128
    1b00:	8c 93       	st	X, r24
			switch(Copy_SenseCase){
    1b02:	8a 81       	ldd	r24, Y+2	; 0x02
    1b04:	28 2f       	mov	r18, r24
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	3e 83       	std	Y+6, r19	; 0x06
    1b0a:	2d 83       	std	Y+5, r18	; 0x05
    1b0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b10:	00 97       	sbiw	r24, 0x00	; 0
    1b12:	31 f0       	breq	.+12     	; 0x1b20 <EXTI_voidInitialize+0xd8>
    1b14:	2d 81       	ldd	r18, Y+5	; 0x05
    1b16:	3e 81       	ldd	r19, Y+6	; 0x06
    1b18:	21 30       	cpi	r18, 0x01	; 1
    1b1a:	31 05       	cpc	r19, r1
    1b1c:	81 f0       	breq	.+32     	; 0x1b3e <EXTI_voidInitialize+0xf6>
    1b1e:	43 c0       	rjmp	.+134    	; 0x1ba6 <EXTI_voidInitialize+0x15e>
				case RISING_EDGE:
					SetBit(MCUCR,PIN2);
    1b20:	a5 e5       	ldi	r26, 0x55	; 85
    1b22:	b0 e0       	ldi	r27, 0x00	; 0
    1b24:	e5 e5       	ldi	r30, 0x55	; 85
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	84 60       	ori	r24, 0x04	; 4
    1b2c:	8c 93       	st	X, r24
					SetBit(MCUCR,PIN3);
    1b2e:	a5 e5       	ldi	r26, 0x55	; 85
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	e5 e5       	ldi	r30, 0x55	; 85
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	88 60       	ori	r24, 0x08	; 8
    1b3a:	8c 93       	st	X, r24
    1b3c:	34 c0       	rjmp	.+104    	; 0x1ba6 <EXTI_voidInitialize+0x15e>
					break;
				case FALLING_EDGE:
					ClrBit(MCUCR,PIN2);
    1b3e:	a5 e5       	ldi	r26, 0x55	; 85
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	e5 e5       	ldi	r30, 0x55	; 85
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	8b 7f       	andi	r24, 0xFB	; 251
    1b4a:	8c 93       	st	X, r24
					SetBit(MCUCR,PIN3);
    1b4c:	a5 e5       	ldi	r26, 0x55	; 85
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	e5 e5       	ldi	r30, 0x55	; 85
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	88 60       	ori	r24, 0x08	; 8
    1b58:	8c 93       	st	X, r24
    1b5a:	25 c0       	rjmp	.+74     	; 0x1ba6 <EXTI_voidInitialize+0x15e>
					break;
			}
			break;
		case EXTI2:
			SetBit(GICR,PIN5);
    1b5c:	ab e5       	ldi	r26, 0x5B	; 91
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	eb e5       	ldi	r30, 0x5B	; 91
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 81       	ld	r24, Z
    1b66:	80 62       	ori	r24, 0x20	; 32
    1b68:	8c 93       	st	X, r24
			switch(Copy_SenseCase){
    1b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6c:	28 2f       	mov	r18, r24
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	3c 83       	std	Y+4, r19	; 0x04
    1b72:	2b 83       	std	Y+3, r18	; 0x03
    1b74:	8b 81       	ldd	r24, Y+3	; 0x03
    1b76:	9c 81       	ldd	r25, Y+4	; 0x04
    1b78:	00 97       	sbiw	r24, 0x00	; 0
    1b7a:	31 f0       	breq	.+12     	; 0x1b88 <EXTI_voidInitialize+0x140>
    1b7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b80:	21 30       	cpi	r18, 0x01	; 1
    1b82:	31 05       	cpc	r19, r1
    1b84:	49 f0       	breq	.+18     	; 0x1b98 <EXTI_voidInitialize+0x150>
    1b86:	0f c0       	rjmp	.+30     	; 0x1ba6 <EXTI_voidInitialize+0x15e>
				case RISING_EDGE:
					SetBit(MCUCSR,PIN6);
    1b88:	a4 e5       	ldi	r26, 0x54	; 84
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	e4 e5       	ldi	r30, 0x54	; 84
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	80 64       	ori	r24, 0x40	; 64
    1b94:	8c 93       	st	X, r24
    1b96:	07 c0       	rjmp	.+14     	; 0x1ba6 <EXTI_voidInitialize+0x15e>
					break;
				case FALLING_EDGE:
					ClrBit(MCUCSR,PIN6);
    1b98:	a4 e5       	ldi	r26, 0x54	; 84
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	e4 e5       	ldi	r30, 0x54	; 84
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	8f 7b       	andi	r24, 0xBF	; 191
    1ba4:	8c 93       	st	X, r24
					break;
			}
			break;
	}
}
    1ba6:	2a 96       	adiw	r28, 0x0a	; 10
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	f8 94       	cli
    1bac:	de bf       	out	0x3e, r29	; 62
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	cd bf       	out	0x3d, r28	; 61
    1bb2:	cf 91       	pop	r28
    1bb4:	df 91       	pop	r29
    1bb6:	08 95       	ret

00001bb8 <EXTI0_SetCallBack>:

void EXTI0_SetCallBack(void(*ptr)(void)){
    1bb8:	df 93       	push	r29
    1bba:	cf 93       	push	r28
    1bbc:	00 d0       	rcall	.+0      	; 0x1bbe <EXTI0_SetCallBack+0x6>
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
    1bc2:	9a 83       	std	Y+2, r25	; 0x02
    1bc4:	89 83       	std	Y+1, r24	; 0x01
	EXTI0_GPfun=ptr;
    1bc6:	89 81       	ldd	r24, Y+1	; 0x01
    1bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bca:	90 93 69 01 	sts	0x0169, r25
    1bce:	80 93 68 01 	sts	0x0168, r24
}
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	cf 91       	pop	r28
    1bd8:	df 91       	pop	r29
    1bda:	08 95       	ret

00001bdc <EXTI1_SetCallBack>:

void EXTI1_SetCallBack(void(*ptr)(void)){
    1bdc:	df 93       	push	r29
    1bde:	cf 93       	push	r28
    1be0:	00 d0       	rcall	.+0      	; 0x1be2 <EXTI1_SetCallBack+0x6>
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    1be6:	9a 83       	std	Y+2, r25	; 0x02
    1be8:	89 83       	std	Y+1, r24	; 0x01
	EXTI1_GPfun=ptr;
    1bea:	89 81       	ldd	r24, Y+1	; 0x01
    1bec:	9a 81       	ldd	r25, Y+2	; 0x02
    1bee:	90 93 6b 01 	sts	0x016B, r25
    1bf2:	80 93 6a 01 	sts	0x016A, r24
}
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	cf 91       	pop	r28
    1bfc:	df 91       	pop	r29
    1bfe:	08 95       	ret

00001c00 <EXTI2_SetCallBack>:

void EXTI2_SetCallBack(void(*ptr)(void)){
    1c00:	df 93       	push	r29
    1c02:	cf 93       	push	r28
    1c04:	00 d0       	rcall	.+0      	; 0x1c06 <EXTI2_SetCallBack+0x6>
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
    1c0a:	9a 83       	std	Y+2, r25	; 0x02
    1c0c:	89 83       	std	Y+1, r24	; 0x01
	EXTI2_GPfun=ptr;
    1c0e:	89 81       	ldd	r24, Y+1	; 0x01
    1c10:	9a 81       	ldd	r25, Y+2	; 0x02
    1c12:	90 93 6d 01 	sts	0x016D, r25
    1c16:	80 93 6c 01 	sts	0x016C, r24
}
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	cf 91       	pop	r28
    1c20:	df 91       	pop	r29
    1c22:	08 95       	ret

00001c24 <__vector_1>:

void __vector_1()__attribute__((signal));   // EXTI0
void __vector_1(){
    1c24:	1f 92       	push	r1
    1c26:	0f 92       	push	r0
    1c28:	0f b6       	in	r0, 0x3f	; 63
    1c2a:	0f 92       	push	r0
    1c2c:	11 24       	eor	r1, r1
    1c2e:	2f 93       	push	r18
    1c30:	3f 93       	push	r19
    1c32:	4f 93       	push	r20
    1c34:	5f 93       	push	r21
    1c36:	6f 93       	push	r22
    1c38:	7f 93       	push	r23
    1c3a:	8f 93       	push	r24
    1c3c:	9f 93       	push	r25
    1c3e:	af 93       	push	r26
    1c40:	bf 93       	push	r27
    1c42:	ef 93       	push	r30
    1c44:	ff 93       	push	r31
    1c46:	df 93       	push	r29
    1c48:	cf 93       	push	r28
    1c4a:	cd b7       	in	r28, 0x3d	; 61
    1c4c:	de b7       	in	r29, 0x3e	; 62
	
	if(EXTI0_GPfun!=NULL){
    1c4e:	80 91 68 01 	lds	r24, 0x0168
    1c52:	90 91 69 01 	lds	r25, 0x0169
    1c56:	00 97       	sbiw	r24, 0x00	; 0
    1c58:	29 f0       	breq	.+10     	; 0x1c64 <__vector_1+0x40>
		EXTI0_GPfun();
    1c5a:	e0 91 68 01 	lds	r30, 0x0168
    1c5e:	f0 91 69 01 	lds	r31, 0x0169
    1c62:	09 95       	icall
	}
}
    1c64:	cf 91       	pop	r28
    1c66:	df 91       	pop	r29
    1c68:	ff 91       	pop	r31
    1c6a:	ef 91       	pop	r30
    1c6c:	bf 91       	pop	r27
    1c6e:	af 91       	pop	r26
    1c70:	9f 91       	pop	r25
    1c72:	8f 91       	pop	r24
    1c74:	7f 91       	pop	r23
    1c76:	6f 91       	pop	r22
    1c78:	5f 91       	pop	r21
    1c7a:	4f 91       	pop	r20
    1c7c:	3f 91       	pop	r19
    1c7e:	2f 91       	pop	r18
    1c80:	0f 90       	pop	r0
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	0f 90       	pop	r0
    1c86:	1f 90       	pop	r1
    1c88:	18 95       	reti

00001c8a <__vector_2>:

void __vector_2()__attribute__((signal));   // EXTI1
void __vector_2(){
    1c8a:	1f 92       	push	r1
    1c8c:	0f 92       	push	r0
    1c8e:	0f b6       	in	r0, 0x3f	; 63
    1c90:	0f 92       	push	r0
    1c92:	11 24       	eor	r1, r1
    1c94:	2f 93       	push	r18
    1c96:	3f 93       	push	r19
    1c98:	4f 93       	push	r20
    1c9a:	5f 93       	push	r21
    1c9c:	6f 93       	push	r22
    1c9e:	7f 93       	push	r23
    1ca0:	8f 93       	push	r24
    1ca2:	9f 93       	push	r25
    1ca4:	af 93       	push	r26
    1ca6:	bf 93       	push	r27
    1ca8:	ef 93       	push	r30
    1caa:	ff 93       	push	r31
    1cac:	df 93       	push	r29
    1cae:	cf 93       	push	r28
    1cb0:	cd b7       	in	r28, 0x3d	; 61
    1cb2:	de b7       	in	r29, 0x3e	; 62
	
	if(EXTI1_GPfun!=NULL){
    1cb4:	80 91 6a 01 	lds	r24, 0x016A
    1cb8:	90 91 6b 01 	lds	r25, 0x016B
    1cbc:	00 97       	sbiw	r24, 0x00	; 0
    1cbe:	29 f0       	breq	.+10     	; 0x1cca <__vector_2+0x40>
		EXTI1_GPfun();
    1cc0:	e0 91 6a 01 	lds	r30, 0x016A
    1cc4:	f0 91 6b 01 	lds	r31, 0x016B
    1cc8:	09 95       	icall
	}
}
    1cca:	cf 91       	pop	r28
    1ccc:	df 91       	pop	r29
    1cce:	ff 91       	pop	r31
    1cd0:	ef 91       	pop	r30
    1cd2:	bf 91       	pop	r27
    1cd4:	af 91       	pop	r26
    1cd6:	9f 91       	pop	r25
    1cd8:	8f 91       	pop	r24
    1cda:	7f 91       	pop	r23
    1cdc:	6f 91       	pop	r22
    1cde:	5f 91       	pop	r21
    1ce0:	4f 91       	pop	r20
    1ce2:	3f 91       	pop	r19
    1ce4:	2f 91       	pop	r18
    1ce6:	0f 90       	pop	r0
    1ce8:	0f be       	out	0x3f, r0	; 63
    1cea:	0f 90       	pop	r0
    1cec:	1f 90       	pop	r1
    1cee:	18 95       	reti

00001cf0 <__vector_3>:

void __vector_3()__attribute__((signal));   // EXTI2
void __vector_3(){
    1cf0:	1f 92       	push	r1
    1cf2:	0f 92       	push	r0
    1cf4:	0f b6       	in	r0, 0x3f	; 63
    1cf6:	0f 92       	push	r0
    1cf8:	11 24       	eor	r1, r1
    1cfa:	2f 93       	push	r18
    1cfc:	3f 93       	push	r19
    1cfe:	4f 93       	push	r20
    1d00:	5f 93       	push	r21
    1d02:	6f 93       	push	r22
    1d04:	7f 93       	push	r23
    1d06:	8f 93       	push	r24
    1d08:	9f 93       	push	r25
    1d0a:	af 93       	push	r26
    1d0c:	bf 93       	push	r27
    1d0e:	ef 93       	push	r30
    1d10:	ff 93       	push	r31
    1d12:	df 93       	push	r29
    1d14:	cf 93       	push	r28
    1d16:	cd b7       	in	r28, 0x3d	; 61
    1d18:	de b7       	in	r29, 0x3e	; 62
	
	if(EXTI2_GPfun!=NULL){
    1d1a:	80 91 6c 01 	lds	r24, 0x016C
    1d1e:	90 91 6d 01 	lds	r25, 0x016D
    1d22:	00 97       	sbiw	r24, 0x00	; 0
    1d24:	29 f0       	breq	.+10     	; 0x1d30 <__vector_3+0x40>
		EXTI2_GPfun();
    1d26:	e0 91 6c 01 	lds	r30, 0x016C
    1d2a:	f0 91 6d 01 	lds	r31, 0x016D
    1d2e:	09 95       	icall
	}
}
    1d30:	cf 91       	pop	r28
    1d32:	df 91       	pop	r29
    1d34:	ff 91       	pop	r31
    1d36:	ef 91       	pop	r30
    1d38:	bf 91       	pop	r27
    1d3a:	af 91       	pop	r26
    1d3c:	9f 91       	pop	r25
    1d3e:	8f 91       	pop	r24
    1d40:	7f 91       	pop	r23
    1d42:	6f 91       	pop	r22
    1d44:	5f 91       	pop	r21
    1d46:	4f 91       	pop	r20
    1d48:	3f 91       	pop	r19
    1d4a:	2f 91       	pop	r18
    1d4c:	0f 90       	pop	r0
    1d4e:	0f be       	out	0x3f, r0	; 63
    1d50:	0f 90       	pop	r0
    1d52:	1f 90       	pop	r1
    1d54:	18 95       	reti

00001d56 <GIE_voidEnable>:
#include "Bit_Math.h"
#include "DIO_interface.h"
#include "GIE_private.h"
#include "GIE_interface.h"

void GIE_voidEnable(){
    1d56:	df 93       	push	r29
    1d58:	cf 93       	push	r28
    1d5a:	cd b7       	in	r28, 0x3d	; 61
    1d5c:	de b7       	in	r29, 0x3e	; 62

	SetBit(SREG,PIN7);
    1d5e:	af e5       	ldi	r26, 0x5F	; 95
    1d60:	b0 e0       	ldi	r27, 0x00	; 0
    1d62:	ef e5       	ldi	r30, 0x5F	; 95
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	80 81       	ld	r24, Z
    1d68:	80 68       	ori	r24, 0x80	; 128
    1d6a:	8c 93       	st	X, r24
}
    1d6c:	cf 91       	pop	r28
    1d6e:	df 91       	pop	r29
    1d70:	08 95       	ret

00001d72 <GIE_voidDisable>:

void GIE_voidDisable(){
    1d72:	df 93       	push	r29
    1d74:	cf 93       	push	r28
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62

	ClrBit(SREG,PIN7);
    1d7a:	af e5       	ldi	r26, 0x5F	; 95
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	ef e5       	ldi	r30, 0x5F	; 95
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	8f 77       	andi	r24, 0x7F	; 127
    1d86:	8c 93       	st	X, r24
    1d88:	cf 91       	pop	r28
    1d8a:	df 91       	pop	r29
    1d8c:	08 95       	ret

00001d8e <TIMER0_voidInitialize>:
void (*TIMER0_NORMAL_GPfun)(void)=NULL;
void (*TIMER0_CTC_GPfun)(void)=NULL;

u32 TIMER,PreLoad,PreScaler;

void TIMER0_voidInitialize(){
    1d8e:	df 93       	push	r29
    1d90:	cf 93       	push	r28
    1d92:	cd b7       	in	r28, 0x3d	; 61
    1d94:	de b7       	in	r29, 0x3e	; 62
	SetBit(TCCR0,PIN0);
	ClrBit(TCCR0,PIN1);
	ClrBit(TCCR0,PIN2);
	PreScaler=1;
#elif Clock_Select == clk_8
	ClrBit(TCCR0,PIN0);
    1d96:	a3 e5       	ldi	r26, 0x53	; 83
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	e3 e5       	ldi	r30, 0x53	; 83
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	8e 7f       	andi	r24, 0xFE	; 254
    1da2:	8c 93       	st	X, r24
	SetBit(TCCR0,PIN1);
    1da4:	a3 e5       	ldi	r26, 0x53	; 83
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	e3 e5       	ldi	r30, 0x53	; 83
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	82 60       	ori	r24, 0x02	; 2
    1db0:	8c 93       	st	X, r24
	ClrBit(TCCR0,PIN2);
    1db2:	a3 e5       	ldi	r26, 0x53	; 83
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	e3 e5       	ldi	r30, 0x53	; 83
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	8b 7f       	andi	r24, 0xFB	; 251
    1dbe:	8c 93       	st	X, r24
	PreScaler=8;
    1dc0:	88 e0       	ldi	r24, 0x08	; 8
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	a0 e0       	ldi	r26, 0x00	; 0
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	80 93 93 01 	sts	0x0193, r24
    1dcc:	90 93 94 01 	sts	0x0194, r25
    1dd0:	a0 93 95 01 	sts	0x0195, r26
    1dd4:	b0 93 96 01 	sts	0x0196, r27
/************ Compare Output Mode *********/
#if Compare_Output_Mode == OC0_Disconnected
	ClrBit(TCCR0,PIN4);
	ClrBit(TCCR0,PIN5);
#elif Compare_Output_Mode == Toggle_OC0
	SetBit(TCCR0,PIN4);
    1dd8:	a3 e5       	ldi	r26, 0x53	; 83
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	e3 e5       	ldi	r30, 0x53	; 83
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	80 61       	ori	r24, 0x10	; 16
    1de4:	8c 93       	st	X, r24
	ClrBit(TCCR0,PIN5);
    1de6:	a3 e5       	ldi	r26, 0x53	; 83
    1de8:	b0 e0       	ldi	r27, 0x00	; 0
    1dea:	e3 e5       	ldi	r30, 0x53	; 83
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	80 81       	ld	r24, Z
    1df0:	8f 7d       	andi	r24, 0xDF	; 223
    1df2:	8c 93       	st	X, r24
	SetBit(TCCR0,PIN5);
#endif

/************ Waveform Generation Mode *********/
#if Waveform_MODE == NORMAL
	ClrBit(TCCR0,PIN3);
    1df4:	a3 e5       	ldi	r26, 0x53	; 83
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	e3 e5       	ldi	r30, 0x53	; 83
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	87 7f       	andi	r24, 0xF7	; 247
    1e00:	8c 93       	st	X, r24
	ClrBit(TCCR0,PIN6);
    1e02:	a3 e5       	ldi	r26, 0x53	; 83
    1e04:	b0 e0       	ldi	r27, 0x00	; 0
    1e06:	e3 e5       	ldi	r30, 0x53	; 83
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	80 81       	ld	r24, Z
    1e0c:	8f 7b       	andi	r24, 0xBF	; 191
    1e0e:	8c 93       	st	X, r24
	SetBit(TIMSK,PIN0);
    1e10:	a9 e5       	ldi	r26, 0x59	; 89
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	e9 e5       	ldi	r30, 0x59	; 89
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	81 60       	ori	r24, 0x01	; 1
    1e1c:	8c 93       	st	X, r24
	SetBit(TIMSK,PIN1);
#elif Waveform_MODE == Fast_PWM
	SetBit(TCCR0,PIN3);
	SetBit(TCCR0,PIN6);
#endif
}
    1e1e:	cf 91       	pop	r28
    1e20:	df 91       	pop	r29
    1e22:	08 95       	ret

00001e24 <TIMER0_voidPreLoad>:

void TIMER0_voidPreLoad(u8 Copy_u8Value){
    1e24:	df 93       	push	r29
    1e26:	cf 93       	push	r28
    1e28:	0f 92       	push	r0
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62
    1e2e:	89 83       	std	Y+1, r24	; 0x01
	
	TCNT0=Copy_u8Value;
    1e30:	e2 e5       	ldi	r30, 0x52	; 82
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	89 81       	ldd	r24, Y+1	; 0x01
    1e36:	80 83       	st	Z, r24
}
    1e38:	0f 90       	pop	r0
    1e3a:	cf 91       	pop	r28
    1e3c:	df 91       	pop	r29
    1e3e:	08 95       	ret

00001e40 <TIMER0_voidSetOCR0>:

void TIMER0_voidSetOCR0(u8 Copy_u8Value){
    1e40:	df 93       	push	r29
    1e42:	cf 93       	push	r28
    1e44:	0f 92       	push	r0
    1e46:	cd b7       	in	r28, 0x3d	; 61
    1e48:	de b7       	in	r29, 0x3e	; 62
    1e4a:	89 83       	std	Y+1, r24	; 0x01
	
	OCR0=Copy_u8Value;
    1e4c:	ec e5       	ldi	r30, 0x5C	; 92
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	89 81       	ldd	r24, Y+1	; 0x01
    1e52:	80 83       	st	Z, r24
}
    1e54:	0f 90       	pop	r0
    1e56:	cf 91       	pop	r28
    1e58:	df 91       	pop	r29
    1e5a:	08 95       	ret

00001e5c <TIMER0_voidSetTimer>:

void TIMER0_voidSetTimer(u32 Copy_u32TimeMS){
    1e5c:	ef 92       	push	r14
    1e5e:	ff 92       	push	r15
    1e60:	0f 93       	push	r16
    1e62:	1f 93       	push	r17
    1e64:	df 93       	push	r29
    1e66:	cf 93       	push	r28
    1e68:	cd b7       	in	r28, 0x3d	; 61
    1e6a:	de b7       	in	r29, 0x3e	; 62
    1e6c:	68 97       	sbiw	r28, 0x18	; 24
    1e6e:	0f b6       	in	r0, 0x3f	; 63
    1e70:	f8 94       	cli
    1e72:	de bf       	out	0x3e, r29	; 62
    1e74:	0f be       	out	0x3f, r0	; 63
    1e76:	cd bf       	out	0x3d, r28	; 61
    1e78:	6d 8b       	std	Y+21, r22	; 0x15
    1e7a:	7e 8b       	std	Y+22, r23	; 0x16
    1e7c:	8f 8b       	std	Y+23, r24	; 0x17
    1e7e:	98 8f       	std	Y+24, r25	; 0x18
	
	u32 MAX_NUM;
	if(Waveform_MODE == NORMAL){
		MAX_NUM=MAX_8BIT_REG;
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	91 e0       	ldi	r25, 0x01	; 1
    1e84:	a0 e0       	ldi	r26, 0x00	; 0
    1e86:	b0 e0       	ldi	r27, 0x00	; 0
    1e88:	89 8b       	std	Y+17, r24	; 0x11
    1e8a:	9a 8b       	std	Y+18, r25	; 0x12
    1e8c:	ab 8b       	std	Y+19, r26	; 0x13
    1e8e:	bc 8b       	std	Y+20, r27	; 0x14
	}
	else if(Waveform_MODE == CTC){
		MAX_NUM=OCR0;
	}
	
	u32 TIMER_freq=CPU_FREQUENCY/PreScaler;
    1e90:	20 91 93 01 	lds	r18, 0x0193
    1e94:	30 91 94 01 	lds	r19, 0x0194
    1e98:	40 91 95 01 	lds	r20, 0x0195
    1e9c:	50 91 96 01 	lds	r21, 0x0196
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
    1ea2:	92 e1       	ldi	r25, 0x12	; 18
    1ea4:	aa e7       	ldi	r26, 0x7A	; 122
    1ea6:	b0 e0       	ldi	r27, 0x00	; 0
    1ea8:	bc 01       	movw	r22, r24
    1eaa:	cd 01       	movw	r24, r26
    1eac:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__udivmodsi4>
    1eb0:	da 01       	movw	r26, r20
    1eb2:	c9 01       	movw	r24, r18
    1eb4:	8d 87       	std	Y+13, r24	; 0x0d
    1eb6:	9e 87       	std	Y+14, r25	; 0x0e
    1eb8:	af 87       	std	Y+15, r26	; 0x0f
    1eba:	b8 8b       	std	Y+16, r27	; 0x10
	f32 Tick_Time=MICRO_IN_SEC/TIMER_freq;
    1ebc:	80 e4       	ldi	r24, 0x40	; 64
    1ebe:	92 e4       	ldi	r25, 0x42	; 66
    1ec0:	af e0       	ldi	r26, 0x0F	; 15
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	2d 85       	ldd	r18, Y+13	; 0x0d
    1ec6:	3e 85       	ldd	r19, Y+14	; 0x0e
    1ec8:	4f 85       	ldd	r20, Y+15	; 0x0f
    1eca:	58 89       	ldd	r21, Y+16	; 0x10
    1ecc:	bc 01       	movw	r22, r24
    1ece:	cd 01       	movw	r24, r26
    1ed0:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__udivmodsi4>
    1ed4:	da 01       	movw	r26, r20
    1ed6:	c9 01       	movw	r24, r18
    1ed8:	bc 01       	movw	r22, r24
    1eda:	cd 01       	movw	r24, r26
    1edc:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	89 87       	std	Y+9, r24	; 0x09
    1ee6:	9a 87       	std	Y+10, r25	; 0x0a
    1ee8:	ab 87       	std	Y+11, r26	; 0x0b
    1eea:	bc 87       	std	Y+12, r27	; 0x0c
	u32 OverFlow_Time=Tick_Time*MAX_NUM;
    1eec:	69 89       	ldd	r22, Y+17	; 0x11
    1eee:	7a 89       	ldd	r23, Y+18	; 0x12
    1ef0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef4:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	bc 01       	movw	r22, r24
    1efe:	cd 01       	movw	r24, r26
    1f00:	29 85       	ldd	r18, Y+9	; 0x09
    1f02:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f04:	4b 85       	ldd	r20, Y+11	; 0x0b
    1f06:	5c 85       	ldd	r21, Y+12	; 0x0c
    1f08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	cb 01       	movw	r24, r22
    1f10:	bc 01       	movw	r22, r24
    1f12:	cd 01       	movw	r24, r26
    1f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	8d 83       	std	Y+5, r24	; 0x05
    1f1e:	9e 83       	std	Y+6, r25	; 0x06
    1f20:	af 83       	std	Y+7, r26	; 0x07
    1f22:	b8 87       	std	Y+8, r27	; 0x08
	
	TIMER=(Copy_u32TimeMS*MICRO_IN_MILLI)/OverFlow_Time;
    1f24:	8d 89       	ldd	r24, Y+21	; 0x15
    1f26:	9e 89       	ldd	r25, Y+22	; 0x16
    1f28:	af 89       	ldd	r26, Y+23	; 0x17
    1f2a:	b8 8d       	ldd	r27, Y+24	; 0x18
    1f2c:	28 ee       	ldi	r18, 0xE8	; 232
    1f2e:	33 e0       	ldi	r19, 0x03	; 3
    1f30:	40 e0       	ldi	r20, 0x00	; 0
    1f32:	50 e0       	ldi	r21, 0x00	; 0
    1f34:	bc 01       	movw	r22, r24
    1f36:	cd 01       	movw	r24, r26
    1f38:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__mulsi3>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	2d 81       	ldd	r18, Y+5	; 0x05
    1f42:	3e 81       	ldd	r19, Y+6	; 0x06
    1f44:	4f 81       	ldd	r20, Y+7	; 0x07
    1f46:	58 85       	ldd	r21, Y+8	; 0x08
    1f48:	bc 01       	movw	r22, r24
    1f4a:	cd 01       	movw	r24, r26
    1f4c:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__udivmodsi4>
    1f50:	da 01       	movw	r26, r20
    1f52:	c9 01       	movw	r24, r18
    1f54:	80 93 8f 01 	sts	0x018F, r24
    1f58:	90 93 90 01 	sts	0x0190, r25
    1f5c:	a0 93 91 01 	sts	0x0191, r26
    1f60:	b0 93 92 01 	sts	0x0192, r27
	f32 remainder=((Copy_u32TimeMS*MICRO_IN_MILLI)%OverFlow_Time)/(f32)OverFlow_Time;
    1f64:	8d 89       	ldd	r24, Y+21	; 0x15
    1f66:	9e 89       	ldd	r25, Y+22	; 0x16
    1f68:	af 89       	ldd	r26, Y+23	; 0x17
    1f6a:	b8 8d       	ldd	r27, Y+24	; 0x18
    1f6c:	28 ee       	ldi	r18, 0xE8	; 232
    1f6e:	33 e0       	ldi	r19, 0x03	; 3
    1f70:	40 e0       	ldi	r20, 0x00	; 0
    1f72:	50 e0       	ldi	r21, 0x00	; 0
    1f74:	bc 01       	movw	r22, r24
    1f76:	cd 01       	movw	r24, r26
    1f78:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__mulsi3>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	2d 81       	ldd	r18, Y+5	; 0x05
    1f82:	3e 81       	ldd	r19, Y+6	; 0x06
    1f84:	4f 81       	ldd	r20, Y+7	; 0x07
    1f86:	58 85       	ldd	r21, Y+8	; 0x08
    1f88:	bc 01       	movw	r22, r24
    1f8a:	cd 01       	movw	r24, r26
    1f8c:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__udivmodsi4>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	bc 01       	movw	r22, r24
    1f96:	cd 01       	movw	r24, r26
    1f98:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    1f9c:	7b 01       	movw	r14, r22
    1f9e:	8c 01       	movw	r16, r24
    1fa0:	6d 81       	ldd	r22, Y+5	; 0x05
    1fa2:	7e 81       	ldd	r23, Y+6	; 0x06
    1fa4:	8f 81       	ldd	r24, Y+7	; 0x07
    1fa6:	98 85       	ldd	r25, Y+8	; 0x08
    1fa8:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    1fac:	9b 01       	movw	r18, r22
    1fae:	ac 01       	movw	r20, r24
    1fb0:	c8 01       	movw	r24, r16
    1fb2:	b7 01       	movw	r22, r14
    1fb4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	89 83       	std	Y+1, r24	; 0x01
    1fbe:	9a 83       	std	Y+2, r25	; 0x02
    1fc0:	ab 83       	std	Y+3, r26	; 0x03
    1fc2:	bc 83       	std	Y+4, r27	; 0x04
	PreLoad=(1-remainder)*MAX_NUM;
    1fc4:	60 e0       	ldi	r22, 0x00	; 0
    1fc6:	70 e0       	ldi	r23, 0x00	; 0
    1fc8:	80 e8       	ldi	r24, 0x80	; 128
    1fca:	9f e3       	ldi	r25, 0x3F	; 63
    1fcc:	29 81       	ldd	r18, Y+1	; 0x01
    1fce:	3a 81       	ldd	r19, Y+2	; 0x02
    1fd0:	4b 81       	ldd	r20, Y+3	; 0x03
    1fd2:	5c 81       	ldd	r21, Y+4	; 0x04
    1fd4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	7c 01       	movw	r14, r24
    1fde:	8d 01       	movw	r16, r26
    1fe0:	69 89       	ldd	r22, Y+17	; 0x11
    1fe2:	7a 89       	ldd	r23, Y+18	; 0x12
    1fe4:	8b 89       	ldd	r24, Y+19	; 0x13
    1fe6:	9c 89       	ldd	r25, Y+20	; 0x14
    1fe8:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    1fec:	9b 01       	movw	r18, r22
    1fee:	ac 01       	movw	r20, r24
    1ff0:	c8 01       	movw	r24, r16
    1ff2:	b7 01       	movw	r22, r14
    1ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	bc 01       	movw	r22, r24
    1ffe:	cd 01       	movw	r24, r26
    2000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	80 93 97 01 	sts	0x0197, r24
    200c:	90 93 98 01 	sts	0x0198, r25
    2010:	a0 93 99 01 	sts	0x0199, r26
    2014:	b0 93 9a 01 	sts	0x019A, r27
	
	TIMER0_voidPreLoad(PreLoad);
    2018:	80 91 97 01 	lds	r24, 0x0197
    201c:	90 91 98 01 	lds	r25, 0x0198
    2020:	a0 91 99 01 	lds	r26, 0x0199
    2024:	b0 91 9a 01 	lds	r27, 0x019A
    2028:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <TIMER0_voidPreLoad>
}
    202c:	68 96       	adiw	r28, 0x18	; 24
    202e:	0f b6       	in	r0, 0x3f	; 63
    2030:	f8 94       	cli
    2032:	de bf       	out	0x3e, r29	; 62
    2034:	0f be       	out	0x3f, r0	; 63
    2036:	cd bf       	out	0x3d, r28	; 61
    2038:	cf 91       	pop	r28
    203a:	df 91       	pop	r29
    203c:	1f 91       	pop	r17
    203e:	0f 91       	pop	r16
    2040:	ff 90       	pop	r15
    2042:	ef 90       	pop	r14
    2044:	08 95       	ret

00002046 <TIMER0_NORMAL_SetCallBack>:

void TIMER0_NORMAL_SetCallBack(void(*ptr)(void)){
    2046:	df 93       	push	r29
    2048:	cf 93       	push	r28
    204a:	00 d0       	rcall	.+0      	; 0x204c <TIMER0_NORMAL_SetCallBack+0x6>
    204c:	cd b7       	in	r28, 0x3d	; 61
    204e:	de b7       	in	r29, 0x3e	; 62
    2050:	9a 83       	std	Y+2, r25	; 0x02
    2052:	89 83       	std	Y+1, r24	; 0x01
			
	TIMER0_NORMAL_GPfun=ptr;
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	9a 81       	ldd	r25, Y+2	; 0x02
    2058:	90 93 6f 01 	sts	0x016F, r25
    205c:	80 93 6e 01 	sts	0x016E, r24
}
    2060:	0f 90       	pop	r0
    2062:	0f 90       	pop	r0
    2064:	cf 91       	pop	r28
    2066:	df 91       	pop	r29
    2068:	08 95       	ret

0000206a <TIMER0_CTC_SetCallBack>:

void TIMER0_CTC_SetCallBack(void(*ptr)(void)){
    206a:	df 93       	push	r29
    206c:	cf 93       	push	r28
    206e:	00 d0       	rcall	.+0      	; 0x2070 <TIMER0_CTC_SetCallBack+0x6>
    2070:	cd b7       	in	r28, 0x3d	; 61
    2072:	de b7       	in	r29, 0x3e	; 62
    2074:	9a 83       	std	Y+2, r25	; 0x02
    2076:	89 83       	std	Y+1, r24	; 0x01
	
	TIMER0_CTC_GPfun=ptr;
    2078:	89 81       	ldd	r24, Y+1	; 0x01
    207a:	9a 81       	ldd	r25, Y+2	; 0x02
    207c:	90 93 71 01 	sts	0x0171, r25
    2080:	80 93 70 01 	sts	0x0170, r24
}
    2084:	0f 90       	pop	r0
    2086:	0f 90       	pop	r0
    2088:	cf 91       	pop	r28
    208a:	df 91       	pop	r29
    208c:	08 95       	ret

0000208e <__vector_10>:

void __vector_10()__attribute__((signal));   // TIMER0_CTC
void __vector_10(){
    208e:	1f 92       	push	r1
    2090:	0f 92       	push	r0
    2092:	0f b6       	in	r0, 0x3f	; 63
    2094:	0f 92       	push	r0
    2096:	11 24       	eor	r1, r1
    2098:	2f 93       	push	r18
    209a:	3f 93       	push	r19
    209c:	4f 93       	push	r20
    209e:	5f 93       	push	r21
    20a0:	6f 93       	push	r22
    20a2:	7f 93       	push	r23
    20a4:	8f 93       	push	r24
    20a6:	9f 93       	push	r25
    20a8:	af 93       	push	r26
    20aa:	bf 93       	push	r27
    20ac:	ef 93       	push	r30
    20ae:	ff 93       	push	r31
    20b0:	df 93       	push	r29
    20b2:	cf 93       	push	r28
    20b4:	cd b7       	in	r28, 0x3d	; 61
    20b6:	de b7       	in	r29, 0x3e	; 62
	
	static u32 counter=0;
	
	if(counter==TIMER+1){
    20b8:	80 91 8f 01 	lds	r24, 0x018F
    20bc:	90 91 90 01 	lds	r25, 0x0190
    20c0:	a0 91 91 01 	lds	r26, 0x0191
    20c4:	b0 91 92 01 	lds	r27, 0x0192
    20c8:	9c 01       	movw	r18, r24
    20ca:	ad 01       	movw	r20, r26
    20cc:	2f 5f       	subi	r18, 0xFF	; 255
    20ce:	3f 4f       	sbci	r19, 0xFF	; 255
    20d0:	4f 4f       	sbci	r20, 0xFF	; 255
    20d2:	5f 4f       	sbci	r21, 0xFF	; 255
    20d4:	80 91 72 01 	lds	r24, 0x0172
    20d8:	90 91 73 01 	lds	r25, 0x0173
    20dc:	a0 91 74 01 	lds	r26, 0x0174
    20e0:	b0 91 75 01 	lds	r27, 0x0175
    20e4:	28 17       	cp	r18, r24
    20e6:	39 07       	cpc	r19, r25
    20e8:	4a 07       	cpc	r20, r26
    20ea:	5b 07       	cpc	r21, r27
    20ec:	f1 f4       	brne	.+60     	; 0x212a <__vector_10+0x9c>
		if(TIMER0_CTC_GPfun!=NULL){
    20ee:	80 91 70 01 	lds	r24, 0x0170
    20f2:	90 91 71 01 	lds	r25, 0x0171
    20f6:	00 97       	sbiw	r24, 0x00	; 0
    20f8:	29 f0       	breq	.+10     	; 0x2104 <__vector_10+0x76>
			TIMER0_CTC_GPfun();
    20fa:	e0 91 70 01 	lds	r30, 0x0170
    20fe:	f0 91 71 01 	lds	r31, 0x0171
    2102:	09 95       	icall
		}
		counter=0;
    2104:	10 92 72 01 	sts	0x0172, r1
    2108:	10 92 73 01 	sts	0x0173, r1
    210c:	10 92 74 01 	sts	0x0174, r1
    2110:	10 92 75 01 	sts	0x0175, r1
		TIMER0_voidPreLoad(PreLoad);
    2114:	80 91 97 01 	lds	r24, 0x0197
    2118:	90 91 98 01 	lds	r25, 0x0198
    211c:	a0 91 99 01 	lds	r26, 0x0199
    2120:	b0 91 9a 01 	lds	r27, 0x019A
    2124:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <TIMER0_voidPreLoad>
    2128:	13 c0       	rjmp	.+38     	; 0x2150 <__vector_10+0xc2>
	}
	else{
		counter++;
    212a:	80 91 72 01 	lds	r24, 0x0172
    212e:	90 91 73 01 	lds	r25, 0x0173
    2132:	a0 91 74 01 	lds	r26, 0x0174
    2136:	b0 91 75 01 	lds	r27, 0x0175
    213a:	01 96       	adiw	r24, 0x01	; 1
    213c:	a1 1d       	adc	r26, r1
    213e:	b1 1d       	adc	r27, r1
    2140:	80 93 72 01 	sts	0x0172, r24
    2144:	90 93 73 01 	sts	0x0173, r25
    2148:	a0 93 74 01 	sts	0x0174, r26
    214c:	b0 93 75 01 	sts	0x0175, r27
	}
	
}
    2150:	cf 91       	pop	r28
    2152:	df 91       	pop	r29
    2154:	ff 91       	pop	r31
    2156:	ef 91       	pop	r30
    2158:	bf 91       	pop	r27
    215a:	af 91       	pop	r26
    215c:	9f 91       	pop	r25
    215e:	8f 91       	pop	r24
    2160:	7f 91       	pop	r23
    2162:	6f 91       	pop	r22
    2164:	5f 91       	pop	r21
    2166:	4f 91       	pop	r20
    2168:	3f 91       	pop	r19
    216a:	2f 91       	pop	r18
    216c:	0f 90       	pop	r0
    216e:	0f be       	out	0x3f, r0	; 63
    2170:	0f 90       	pop	r0
    2172:	1f 90       	pop	r1
    2174:	18 95       	reti

00002176 <__vector_11>:

void __vector_11()__attribute__((signal));   // TIMER0_NORMAL
void __vector_11(){
    2176:	1f 92       	push	r1
    2178:	0f 92       	push	r0
    217a:	0f b6       	in	r0, 0x3f	; 63
    217c:	0f 92       	push	r0
    217e:	11 24       	eor	r1, r1
    2180:	2f 93       	push	r18
    2182:	3f 93       	push	r19
    2184:	4f 93       	push	r20
    2186:	5f 93       	push	r21
    2188:	6f 93       	push	r22
    218a:	7f 93       	push	r23
    218c:	8f 93       	push	r24
    218e:	9f 93       	push	r25
    2190:	af 93       	push	r26
    2192:	bf 93       	push	r27
    2194:	ef 93       	push	r30
    2196:	ff 93       	push	r31
    2198:	df 93       	push	r29
    219a:	cf 93       	push	r28
    219c:	cd b7       	in	r28, 0x3d	; 61
    219e:	de b7       	in	r29, 0x3e	; 62
	
	static u32 counter=0;
	
	if(counter==TIMER+1){
    21a0:	80 91 8f 01 	lds	r24, 0x018F
    21a4:	90 91 90 01 	lds	r25, 0x0190
    21a8:	a0 91 91 01 	lds	r26, 0x0191
    21ac:	b0 91 92 01 	lds	r27, 0x0192
    21b0:	9c 01       	movw	r18, r24
    21b2:	ad 01       	movw	r20, r26
    21b4:	2f 5f       	subi	r18, 0xFF	; 255
    21b6:	3f 4f       	sbci	r19, 0xFF	; 255
    21b8:	4f 4f       	sbci	r20, 0xFF	; 255
    21ba:	5f 4f       	sbci	r21, 0xFF	; 255
    21bc:	80 91 76 01 	lds	r24, 0x0176
    21c0:	90 91 77 01 	lds	r25, 0x0177
    21c4:	a0 91 78 01 	lds	r26, 0x0178
    21c8:	b0 91 79 01 	lds	r27, 0x0179
    21cc:	28 17       	cp	r18, r24
    21ce:	39 07       	cpc	r19, r25
    21d0:	4a 07       	cpc	r20, r26
    21d2:	5b 07       	cpc	r21, r27
    21d4:	f1 f4       	brne	.+60     	; 0x2212 <__vector_11+0x9c>
		if(TIMER0_NORMAL_GPfun!=NULL){
    21d6:	80 91 6e 01 	lds	r24, 0x016E
    21da:	90 91 6f 01 	lds	r25, 0x016F
    21de:	00 97       	sbiw	r24, 0x00	; 0
    21e0:	29 f0       	breq	.+10     	; 0x21ec <__vector_11+0x76>
			TIMER0_NORMAL_GPfun();
    21e2:	e0 91 6e 01 	lds	r30, 0x016E
    21e6:	f0 91 6f 01 	lds	r31, 0x016F
    21ea:	09 95       	icall
		}
		counter=0;
    21ec:	10 92 76 01 	sts	0x0176, r1
    21f0:	10 92 77 01 	sts	0x0177, r1
    21f4:	10 92 78 01 	sts	0x0178, r1
    21f8:	10 92 79 01 	sts	0x0179, r1
		TIMER0_voidPreLoad(PreLoad);
    21fc:	80 91 97 01 	lds	r24, 0x0197
    2200:	90 91 98 01 	lds	r25, 0x0198
    2204:	a0 91 99 01 	lds	r26, 0x0199
    2208:	b0 91 9a 01 	lds	r27, 0x019A
    220c:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <TIMER0_voidPreLoad>
    2210:	13 c0       	rjmp	.+38     	; 0x2238 <__vector_11+0xc2>
	}
	else{
		counter++;
    2212:	80 91 76 01 	lds	r24, 0x0176
    2216:	90 91 77 01 	lds	r25, 0x0177
    221a:	a0 91 78 01 	lds	r26, 0x0178
    221e:	b0 91 79 01 	lds	r27, 0x0179
    2222:	01 96       	adiw	r24, 0x01	; 1
    2224:	a1 1d       	adc	r26, r1
    2226:	b1 1d       	adc	r27, r1
    2228:	80 93 76 01 	sts	0x0176, r24
    222c:	90 93 77 01 	sts	0x0177, r25
    2230:	a0 93 78 01 	sts	0x0178, r26
    2234:	b0 93 79 01 	sts	0x0179, r27
	}
	
}
    2238:	cf 91       	pop	r28
    223a:	df 91       	pop	r29
    223c:	ff 91       	pop	r31
    223e:	ef 91       	pop	r30
    2240:	bf 91       	pop	r27
    2242:	af 91       	pop	r26
    2244:	9f 91       	pop	r25
    2246:	8f 91       	pop	r24
    2248:	7f 91       	pop	r23
    224a:	6f 91       	pop	r22
    224c:	5f 91       	pop	r21
    224e:	4f 91       	pop	r20
    2250:	3f 91       	pop	r19
    2252:	2f 91       	pop	r18
    2254:	0f 90       	pop	r0
    2256:	0f be       	out	0x3f, r0	; 63
    2258:	0f 90       	pop	r0
    225a:	1f 90       	pop	r1
    225c:	18 95       	reti

0000225e <TIMER1_voidInitialize>:
void (*TIMER1_CTCB_GPfun)(void)=NULL;
void (*TIMER1_ICU_GPfun)(void)=NULL;

u32 TIMER,PreLoad,PreScaler;

void TIMER1_voidInitialize(){
    225e:	df 93       	push	r29
    2260:	cf 93       	push	r28
    2262:	cd b7       	in	r28, 0x3d	; 61
    2264:	de b7       	in	r29, 0x3e	; 62
	SetBit(TCCR1B,PIN0);
	ClrBit(TCCR1B,PIN1);
	ClrBit(TCCR1B,PIN2);
	PreScaler=1;
#elif Clock_Select == clk_8
	ClrBit(TCCR1B,PIN0);
    2266:	ae e4       	ldi	r26, 0x4E	; 78
    2268:	b0 e0       	ldi	r27, 0x00	; 0
    226a:	ee e4       	ldi	r30, 0x4E	; 78
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	80 81       	ld	r24, Z
    2270:	8e 7f       	andi	r24, 0xFE	; 254
    2272:	8c 93       	st	X, r24
	SetBit(TCCR1B,PIN1);
    2274:	ae e4       	ldi	r26, 0x4E	; 78
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	ee e4       	ldi	r30, 0x4E	; 78
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	82 60       	ori	r24, 0x02	; 2
    2280:	8c 93       	st	X, r24
	ClrBit(TCCR1B,PIN2);
    2282:	ae e4       	ldi	r26, 0x4E	; 78
    2284:	b0 e0       	ldi	r27, 0x00	; 0
    2286:	ee e4       	ldi	r30, 0x4E	; 78
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	80 81       	ld	r24, Z
    228c:	8b 7f       	andi	r24, 0xFB	; 251
    228e:	8c 93       	st	X, r24
	PreScaler=8;
    2290:	88 e0       	ldi	r24, 0x08	; 8
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	a0 e0       	ldi	r26, 0x00	; 0
    2296:	b0 e0       	ldi	r27, 0x00	; 0
    2298:	80 93 93 01 	sts	0x0193, r24
    229c:	90 93 94 01 	sts	0x0194, r25
    22a0:	a0 93 95 01 	sts	0x0195, r26
    22a4:	b0 93 96 01 	sts	0x0196, r27
#endif

/************ Compare Output Mode *********/
#if TIMER_SELECT == TIMER1A
	#if Compare_Output_Mode == OC1_Disconnected
		ClrBit(TCCR1A,PIN6);
    22a8:	af e4       	ldi	r26, 0x4F	; 79
    22aa:	b0 e0       	ldi	r27, 0x00	; 0
    22ac:	ef e4       	ldi	r30, 0x4F	; 79
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	80 81       	ld	r24, Z
    22b2:	8f 7b       	andi	r24, 0xBF	; 191
    22b4:	8c 93       	st	X, r24
		ClrBit(TCCR1A,PIN7);
    22b6:	af e4       	ldi	r26, 0x4F	; 79
    22b8:	b0 e0       	ldi	r27, 0x00	; 0
    22ba:	ef e4       	ldi	r30, 0x4F	; 79
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	80 81       	ld	r24, Z
    22c0:	8f 77       	andi	r24, 0x7F	; 127
    22c2:	8c 93       	st	X, r24
	#endif
#endif

/************ Waveform Generation Mode *********/
#if Waveform_MODE == NORMAL
	ClrBit(TCCR1A,PIN0);
    22c4:	af e4       	ldi	r26, 0x4F	; 79
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
    22c8:	ef e4       	ldi	r30, 0x4F	; 79
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	80 81       	ld	r24, Z
    22ce:	8e 7f       	andi	r24, 0xFE	; 254
    22d0:	8c 93       	st	X, r24
	ClrBit(TCCR1A,PIN1);
    22d2:	af e4       	ldi	r26, 0x4F	; 79
    22d4:	b0 e0       	ldi	r27, 0x00	; 0
    22d6:	ef e4       	ldi	r30, 0x4F	; 79
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	80 81       	ld	r24, Z
    22dc:	8d 7f       	andi	r24, 0xFD	; 253
    22de:	8c 93       	st	X, r24
	ClrBit(TCCR1B,PIN3);
    22e0:	ae e4       	ldi	r26, 0x4E	; 78
    22e2:	b0 e0       	ldi	r27, 0x00	; 0
    22e4:	ee e4       	ldi	r30, 0x4E	; 78
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	80 81       	ld	r24, Z
    22ea:	87 7f       	andi	r24, 0xF7	; 247
    22ec:	8c 93       	st	X, r24
	ClrBit(TCCR1B,PIN4);
    22ee:	ae e4       	ldi	r26, 0x4E	; 78
    22f0:	b0 e0       	ldi	r27, 0x00	; 0
    22f2:	ee e4       	ldi	r30, 0x4E	; 78
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	80 81       	ld	r24, Z
    22f8:	8f 7e       	andi	r24, 0xEF	; 239
    22fa:	8c 93       	st	X, r24
	SetBit(TIMSK,PIN2);
    22fc:	a9 e5       	ldi	r26, 0x59	; 89
    22fe:	b0 e0       	ldi	r27, 0x00	; 0
    2300:	e9 e5       	ldi	r30, 0x59	; 89
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	80 81       	ld	r24, Z
    2306:	84 60       	ori	r24, 0x04	; 4
    2308:	8c 93       	st	X, r24
	SetBit(TCCR1A,PIN0);
	SetBit(TCCR1A,PIN1);
	SetBit(TCCR1B,PIN3);
	SetBit(TCCR1B,PIN4);
#endif
}
    230a:	cf 91       	pop	r28
    230c:	df 91       	pop	r29
    230e:	08 95       	ret

00002310 <TIMER1_voidEnableICU>:

void TIMER1_voidEnableICU(){
    2310:	df 93       	push	r29
    2312:	cf 93       	push	r28
    2314:	cd b7       	in	r28, 0x3d	; 61
    2316:	de b7       	in	r29, 0x3e	; 62
	
	SetBit(TIMSK,PIN5);
    2318:	a9 e5       	ldi	r26, 0x59	; 89
    231a:	b0 e0       	ldi	r27, 0x00	; 0
    231c:	e9 e5       	ldi	r30, 0x59	; 89
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	80 81       	ld	r24, Z
    2322:	80 62       	ori	r24, 0x20	; 32
    2324:	8c 93       	st	X, r24
}
    2326:	cf 91       	pop	r28
    2328:	df 91       	pop	r29
    232a:	08 95       	ret

0000232c <TIMER1_voidICUEdge>:

void TIMER1_voidICUEdge(u8 Copy_u8ICUEdge){
    232c:	df 93       	push	r29
    232e:	cf 93       	push	r28
    2330:	00 d0       	rcall	.+0      	; 0x2332 <TIMER1_voidICUEdge+0x6>
    2332:	0f 92       	push	r0
    2334:	cd b7       	in	r28, 0x3d	; 61
    2336:	de b7       	in	r29, 0x3e	; 62
    2338:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8ICUEdge){
    233a:	89 81       	ldd	r24, Y+1	; 0x01
    233c:	28 2f       	mov	r18, r24
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	3b 83       	std	Y+3, r19	; 0x03
    2342:	2a 83       	std	Y+2, r18	; 0x02
    2344:	8a 81       	ldd	r24, Y+2	; 0x02
    2346:	9b 81       	ldd	r25, Y+3	; 0x03
    2348:	00 97       	sbiw	r24, 0x00	; 0
    234a:	31 f0       	breq	.+12     	; 0x2358 <TIMER1_voidICUEdge+0x2c>
    234c:	2a 81       	ldd	r18, Y+2	; 0x02
    234e:	3b 81       	ldd	r19, Y+3	; 0x03
    2350:	21 30       	cpi	r18, 0x01	; 1
    2352:	31 05       	cpc	r19, r1
    2354:	49 f0       	breq	.+18     	; 0x2368 <TIMER1_voidICUEdge+0x3c>
    2356:	0f c0       	rjmp	.+30     	; 0x2376 <TIMER1_voidICUEdge+0x4a>
		case RISING_EDGE:
			SetBit(TCCR1B,PIN6);
    2358:	ae e4       	ldi	r26, 0x4E	; 78
    235a:	b0 e0       	ldi	r27, 0x00	; 0
    235c:	ee e4       	ldi	r30, 0x4E	; 78
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	80 81       	ld	r24, Z
    2362:	80 64       	ori	r24, 0x40	; 64
    2364:	8c 93       	st	X, r24
    2366:	07 c0       	rjmp	.+14     	; 0x2376 <TIMER1_voidICUEdge+0x4a>
			break;
		case FALLING_EDGE:
			ClrBit(TCCR1B,PIN6);
    2368:	ae e4       	ldi	r26, 0x4E	; 78
    236a:	b0 e0       	ldi	r27, 0x00	; 0
    236c:	ee e4       	ldi	r30, 0x4E	; 78
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	80 81       	ld	r24, Z
    2372:	8f 7b       	andi	r24, 0xBF	; 191
    2374:	8c 93       	st	X, r24
			break;
	}
}
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	cf 91       	pop	r28
    237e:	df 91       	pop	r29
    2380:	08 95       	ret

00002382 <TIMER1_voidSetOCR1>:

void TIMER1_voidSetOCR1(u16 Copy_u16Value){
    2382:	df 93       	push	r29
    2384:	cf 93       	push	r28
    2386:	00 d0       	rcall	.+0      	; 0x2388 <TIMER1_voidSetOCR1+0x6>
    2388:	cd b7       	in	r28, 0x3d	; 61
    238a:	de b7       	in	r29, 0x3e	; 62
    238c:	9a 83       	std	Y+2, r25	; 0x02
    238e:	89 83       	std	Y+1, r24	; 0x01
	#if TIMER_SELECT == TIMER1A
		OCR1A=Copy_u16Value;
    2390:	ea e4       	ldi	r30, 0x4A	; 74
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	89 81       	ldd	r24, Y+1	; 0x01
    2396:	9a 81       	ldd	r25, Y+2	; 0x02
    2398:	91 83       	std	Z+1, r25	; 0x01
    239a:	80 83       	st	Z, r24
	#elif TIMER_SELECT == TIMER1B
		OCR1B=Copy_u16Value;
	#endif	
}
    239c:	0f 90       	pop	r0
    239e:	0f 90       	pop	r0
    23a0:	cf 91       	pop	r28
    23a2:	df 91       	pop	r29
    23a4:	08 95       	ret

000023a6 <TIMER1_voidSetICR1>:

void TIMER1_voidSetICR1(u16 Copy_u16Value){
    23a6:	df 93       	push	r29
    23a8:	cf 93       	push	r28
    23aa:	00 d0       	rcall	.+0      	; 0x23ac <TIMER1_voidSetICR1+0x6>
    23ac:	cd b7       	in	r28, 0x3d	; 61
    23ae:	de b7       	in	r29, 0x3e	; 62
    23b0:	9a 83       	std	Y+2, r25	; 0x02
    23b2:	89 83       	std	Y+1, r24	; 0x01
	
	ICR1=Copy_u16Value;
    23b4:	e6 e4       	ldi	r30, 0x46	; 70
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	89 81       	ldd	r24, Y+1	; 0x01
    23ba:	9a 81       	ldd	r25, Y+2	; 0x02
    23bc:	91 83       	std	Z+1, r25	; 0x01
    23be:	80 83       	st	Z, r24
}
    23c0:	0f 90       	pop	r0
    23c2:	0f 90       	pop	r0
    23c4:	cf 91       	pop	r28
    23c6:	df 91       	pop	r29
    23c8:	08 95       	ret

000023ca <TIMER1_u16GetICR1>:

u16 TIMER1_u16GetICR1(){
    23ca:	df 93       	push	r29
    23cc:	cf 93       	push	r28
    23ce:	cd b7       	in	r28, 0x3d	; 61
    23d0:	de b7       	in	r29, 0x3e	; 62
	
	return ICR1;
    23d2:	e6 e4       	ldi	r30, 0x46	; 70
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	80 81       	ld	r24, Z
    23d8:	91 81       	ldd	r25, Z+1	; 0x01
}
    23da:	cf 91       	pop	r28
    23dc:	df 91       	pop	r29
    23de:	08 95       	ret

000023e0 <TIMER1_voidPreLoad>:

void TIMER1_voidPreLoad(u16 Copy_u16Value){
    23e0:	df 93       	push	r29
    23e2:	cf 93       	push	r28
    23e4:	00 d0       	rcall	.+0      	; 0x23e6 <TIMER1_voidPreLoad+0x6>
    23e6:	cd b7       	in	r28, 0x3d	; 61
    23e8:	de b7       	in	r29, 0x3e	; 62
    23ea:	9a 83       	std	Y+2, r25	; 0x02
    23ec:	89 83       	std	Y+1, r24	; 0x01
	
	TCNT1=Copy_u16Value;
    23ee:	ec e4       	ldi	r30, 0x4C	; 76
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	89 81       	ldd	r24, Y+1	; 0x01
    23f4:	9a 81       	ldd	r25, Y+2	; 0x02
    23f6:	91 83       	std	Z+1, r25	; 0x01
    23f8:	80 83       	st	Z, r24
}
    23fa:	0f 90       	pop	r0
    23fc:	0f 90       	pop	r0
    23fe:	cf 91       	pop	r28
    2400:	df 91       	pop	r29
    2402:	08 95       	ret

00002404 <TIMER1_voidSetTimer>:


void TIMER1_voidSetTimer(u32 Copy_u32TimeMS){
    2404:	ef 92       	push	r14
    2406:	ff 92       	push	r15
    2408:	0f 93       	push	r16
    240a:	1f 93       	push	r17
    240c:	df 93       	push	r29
    240e:	cf 93       	push	r28
    2410:	cd b7       	in	r28, 0x3d	; 61
    2412:	de b7       	in	r29, 0x3e	; 62
    2414:	68 97       	sbiw	r28, 0x18	; 24
    2416:	0f b6       	in	r0, 0x3f	; 63
    2418:	f8 94       	cli
    241a:	de bf       	out	0x3e, r29	; 62
    241c:	0f be       	out	0x3f, r0	; 63
    241e:	cd bf       	out	0x3d, r28	; 61
    2420:	6d 8b       	std	Y+21, r22	; 0x15
    2422:	7e 8b       	std	Y+22, r23	; 0x16
    2424:	8f 8b       	std	Y+23, r24	; 0x17
    2426:	98 8f       	std	Y+24, r25	; 0x18
	
	u32 MAX_NUM;
	#if Waveform_MODE == NORMAL
		MAX_NUM=MAX_16BIT_REG;
    2428:	8f ef       	ldi	r24, 0xFF	; 255
    242a:	9f ef       	ldi	r25, 0xFF	; 255
    242c:	a0 e0       	ldi	r26, 0x00	; 0
    242e:	b0 e0       	ldi	r27, 0x00	; 0
    2430:	89 8b       	std	Y+17, r24	; 0x11
    2432:	9a 8b       	std	Y+18, r25	; 0x12
    2434:	ab 8b       	std	Y+19, r26	; 0x13
    2436:	bc 8b       	std	Y+20, r27	; 0x14
		MAX_NUM=OCR1A;
	#elif Waveform_MODE == CTC_ICR1
		MAX_NUM=ICR1;
	#endif
	
	u32 TIMER_freq=CPU_FREQUENCY/PreScaler;
    2438:	20 91 93 01 	lds	r18, 0x0193
    243c:	30 91 94 01 	lds	r19, 0x0194
    2440:	40 91 95 01 	lds	r20, 0x0195
    2444:	50 91 96 01 	lds	r21, 0x0196
    2448:	80 e0       	ldi	r24, 0x00	; 0
    244a:	92 e1       	ldi	r25, 0x12	; 18
    244c:	aa e7       	ldi	r26, 0x7A	; 122
    244e:	b0 e0       	ldi	r27, 0x00	; 0
    2450:	bc 01       	movw	r22, r24
    2452:	cd 01       	movw	r24, r26
    2454:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__udivmodsi4>
    2458:	da 01       	movw	r26, r20
    245a:	c9 01       	movw	r24, r18
    245c:	8d 87       	std	Y+13, r24	; 0x0d
    245e:	9e 87       	std	Y+14, r25	; 0x0e
    2460:	af 87       	std	Y+15, r26	; 0x0f
    2462:	b8 8b       	std	Y+16, r27	; 0x10
	f32 Tick_Time=MICRO_IN_SEC/TIMER_freq;
    2464:	80 e4       	ldi	r24, 0x40	; 64
    2466:	92 e4       	ldi	r25, 0x42	; 66
    2468:	af e0       	ldi	r26, 0x0F	; 15
    246a:	b0 e0       	ldi	r27, 0x00	; 0
    246c:	2d 85       	ldd	r18, Y+13	; 0x0d
    246e:	3e 85       	ldd	r19, Y+14	; 0x0e
    2470:	4f 85       	ldd	r20, Y+15	; 0x0f
    2472:	58 89       	ldd	r21, Y+16	; 0x10
    2474:	bc 01       	movw	r22, r24
    2476:	cd 01       	movw	r24, r26
    2478:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__udivmodsi4>
    247c:	da 01       	movw	r26, r20
    247e:	c9 01       	movw	r24, r18
    2480:	bc 01       	movw	r22, r24
    2482:	cd 01       	movw	r24, r26
    2484:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    2488:	dc 01       	movw	r26, r24
    248a:	cb 01       	movw	r24, r22
    248c:	89 87       	std	Y+9, r24	; 0x09
    248e:	9a 87       	std	Y+10, r25	; 0x0a
    2490:	ab 87       	std	Y+11, r26	; 0x0b
    2492:	bc 87       	std	Y+12, r27	; 0x0c
	u32 OverFlow_Time=Tick_Time*MAX_NUM;
    2494:	69 89       	ldd	r22, Y+17	; 0x11
    2496:	7a 89       	ldd	r23, Y+18	; 0x12
    2498:	8b 89       	ldd	r24, Y+19	; 0x13
    249a:	9c 89       	ldd	r25, Y+20	; 0x14
    249c:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	bc 01       	movw	r22, r24
    24a6:	cd 01       	movw	r24, r26
    24a8:	29 85       	ldd	r18, Y+9	; 0x09
    24aa:	3a 85       	ldd	r19, Y+10	; 0x0a
    24ac:	4b 85       	ldd	r20, Y+11	; 0x0b
    24ae:	5c 85       	ldd	r21, Y+12	; 0x0c
    24b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	bc 01       	movw	r22, r24
    24ba:	cd 01       	movw	r24, r26
    24bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	8d 83       	std	Y+5, r24	; 0x05
    24c6:	9e 83       	std	Y+6, r25	; 0x06
    24c8:	af 83       	std	Y+7, r26	; 0x07
    24ca:	b8 87       	std	Y+8, r27	; 0x08
	
	TIMER=(Copy_u32TimeMS*MICRO_IN_MILLI)/OverFlow_Time;
    24cc:	8d 89       	ldd	r24, Y+21	; 0x15
    24ce:	9e 89       	ldd	r25, Y+22	; 0x16
    24d0:	af 89       	ldd	r26, Y+23	; 0x17
    24d2:	b8 8d       	ldd	r27, Y+24	; 0x18
    24d4:	28 ee       	ldi	r18, 0xE8	; 232
    24d6:	33 e0       	ldi	r19, 0x03	; 3
    24d8:	40 e0       	ldi	r20, 0x00	; 0
    24da:	50 e0       	ldi	r21, 0x00	; 0
    24dc:	bc 01       	movw	r22, r24
    24de:	cd 01       	movw	r24, r26
    24e0:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__mulsi3>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	2d 81       	ldd	r18, Y+5	; 0x05
    24ea:	3e 81       	ldd	r19, Y+6	; 0x06
    24ec:	4f 81       	ldd	r20, Y+7	; 0x07
    24ee:	58 85       	ldd	r21, Y+8	; 0x08
    24f0:	bc 01       	movw	r22, r24
    24f2:	cd 01       	movw	r24, r26
    24f4:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__udivmodsi4>
    24f8:	da 01       	movw	r26, r20
    24fa:	c9 01       	movw	r24, r18
    24fc:	80 93 8f 01 	sts	0x018F, r24
    2500:	90 93 90 01 	sts	0x0190, r25
    2504:	a0 93 91 01 	sts	0x0191, r26
    2508:	b0 93 92 01 	sts	0x0192, r27
	f32 remainder=((Copy_u32TimeMS*MICRO_IN_MILLI)%OverFlow_Time)/(f32)OverFlow_Time;
    250c:	8d 89       	ldd	r24, Y+21	; 0x15
    250e:	9e 89       	ldd	r25, Y+22	; 0x16
    2510:	af 89       	ldd	r26, Y+23	; 0x17
    2512:	b8 8d       	ldd	r27, Y+24	; 0x18
    2514:	28 ee       	ldi	r18, 0xE8	; 232
    2516:	33 e0       	ldi	r19, 0x03	; 3
    2518:	40 e0       	ldi	r20, 0x00	; 0
    251a:	50 e0       	ldi	r21, 0x00	; 0
    251c:	bc 01       	movw	r22, r24
    251e:	cd 01       	movw	r24, r26
    2520:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__mulsi3>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	2d 81       	ldd	r18, Y+5	; 0x05
    252a:	3e 81       	ldd	r19, Y+6	; 0x06
    252c:	4f 81       	ldd	r20, Y+7	; 0x07
    252e:	58 85       	ldd	r21, Y+8	; 0x08
    2530:	bc 01       	movw	r22, r24
    2532:	cd 01       	movw	r24, r26
    2534:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__udivmodsi4>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	bc 01       	movw	r22, r24
    253e:	cd 01       	movw	r24, r26
    2540:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    2544:	7b 01       	movw	r14, r22
    2546:	8c 01       	movw	r16, r24
    2548:	6d 81       	ldd	r22, Y+5	; 0x05
    254a:	7e 81       	ldd	r23, Y+6	; 0x06
    254c:	8f 81       	ldd	r24, Y+7	; 0x07
    254e:	98 85       	ldd	r25, Y+8	; 0x08
    2550:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    2554:	9b 01       	movw	r18, r22
    2556:	ac 01       	movw	r20, r24
    2558:	c8 01       	movw	r24, r16
    255a:	b7 01       	movw	r22, r14
    255c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	89 83       	std	Y+1, r24	; 0x01
    2566:	9a 83       	std	Y+2, r25	; 0x02
    2568:	ab 83       	std	Y+3, r26	; 0x03
    256a:	bc 83       	std	Y+4, r27	; 0x04
	PreLoad=(1-remainder)*MAX_NUM;
    256c:	60 e0       	ldi	r22, 0x00	; 0
    256e:	70 e0       	ldi	r23, 0x00	; 0
    2570:	80 e8       	ldi	r24, 0x80	; 128
    2572:	9f e3       	ldi	r25, 0x3F	; 63
    2574:	29 81       	ldd	r18, Y+1	; 0x01
    2576:	3a 81       	ldd	r19, Y+2	; 0x02
    2578:	4b 81       	ldd	r20, Y+3	; 0x03
    257a:	5c 81       	ldd	r21, Y+4	; 0x04
    257c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2580:	dc 01       	movw	r26, r24
    2582:	cb 01       	movw	r24, r22
    2584:	7c 01       	movw	r14, r24
    2586:	8d 01       	movw	r16, r26
    2588:	69 89       	ldd	r22, Y+17	; 0x11
    258a:	7a 89       	ldd	r23, Y+18	; 0x12
    258c:	8b 89       	ldd	r24, Y+19	; 0x13
    258e:	9c 89       	ldd	r25, Y+20	; 0x14
    2590:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    2594:	9b 01       	movw	r18, r22
    2596:	ac 01       	movw	r20, r24
    2598:	c8 01       	movw	r24, r16
    259a:	b7 01       	movw	r22, r14
    259c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a0:	dc 01       	movw	r26, r24
    25a2:	cb 01       	movw	r24, r22
    25a4:	bc 01       	movw	r22, r24
    25a6:	cd 01       	movw	r24, r26
    25a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	80 93 97 01 	sts	0x0197, r24
    25b4:	90 93 98 01 	sts	0x0198, r25
    25b8:	a0 93 99 01 	sts	0x0199, r26
    25bc:	b0 93 9a 01 	sts	0x019A, r27
	
	TIMER1_voidPreLoad(PreLoad);
    25c0:	80 91 97 01 	lds	r24, 0x0197
    25c4:	90 91 98 01 	lds	r25, 0x0198
    25c8:	a0 91 99 01 	lds	r26, 0x0199
    25cc:	b0 91 9a 01 	lds	r27, 0x019A
    25d0:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <TIMER1_voidPreLoad>
}
    25d4:	68 96       	adiw	r28, 0x18	; 24
    25d6:	0f b6       	in	r0, 0x3f	; 63
    25d8:	f8 94       	cli
    25da:	de bf       	out	0x3e, r29	; 62
    25dc:	0f be       	out	0x3f, r0	; 63
    25de:	cd bf       	out	0x3d, r28	; 61
    25e0:	cf 91       	pop	r28
    25e2:	df 91       	pop	r29
    25e4:	1f 91       	pop	r17
    25e6:	0f 91       	pop	r16
    25e8:	ff 90       	pop	r15
    25ea:	ef 90       	pop	r14
    25ec:	08 95       	ret

000025ee <TIMER1_ICU_SetCallBack>:

void TIMER1_ICU_SetCallBack(void(*ptr)(void)){
    25ee:	df 93       	push	r29
    25f0:	cf 93       	push	r28
    25f2:	00 d0       	rcall	.+0      	; 0x25f4 <TIMER1_ICU_SetCallBack+0x6>
    25f4:	cd b7       	in	r28, 0x3d	; 61
    25f6:	de b7       	in	r29, 0x3e	; 62
    25f8:	9a 83       	std	Y+2, r25	; 0x02
    25fa:	89 83       	std	Y+1, r24	; 0x01
	
	TIMER1_ICU_GPfun=ptr;
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
    25fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2600:	90 93 81 01 	sts	0x0181, r25
    2604:	80 93 80 01 	sts	0x0180, r24
}
    2608:	0f 90       	pop	r0
    260a:	0f 90       	pop	r0
    260c:	cf 91       	pop	r28
    260e:	df 91       	pop	r29
    2610:	08 95       	ret

00002612 <TIMER1_CTCA_SetCallBack>:

void TIMER1_CTCA_SetCallBack(void(*ptr)(void)){
    2612:	df 93       	push	r29
    2614:	cf 93       	push	r28
    2616:	00 d0       	rcall	.+0      	; 0x2618 <TIMER1_CTCA_SetCallBack+0x6>
    2618:	cd b7       	in	r28, 0x3d	; 61
    261a:	de b7       	in	r29, 0x3e	; 62
    261c:	9a 83       	std	Y+2, r25	; 0x02
    261e:	89 83       	std	Y+1, r24	; 0x01
	
	TIMER1_CTCA_GPfun=ptr;
    2620:	89 81       	ldd	r24, Y+1	; 0x01
    2622:	9a 81       	ldd	r25, Y+2	; 0x02
    2624:	90 93 7d 01 	sts	0x017D, r25
    2628:	80 93 7c 01 	sts	0x017C, r24
}
    262c:	0f 90       	pop	r0
    262e:	0f 90       	pop	r0
    2630:	cf 91       	pop	r28
    2632:	df 91       	pop	r29
    2634:	08 95       	ret

00002636 <TIMER1_CTCB_SetCallBack>:

void TIMER1_CTCB_SetCallBack(void(*ptr)(void)){
    2636:	df 93       	push	r29
    2638:	cf 93       	push	r28
    263a:	00 d0       	rcall	.+0      	; 0x263c <TIMER1_CTCB_SetCallBack+0x6>
    263c:	cd b7       	in	r28, 0x3d	; 61
    263e:	de b7       	in	r29, 0x3e	; 62
    2640:	9a 83       	std	Y+2, r25	; 0x02
    2642:	89 83       	std	Y+1, r24	; 0x01
	
	TIMER1_CTCB_GPfun=ptr;
    2644:	89 81       	ldd	r24, Y+1	; 0x01
    2646:	9a 81       	ldd	r25, Y+2	; 0x02
    2648:	90 93 7f 01 	sts	0x017F, r25
    264c:	80 93 7e 01 	sts	0x017E, r24
}
    2650:	0f 90       	pop	r0
    2652:	0f 90       	pop	r0
    2654:	cf 91       	pop	r28
    2656:	df 91       	pop	r29
    2658:	08 95       	ret

0000265a <TIMER1_NORMAL_SetCallBack>:

void TIMER1_NORMAL_SetCallBack(void(*ptr)(void)){
    265a:	df 93       	push	r29
    265c:	cf 93       	push	r28
    265e:	00 d0       	rcall	.+0      	; 0x2660 <TIMER1_NORMAL_SetCallBack+0x6>
    2660:	cd b7       	in	r28, 0x3d	; 61
    2662:	de b7       	in	r29, 0x3e	; 62
    2664:	9a 83       	std	Y+2, r25	; 0x02
    2666:	89 83       	std	Y+1, r24	; 0x01
			
	TIMER1_NORMAL_GPfun=ptr;
    2668:	89 81       	ldd	r24, Y+1	; 0x01
    266a:	9a 81       	ldd	r25, Y+2	; 0x02
    266c:	90 93 7b 01 	sts	0x017B, r25
    2670:	80 93 7a 01 	sts	0x017A, r24
}
    2674:	0f 90       	pop	r0
    2676:	0f 90       	pop	r0
    2678:	cf 91       	pop	r28
    267a:	df 91       	pop	r29
    267c:	08 95       	ret

0000267e <__vector_6>:

void __vector_6()__attribute__((signal));   // TIMER1_ICU
void __vector_6(){
    267e:	1f 92       	push	r1
    2680:	0f 92       	push	r0
    2682:	0f b6       	in	r0, 0x3f	; 63
    2684:	0f 92       	push	r0
    2686:	11 24       	eor	r1, r1
    2688:	2f 93       	push	r18
    268a:	3f 93       	push	r19
    268c:	4f 93       	push	r20
    268e:	5f 93       	push	r21
    2690:	6f 93       	push	r22
    2692:	7f 93       	push	r23
    2694:	8f 93       	push	r24
    2696:	9f 93       	push	r25
    2698:	af 93       	push	r26
    269a:	bf 93       	push	r27
    269c:	ef 93       	push	r30
    269e:	ff 93       	push	r31
    26a0:	df 93       	push	r29
    26a2:	cf 93       	push	r28
    26a4:	cd b7       	in	r28, 0x3d	; 61
    26a6:	de b7       	in	r29, 0x3e	; 62

	if(TIMER1_ICU_GPfun!=NULL){
    26a8:	80 91 80 01 	lds	r24, 0x0180
    26ac:	90 91 81 01 	lds	r25, 0x0181
    26b0:	00 97       	sbiw	r24, 0x00	; 0
    26b2:	29 f0       	breq	.+10     	; 0x26be <__vector_6+0x40>
		TIMER1_ICU_GPfun();
    26b4:	e0 91 80 01 	lds	r30, 0x0180
    26b8:	f0 91 81 01 	lds	r31, 0x0181
    26bc:	09 95       	icall
	}
}
    26be:	cf 91       	pop	r28
    26c0:	df 91       	pop	r29
    26c2:	ff 91       	pop	r31
    26c4:	ef 91       	pop	r30
    26c6:	bf 91       	pop	r27
    26c8:	af 91       	pop	r26
    26ca:	9f 91       	pop	r25
    26cc:	8f 91       	pop	r24
    26ce:	7f 91       	pop	r23
    26d0:	6f 91       	pop	r22
    26d2:	5f 91       	pop	r21
    26d4:	4f 91       	pop	r20
    26d6:	3f 91       	pop	r19
    26d8:	2f 91       	pop	r18
    26da:	0f 90       	pop	r0
    26dc:	0f be       	out	0x3f, r0	; 63
    26de:	0f 90       	pop	r0
    26e0:	1f 90       	pop	r1
    26e2:	18 95       	reti

000026e4 <__vector_7>:

void __vector_7()__attribute__((signal));   // TIMER1_CTCA
void __vector_7(){
    26e4:	1f 92       	push	r1
    26e6:	0f 92       	push	r0
    26e8:	0f b6       	in	r0, 0x3f	; 63
    26ea:	0f 92       	push	r0
    26ec:	11 24       	eor	r1, r1
    26ee:	2f 93       	push	r18
    26f0:	3f 93       	push	r19
    26f2:	4f 93       	push	r20
    26f4:	5f 93       	push	r21
    26f6:	6f 93       	push	r22
    26f8:	7f 93       	push	r23
    26fa:	8f 93       	push	r24
    26fc:	9f 93       	push	r25
    26fe:	af 93       	push	r26
    2700:	bf 93       	push	r27
    2702:	ef 93       	push	r30
    2704:	ff 93       	push	r31
    2706:	df 93       	push	r29
    2708:	cf 93       	push	r28
    270a:	cd b7       	in	r28, 0x3d	; 61
    270c:	de b7       	in	r29, 0x3e	; 62
	
	static u32 counter=0;
	
	if(counter==TIMER+1){
    270e:	80 91 8f 01 	lds	r24, 0x018F
    2712:	90 91 90 01 	lds	r25, 0x0190
    2716:	a0 91 91 01 	lds	r26, 0x0191
    271a:	b0 91 92 01 	lds	r27, 0x0192
    271e:	9c 01       	movw	r18, r24
    2720:	ad 01       	movw	r20, r26
    2722:	2f 5f       	subi	r18, 0xFF	; 255
    2724:	3f 4f       	sbci	r19, 0xFF	; 255
    2726:	4f 4f       	sbci	r20, 0xFF	; 255
    2728:	5f 4f       	sbci	r21, 0xFF	; 255
    272a:	80 91 82 01 	lds	r24, 0x0182
    272e:	90 91 83 01 	lds	r25, 0x0183
    2732:	a0 91 84 01 	lds	r26, 0x0184
    2736:	b0 91 85 01 	lds	r27, 0x0185
    273a:	28 17       	cp	r18, r24
    273c:	39 07       	cpc	r19, r25
    273e:	4a 07       	cpc	r20, r26
    2740:	5b 07       	cpc	r21, r27
    2742:	f1 f4       	brne	.+60     	; 0x2780 <__vector_7+0x9c>
		if(TIMER1_CTCA_GPfun!=NULL){
    2744:	80 91 7c 01 	lds	r24, 0x017C
    2748:	90 91 7d 01 	lds	r25, 0x017D
    274c:	00 97       	sbiw	r24, 0x00	; 0
    274e:	29 f0       	breq	.+10     	; 0x275a <__vector_7+0x76>
			TIMER1_CTCA_GPfun();
    2750:	e0 91 7c 01 	lds	r30, 0x017C
    2754:	f0 91 7d 01 	lds	r31, 0x017D
    2758:	09 95       	icall
		}
		counter=0;
    275a:	10 92 82 01 	sts	0x0182, r1
    275e:	10 92 83 01 	sts	0x0183, r1
    2762:	10 92 84 01 	sts	0x0184, r1
    2766:	10 92 85 01 	sts	0x0185, r1
		TIMER1_voidPreLoad(PreLoad);
    276a:	80 91 97 01 	lds	r24, 0x0197
    276e:	90 91 98 01 	lds	r25, 0x0198
    2772:	a0 91 99 01 	lds	r26, 0x0199
    2776:	b0 91 9a 01 	lds	r27, 0x019A
    277a:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <TIMER1_voidPreLoad>
    277e:	13 c0       	rjmp	.+38     	; 0x27a6 <__vector_7+0xc2>
	}
	else{
		counter++;
    2780:	80 91 82 01 	lds	r24, 0x0182
    2784:	90 91 83 01 	lds	r25, 0x0183
    2788:	a0 91 84 01 	lds	r26, 0x0184
    278c:	b0 91 85 01 	lds	r27, 0x0185
    2790:	01 96       	adiw	r24, 0x01	; 1
    2792:	a1 1d       	adc	r26, r1
    2794:	b1 1d       	adc	r27, r1
    2796:	80 93 82 01 	sts	0x0182, r24
    279a:	90 93 83 01 	sts	0x0183, r25
    279e:	a0 93 84 01 	sts	0x0184, r26
    27a2:	b0 93 85 01 	sts	0x0185, r27
	}
}
    27a6:	cf 91       	pop	r28
    27a8:	df 91       	pop	r29
    27aa:	ff 91       	pop	r31
    27ac:	ef 91       	pop	r30
    27ae:	bf 91       	pop	r27
    27b0:	af 91       	pop	r26
    27b2:	9f 91       	pop	r25
    27b4:	8f 91       	pop	r24
    27b6:	7f 91       	pop	r23
    27b8:	6f 91       	pop	r22
    27ba:	5f 91       	pop	r21
    27bc:	4f 91       	pop	r20
    27be:	3f 91       	pop	r19
    27c0:	2f 91       	pop	r18
    27c2:	0f 90       	pop	r0
    27c4:	0f be       	out	0x3f, r0	; 63
    27c6:	0f 90       	pop	r0
    27c8:	1f 90       	pop	r1
    27ca:	18 95       	reti

000027cc <__vector_8>:

void __vector_8()__attribute__((signal));   // TIMER1_CTCB
void __vector_8(){
    27cc:	1f 92       	push	r1
    27ce:	0f 92       	push	r0
    27d0:	0f b6       	in	r0, 0x3f	; 63
    27d2:	0f 92       	push	r0
    27d4:	11 24       	eor	r1, r1
    27d6:	2f 93       	push	r18
    27d8:	3f 93       	push	r19
    27da:	4f 93       	push	r20
    27dc:	5f 93       	push	r21
    27de:	6f 93       	push	r22
    27e0:	7f 93       	push	r23
    27e2:	8f 93       	push	r24
    27e4:	9f 93       	push	r25
    27e6:	af 93       	push	r26
    27e8:	bf 93       	push	r27
    27ea:	ef 93       	push	r30
    27ec:	ff 93       	push	r31
    27ee:	df 93       	push	r29
    27f0:	cf 93       	push	r28
    27f2:	cd b7       	in	r28, 0x3d	; 61
    27f4:	de b7       	in	r29, 0x3e	; 62
	
	static u32 counter=0;
	
	if(counter==TIMER+1){
    27f6:	80 91 8f 01 	lds	r24, 0x018F
    27fa:	90 91 90 01 	lds	r25, 0x0190
    27fe:	a0 91 91 01 	lds	r26, 0x0191
    2802:	b0 91 92 01 	lds	r27, 0x0192
    2806:	9c 01       	movw	r18, r24
    2808:	ad 01       	movw	r20, r26
    280a:	2f 5f       	subi	r18, 0xFF	; 255
    280c:	3f 4f       	sbci	r19, 0xFF	; 255
    280e:	4f 4f       	sbci	r20, 0xFF	; 255
    2810:	5f 4f       	sbci	r21, 0xFF	; 255
    2812:	80 91 86 01 	lds	r24, 0x0186
    2816:	90 91 87 01 	lds	r25, 0x0187
    281a:	a0 91 88 01 	lds	r26, 0x0188
    281e:	b0 91 89 01 	lds	r27, 0x0189
    2822:	28 17       	cp	r18, r24
    2824:	39 07       	cpc	r19, r25
    2826:	4a 07       	cpc	r20, r26
    2828:	5b 07       	cpc	r21, r27
    282a:	f1 f4       	brne	.+60     	; 0x2868 <__vector_8+0x9c>
		if(TIMER1_CTCB_GPfun!=NULL){
    282c:	80 91 7e 01 	lds	r24, 0x017E
    2830:	90 91 7f 01 	lds	r25, 0x017F
    2834:	00 97       	sbiw	r24, 0x00	; 0
    2836:	29 f0       	breq	.+10     	; 0x2842 <__vector_8+0x76>
			TIMER1_CTCB_GPfun();
    2838:	e0 91 7e 01 	lds	r30, 0x017E
    283c:	f0 91 7f 01 	lds	r31, 0x017F
    2840:	09 95       	icall
		}
		counter=0;
    2842:	10 92 86 01 	sts	0x0186, r1
    2846:	10 92 87 01 	sts	0x0187, r1
    284a:	10 92 88 01 	sts	0x0188, r1
    284e:	10 92 89 01 	sts	0x0189, r1
		TIMER1_voidPreLoad(PreLoad);
    2852:	80 91 97 01 	lds	r24, 0x0197
    2856:	90 91 98 01 	lds	r25, 0x0198
    285a:	a0 91 99 01 	lds	r26, 0x0199
    285e:	b0 91 9a 01 	lds	r27, 0x019A
    2862:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <TIMER1_voidPreLoad>
    2866:	13 c0       	rjmp	.+38     	; 0x288e <__vector_8+0xc2>
	}
	else{
		counter++;
    2868:	80 91 86 01 	lds	r24, 0x0186
    286c:	90 91 87 01 	lds	r25, 0x0187
    2870:	a0 91 88 01 	lds	r26, 0x0188
    2874:	b0 91 89 01 	lds	r27, 0x0189
    2878:	01 96       	adiw	r24, 0x01	; 1
    287a:	a1 1d       	adc	r26, r1
    287c:	b1 1d       	adc	r27, r1
    287e:	80 93 86 01 	sts	0x0186, r24
    2882:	90 93 87 01 	sts	0x0187, r25
    2886:	a0 93 88 01 	sts	0x0188, r26
    288a:	b0 93 89 01 	sts	0x0189, r27
	}
}
    288e:	cf 91       	pop	r28
    2890:	df 91       	pop	r29
    2892:	ff 91       	pop	r31
    2894:	ef 91       	pop	r30
    2896:	bf 91       	pop	r27
    2898:	af 91       	pop	r26
    289a:	9f 91       	pop	r25
    289c:	8f 91       	pop	r24
    289e:	7f 91       	pop	r23
    28a0:	6f 91       	pop	r22
    28a2:	5f 91       	pop	r21
    28a4:	4f 91       	pop	r20
    28a6:	3f 91       	pop	r19
    28a8:	2f 91       	pop	r18
    28aa:	0f 90       	pop	r0
    28ac:	0f be       	out	0x3f, r0	; 63
    28ae:	0f 90       	pop	r0
    28b0:	1f 90       	pop	r1
    28b2:	18 95       	reti

000028b4 <__vector_9>:

void __vector_9()__attribute__((signal));   // TIMER1_NORMAL
void __vector_9(){
    28b4:	1f 92       	push	r1
    28b6:	0f 92       	push	r0
    28b8:	0f b6       	in	r0, 0x3f	; 63
    28ba:	0f 92       	push	r0
    28bc:	11 24       	eor	r1, r1
    28be:	2f 93       	push	r18
    28c0:	3f 93       	push	r19
    28c2:	4f 93       	push	r20
    28c4:	5f 93       	push	r21
    28c6:	6f 93       	push	r22
    28c8:	7f 93       	push	r23
    28ca:	8f 93       	push	r24
    28cc:	9f 93       	push	r25
    28ce:	af 93       	push	r26
    28d0:	bf 93       	push	r27
    28d2:	ef 93       	push	r30
    28d4:	ff 93       	push	r31
    28d6:	df 93       	push	r29
    28d8:	cf 93       	push	r28
    28da:	cd b7       	in	r28, 0x3d	; 61
    28dc:	de b7       	in	r29, 0x3e	; 62
	
	static u32 counter=0;
	
	if(counter==TIMER+1){
    28de:	80 91 8f 01 	lds	r24, 0x018F
    28e2:	90 91 90 01 	lds	r25, 0x0190
    28e6:	a0 91 91 01 	lds	r26, 0x0191
    28ea:	b0 91 92 01 	lds	r27, 0x0192
    28ee:	9c 01       	movw	r18, r24
    28f0:	ad 01       	movw	r20, r26
    28f2:	2f 5f       	subi	r18, 0xFF	; 255
    28f4:	3f 4f       	sbci	r19, 0xFF	; 255
    28f6:	4f 4f       	sbci	r20, 0xFF	; 255
    28f8:	5f 4f       	sbci	r21, 0xFF	; 255
    28fa:	80 91 8a 01 	lds	r24, 0x018A
    28fe:	90 91 8b 01 	lds	r25, 0x018B
    2902:	a0 91 8c 01 	lds	r26, 0x018C
    2906:	b0 91 8d 01 	lds	r27, 0x018D
    290a:	28 17       	cp	r18, r24
    290c:	39 07       	cpc	r19, r25
    290e:	4a 07       	cpc	r20, r26
    2910:	5b 07       	cpc	r21, r27
    2912:	f1 f4       	brne	.+60     	; 0x2950 <__vector_9+0x9c>
		if(TIMER1_NORMAL_GPfun!=NULL){
    2914:	80 91 7a 01 	lds	r24, 0x017A
    2918:	90 91 7b 01 	lds	r25, 0x017B
    291c:	00 97       	sbiw	r24, 0x00	; 0
    291e:	29 f0       	breq	.+10     	; 0x292a <__vector_9+0x76>
			TIMER1_NORMAL_GPfun();
    2920:	e0 91 7a 01 	lds	r30, 0x017A
    2924:	f0 91 7b 01 	lds	r31, 0x017B
    2928:	09 95       	icall
		}
		counter=0;
    292a:	10 92 8a 01 	sts	0x018A, r1
    292e:	10 92 8b 01 	sts	0x018B, r1
    2932:	10 92 8c 01 	sts	0x018C, r1
    2936:	10 92 8d 01 	sts	0x018D, r1
		TIMER1_voidPreLoad(PreLoad);
    293a:	80 91 97 01 	lds	r24, 0x0197
    293e:	90 91 98 01 	lds	r25, 0x0198
    2942:	a0 91 99 01 	lds	r26, 0x0199
    2946:	b0 91 9a 01 	lds	r27, 0x019A
    294a:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <TIMER1_voidPreLoad>
    294e:	13 c0       	rjmp	.+38     	; 0x2976 <__vector_9+0xc2>
	}
	else{
		counter++;
    2950:	80 91 8a 01 	lds	r24, 0x018A
    2954:	90 91 8b 01 	lds	r25, 0x018B
    2958:	a0 91 8c 01 	lds	r26, 0x018C
    295c:	b0 91 8d 01 	lds	r27, 0x018D
    2960:	01 96       	adiw	r24, 0x01	; 1
    2962:	a1 1d       	adc	r26, r1
    2964:	b1 1d       	adc	r27, r1
    2966:	80 93 8a 01 	sts	0x018A, r24
    296a:	90 93 8b 01 	sts	0x018B, r25
    296e:	a0 93 8c 01 	sts	0x018C, r26
    2972:	b0 93 8d 01 	sts	0x018D, r27
	}
    2976:	cf 91       	pop	r28
    2978:	df 91       	pop	r29
    297a:	ff 91       	pop	r31
    297c:	ef 91       	pop	r30
    297e:	bf 91       	pop	r27
    2980:	af 91       	pop	r26
    2982:	9f 91       	pop	r25
    2984:	8f 91       	pop	r24
    2986:	7f 91       	pop	r23
    2988:	6f 91       	pop	r22
    298a:	5f 91       	pop	r21
    298c:	4f 91       	pop	r20
    298e:	3f 91       	pop	r19
    2990:	2f 91       	pop	r18
    2992:	0f 90       	pop	r0
    2994:	0f be       	out	0x3f, r0	; 63
    2996:	0f 90       	pop	r0
    2998:	1f 90       	pop	r1
    299a:	18 95       	reti

0000299c <func1>:
#include "TIMER0_interface.h"
#include "TIMER1_interface.h"

u8 f=0;

void func1(void){
    299c:	df 93       	push	r29
    299e:	cf 93       	push	r28
    29a0:	cd b7       	in	r28, 0x3d	; 61
    29a2:	de b7       	in	r29, 0x3e	; 62
	if(!f){
    29a4:	80 91 8e 01 	lds	r24, 0x018E
    29a8:	88 23       	and	r24, r24
    29aa:	39 f4       	brne	.+14     	; 0x29ba <func1+0x1e>
		DCMOTOR_voidSetDirection(RIGHT);
    29ac:	81 e0       	ldi	r24, 0x01	; 1
    29ae:	0e 94 78 08 	call	0x10f0	; 0x10f0 <DCMOTOR_voidSetDirection>
		f=1;
    29b2:	81 e0       	ldi	r24, 0x01	; 1
    29b4:	80 93 8e 01 	sts	0x018E, r24
    29b8:	05 c0       	rjmp	.+10     	; 0x29c4 <func1+0x28>
	}
	else{
		DCMOTOR_voidSetDirection(LEFT);
    29ba:	82 e0       	ldi	r24, 0x02	; 2
    29bc:	0e 94 78 08 	call	0x10f0	; 0x10f0 <DCMOTOR_voidSetDirection>
		f=0;
    29c0:	10 92 8e 01 	sts	0x018E, r1
	}
}
    29c4:	cf 91       	pop	r28
    29c6:	df 91       	pop	r29
    29c8:	08 95       	ret

000029ca <func2>:

void func2(void){
    29ca:	df 93       	push	r29
    29cc:	cf 93       	push	r28
    29ce:	cd b7       	in	r28, 0x3d	; 61
    29d0:	de b7       	in	r29, 0x3e	; 62
	DIO_voidTogglePinValue(PORTA,PIN2);
    29d2:	80 e0       	ldi	r24, 0x00	; 0
    29d4:	62 e0       	ldi	r22, 0x02	; 2
    29d6:	0e 94 a7 0c 	call	0x194e	; 0x194e <DIO_voidTogglePinValue>
}
    29da:	cf 91       	pop	r28
    29dc:	df 91       	pop	r29
    29de:	08 95       	ret

000029e0 <main>:

int main(){
    29e0:	df 93       	push	r29
    29e2:	cf 93       	push	r28
    29e4:	00 d0       	rcall	.+0      	; 0x29e6 <main+0x6>
    29e6:	cd b7       	in	r28, 0x3d	; 61
    29e8:	de b7       	in	r29, 0x3e	; 62
	u16 reading;

	GIE_voidEnable();
    29ea:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <GIE_voidEnable>
	EXTI_voidInitialize(EXTI0,FALLING_EDGE);
    29ee:	80 e0       	ldi	r24, 0x00	; 0
    29f0:	61 e0       	ldi	r22, 0x01	; 1
    29f2:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <EXTI_voidInitialize>
	DCMOTOR_voidInitialize();
    29f6:	0e 94 67 08 	call	0x10ce	; 0x10ce <DCMOTOR_voidInitialize>
	TIMER0_voidInitialize();
    29fa:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <TIMER0_voidInitialize>
	ADC_voidInitialize(ADC7);
    29fe:	87 e0       	ldi	r24, 0x07	; 7
    2a00:	0e 94 b7 06 	call	0xd6e	; 0xd6e <ADC_voidInitialize>

	DIO_voidSetPinDirection(PORTA,PIN2,PIN_OUTPUT);
    2a04:	80 e0       	ldi	r24, 0x00	; 0
    2a06:	62 e0       	ldi	r22, 0x02	; 2
    2a08:	41 e0       	ldi	r20, 0x01	; 1
    2a0a:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORTA,PIN2,PIN_HIGH);
    2a0e:	80 e0       	ldi	r24, 0x00	; 0
    2a10:	62 e0       	ldi	r22, 0x02	; 2
    2a12:	41 e0       	ldi	r20, 0x01	; 1
    2a14:	0e 94 b8 09 	call	0x1370	; 0x1370 <DIO_voidSetPinValue>
	DIO_voidSetPinDirection(PORTD,PIN2,PIN_INPUT);
    2a18:	83 e0       	ldi	r24, 0x03	; 3
    2a1a:	62 e0       	ldi	r22, 0x02	; 2
    2a1c:	40 e0       	ldi	r20, 0x00	; 0
    2a1e:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORTD,PIN2,PIN_HIGH);
    2a22:	83 e0       	ldi	r24, 0x03	; 3
    2a24:	62 e0       	ldi	r22, 0x02	; 2
    2a26:	41 e0       	ldi	r20, 0x01	; 1
    2a28:	0e 94 b8 09 	call	0x1370	; 0x1370 <DIO_voidSetPinValue>
	DIO_voidSetPinDirection(PORTD,PIN5,PIN_OUTPUT);
    2a2c:	83 e0       	ldi	r24, 0x03	; 3
    2a2e:	65 e0       	ldi	r22, 0x05	; 5
    2a30:	41 e0       	ldi	r20, 0x01	; 1
    2a32:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_voidSetPinDirection>

	TIMER0_voidSetTimer(1000);
    2a36:	68 ee       	ldi	r22, 0xE8	; 232
    2a38:	73 e0       	ldi	r23, 0x03	; 3
    2a3a:	80 e0       	ldi	r24, 0x00	; 0
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <TIMER0_voidSetTimer>

	EXTI0_SetCallBack(func1);
    2a42:	8e ec       	ldi	r24, 0xCE	; 206
    2a44:	94 e1       	ldi	r25, 0x14	; 20
    2a46:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <EXTI0_SetCallBack>
	TIMER0_NORMAL_SetCallBack(func2);
    2a4a:	85 ee       	ldi	r24, 0xE5	; 229
    2a4c:	94 e1       	ldi	r25, 0x14	; 20
    2a4e:	0e 94 23 10 	call	0x2046	; 0x2046 <TIMER0_NORMAL_SetCallBack>

	while(1){
		reading=ADC_voidStartConversion();
    2a52:	0e 94 55 08 	call	0x10aa	; 0x10aa <ADC_voidStartConversion>
    2a56:	9a 83       	std	Y+2, r25	; 0x02
    2a58:	89 83       	std	Y+1, r24	; 0x01
		TIMER1_voidSetOCR1(reading);
    2a5a:	89 81       	ldd	r24, Y+1	; 0x01
    2a5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a5e:	0e 94 c1 11 	call	0x2382	; 0x2382 <TIMER1_voidSetOCR1>
    2a62:	f7 cf       	rjmp	.-18     	; 0x2a52 <main+0x72>

00002a64 <__mulsi3>:
    2a64:	62 9f       	mul	r22, r18
    2a66:	d0 01       	movw	r26, r0
    2a68:	73 9f       	mul	r23, r19
    2a6a:	f0 01       	movw	r30, r0
    2a6c:	82 9f       	mul	r24, r18
    2a6e:	e0 0d       	add	r30, r0
    2a70:	f1 1d       	adc	r31, r1
    2a72:	64 9f       	mul	r22, r20
    2a74:	e0 0d       	add	r30, r0
    2a76:	f1 1d       	adc	r31, r1
    2a78:	92 9f       	mul	r25, r18
    2a7a:	f0 0d       	add	r31, r0
    2a7c:	83 9f       	mul	r24, r19
    2a7e:	f0 0d       	add	r31, r0
    2a80:	74 9f       	mul	r23, r20
    2a82:	f0 0d       	add	r31, r0
    2a84:	65 9f       	mul	r22, r21
    2a86:	f0 0d       	add	r31, r0
    2a88:	99 27       	eor	r25, r25
    2a8a:	72 9f       	mul	r23, r18
    2a8c:	b0 0d       	add	r27, r0
    2a8e:	e1 1d       	adc	r30, r1
    2a90:	f9 1f       	adc	r31, r25
    2a92:	63 9f       	mul	r22, r19
    2a94:	b0 0d       	add	r27, r0
    2a96:	e1 1d       	adc	r30, r1
    2a98:	f9 1f       	adc	r31, r25
    2a9a:	bd 01       	movw	r22, r26
    2a9c:	cf 01       	movw	r24, r30
    2a9e:	11 24       	eor	r1, r1
    2aa0:	08 95       	ret

00002aa2 <__udivmodsi4>:
    2aa2:	a1 e2       	ldi	r26, 0x21	; 33
    2aa4:	1a 2e       	mov	r1, r26
    2aa6:	aa 1b       	sub	r26, r26
    2aa8:	bb 1b       	sub	r27, r27
    2aaa:	fd 01       	movw	r30, r26
    2aac:	0d c0       	rjmp	.+26     	; 0x2ac8 <__udivmodsi4_ep>

00002aae <__udivmodsi4_loop>:
    2aae:	aa 1f       	adc	r26, r26
    2ab0:	bb 1f       	adc	r27, r27
    2ab2:	ee 1f       	adc	r30, r30
    2ab4:	ff 1f       	adc	r31, r31
    2ab6:	a2 17       	cp	r26, r18
    2ab8:	b3 07       	cpc	r27, r19
    2aba:	e4 07       	cpc	r30, r20
    2abc:	f5 07       	cpc	r31, r21
    2abe:	20 f0       	brcs	.+8      	; 0x2ac8 <__udivmodsi4_ep>
    2ac0:	a2 1b       	sub	r26, r18
    2ac2:	b3 0b       	sbc	r27, r19
    2ac4:	e4 0b       	sbc	r30, r20
    2ac6:	f5 0b       	sbc	r31, r21

00002ac8 <__udivmodsi4_ep>:
    2ac8:	66 1f       	adc	r22, r22
    2aca:	77 1f       	adc	r23, r23
    2acc:	88 1f       	adc	r24, r24
    2ace:	99 1f       	adc	r25, r25
    2ad0:	1a 94       	dec	r1
    2ad2:	69 f7       	brne	.-38     	; 0x2aae <__udivmodsi4_loop>
    2ad4:	60 95       	com	r22
    2ad6:	70 95       	com	r23
    2ad8:	80 95       	com	r24
    2ada:	90 95       	com	r25
    2adc:	9b 01       	movw	r18, r22
    2ade:	ac 01       	movw	r20, r24
    2ae0:	bd 01       	movw	r22, r26
    2ae2:	cf 01       	movw	r24, r30
    2ae4:	08 95       	ret

00002ae6 <__prologue_saves__>:
    2ae6:	2f 92       	push	r2
    2ae8:	3f 92       	push	r3
    2aea:	4f 92       	push	r4
    2aec:	5f 92       	push	r5
    2aee:	6f 92       	push	r6
    2af0:	7f 92       	push	r7
    2af2:	8f 92       	push	r8
    2af4:	9f 92       	push	r9
    2af6:	af 92       	push	r10
    2af8:	bf 92       	push	r11
    2afa:	cf 92       	push	r12
    2afc:	df 92       	push	r13
    2afe:	ef 92       	push	r14
    2b00:	ff 92       	push	r15
    2b02:	0f 93       	push	r16
    2b04:	1f 93       	push	r17
    2b06:	cf 93       	push	r28
    2b08:	df 93       	push	r29
    2b0a:	cd b7       	in	r28, 0x3d	; 61
    2b0c:	de b7       	in	r29, 0x3e	; 62
    2b0e:	ca 1b       	sub	r28, r26
    2b10:	db 0b       	sbc	r29, r27
    2b12:	0f b6       	in	r0, 0x3f	; 63
    2b14:	f8 94       	cli
    2b16:	de bf       	out	0x3e, r29	; 62
    2b18:	0f be       	out	0x3f, r0	; 63
    2b1a:	cd bf       	out	0x3d, r28	; 61
    2b1c:	09 94       	ijmp

00002b1e <__epilogue_restores__>:
    2b1e:	2a 88       	ldd	r2, Y+18	; 0x12
    2b20:	39 88       	ldd	r3, Y+17	; 0x11
    2b22:	48 88       	ldd	r4, Y+16	; 0x10
    2b24:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b26:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b28:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b2a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b2c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b2e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b30:	b9 84       	ldd	r11, Y+9	; 0x09
    2b32:	c8 84       	ldd	r12, Y+8	; 0x08
    2b34:	df 80       	ldd	r13, Y+7	; 0x07
    2b36:	ee 80       	ldd	r14, Y+6	; 0x06
    2b38:	fd 80       	ldd	r15, Y+5	; 0x05
    2b3a:	0c 81       	ldd	r16, Y+4	; 0x04
    2b3c:	1b 81       	ldd	r17, Y+3	; 0x03
    2b3e:	aa 81       	ldd	r26, Y+2	; 0x02
    2b40:	b9 81       	ldd	r27, Y+1	; 0x01
    2b42:	ce 0f       	add	r28, r30
    2b44:	d1 1d       	adc	r29, r1
    2b46:	0f b6       	in	r0, 0x3f	; 63
    2b48:	f8 94       	cli
    2b4a:	de bf       	out	0x3e, r29	; 62
    2b4c:	0f be       	out	0x3f, r0	; 63
    2b4e:	cd bf       	out	0x3d, r28	; 61
    2b50:	ed 01       	movw	r28, r26
    2b52:	08 95       	ret

00002b54 <_exit>:
    2b54:	f8 94       	cli

00002b56 <__stop_program>:
    2b56:	ff cf       	rjmp	.-2      	; 0x2b56 <__stop_program>
