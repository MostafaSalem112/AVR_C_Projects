
ADC_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  000021ec  00002260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000017b8  00000000  00000000  00002298  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c46  00000000  00000000  00003a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004696  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000047d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00004946  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000658f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000747a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008228  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008388  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008615  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00008de3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ee       	ldi	r30, 0xEC	; 236
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 39       	cpi	r26, 0x98	; 152
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <main>
      7a:	0c 94 f4 10 	jmp	0x21e8	; 0x21e8 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 bd 10 	jmp	0x217a	; 0x217a <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e9       	ldi	r26, 0x90	; 144
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 d9 10 	jmp	0x21b2	; 0x21b2 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 c9 10 	jmp	0x2192	; 0x2192 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 c9 10 	jmp	0x2192	; 0x2192 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 bd 10 	jmp	0x217a	; 0x217a <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e9       	ldi	r24, 0x90	; 144
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 d9 10 	jmp	0x21b2	; 0x21b2 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 c9 10 	jmp	0x2192	; 0x2192 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 c9 10 	jmp	0x2192	; 0x2192 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 c9 10 	jmp	0x2192	; 0x2192 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 cd 10 	jmp	0x219a	; 0x219a <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 e9 10 	jmp	0x21d2	; 0x21d2 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <ADC_voidInitialize>:
#include "Bit_Math.h"
#include "DIO_interface.h"
#include "ADC_private.h"
#include "ADC_interface.h"

void ADC_voidInitialize(u8 Copy_u8ADC_Channel){
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <ADC_voidInitialize+0x6>
     b3c:	0f 92       	push	r0
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	89 83       	std	Y+1, r24	; 0x01
	ClrBit(ADMUX,PIN7);
     b44:	a7 e2       	ldi	r26, 0x27	; 39
     b46:	b0 e0       	ldi	r27, 0x00	; 0
     b48:	e7 e2       	ldi	r30, 0x27	; 39
     b4a:	f0 e0       	ldi	r31, 0x00	; 0
     b4c:	80 81       	ld	r24, Z
     b4e:	8f 77       	andi	r24, 0x7F	; 127
     b50:	8c 93       	st	X, r24
	SetBit(ADMUX,PIN6);
     b52:	a7 e2       	ldi	r26, 0x27	; 39
     b54:	b0 e0       	ldi	r27, 0x00	; 0
     b56:	e7 e2       	ldi	r30, 0x27	; 39
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	80 81       	ld	r24, Z
     b5c:	80 64       	ori	r24, 0x40	; 64
     b5e:	8c 93       	st	X, r24
	ClrBit(ADMUX,PIN5);
     b60:	a7 e2       	ldi	r26, 0x27	; 39
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	e7 e2       	ldi	r30, 0x27	; 39
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	8f 7d       	andi	r24, 0xDF	; 223
     b6c:	8c 93       	st	X, r24
	
	switch(Copy_u8ADC_Channel){
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
     b70:	28 2f       	mov	r18, r24
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	3b 83       	std	Y+3, r19	; 0x03
     b76:	2a 83       	std	Y+2, r18	; 0x02
     b78:	8a 81       	ldd	r24, Y+2	; 0x02
     b7a:	9b 81       	ldd	r25, Y+3	; 0x03
     b7c:	83 30       	cpi	r24, 0x03	; 3
     b7e:	91 05       	cpc	r25, r1
     b80:	09 f4       	brne	.+2      	; 0xb84 <ADC_voidInitialize+0x4e>
     b82:	9b c0       	rjmp	.+310    	; 0xcba <ADC_voidInitialize+0x184>
     b84:	2a 81       	ldd	r18, Y+2	; 0x02
     b86:	3b 81       	ldd	r19, Y+3	; 0x03
     b88:	24 30       	cpi	r18, 0x04	; 4
     b8a:	31 05       	cpc	r19, r1
     b8c:	8c f4       	brge	.+34     	; 0xbb0 <ADC_voidInitialize+0x7a>
     b8e:	8a 81       	ldd	r24, Y+2	; 0x02
     b90:	9b 81       	ldd	r25, Y+3	; 0x03
     b92:	81 30       	cpi	r24, 0x01	; 1
     b94:	91 05       	cpc	r25, r1
     b96:	09 f4       	brne	.+2      	; 0xb9a <ADC_voidInitialize+0x64>
     b98:	48 c0       	rjmp	.+144    	; 0xc2a <ADC_voidInitialize+0xf4>
     b9a:	2a 81       	ldd	r18, Y+2	; 0x02
     b9c:	3b 81       	ldd	r19, Y+3	; 0x03
     b9e:	22 30       	cpi	r18, 0x02	; 2
     ba0:	31 05       	cpc	r19, r1
     ba2:	0c f0       	brlt	.+2      	; 0xba6 <ADC_voidInitialize+0x70>
     ba4:	66 c0       	rjmp	.+204    	; 0xc72 <ADC_voidInitialize+0x13c>
     ba6:	8a 81       	ldd	r24, Y+2	; 0x02
     ba8:	9b 81       	ldd	r25, Y+3	; 0x03
     baa:	00 97       	sbiw	r24, 0x00	; 0
     bac:	d1 f0       	breq	.+52     	; 0xbe2 <ADC_voidInitialize+0xac>
     bae:	38 c1       	rjmp	.+624    	; 0xe20 <ADC_voidInitialize+0x2ea>
     bb0:	2a 81       	ldd	r18, Y+2	; 0x02
     bb2:	3b 81       	ldd	r19, Y+3	; 0x03
     bb4:	25 30       	cpi	r18, 0x05	; 5
     bb6:	31 05       	cpc	r19, r1
     bb8:	09 f4       	brne	.+2      	; 0xbbc <ADC_voidInitialize+0x86>
     bba:	c7 c0       	rjmp	.+398    	; 0xd4a <ADC_voidInitialize+0x214>
     bbc:	8a 81       	ldd	r24, Y+2	; 0x02
     bbe:	9b 81       	ldd	r25, Y+3	; 0x03
     bc0:	85 30       	cpi	r24, 0x05	; 5
     bc2:	91 05       	cpc	r25, r1
     bc4:	0c f4       	brge	.+2      	; 0xbc8 <ADC_voidInitialize+0x92>
     bc6:	9d c0       	rjmp	.+314    	; 0xd02 <ADC_voidInitialize+0x1cc>
     bc8:	2a 81       	ldd	r18, Y+2	; 0x02
     bca:	3b 81       	ldd	r19, Y+3	; 0x03
     bcc:	26 30       	cpi	r18, 0x06	; 6
     bce:	31 05       	cpc	r19, r1
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <ADC_voidInitialize+0x9e>
     bd2:	df c0       	rjmp	.+446    	; 0xd92 <ADC_voidInitialize+0x25c>
     bd4:	8a 81       	ldd	r24, Y+2	; 0x02
     bd6:	9b 81       	ldd	r25, Y+3	; 0x03
     bd8:	87 30       	cpi	r24, 0x07	; 7
     bda:	91 05       	cpc	r25, r1
     bdc:	09 f4       	brne	.+2      	; 0xbe0 <ADC_voidInitialize+0xaa>
     bde:	fd c0       	rjmp	.+506    	; 0xdda <ADC_voidInitialize+0x2a4>
     be0:	1f c1       	rjmp	.+574    	; 0xe20 <ADC_voidInitialize+0x2ea>
		case ADC0:
			ClrBit(ADMUX,PIN4);
     be2:	a7 e2       	ldi	r26, 0x27	; 39
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	e7 e2       	ldi	r30, 0x27	; 39
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	8f 7e       	andi	r24, 0xEF	; 239
     bee:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN3);
     bf0:	a7 e2       	ldi	r26, 0x27	; 39
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	e7 e2       	ldi	r30, 0x27	; 39
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	87 7f       	andi	r24, 0xF7	; 247
     bfc:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN2);
     bfe:	a7 e2       	ldi	r26, 0x27	; 39
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	e7 e2       	ldi	r30, 0x27	; 39
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	8b 7f       	andi	r24, 0xFB	; 251
     c0a:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN1);
     c0c:	a7 e2       	ldi	r26, 0x27	; 39
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e2       	ldi	r30, 0x27	; 39
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	8d 7f       	andi	r24, 0xFD	; 253
     c18:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN0);
     c1a:	a7 e2       	ldi	r26, 0x27	; 39
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e7 e2       	ldi	r30, 0x27	; 39
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	8e 7f       	andi	r24, 0xFE	; 254
     c26:	8c 93       	st	X, r24
     c28:	fb c0       	rjmp	.+502    	; 0xe20 <ADC_voidInitialize+0x2ea>
			break;
		case ADC1:
			ClrBit(ADMUX,PIN4);
     c2a:	a7 e2       	ldi	r26, 0x27	; 39
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e7 e2       	ldi	r30, 0x27	; 39
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
     c34:	8f 7e       	andi	r24, 0xEF	; 239
     c36:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN3);
     c38:	a7 e2       	ldi	r26, 0x27	; 39
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	e7 e2       	ldi	r30, 0x27	; 39
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 81       	ld	r24, Z
     c42:	87 7f       	andi	r24, 0xF7	; 247
     c44:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN2);
     c46:	a7 e2       	ldi	r26, 0x27	; 39
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	e7 e2       	ldi	r30, 0x27	; 39
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 81       	ld	r24, Z
     c50:	8b 7f       	andi	r24, 0xFB	; 251
     c52:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN1);
     c54:	a7 e2       	ldi	r26, 0x27	; 39
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e7 e2       	ldi	r30, 0x27	; 39
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	8d 7f       	andi	r24, 0xFD	; 253
     c60:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN0);
     c62:	a7 e2       	ldi	r26, 0x27	; 39
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	e7 e2       	ldi	r30, 0x27	; 39
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	81 60       	ori	r24, 0x01	; 1
     c6e:	8c 93       	st	X, r24
     c70:	d7 c0       	rjmp	.+430    	; 0xe20 <ADC_voidInitialize+0x2ea>
			break;
		case ADC2:
			ClrBit(ADMUX,PIN4);
     c72:	a7 e2       	ldi	r26, 0x27	; 39
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	e7 e2       	ldi	r30, 0x27	; 39
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	8f 7e       	andi	r24, 0xEF	; 239
     c7e:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN3);
     c80:	a7 e2       	ldi	r26, 0x27	; 39
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	e7 e2       	ldi	r30, 0x27	; 39
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	87 7f       	andi	r24, 0xF7	; 247
     c8c:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN2);
     c8e:	a7 e2       	ldi	r26, 0x27	; 39
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	e7 e2       	ldi	r30, 0x27	; 39
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	8b 7f       	andi	r24, 0xFB	; 251
     c9a:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN1);
     c9c:	a7 e2       	ldi	r26, 0x27	; 39
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	e7 e2       	ldi	r30, 0x27	; 39
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	82 60       	ori	r24, 0x02	; 2
     ca8:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN0);
     caa:	a7 e2       	ldi	r26, 0x27	; 39
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	e7 e2       	ldi	r30, 0x27	; 39
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	8e 7f       	andi	r24, 0xFE	; 254
     cb6:	8c 93       	st	X, r24
     cb8:	b3 c0       	rjmp	.+358    	; 0xe20 <ADC_voidInitialize+0x2ea>
			break;
		case ADC3:
			ClrBit(ADMUX,PIN4);
     cba:	a7 e2       	ldi	r26, 0x27	; 39
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e7 e2       	ldi	r30, 0x27	; 39
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	8f 7e       	andi	r24, 0xEF	; 239
     cc6:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN3);
     cc8:	a7 e2       	ldi	r26, 0x27	; 39
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e7 e2       	ldi	r30, 0x27	; 39
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	87 7f       	andi	r24, 0xF7	; 247
     cd4:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN2);
     cd6:	a7 e2       	ldi	r26, 0x27	; 39
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e7 e2       	ldi	r30, 0x27	; 39
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	8b 7f       	andi	r24, 0xFB	; 251
     ce2:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN1);
     ce4:	a7 e2       	ldi	r26, 0x27	; 39
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e7 e2       	ldi	r30, 0x27	; 39
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	82 60       	ori	r24, 0x02	; 2
     cf0:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN0);
     cf2:	a7 e2       	ldi	r26, 0x27	; 39
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e7 e2       	ldi	r30, 0x27	; 39
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	81 60       	ori	r24, 0x01	; 1
     cfe:	8c 93       	st	X, r24
     d00:	8f c0       	rjmp	.+286    	; 0xe20 <ADC_voidInitialize+0x2ea>
			break;
		case ADC4:
			ClrBit(ADMUX,PIN4);
     d02:	a7 e2       	ldi	r26, 0x27	; 39
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e7 e2       	ldi	r30, 0x27	; 39
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	8f 7e       	andi	r24, 0xEF	; 239
     d0e:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN3);
     d10:	a7 e2       	ldi	r26, 0x27	; 39
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	e7 e2       	ldi	r30, 0x27	; 39
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	87 7f       	andi	r24, 0xF7	; 247
     d1c:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN2);
     d1e:	a7 e2       	ldi	r26, 0x27	; 39
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e7 e2       	ldi	r30, 0x27	; 39
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	84 60       	ori	r24, 0x04	; 4
     d2a:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN1);
     d2c:	a7 e2       	ldi	r26, 0x27	; 39
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e7 e2       	ldi	r30, 0x27	; 39
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	8d 7f       	andi	r24, 0xFD	; 253
     d38:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN0);
     d3a:	a7 e2       	ldi	r26, 0x27	; 39
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e7 e2       	ldi	r30, 0x27	; 39
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	8e 7f       	andi	r24, 0xFE	; 254
     d46:	8c 93       	st	X, r24
     d48:	6b c0       	rjmp	.+214    	; 0xe20 <ADC_voidInitialize+0x2ea>
			break;
		case ADC5:
			ClrBit(ADMUX,PIN4);
     d4a:	a7 e2       	ldi	r26, 0x27	; 39
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	e7 e2       	ldi	r30, 0x27	; 39
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	8f 7e       	andi	r24, 0xEF	; 239
     d56:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN3);
     d58:	a7 e2       	ldi	r26, 0x27	; 39
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e7 e2       	ldi	r30, 0x27	; 39
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	87 7f       	andi	r24, 0xF7	; 247
     d64:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN2);
     d66:	a7 e2       	ldi	r26, 0x27	; 39
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e7 e2       	ldi	r30, 0x27	; 39
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	84 60       	ori	r24, 0x04	; 4
     d72:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN1);
     d74:	a7 e2       	ldi	r26, 0x27	; 39
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	e7 e2       	ldi	r30, 0x27	; 39
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	8d 7f       	andi	r24, 0xFD	; 253
     d80:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN0);
     d82:	a7 e2       	ldi	r26, 0x27	; 39
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	e7 e2       	ldi	r30, 0x27	; 39
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	81 60       	ori	r24, 0x01	; 1
     d8e:	8c 93       	st	X, r24
     d90:	47 c0       	rjmp	.+142    	; 0xe20 <ADC_voidInitialize+0x2ea>
			break;
		case ADC6:
			ClrBit(ADMUX,PIN4);
     d92:	a7 e2       	ldi	r26, 0x27	; 39
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	e7 e2       	ldi	r30, 0x27	; 39
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	8f 7e       	andi	r24, 0xEF	; 239
     d9e:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN3);
     da0:	a7 e2       	ldi	r26, 0x27	; 39
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	e7 e2       	ldi	r30, 0x27	; 39
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	87 7f       	andi	r24, 0xF7	; 247
     dac:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN2);
     dae:	a7 e2       	ldi	r26, 0x27	; 39
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	e7 e2       	ldi	r30, 0x27	; 39
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	84 60       	ori	r24, 0x04	; 4
     dba:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN1);
     dbc:	a7 e2       	ldi	r26, 0x27	; 39
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	e7 e2       	ldi	r30, 0x27	; 39
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	82 60       	ori	r24, 0x02	; 2
     dc8:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN0);
     dca:	a7 e2       	ldi	r26, 0x27	; 39
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	e7 e2       	ldi	r30, 0x27	; 39
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	8e 7f       	andi	r24, 0xFE	; 254
     dd6:	8c 93       	st	X, r24
     dd8:	23 c0       	rjmp	.+70     	; 0xe20 <ADC_voidInitialize+0x2ea>
			break;
		case ADC7:
			ClrBit(ADMUX,PIN4);
     dda:	a7 e2       	ldi	r26, 0x27	; 39
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	e7 e2       	ldi	r30, 0x27	; 39
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	8f 7e       	andi	r24, 0xEF	; 239
     de6:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN3);
     de8:	a7 e2       	ldi	r26, 0x27	; 39
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	e7 e2       	ldi	r30, 0x27	; 39
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	87 7f       	andi	r24, 0xF7	; 247
     df4:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN2);
     df6:	a7 e2       	ldi	r26, 0x27	; 39
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e7 e2       	ldi	r30, 0x27	; 39
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	84 60       	ori	r24, 0x04	; 4
     e02:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN1);
     e04:	a7 e2       	ldi	r26, 0x27	; 39
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e7 e2       	ldi	r30, 0x27	; 39
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	82 60       	ori	r24, 0x02	; 2
     e10:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN0);
     e12:	a7 e2       	ldi	r26, 0x27	; 39
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e7 e2       	ldi	r30, 0x27	; 39
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	81 60       	ori	r24, 0x01	; 1
     e1e:	8c 93       	st	X, r24
			break;
	}
	
	ClrBit(ADCSRA,PIN0);
     e20:	a6 e2       	ldi	r26, 0x26	; 38
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e6 e2       	ldi	r30, 0x26	; 38
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	8e 7f       	andi	r24, 0xFE	; 254
     e2c:	8c 93       	st	X, r24
	SetBit(ADCSRA,PIN1);
     e2e:	a6 e2       	ldi	r26, 0x26	; 38
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e6 e2       	ldi	r30, 0x26	; 38
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	82 60       	ori	r24, 0x02	; 2
     e3a:	8c 93       	st	X, r24
	SetBit(ADCSRA,PIN2);
     e3c:	a6 e2       	ldi	r26, 0x26	; 38
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e6 e2       	ldi	r30, 0x26	; 38
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	84 60       	ori	r24, 0x04	; 4
     e48:	8c 93       	st	X, r24
	
	SetBit(ADCSRA,PIN7);
     e4a:	a6 e2       	ldi	r26, 0x26	; 38
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e6 e2       	ldi	r30, 0x26	; 38
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	80 68       	ori	r24, 0x80	; 128
     e56:	8c 93       	st	X, r24
	SetBit(ADCSRA,PIN6);
     e58:	a6 e2       	ldi	r26, 0x26	; 38
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e6 e2       	ldi	r30, 0x26	; 38
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	80 64       	ori	r24, 0x40	; 64
     e64:	8c 93       	st	X, r24
}
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
     e6a:	0f 90       	pop	r0
     e6c:	cf 91       	pop	r28
     e6e:	df 91       	pop	r29
     e70:	08 95       	ret

00000e72 <ADC_voidStartConversion>:

u16 ADC_voidStartConversion(){
     e72:	df 93       	push	r29
     e74:	cf 93       	push	r28
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
	
	SetBit(ADCSRA,PIN6);
     e7a:	a6 e2       	ldi	r26, 0x26	; 38
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e6 e2       	ldi	r30, 0x26	; 38
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	80 64       	ori	r24, 0x40	; 64
     e86:	8c 93       	st	X, r24
	return ADC;
     e88:	e4 e2       	ldi	r30, 0x24	; 36
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	91 81       	ldd	r25, Z+1	; 0x01
     e90:	cf 91       	pop	r28
     e92:	df 91       	pop	r29
     e94:	08 95       	ret

00000e96 <DIO_voidSetPinDirection>:
#include "Bit_Math.h"
#include "DIO_config.h"
#include "DIO_private.h"
#include "DIO_interface.h"

void DIO_voidSetPinDirection(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinDir){
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	27 97       	sbiw	r28, 0x07	; 7
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	de bf       	out	0x3e, r29	; 62
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	cd bf       	out	0x3d, r28	; 61
     eaa:	89 83       	std	Y+1, r24	; 0x01
     eac:	6a 83       	std	Y+2, r22	; 0x02
     eae:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinDir==PIN_OUTPUT){     //output
     eb0:	8b 81       	ldd	r24, Y+3	; 0x03
     eb2:	81 30       	cpi	r24, 0x01	; 1
     eb4:	09 f0       	breq	.+2      	; 0xeb8 <DIO_voidSetPinDirection+0x22>
     eb6:	6f c0       	rjmp	.+222    	; 0xf96 <DIO_voidSetPinDirection+0x100>
		switch(Copy_u8PortID){
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	3f 83       	std	Y+7, r19	; 0x07
     ec0:	2e 83       	std	Y+6, r18	; 0x06
     ec2:	8e 81       	ldd	r24, Y+6	; 0x06
     ec4:	9f 81       	ldd	r25, Y+7	; 0x07
     ec6:	81 30       	cpi	r24, 0x01	; 1
     ec8:	91 05       	cpc	r25, r1
     eca:	49 f1       	breq	.+82     	; 0xf1e <DIO_voidSetPinDirection+0x88>
     ecc:	2e 81       	ldd	r18, Y+6	; 0x06
     ece:	3f 81       	ldd	r19, Y+7	; 0x07
     ed0:	22 30       	cpi	r18, 0x02	; 2
     ed2:	31 05       	cpc	r19, r1
     ed4:	2c f4       	brge	.+10     	; 0xee0 <DIO_voidSetPinDirection+0x4a>
     ed6:	8e 81       	ldd	r24, Y+6	; 0x06
     ed8:	9f 81       	ldd	r25, Y+7	; 0x07
     eda:	00 97       	sbiw	r24, 0x00	; 0
     edc:	61 f0       	breq	.+24     	; 0xef6 <DIO_voidSetPinDirection+0x60>
     ede:	d2 c0       	rjmp	.+420    	; 0x1084 <DIO_voidSetPinDirection+0x1ee>
     ee0:	2e 81       	ldd	r18, Y+6	; 0x06
     ee2:	3f 81       	ldd	r19, Y+7	; 0x07
     ee4:	22 30       	cpi	r18, 0x02	; 2
     ee6:	31 05       	cpc	r19, r1
     ee8:	71 f1       	breq	.+92     	; 0xf46 <DIO_voidSetPinDirection+0xb0>
     eea:	8e 81       	ldd	r24, Y+6	; 0x06
     eec:	9f 81       	ldd	r25, Y+7	; 0x07
     eee:	83 30       	cpi	r24, 0x03	; 3
     ef0:	91 05       	cpc	r25, r1
     ef2:	e9 f1       	breq	.+122    	; 0xf6e <DIO_voidSetPinDirection+0xd8>
     ef4:	c7 c0       	rjmp	.+398    	; 0x1084 <DIO_voidSetPinDirection+0x1ee>
			case PORTA/*Port A*/: SetBit(DDRA_REG,Copy_u8PinID);break;
     ef6:	aa e3       	ldi	r26, 0x3A	; 58
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	ea e3       	ldi	r30, 0x3A	; 58
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	48 2f       	mov	r20, r24
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	28 2f       	mov	r18, r24
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	02 2e       	mov	r0, r18
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <DIO_voidSetPinDirection+0x7e>
     f10:	88 0f       	add	r24, r24
     f12:	99 1f       	adc	r25, r25
     f14:	0a 94       	dec	r0
     f16:	e2 f7       	brpl	.-8      	; 0xf10 <DIO_voidSetPinDirection+0x7a>
     f18:	84 2b       	or	r24, r20
     f1a:	8c 93       	st	X, r24
     f1c:	b3 c0       	rjmp	.+358    	; 0x1084 <DIO_voidSetPinDirection+0x1ee>
			case PORTB/*Port B*/: SetBit(DDRB_REG,Copy_u8PinID);break;
     f1e:	a7 e3       	ldi	r26, 0x37	; 55
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e7 e3       	ldi	r30, 0x37	; 55
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	48 2f       	mov	r20, r24
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	02 2e       	mov	r0, r18
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <DIO_voidSetPinDirection+0xa6>
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	0a 94       	dec	r0
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <DIO_voidSetPinDirection+0xa2>
     f40:	84 2b       	or	r24, r20
     f42:	8c 93       	st	X, r24
     f44:	9f c0       	rjmp	.+318    	; 0x1084 <DIO_voidSetPinDirection+0x1ee>
			case PORTC/*Port C*/: SetBit(DDRC_REG,Copy_u8PinID);break;
     f46:	a4 e3       	ldi	r26, 0x34	; 52
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e4 e3       	ldi	r30, 0x34	; 52
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	48 2f       	mov	r20, r24
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <DIO_voidSetPinDirection+0xce>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <DIO_voidSetPinDirection+0xca>
     f68:	84 2b       	or	r24, r20
     f6a:	8c 93       	st	X, r24
     f6c:	8b c0       	rjmp	.+278    	; 0x1084 <DIO_voidSetPinDirection+0x1ee>
			case PORTD/*Port D*/: SetBit(DDRD_REG,Copy_u8PinID);break;
     f6e:	a1 e3       	ldi	r26, 0x31	; 49
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e1 e3       	ldi	r30, 0x31	; 49
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	48 2f       	mov	r20, r24
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	02 2e       	mov	r0, r18
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <DIO_voidSetPinDirection+0xf6>
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	0a 94       	dec	r0
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <DIO_voidSetPinDirection+0xf2>
     f90:	84 2b       	or	r24, r20
     f92:	8c 93       	st	X, r24
     f94:	77 c0       	rjmp	.+238    	; 0x1084 <DIO_voidSetPinDirection+0x1ee>
		}
	}
	else if(Copy_u8PinDir==PIN_INPUT){ //input
     f96:	8b 81       	ldd	r24, Y+3	; 0x03
     f98:	88 23       	and	r24, r24
     f9a:	09 f0       	breq	.+2      	; 0xf9e <DIO_voidSetPinDirection+0x108>
     f9c:	73 c0       	rjmp	.+230    	; 0x1084 <DIO_voidSetPinDirection+0x1ee>
		switch(Copy_u8PortID){
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	3d 83       	std	Y+5, r19	; 0x05
     fa6:	2c 83       	std	Y+4, r18	; 0x04
     fa8:	8c 81       	ldd	r24, Y+4	; 0x04
     faa:	9d 81       	ldd	r25, Y+5	; 0x05
     fac:	81 30       	cpi	r24, 0x01	; 1
     fae:	91 05       	cpc	r25, r1
     fb0:	59 f1       	breq	.+86     	; 0x1008 <DIO_voidSetPinDirection+0x172>
     fb2:	2c 81       	ldd	r18, Y+4	; 0x04
     fb4:	3d 81       	ldd	r19, Y+5	; 0x05
     fb6:	22 30       	cpi	r18, 0x02	; 2
     fb8:	31 05       	cpc	r19, r1
     fba:	2c f4       	brge	.+10     	; 0xfc6 <DIO_voidSetPinDirection+0x130>
     fbc:	8c 81       	ldd	r24, Y+4	; 0x04
     fbe:	9d 81       	ldd	r25, Y+5	; 0x05
     fc0:	00 97       	sbiw	r24, 0x00	; 0
     fc2:	69 f0       	breq	.+26     	; 0xfde <DIO_voidSetPinDirection+0x148>
     fc4:	5f c0       	rjmp	.+190    	; 0x1084 <DIO_voidSetPinDirection+0x1ee>
     fc6:	2c 81       	ldd	r18, Y+4	; 0x04
     fc8:	3d 81       	ldd	r19, Y+5	; 0x05
     fca:	22 30       	cpi	r18, 0x02	; 2
     fcc:	31 05       	cpc	r19, r1
     fce:	89 f1       	breq	.+98     	; 0x1032 <DIO_voidSetPinDirection+0x19c>
     fd0:	8c 81       	ldd	r24, Y+4	; 0x04
     fd2:	9d 81       	ldd	r25, Y+5	; 0x05
     fd4:	83 30       	cpi	r24, 0x03	; 3
     fd6:	91 05       	cpc	r25, r1
     fd8:	09 f4       	brne	.+2      	; 0xfdc <DIO_voidSetPinDirection+0x146>
     fda:	40 c0       	rjmp	.+128    	; 0x105c <DIO_voidSetPinDirection+0x1c6>
     fdc:	53 c0       	rjmp	.+166    	; 0x1084 <DIO_voidSetPinDirection+0x1ee>
			case PORTA/*Port A*/: ClrBit(DDRA_REG,Copy_u8PinID);break;
     fde:	aa e3       	ldi	r26, 0x3A	; 58
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	ea e3       	ldi	r30, 0x3A	; 58
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	48 2f       	mov	r20, r24
     fea:	8a 81       	ldd	r24, Y+2	; 0x02
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	02 2e       	mov	r0, r18
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <DIO_voidSetPinDirection+0x166>
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	0a 94       	dec	r0
     ffe:	e2 f7       	brpl	.-8      	; 0xff8 <DIO_voidSetPinDirection+0x162>
    1000:	80 95       	com	r24
    1002:	84 23       	and	r24, r20
    1004:	8c 93       	st	X, r24
    1006:	3e c0       	rjmp	.+124    	; 0x1084 <DIO_voidSetPinDirection+0x1ee>
			case PORTB/*Port B*/: ClrBit(DDRB_REG,Copy_u8PinID);break;
    1008:	a7 e3       	ldi	r26, 0x37	; 55
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e7 e3       	ldi	r30, 0x37	; 55
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	48 2f       	mov	r20, r24
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	02 2e       	mov	r0, r18
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <DIO_voidSetPinDirection+0x190>
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	0a 94       	dec	r0
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <DIO_voidSetPinDirection+0x18c>
    102a:	80 95       	com	r24
    102c:	84 23       	and	r24, r20
    102e:	8c 93       	st	X, r24
    1030:	29 c0       	rjmp	.+82     	; 0x1084 <DIO_voidSetPinDirection+0x1ee>
			case PORTC/*Port C*/: ClrBit(DDRC_REG,Copy_u8PinID);break;
    1032:	a4 e3       	ldi	r26, 0x34	; 52
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e4 e3       	ldi	r30, 0x34	; 52
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	48 2f       	mov	r20, r24
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	02 2e       	mov	r0, r18
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <DIO_voidSetPinDirection+0x1ba>
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	0a 94       	dec	r0
    1052:	e2 f7       	brpl	.-8      	; 0x104c <DIO_voidSetPinDirection+0x1b6>
    1054:	80 95       	com	r24
    1056:	84 23       	and	r24, r20
    1058:	8c 93       	st	X, r24
    105a:	14 c0       	rjmp	.+40     	; 0x1084 <DIO_voidSetPinDirection+0x1ee>
			case PORTD/*Port D*/: ClrBit(DDRD_REG,Copy_u8PinID);break;
    105c:	a1 e3       	ldi	r26, 0x31	; 49
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e1 e3       	ldi	r30, 0x31	; 49
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	48 2f       	mov	r20, r24
    1068:	8a 81       	ldd	r24, Y+2	; 0x02
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	02 2e       	mov	r0, r18
    1074:	02 c0       	rjmp	.+4      	; 0x107a <DIO_voidSetPinDirection+0x1e4>
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	0a 94       	dec	r0
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <DIO_voidSetPinDirection+0x1e0>
    107e:	80 95       	com	r24
    1080:	84 23       	and	r24, r20
    1082:	8c 93       	st	X, r24
		}
	}
}
    1084:	27 96       	adiw	r28, 0x07	; 7
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	f8 94       	cli
    108a:	de bf       	out	0x3e, r29	; 62
    108c:	0f be       	out	0x3f, r0	; 63
    108e:	cd bf       	out	0x3d, r28	; 61
    1090:	cf 91       	pop	r28
    1092:	df 91       	pop	r29
    1094:	08 95       	ret

00001096 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
    1096:	df 93       	push	r29
    1098:	cf 93       	push	r28
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	27 97       	sbiw	r28, 0x07	; 7
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	f8 94       	cli
    10a4:	de bf       	out	0x3e, r29	; 62
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	cd bf       	out	0x3d, r28	; 61
    10aa:	89 83       	std	Y+1, r24	; 0x01
    10ac:	6a 83       	std	Y+2, r22	; 0x02
    10ae:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinValue==PIN_HIGH){      //high
    10b0:	8b 81       	ldd	r24, Y+3	; 0x03
    10b2:	81 30       	cpi	r24, 0x01	; 1
    10b4:	09 f0       	breq	.+2      	; 0x10b8 <DIO_voidSetPinValue+0x22>
    10b6:	6f c0       	rjmp	.+222    	; 0x1196 <DIO_voidSetPinValue+0x100>
		switch(Copy_u8PortID){
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	3f 83       	std	Y+7, r19	; 0x07
    10c0:	2e 83       	std	Y+6, r18	; 0x06
    10c2:	8e 81       	ldd	r24, Y+6	; 0x06
    10c4:	9f 81       	ldd	r25, Y+7	; 0x07
    10c6:	81 30       	cpi	r24, 0x01	; 1
    10c8:	91 05       	cpc	r25, r1
    10ca:	49 f1       	breq	.+82     	; 0x111e <DIO_voidSetPinValue+0x88>
    10cc:	2e 81       	ldd	r18, Y+6	; 0x06
    10ce:	3f 81       	ldd	r19, Y+7	; 0x07
    10d0:	22 30       	cpi	r18, 0x02	; 2
    10d2:	31 05       	cpc	r19, r1
    10d4:	2c f4       	brge	.+10     	; 0x10e0 <DIO_voidSetPinValue+0x4a>
    10d6:	8e 81       	ldd	r24, Y+6	; 0x06
    10d8:	9f 81       	ldd	r25, Y+7	; 0x07
    10da:	00 97       	sbiw	r24, 0x00	; 0
    10dc:	61 f0       	breq	.+24     	; 0x10f6 <DIO_voidSetPinValue+0x60>
    10de:	d2 c0       	rjmp	.+420    	; 0x1284 <DIO_voidSetPinValue+0x1ee>
    10e0:	2e 81       	ldd	r18, Y+6	; 0x06
    10e2:	3f 81       	ldd	r19, Y+7	; 0x07
    10e4:	22 30       	cpi	r18, 0x02	; 2
    10e6:	31 05       	cpc	r19, r1
    10e8:	71 f1       	breq	.+92     	; 0x1146 <DIO_voidSetPinValue+0xb0>
    10ea:	8e 81       	ldd	r24, Y+6	; 0x06
    10ec:	9f 81       	ldd	r25, Y+7	; 0x07
    10ee:	83 30       	cpi	r24, 0x03	; 3
    10f0:	91 05       	cpc	r25, r1
    10f2:	e9 f1       	breq	.+122    	; 0x116e <DIO_voidSetPinValue+0xd8>
    10f4:	c7 c0       	rjmp	.+398    	; 0x1284 <DIO_voidSetPinValue+0x1ee>
			case PORTA/*Port A*/: SetBit(PORTA_REG,Copy_u8PinID);break;
    10f6:	ab e3       	ldi	r26, 0x3B	; 59
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	eb e3       	ldi	r30, 0x3B	; 59
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	48 2f       	mov	r20, r24
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	02 2e       	mov	r0, r18
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <DIO_voidSetPinValue+0x7e>
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	0a 94       	dec	r0
    1116:	e2 f7       	brpl	.-8      	; 0x1110 <DIO_voidSetPinValue+0x7a>
    1118:	84 2b       	or	r24, r20
    111a:	8c 93       	st	X, r24
    111c:	b3 c0       	rjmp	.+358    	; 0x1284 <DIO_voidSetPinValue+0x1ee>
			case PORTB/*Port B*/: SetBit(PORTB_REG,Copy_u8PinID);break;
    111e:	a8 e3       	ldi	r26, 0x38	; 56
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e8 e3       	ldi	r30, 0x38	; 56
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	48 2f       	mov	r20, r24
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	02 2e       	mov	r0, r18
    1136:	02 c0       	rjmp	.+4      	; 0x113c <DIO_voidSetPinValue+0xa6>
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	0a 94       	dec	r0
    113e:	e2 f7       	brpl	.-8      	; 0x1138 <DIO_voidSetPinValue+0xa2>
    1140:	84 2b       	or	r24, r20
    1142:	8c 93       	st	X, r24
    1144:	9f c0       	rjmp	.+318    	; 0x1284 <DIO_voidSetPinValue+0x1ee>
			case PORTC/*Port C*/: SetBit(PORTC_REG,Copy_u8PinID);break;
    1146:	a5 e3       	ldi	r26, 0x35	; 53
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e5 e3       	ldi	r30, 0x35	; 53
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	48 2f       	mov	r20, r24
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	02 2e       	mov	r0, r18
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <DIO_voidSetPinValue+0xce>
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	0a 94       	dec	r0
    1166:	e2 f7       	brpl	.-8      	; 0x1160 <DIO_voidSetPinValue+0xca>
    1168:	84 2b       	or	r24, r20
    116a:	8c 93       	st	X, r24
    116c:	8b c0       	rjmp	.+278    	; 0x1284 <DIO_voidSetPinValue+0x1ee>
			case PORTD/*Port D*/: SetBit(PORTD_REG,Copy_u8PinID);break;
    116e:	a2 e3       	ldi	r26, 0x32	; 50
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	e2 e3       	ldi	r30, 0x32	; 50
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	48 2f       	mov	r20, r24
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	02 2e       	mov	r0, r18
    1186:	02 c0       	rjmp	.+4      	; 0x118c <DIO_voidSetPinValue+0xf6>
    1188:	88 0f       	add	r24, r24
    118a:	99 1f       	adc	r25, r25
    118c:	0a 94       	dec	r0
    118e:	e2 f7       	brpl	.-8      	; 0x1188 <DIO_voidSetPinValue+0xf2>
    1190:	84 2b       	or	r24, r20
    1192:	8c 93       	st	X, r24
    1194:	77 c0       	rjmp	.+238    	; 0x1284 <DIO_voidSetPinValue+0x1ee>
		}
	}
	else if(Copy_u8PinValue==PIN_LOW){  //low
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	88 23       	and	r24, r24
    119a:	09 f0       	breq	.+2      	; 0x119e <DIO_voidSetPinValue+0x108>
    119c:	73 c0       	rjmp	.+230    	; 0x1284 <DIO_voidSetPinValue+0x1ee>
		switch(Copy_u8PortID){
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	3d 83       	std	Y+5, r19	; 0x05
    11a6:	2c 83       	std	Y+4, r18	; 0x04
    11a8:	8c 81       	ldd	r24, Y+4	; 0x04
    11aa:	9d 81       	ldd	r25, Y+5	; 0x05
    11ac:	81 30       	cpi	r24, 0x01	; 1
    11ae:	91 05       	cpc	r25, r1
    11b0:	59 f1       	breq	.+86     	; 0x1208 <DIO_voidSetPinValue+0x172>
    11b2:	2c 81       	ldd	r18, Y+4	; 0x04
    11b4:	3d 81       	ldd	r19, Y+5	; 0x05
    11b6:	22 30       	cpi	r18, 0x02	; 2
    11b8:	31 05       	cpc	r19, r1
    11ba:	2c f4       	brge	.+10     	; 0x11c6 <DIO_voidSetPinValue+0x130>
    11bc:	8c 81       	ldd	r24, Y+4	; 0x04
    11be:	9d 81       	ldd	r25, Y+5	; 0x05
    11c0:	00 97       	sbiw	r24, 0x00	; 0
    11c2:	69 f0       	breq	.+26     	; 0x11de <DIO_voidSetPinValue+0x148>
    11c4:	5f c0       	rjmp	.+190    	; 0x1284 <DIO_voidSetPinValue+0x1ee>
    11c6:	2c 81       	ldd	r18, Y+4	; 0x04
    11c8:	3d 81       	ldd	r19, Y+5	; 0x05
    11ca:	22 30       	cpi	r18, 0x02	; 2
    11cc:	31 05       	cpc	r19, r1
    11ce:	89 f1       	breq	.+98     	; 0x1232 <DIO_voidSetPinValue+0x19c>
    11d0:	8c 81       	ldd	r24, Y+4	; 0x04
    11d2:	9d 81       	ldd	r25, Y+5	; 0x05
    11d4:	83 30       	cpi	r24, 0x03	; 3
    11d6:	91 05       	cpc	r25, r1
    11d8:	09 f4       	brne	.+2      	; 0x11dc <DIO_voidSetPinValue+0x146>
    11da:	40 c0       	rjmp	.+128    	; 0x125c <DIO_voidSetPinValue+0x1c6>
    11dc:	53 c0       	rjmp	.+166    	; 0x1284 <DIO_voidSetPinValue+0x1ee>
			case PORTA/*Port A*/: ClrBit(PORTA_REG,Copy_u8PinID);break;
    11de:	ab e3       	ldi	r26, 0x3B	; 59
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	eb e3       	ldi	r30, 0x3B	; 59
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	48 2f       	mov	r20, r24
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	28 2f       	mov	r18, r24
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	02 2e       	mov	r0, r18
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <DIO_voidSetPinValue+0x166>
    11f8:	88 0f       	add	r24, r24
    11fa:	99 1f       	adc	r25, r25
    11fc:	0a 94       	dec	r0
    11fe:	e2 f7       	brpl	.-8      	; 0x11f8 <DIO_voidSetPinValue+0x162>
    1200:	80 95       	com	r24
    1202:	84 23       	and	r24, r20
    1204:	8c 93       	st	X, r24
    1206:	3e c0       	rjmp	.+124    	; 0x1284 <DIO_voidSetPinValue+0x1ee>
			case PORTB/*Port B*/: ClrBit(PORTB_REG,Copy_u8PinID);break;
    1208:	a8 e3       	ldi	r26, 0x38	; 56
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	e8 e3       	ldi	r30, 0x38	; 56
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	48 2f       	mov	r20, r24
    1214:	8a 81       	ldd	r24, Y+2	; 0x02
    1216:	28 2f       	mov	r18, r24
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	02 2e       	mov	r0, r18
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <DIO_voidSetPinValue+0x190>
    1222:	88 0f       	add	r24, r24
    1224:	99 1f       	adc	r25, r25
    1226:	0a 94       	dec	r0
    1228:	e2 f7       	brpl	.-8      	; 0x1222 <DIO_voidSetPinValue+0x18c>
    122a:	80 95       	com	r24
    122c:	84 23       	and	r24, r20
    122e:	8c 93       	st	X, r24
    1230:	29 c0       	rjmp	.+82     	; 0x1284 <DIO_voidSetPinValue+0x1ee>
			case PORTC/*Port C*/: ClrBit(PORTC_REG,Copy_u8PinID);break;
    1232:	a5 e3       	ldi	r26, 0x35	; 53
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	e5 e3       	ldi	r30, 0x35	; 53
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	48 2f       	mov	r20, r24
    123e:	8a 81       	ldd	r24, Y+2	; 0x02
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	02 2e       	mov	r0, r18
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <DIO_voidSetPinValue+0x1ba>
    124c:	88 0f       	add	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	0a 94       	dec	r0
    1252:	e2 f7       	brpl	.-8      	; 0x124c <DIO_voidSetPinValue+0x1b6>
    1254:	80 95       	com	r24
    1256:	84 23       	and	r24, r20
    1258:	8c 93       	st	X, r24
    125a:	14 c0       	rjmp	.+40     	; 0x1284 <DIO_voidSetPinValue+0x1ee>
			case PORTD/*Port D*/: ClrBit(PORTD_REG,Copy_u8PinID);break;
    125c:	a2 e3       	ldi	r26, 0x32	; 50
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e2 e3       	ldi	r30, 0x32	; 50
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	48 2f       	mov	r20, r24
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	28 2f       	mov	r18, r24
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	02 2e       	mov	r0, r18
    1274:	02 c0       	rjmp	.+4      	; 0x127a <DIO_voidSetPinValue+0x1e4>
    1276:	88 0f       	add	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	0a 94       	dec	r0
    127c:	e2 f7       	brpl	.-8      	; 0x1276 <DIO_voidSetPinValue+0x1e0>
    127e:	80 95       	com	r24
    1280:	84 23       	and	r24, r20
    1282:	8c 93       	st	X, r24
		}
	}	
}
    1284:	27 96       	adiw	r28, 0x07	; 7
    1286:	0f b6       	in	r0, 0x3f	; 63
    1288:	f8 94       	cli
    128a:	de bf       	out	0x3e, r29	; 62
    128c:	0f be       	out	0x3f, r0	; 63
    128e:	cd bf       	out	0x3d, r28	; 61
    1290:	cf 91       	pop	r28
    1292:	df 91       	pop	r29
    1294:	08 95       	ret

00001296 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(u8 Copy_u8PortID,u8 Copy_u8PortDir){
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	00 d0       	rcall	.+0      	; 0x129c <DIO_voidSetPortDirection+0x6>
    129c:	00 d0       	rcall	.+0      	; 0x129e <DIO_voidSetPortDirection+0x8>
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
    12a2:	89 83       	std	Y+1, r24	; 0x01
    12a4:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortID){
    12a6:	89 81       	ldd	r24, Y+1	; 0x01
    12a8:	28 2f       	mov	r18, r24
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	3c 83       	std	Y+4, r19	; 0x04
    12ae:	2b 83       	std	Y+3, r18	; 0x03
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	9c 81       	ldd	r25, Y+4	; 0x04
    12b4:	81 30       	cpi	r24, 0x01	; 1
    12b6:	91 05       	cpc	r25, r1
    12b8:	d1 f0       	breq	.+52     	; 0x12ee <DIO_voidSetPortDirection+0x58>
    12ba:	2b 81       	ldd	r18, Y+3	; 0x03
    12bc:	3c 81       	ldd	r19, Y+4	; 0x04
    12be:	22 30       	cpi	r18, 0x02	; 2
    12c0:	31 05       	cpc	r19, r1
    12c2:	2c f4       	brge	.+10     	; 0x12ce <DIO_voidSetPortDirection+0x38>
    12c4:	8b 81       	ldd	r24, Y+3	; 0x03
    12c6:	9c 81       	ldd	r25, Y+4	; 0x04
    12c8:	00 97       	sbiw	r24, 0x00	; 0
    12ca:	61 f0       	breq	.+24     	; 0x12e4 <DIO_voidSetPortDirection+0x4e>
    12cc:	1e c0       	rjmp	.+60     	; 0x130a <DIO_voidSetPortDirection+0x74>
    12ce:	2b 81       	ldd	r18, Y+3	; 0x03
    12d0:	3c 81       	ldd	r19, Y+4	; 0x04
    12d2:	22 30       	cpi	r18, 0x02	; 2
    12d4:	31 05       	cpc	r19, r1
    12d6:	81 f0       	breq	.+32     	; 0x12f8 <DIO_voidSetPortDirection+0x62>
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	9c 81       	ldd	r25, Y+4	; 0x04
    12dc:	83 30       	cpi	r24, 0x03	; 3
    12de:	91 05       	cpc	r25, r1
    12e0:	81 f0       	breq	.+32     	; 0x1302 <DIO_voidSetPortDirection+0x6c>
    12e2:	13 c0       	rjmp	.+38     	; 0x130a <DIO_voidSetPortDirection+0x74>
		case PORTA/*Port A*/: DDRA_REG=Copy_u8PortDir;break;
    12e4:	ea e3       	ldi	r30, 0x3A	; 58
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	80 83       	st	Z, r24
    12ec:	0e c0       	rjmp	.+28     	; 0x130a <DIO_voidSetPortDirection+0x74>
		case PORTB/*Port B*/: DDRB_REG=Copy_u8PortDir;break;
    12ee:	e7 e3       	ldi	r30, 0x37	; 55
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
    12f4:	80 83       	st	Z, r24
    12f6:	09 c0       	rjmp	.+18     	; 0x130a <DIO_voidSetPortDirection+0x74>
		case PORTC/*Port C*/: DDRC_REG=Copy_u8PortDir;break;
    12f8:	e4 e3       	ldi	r30, 0x34	; 52
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
    12fe:	80 83       	st	Z, r24
    1300:	04 c0       	rjmp	.+8      	; 0x130a <DIO_voidSetPortDirection+0x74>
		case PORTD/*Port D*/: DDRD_REG=Copy_u8PortDir;break;
    1302:	e1 e3       	ldi	r30, 0x31	; 49
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	80 83       	st	Z, r24
	}
}
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	cf 91       	pop	r28
    1314:	df 91       	pop	r29
    1316:	08 95       	ret

00001318 <DIO_voidSetAllPortInput>:

void DIO_voidSetAllPortInput(u8 Copy_u8PortID){
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	00 d0       	rcall	.+0      	; 0x131e <DIO_voidSetAllPortInput+0x6>
    131e:	0f 92       	push	r0
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID){
    1326:	89 81       	ldd	r24, Y+1	; 0x01
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	3b 83       	std	Y+3, r19	; 0x03
    132e:	2a 83       	std	Y+2, r18	; 0x02
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	9b 81       	ldd	r25, Y+3	; 0x03
    1334:	81 30       	cpi	r24, 0x01	; 1
    1336:	91 05       	cpc	r25, r1
    1338:	c9 f0       	breq	.+50     	; 0x136c <DIO_voidSetAllPortInput+0x54>
    133a:	2a 81       	ldd	r18, Y+2	; 0x02
    133c:	3b 81       	ldd	r19, Y+3	; 0x03
    133e:	22 30       	cpi	r18, 0x02	; 2
    1340:	31 05       	cpc	r19, r1
    1342:	2c f4       	brge	.+10     	; 0x134e <DIO_voidSetAllPortInput+0x36>
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	9b 81       	ldd	r25, Y+3	; 0x03
    1348:	00 97       	sbiw	r24, 0x00	; 0
    134a:	61 f0       	breq	.+24     	; 0x1364 <DIO_voidSetAllPortInput+0x4c>
    134c:	1a c0       	rjmp	.+52     	; 0x1382 <DIO_voidSetAllPortInput+0x6a>
    134e:	2a 81       	ldd	r18, Y+2	; 0x02
    1350:	3b 81       	ldd	r19, Y+3	; 0x03
    1352:	22 30       	cpi	r18, 0x02	; 2
    1354:	31 05       	cpc	r19, r1
    1356:	71 f0       	breq	.+28     	; 0x1374 <DIO_voidSetAllPortInput+0x5c>
    1358:	8a 81       	ldd	r24, Y+2	; 0x02
    135a:	9b 81       	ldd	r25, Y+3	; 0x03
    135c:	83 30       	cpi	r24, 0x03	; 3
    135e:	91 05       	cpc	r25, r1
    1360:	69 f0       	breq	.+26     	; 0x137c <DIO_voidSetAllPortInput+0x64>
    1362:	0f c0       	rjmp	.+30     	; 0x1382 <DIO_voidSetAllPortInput+0x6a>
		case PORTA/*Port A*/: DDRA_REG=PORT_INPUT;break;
    1364:	ea e3       	ldi	r30, 0x3A	; 58
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	10 82       	st	Z, r1
    136a:	0b c0       	rjmp	.+22     	; 0x1382 <DIO_voidSetAllPortInput+0x6a>
		case PORTB/*Port B*/: DDRB_REG=PORT_INPUT;break;
    136c:	e7 e3       	ldi	r30, 0x37	; 55
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	10 82       	st	Z, r1
    1372:	07 c0       	rjmp	.+14     	; 0x1382 <DIO_voidSetAllPortInput+0x6a>
		case PORTC/*Port C*/: DDRC_REG=PORT_INPUT;break;
    1374:	e4 e3       	ldi	r30, 0x34	; 52
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	10 82       	st	Z, r1
    137a:	03 c0       	rjmp	.+6      	; 0x1382 <DIO_voidSetAllPortInput+0x6a>
		case PORTD/*Port D*/: DDRD_REG=PORT_INPUT;break;
    137c:	e1 e3       	ldi	r30, 0x31	; 49
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	10 82       	st	Z, r1
	}
}
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	08 95       	ret

0000138e <DIO_voidSetAllPortOutput>:

void DIO_voidSetAllPortOutput(u8 Copy_u8PortID){
    138e:	df 93       	push	r29
    1390:	cf 93       	push	r28
    1392:	00 d0       	rcall	.+0      	; 0x1394 <DIO_voidSetAllPortOutput+0x6>
    1394:	0f 92       	push	r0
    1396:	cd b7       	in	r28, 0x3d	; 61
    1398:	de b7       	in	r29, 0x3e	; 62
    139a:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID){
    139c:	89 81       	ldd	r24, Y+1	; 0x01
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	3b 83       	std	Y+3, r19	; 0x03
    13a4:	2a 83       	std	Y+2, r18	; 0x02
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	9b 81       	ldd	r25, Y+3	; 0x03
    13aa:	81 30       	cpi	r24, 0x01	; 1
    13ac:	91 05       	cpc	r25, r1
    13ae:	d1 f0       	breq	.+52     	; 0x13e4 <DIO_voidSetAllPortOutput+0x56>
    13b0:	2a 81       	ldd	r18, Y+2	; 0x02
    13b2:	3b 81       	ldd	r19, Y+3	; 0x03
    13b4:	22 30       	cpi	r18, 0x02	; 2
    13b6:	31 05       	cpc	r19, r1
    13b8:	2c f4       	brge	.+10     	; 0x13c4 <DIO_voidSetAllPortOutput+0x36>
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	9b 81       	ldd	r25, Y+3	; 0x03
    13be:	00 97       	sbiw	r24, 0x00	; 0
    13c0:	61 f0       	breq	.+24     	; 0x13da <DIO_voidSetAllPortOutput+0x4c>
    13c2:	1e c0       	rjmp	.+60     	; 0x1400 <DIO_voidSetAllPortOutput+0x72>
    13c4:	2a 81       	ldd	r18, Y+2	; 0x02
    13c6:	3b 81       	ldd	r19, Y+3	; 0x03
    13c8:	22 30       	cpi	r18, 0x02	; 2
    13ca:	31 05       	cpc	r19, r1
    13cc:	81 f0       	breq	.+32     	; 0x13ee <DIO_voidSetAllPortOutput+0x60>
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	9b 81       	ldd	r25, Y+3	; 0x03
    13d2:	83 30       	cpi	r24, 0x03	; 3
    13d4:	91 05       	cpc	r25, r1
    13d6:	81 f0       	breq	.+32     	; 0x13f8 <DIO_voidSetAllPortOutput+0x6a>
    13d8:	13 c0       	rjmp	.+38     	; 0x1400 <DIO_voidSetAllPortOutput+0x72>
		case PORTA/*Port A*/: DDRA_REG=PORT_OUTPUT;break;
    13da:	ea e3       	ldi	r30, 0x3A	; 58
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	8f ef       	ldi	r24, 0xFF	; 255
    13e0:	80 83       	st	Z, r24
    13e2:	0e c0       	rjmp	.+28     	; 0x1400 <DIO_voidSetAllPortOutput+0x72>
		case PORTB/*Port B*/: DDRB_REG=PORT_OUTPUT;break;
    13e4:	e7 e3       	ldi	r30, 0x37	; 55
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	8f ef       	ldi	r24, 0xFF	; 255
    13ea:	80 83       	st	Z, r24
    13ec:	09 c0       	rjmp	.+18     	; 0x1400 <DIO_voidSetAllPortOutput+0x72>
		case PORTC/*Port C*/: DDRC_REG=PORT_OUTPUT;break;
    13ee:	e4 e3       	ldi	r30, 0x34	; 52
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	8f ef       	ldi	r24, 0xFF	; 255
    13f4:	80 83       	st	Z, r24
    13f6:	04 c0       	rjmp	.+8      	; 0x1400 <DIO_voidSetAllPortOutput+0x72>
		case PORTD/*Port D*/: DDRD_REG=PORT_OUTPUT;break;
    13f8:	e1 e3       	ldi	r30, 0x31	; 49
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	8f ef       	ldi	r24, 0xFF	; 255
    13fe:	80 83       	st	Z, r24
	}
}
    1400:	0f 90       	pop	r0
    1402:	0f 90       	pop	r0
    1404:	0f 90       	pop	r0
    1406:	cf 91       	pop	r28
    1408:	df 91       	pop	r29
    140a:	08 95       	ret

0000140c <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 Copy_u8PortID,u8 Copy_u8PortValue){
    140c:	df 93       	push	r29
    140e:	cf 93       	push	r28
    1410:	00 d0       	rcall	.+0      	; 0x1412 <DIO_voidSetPortValue+0x6>
    1412:	00 d0       	rcall	.+0      	; 0x1414 <DIO_voidSetPortValue+0x8>
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
    1418:	89 83       	std	Y+1, r24	; 0x01
    141a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortID){
    141c:	89 81       	ldd	r24, Y+1	; 0x01
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	3c 83       	std	Y+4, r19	; 0x04
    1424:	2b 83       	std	Y+3, r18	; 0x03
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	9c 81       	ldd	r25, Y+4	; 0x04
    142a:	81 30       	cpi	r24, 0x01	; 1
    142c:	91 05       	cpc	r25, r1
    142e:	d1 f0       	breq	.+52     	; 0x1464 <DIO_voidSetPortValue+0x58>
    1430:	2b 81       	ldd	r18, Y+3	; 0x03
    1432:	3c 81       	ldd	r19, Y+4	; 0x04
    1434:	22 30       	cpi	r18, 0x02	; 2
    1436:	31 05       	cpc	r19, r1
    1438:	2c f4       	brge	.+10     	; 0x1444 <DIO_voidSetPortValue+0x38>
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	9c 81       	ldd	r25, Y+4	; 0x04
    143e:	00 97       	sbiw	r24, 0x00	; 0
    1440:	61 f0       	breq	.+24     	; 0x145a <DIO_voidSetPortValue+0x4e>
    1442:	1e c0       	rjmp	.+60     	; 0x1480 <DIO_voidSetPortValue+0x74>
    1444:	2b 81       	ldd	r18, Y+3	; 0x03
    1446:	3c 81       	ldd	r19, Y+4	; 0x04
    1448:	22 30       	cpi	r18, 0x02	; 2
    144a:	31 05       	cpc	r19, r1
    144c:	81 f0       	breq	.+32     	; 0x146e <DIO_voidSetPortValue+0x62>
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	9c 81       	ldd	r25, Y+4	; 0x04
    1452:	83 30       	cpi	r24, 0x03	; 3
    1454:	91 05       	cpc	r25, r1
    1456:	81 f0       	breq	.+32     	; 0x1478 <DIO_voidSetPortValue+0x6c>
    1458:	13 c0       	rjmp	.+38     	; 0x1480 <DIO_voidSetPortValue+0x74>
		case PORTA/*Port A*/: PORTA_REG=Copy_u8PortValue;break;
    145a:	eb e3       	ldi	r30, 0x3B	; 59
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	80 83       	st	Z, r24
    1462:	0e c0       	rjmp	.+28     	; 0x1480 <DIO_voidSetPortValue+0x74>
		case PORTB/*Port B*/: PORTB_REG=Copy_u8PortValue;break;
    1464:	e8 e3       	ldi	r30, 0x38	; 56
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	80 83       	st	Z, r24
    146c:	09 c0       	rjmp	.+18     	; 0x1480 <DIO_voidSetPortValue+0x74>
		case PORTC/*Port C*/: PORTC_REG=Copy_u8PortValue;break;
    146e:	e5 e3       	ldi	r30, 0x35	; 53
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	80 83       	st	Z, r24
    1476:	04 c0       	rjmp	.+8      	; 0x1480 <DIO_voidSetPortValue+0x74>
		case PORTD/*Port D*/: PORTD_REG=Copy_u8PortValue;break;
    1478:	e2 e3       	ldi	r30, 0x32	; 50
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	8a 81       	ldd	r24, Y+2	; 0x02
    147e:	80 83       	st	Z, r24
	}
}
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	cf 91       	pop	r28
    148a:	df 91       	pop	r29
    148c:	08 95       	ret

0000148e <DIO_voidSetAllPortLow>:

void DIO_voidSetAllPortLow(u8 Copy_u8PortID){
    148e:	df 93       	push	r29
    1490:	cf 93       	push	r28
    1492:	00 d0       	rcall	.+0      	; 0x1494 <DIO_voidSetAllPortLow+0x6>
    1494:	0f 92       	push	r0
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    149a:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID){
    149c:	89 81       	ldd	r24, Y+1	; 0x01
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	3b 83       	std	Y+3, r19	; 0x03
    14a4:	2a 83       	std	Y+2, r18	; 0x02
    14a6:	8a 81       	ldd	r24, Y+2	; 0x02
    14a8:	9b 81       	ldd	r25, Y+3	; 0x03
    14aa:	81 30       	cpi	r24, 0x01	; 1
    14ac:	91 05       	cpc	r25, r1
    14ae:	c9 f0       	breq	.+50     	; 0x14e2 <DIO_voidSetAllPortLow+0x54>
    14b0:	2a 81       	ldd	r18, Y+2	; 0x02
    14b2:	3b 81       	ldd	r19, Y+3	; 0x03
    14b4:	22 30       	cpi	r18, 0x02	; 2
    14b6:	31 05       	cpc	r19, r1
    14b8:	2c f4       	brge	.+10     	; 0x14c4 <DIO_voidSetAllPortLow+0x36>
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	9b 81       	ldd	r25, Y+3	; 0x03
    14be:	00 97       	sbiw	r24, 0x00	; 0
    14c0:	61 f0       	breq	.+24     	; 0x14da <DIO_voidSetAllPortLow+0x4c>
    14c2:	1a c0       	rjmp	.+52     	; 0x14f8 <DIO_voidSetAllPortLow+0x6a>
    14c4:	2a 81       	ldd	r18, Y+2	; 0x02
    14c6:	3b 81       	ldd	r19, Y+3	; 0x03
    14c8:	22 30       	cpi	r18, 0x02	; 2
    14ca:	31 05       	cpc	r19, r1
    14cc:	71 f0       	breq	.+28     	; 0x14ea <DIO_voidSetAllPortLow+0x5c>
    14ce:	8a 81       	ldd	r24, Y+2	; 0x02
    14d0:	9b 81       	ldd	r25, Y+3	; 0x03
    14d2:	83 30       	cpi	r24, 0x03	; 3
    14d4:	91 05       	cpc	r25, r1
    14d6:	69 f0       	breq	.+26     	; 0x14f2 <DIO_voidSetAllPortLow+0x64>
    14d8:	0f c0       	rjmp	.+30     	; 0x14f8 <DIO_voidSetAllPortLow+0x6a>
		case PORTA/*Port A*/: PORTA_REG=PORT_LOW;break;
    14da:	eb e3       	ldi	r30, 0x3B	; 59
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	10 82       	st	Z, r1
    14e0:	0b c0       	rjmp	.+22     	; 0x14f8 <DIO_voidSetAllPortLow+0x6a>
		case PORTB/*Port B*/: PORTB_REG=PORT_LOW;break;
    14e2:	e8 e3       	ldi	r30, 0x38	; 56
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	10 82       	st	Z, r1
    14e8:	07 c0       	rjmp	.+14     	; 0x14f8 <DIO_voidSetAllPortLow+0x6a>
		case PORTC/*Port C*/: PORTC_REG=PORT_LOW;break;
    14ea:	e5 e3       	ldi	r30, 0x35	; 53
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	10 82       	st	Z, r1
    14f0:	03 c0       	rjmp	.+6      	; 0x14f8 <DIO_voidSetAllPortLow+0x6a>
		case PORTD/*Port D*/: PORTD_REG=PORT_LOW;break;
    14f2:	e2 e3       	ldi	r30, 0x32	; 50
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	10 82       	st	Z, r1
	}
}
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	0f 90       	pop	r0
    14fe:	cf 91       	pop	r28
    1500:	df 91       	pop	r29
    1502:	08 95       	ret

00001504 <DIO_voidSetAllPortHigh>:

void DIO_voidSetAllPortHigh(u8 Copy_u8PortID){
    1504:	df 93       	push	r29
    1506:	cf 93       	push	r28
    1508:	00 d0       	rcall	.+0      	; 0x150a <DIO_voidSetAllPortHigh+0x6>
    150a:	0f 92       	push	r0
    150c:	cd b7       	in	r28, 0x3d	; 61
    150e:	de b7       	in	r29, 0x3e	; 62
    1510:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID){
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	3b 83       	std	Y+3, r19	; 0x03
    151a:	2a 83       	std	Y+2, r18	; 0x02
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	9b 81       	ldd	r25, Y+3	; 0x03
    1520:	81 30       	cpi	r24, 0x01	; 1
    1522:	91 05       	cpc	r25, r1
    1524:	d1 f0       	breq	.+52     	; 0x155a <DIO_voidSetAllPortHigh+0x56>
    1526:	2a 81       	ldd	r18, Y+2	; 0x02
    1528:	3b 81       	ldd	r19, Y+3	; 0x03
    152a:	22 30       	cpi	r18, 0x02	; 2
    152c:	31 05       	cpc	r19, r1
    152e:	2c f4       	brge	.+10     	; 0x153a <DIO_voidSetAllPortHigh+0x36>
    1530:	8a 81       	ldd	r24, Y+2	; 0x02
    1532:	9b 81       	ldd	r25, Y+3	; 0x03
    1534:	00 97       	sbiw	r24, 0x00	; 0
    1536:	61 f0       	breq	.+24     	; 0x1550 <DIO_voidSetAllPortHigh+0x4c>
    1538:	1e c0       	rjmp	.+60     	; 0x1576 <DIO_voidSetAllPortHigh+0x72>
    153a:	2a 81       	ldd	r18, Y+2	; 0x02
    153c:	3b 81       	ldd	r19, Y+3	; 0x03
    153e:	22 30       	cpi	r18, 0x02	; 2
    1540:	31 05       	cpc	r19, r1
    1542:	81 f0       	breq	.+32     	; 0x1564 <DIO_voidSetAllPortHigh+0x60>
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	9b 81       	ldd	r25, Y+3	; 0x03
    1548:	83 30       	cpi	r24, 0x03	; 3
    154a:	91 05       	cpc	r25, r1
    154c:	81 f0       	breq	.+32     	; 0x156e <DIO_voidSetAllPortHigh+0x6a>
    154e:	13 c0       	rjmp	.+38     	; 0x1576 <DIO_voidSetAllPortHigh+0x72>
		case PORTA/*Port A*/: PORTA_REG=PORT_HIGH;break;
    1550:	eb e3       	ldi	r30, 0x3B	; 59
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	8f ef       	ldi	r24, 0xFF	; 255
    1556:	80 83       	st	Z, r24
    1558:	0e c0       	rjmp	.+28     	; 0x1576 <DIO_voidSetAllPortHigh+0x72>
		case PORTB/*Port B*/: PORTB_REG=PORT_HIGH;break;
    155a:	e8 e3       	ldi	r30, 0x38	; 56
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	8f ef       	ldi	r24, 0xFF	; 255
    1560:	80 83       	st	Z, r24
    1562:	09 c0       	rjmp	.+18     	; 0x1576 <DIO_voidSetAllPortHigh+0x72>
		case PORTC/*Port C*/: PORTC_REG=PORT_HIGH;break;
    1564:	e5 e3       	ldi	r30, 0x35	; 53
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	8f ef       	ldi	r24, 0xFF	; 255
    156a:	80 83       	st	Z, r24
    156c:	04 c0       	rjmp	.+8      	; 0x1576 <DIO_voidSetAllPortHigh+0x72>
		case PORTD/*Port D*/: PORTD_REG=PORT_HIGH;break;
    156e:	e2 e3       	ldi	r30, 0x32	; 50
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	8f ef       	ldi	r24, 0xFF	; 255
    1574:	80 83       	st	Z, r24
	}
}
    1576:	0f 90       	pop	r0
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	cf 91       	pop	r28
    157e:	df 91       	pop	r29
    1580:	08 95       	ret

00001582 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID){
    1582:	df 93       	push	r29
    1584:	cf 93       	push	r28
    1586:	00 d0       	rcall	.+0      	; 0x1588 <DIO_u8GetPinValue+0x6>
    1588:	00 d0       	rcall	.+0      	; 0x158a <DIO_u8GetPinValue+0x8>
    158a:	0f 92       	push	r0
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
    1590:	8a 83       	std	Y+2, r24	; 0x02
    1592:	6b 83       	std	Y+3, r22	; 0x03
	u8 value;
	switch(Copy_u8PortID){
    1594:	8a 81       	ldd	r24, Y+2	; 0x02
    1596:	28 2f       	mov	r18, r24
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	3d 83       	std	Y+5, r19	; 0x05
    159c:	2c 83       	std	Y+4, r18	; 0x04
    159e:	4c 81       	ldd	r20, Y+4	; 0x04
    15a0:	5d 81       	ldd	r21, Y+5	; 0x05
    15a2:	41 30       	cpi	r20, 0x01	; 1
    15a4:	51 05       	cpc	r21, r1
    15a6:	41 f1       	breq	.+80     	; 0x15f8 <DIO_u8GetPinValue+0x76>
    15a8:	8c 81       	ldd	r24, Y+4	; 0x04
    15aa:	9d 81       	ldd	r25, Y+5	; 0x05
    15ac:	82 30       	cpi	r24, 0x02	; 2
    15ae:	91 05       	cpc	r25, r1
    15b0:	34 f4       	brge	.+12     	; 0x15be <DIO_u8GetPinValue+0x3c>
    15b2:	2c 81       	ldd	r18, Y+4	; 0x04
    15b4:	3d 81       	ldd	r19, Y+5	; 0x05
    15b6:	21 15       	cp	r18, r1
    15b8:	31 05       	cpc	r19, r1
    15ba:	61 f0       	breq	.+24     	; 0x15d4 <DIO_u8GetPinValue+0x52>
    15bc:	52 c0       	rjmp	.+164    	; 0x1662 <DIO_u8GetPinValue+0xe0>
    15be:	4c 81       	ldd	r20, Y+4	; 0x04
    15c0:	5d 81       	ldd	r21, Y+5	; 0x05
    15c2:	42 30       	cpi	r20, 0x02	; 2
    15c4:	51 05       	cpc	r21, r1
    15c6:	51 f1       	breq	.+84     	; 0x161c <DIO_u8GetPinValue+0x9a>
    15c8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ca:	9d 81       	ldd	r25, Y+5	; 0x05
    15cc:	83 30       	cpi	r24, 0x03	; 3
    15ce:	91 05       	cpc	r25, r1
    15d0:	b9 f1       	breq	.+110    	; 0x1640 <DIO_u8GetPinValue+0xbe>
    15d2:	47 c0       	rjmp	.+142    	; 0x1662 <DIO_u8GetPinValue+0xe0>
		case PORTA/*Port A*/: value=GetBit(PINA_REG,Copy_u8PinID);break;
    15d4:	e9 e3       	ldi	r30, 0x39	; 57
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	88 2f       	mov	r24, r24
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	a9 01       	movw	r20, r18
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <DIO_u8GetPinValue+0x6a>
    15e8:	55 95       	asr	r21
    15ea:	47 95       	ror	r20
    15ec:	8a 95       	dec	r24
    15ee:	e2 f7       	brpl	.-8      	; 0x15e8 <DIO_u8GetPinValue+0x66>
    15f0:	ca 01       	movw	r24, r20
    15f2:	81 70       	andi	r24, 0x01	; 1
    15f4:	89 83       	std	Y+1, r24	; 0x01
    15f6:	35 c0       	rjmp	.+106    	; 0x1662 <DIO_u8GetPinValue+0xe0>
		case PORTB/*Port B*/: value=GetBit(PINB_REG,Copy_u8PinID);break;
    15f8:	e6 e3       	ldi	r30, 0x36	; 54
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	88 2f       	mov	r24, r24
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	a9 01       	movw	r20, r18
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <DIO_u8GetPinValue+0x8e>
    160c:	55 95       	asr	r21
    160e:	47 95       	ror	r20
    1610:	8a 95       	dec	r24
    1612:	e2 f7       	brpl	.-8      	; 0x160c <DIO_u8GetPinValue+0x8a>
    1614:	ca 01       	movw	r24, r20
    1616:	81 70       	andi	r24, 0x01	; 1
    1618:	89 83       	std	Y+1, r24	; 0x01
    161a:	23 c0       	rjmp	.+70     	; 0x1662 <DIO_u8GetPinValue+0xe0>
		case PORTC/*Port C*/: value=GetBit(PINC_REG,Copy_u8PinID);break;
    161c:	e3 e3       	ldi	r30, 0x33	; 51
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	28 2f       	mov	r18, r24
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	8b 81       	ldd	r24, Y+3	; 0x03
    1628:	88 2f       	mov	r24, r24
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	a9 01       	movw	r20, r18
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <DIO_u8GetPinValue+0xb2>
    1630:	55 95       	asr	r21
    1632:	47 95       	ror	r20
    1634:	8a 95       	dec	r24
    1636:	e2 f7       	brpl	.-8      	; 0x1630 <DIO_u8GetPinValue+0xae>
    1638:	ca 01       	movw	r24, r20
    163a:	81 70       	andi	r24, 0x01	; 1
    163c:	89 83       	std	Y+1, r24	; 0x01
    163e:	11 c0       	rjmp	.+34     	; 0x1662 <DIO_u8GetPinValue+0xe0>
		case PORTD/*Port D*/: value=GetBit(PIND_REG,Copy_u8PinID);break;
    1640:	e0 e3       	ldi	r30, 0x30	; 48
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	28 2f       	mov	r18, r24
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	88 2f       	mov	r24, r24
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	a9 01       	movw	r20, r18
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <DIO_u8GetPinValue+0xd6>
    1654:	55 95       	asr	r21
    1656:	47 95       	ror	r20
    1658:	8a 95       	dec	r24
    165a:	e2 f7       	brpl	.-8      	; 0x1654 <DIO_u8GetPinValue+0xd2>
    165c:	ca 01       	movw	r24, r20
    165e:	81 70       	andi	r24, 0x01	; 1
    1660:	89 83       	std	Y+1, r24	; 0x01
	}
	return value;
    1662:	89 81       	ldd	r24, Y+1	; 0x01
}
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	08 95       	ret

00001674 <DIO_voidTogglePinValue>:

void DIO_voidTogglePinValue(u8 Copy_u8PortID,u8 Copy_u8PinID){
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	00 d0       	rcall	.+0      	; 0x167a <DIO_voidTogglePinValue+0x6>
    167a:	00 d0       	rcall	.+0      	; 0x167c <DIO_voidTogglePinValue+0x8>
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
    1680:	89 83       	std	Y+1, r24	; 0x01
    1682:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortID){
    1684:	89 81       	ldd	r24, Y+1	; 0x01
    1686:	28 2f       	mov	r18, r24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	3c 83       	std	Y+4, r19	; 0x04
    168c:	2b 83       	std	Y+3, r18	; 0x03
    168e:	8b 81       	ldd	r24, Y+3	; 0x03
    1690:	9c 81       	ldd	r25, Y+4	; 0x04
    1692:	81 30       	cpi	r24, 0x01	; 1
    1694:	91 05       	cpc	r25, r1
    1696:	49 f1       	breq	.+82     	; 0x16ea <DIO_voidTogglePinValue+0x76>
    1698:	2b 81       	ldd	r18, Y+3	; 0x03
    169a:	3c 81       	ldd	r19, Y+4	; 0x04
    169c:	22 30       	cpi	r18, 0x02	; 2
    169e:	31 05       	cpc	r19, r1
    16a0:	2c f4       	brge	.+10     	; 0x16ac <DIO_voidTogglePinValue+0x38>
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	9c 81       	ldd	r25, Y+4	; 0x04
    16a6:	00 97       	sbiw	r24, 0x00	; 0
    16a8:	61 f0       	breq	.+24     	; 0x16c2 <DIO_voidTogglePinValue+0x4e>
    16aa:	5a c0       	rjmp	.+180    	; 0x1760 <DIO_voidTogglePinValue+0xec>
    16ac:	2b 81       	ldd	r18, Y+3	; 0x03
    16ae:	3c 81       	ldd	r19, Y+4	; 0x04
    16b0:	22 30       	cpi	r18, 0x02	; 2
    16b2:	31 05       	cpc	r19, r1
    16b4:	71 f1       	breq	.+92     	; 0x1712 <DIO_voidTogglePinValue+0x9e>
    16b6:	8b 81       	ldd	r24, Y+3	; 0x03
    16b8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ba:	83 30       	cpi	r24, 0x03	; 3
    16bc:	91 05       	cpc	r25, r1
    16be:	e9 f1       	breq	.+122    	; 0x173a <DIO_voidTogglePinValue+0xc6>
    16c0:	4f c0       	rjmp	.+158    	; 0x1760 <DIO_voidTogglePinValue+0xec>
		case PORTA/*Port A*/: TogBit(PORTA_REG,Copy_u8PinID);break;
    16c2:	ab e3       	ldi	r26, 0x3B	; 59
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	eb e3       	ldi	r30, 0x3B	; 59
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	48 2f       	mov	r20, r24
    16ce:	8a 81       	ldd	r24, Y+2	; 0x02
    16d0:	28 2f       	mov	r18, r24
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	02 2e       	mov	r0, r18
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <DIO_voidTogglePinValue+0x6c>
    16dc:	88 0f       	add	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	0a 94       	dec	r0
    16e2:	e2 f7       	brpl	.-8      	; 0x16dc <DIO_voidTogglePinValue+0x68>
    16e4:	84 27       	eor	r24, r20
    16e6:	8c 93       	st	X, r24
    16e8:	3b c0       	rjmp	.+118    	; 0x1760 <DIO_voidTogglePinValue+0xec>
		case PORTB/*Port B*/: TogBit(PORTB_REG,Copy_u8PinID);break;
    16ea:	a8 e3       	ldi	r26, 0x38	; 56
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e8 e3       	ldi	r30, 0x38	; 56
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	48 2f       	mov	r20, r24
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	02 2e       	mov	r0, r18
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <DIO_voidTogglePinValue+0x94>
    1704:	88 0f       	add	r24, r24
    1706:	99 1f       	adc	r25, r25
    1708:	0a 94       	dec	r0
    170a:	e2 f7       	brpl	.-8      	; 0x1704 <DIO_voidTogglePinValue+0x90>
    170c:	84 27       	eor	r24, r20
    170e:	8c 93       	st	X, r24
    1710:	27 c0       	rjmp	.+78     	; 0x1760 <DIO_voidTogglePinValue+0xec>
		case PORTC/*Port C*/: TogBit(PORTC_REG,Copy_u8PinID);break;
    1712:	a5 e3       	ldi	r26, 0x35	; 53
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	e5 e3       	ldi	r30, 0x35	; 53
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	48 2f       	mov	r20, r24
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	28 2f       	mov	r18, r24
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	02 2e       	mov	r0, r18
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <DIO_voidTogglePinValue+0xbc>
    172c:	88 0f       	add	r24, r24
    172e:	99 1f       	adc	r25, r25
    1730:	0a 94       	dec	r0
    1732:	e2 f7       	brpl	.-8      	; 0x172c <DIO_voidTogglePinValue+0xb8>
    1734:	84 27       	eor	r24, r20
    1736:	8c 93       	st	X, r24
    1738:	13 c0       	rjmp	.+38     	; 0x1760 <DIO_voidTogglePinValue+0xec>
		case PORTD/*Port D*/: TogBit(PORTD_REG,Copy_u8PinID);break;
    173a:	a2 e3       	ldi	r26, 0x32	; 50
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	e2 e3       	ldi	r30, 0x32	; 50
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	48 2f       	mov	r20, r24
    1746:	8a 81       	ldd	r24, Y+2	; 0x02
    1748:	28 2f       	mov	r18, r24
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	02 2e       	mov	r0, r18
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <DIO_voidTogglePinValue+0xe4>
    1754:	88 0f       	add	r24, r24
    1756:	99 1f       	adc	r25, r25
    1758:	0a 94       	dec	r0
    175a:	e2 f7       	brpl	.-8      	; 0x1754 <DIO_voidTogglePinValue+0xe0>
    175c:	84 27       	eor	r24, r20
    175e:	8c 93       	st	X, r24
	}
}
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	cf 91       	pop	r28
    176a:	df 91       	pop	r29
    176c:	08 95       	ret

0000176e <LCD_voidIntialize>:
#include "LCD_config.h"
#include "LCD_interface.h"
#include "avr/delay.h"


void LCD_voidIntialize(){
    176e:	df 93       	push	r29
    1770:	cf 93       	push	r28
    1772:	cd b7       	in	r28, 0x3d	; 61
    1774:	de b7       	in	r29, 0x3e	; 62
    1776:	aa 97       	sbiw	r28, 0x2a	; 42
    1778:	0f b6       	in	r0, 0x3f	; 63
    177a:	f8 94       	cli
    177c:	de bf       	out	0x3e, r29	; 62
    177e:	0f be       	out	0x3f, r0	; 63
    1780:	cd bf       	out	0x3d, r28	; 61
	
	DIO_voidSetAllPortOutput(LCD_DATA_PORT);
    1782:	82 e0       	ldi	r24, 0x02	; 2
    1784:	0e 94 c7 09 	call	0x138e	; 0x138e <DIO_voidSetAllPortOutput>
	
	DIO_voidSetPinDirection(LCD_CONTROL_PORT,RS,PIN_OUTPUT);
    1788:	83 e0       	ldi	r24, 0x03	; 3
    178a:	60 e0       	ldi	r22, 0x00	; 0
    178c:	41 e0       	ldi	r20, 0x01	; 1
    178e:	0e 94 4b 07 	call	0xe96	; 0xe96 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT,RW,PIN_OUTPUT);
    1792:	83 e0       	ldi	r24, 0x03	; 3
    1794:	61 e0       	ldi	r22, 0x01	; 1
    1796:	41 e0       	ldi	r20, 0x01	; 1
    1798:	0e 94 4b 07 	call	0xe96	; 0xe96 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT,EN,PIN_OUTPUT);
    179c:	83 e0       	ldi	r24, 0x03	; 3
    179e:	62 e0       	ldi	r22, 0x02	; 2
    17a0:	41 e0       	ldi	r20, 0x01	; 1
    17a2:	0e 94 4b 07 	call	0xe96	; 0xe96 <DIO_voidSetPinDirection>
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	a0 ef       	ldi	r26, 0xF0	; 240
    17ac:	b1 e4       	ldi	r27, 0x41	; 65
    17ae:	8f a3       	std	Y+39, r24	; 0x27
    17b0:	98 a7       	std	Y+40, r25	; 0x28
    17b2:	a9 a7       	std	Y+41, r26	; 0x29
    17b4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b6:	6f a1       	ldd	r22, Y+39	; 0x27
    17b8:	78 a5       	ldd	r23, Y+40	; 0x28
    17ba:	89 a5       	ldd	r24, Y+41	; 0x29
    17bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	4a ef       	ldi	r20, 0xFA	; 250
    17c4:	54 e4       	ldi	r21, 0x44	; 68
    17c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	8b a3       	std	Y+35, r24	; 0x23
    17d0:	9c a3       	std	Y+36, r25	; 0x24
    17d2:	ad a3       	std	Y+37, r26	; 0x25
    17d4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17d6:	6b a1       	ldd	r22, Y+35	; 0x23
    17d8:	7c a1       	ldd	r23, Y+36	; 0x24
    17da:	8d a1       	ldd	r24, Y+37	; 0x25
    17dc:	9e a1       	ldd	r25, Y+38	; 0x26
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	40 e8       	ldi	r20, 0x80	; 128
    17e4:	5f e3       	ldi	r21, 0x3F	; 63
    17e6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17ea:	88 23       	and	r24, r24
    17ec:	2c f4       	brge	.+10     	; 0x17f8 <LCD_voidIntialize+0x8a>
		__ticks = 1;
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	9a a3       	std	Y+34, r25	; 0x22
    17f4:	89 a3       	std	Y+33, r24	; 0x21
    17f6:	3f c0       	rjmp	.+126    	; 0x1876 <LCD_voidIntialize+0x108>
	else if (__tmp > 65535)
    17f8:	6b a1       	ldd	r22, Y+35	; 0x23
    17fa:	7c a1       	ldd	r23, Y+36	; 0x24
    17fc:	8d a1       	ldd	r24, Y+37	; 0x25
    17fe:	9e a1       	ldd	r25, Y+38	; 0x26
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	3f ef       	ldi	r19, 0xFF	; 255
    1804:	4f e7       	ldi	r20, 0x7F	; 127
    1806:	57 e4       	ldi	r21, 0x47	; 71
    1808:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    180c:	18 16       	cp	r1, r24
    180e:	4c f5       	brge	.+82     	; 0x1862 <LCD_voidIntialize+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1810:	6f a1       	ldd	r22, Y+39	; 0x27
    1812:	78 a5       	ldd	r23, Y+40	; 0x28
    1814:	89 a5       	ldd	r24, Y+41	; 0x29
    1816:	9a a5       	ldd	r25, Y+42	; 0x2a
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	40 e2       	ldi	r20, 0x20	; 32
    181e:	51 e4       	ldi	r21, 0x41	; 65
    1820:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1824:	dc 01       	movw	r26, r24
    1826:	cb 01       	movw	r24, r22
    1828:	bc 01       	movw	r22, r24
    182a:	cd 01       	movw	r24, r26
    182c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	9a a3       	std	Y+34, r25	; 0x22
    1836:	89 a3       	std	Y+33, r24	; 0x21
    1838:	0f c0       	rjmp	.+30     	; 0x1858 <LCD_voidIntialize+0xea>
    183a:	88 ec       	ldi	r24, 0xC8	; 200
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	98 a3       	std	Y+32, r25	; 0x20
    1840:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1842:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1844:	98 a1       	ldd	r25, Y+32	; 0x20
    1846:	01 97       	sbiw	r24, 0x01	; 1
    1848:	f1 f7       	brne	.-4      	; 0x1846 <LCD_voidIntialize+0xd8>
    184a:	98 a3       	std	Y+32, r25	; 0x20
    184c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    184e:	89 a1       	ldd	r24, Y+33	; 0x21
    1850:	9a a1       	ldd	r25, Y+34	; 0x22
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	9a a3       	std	Y+34, r25	; 0x22
    1856:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1858:	89 a1       	ldd	r24, Y+33	; 0x21
    185a:	9a a1       	ldd	r25, Y+34	; 0x22
    185c:	00 97       	sbiw	r24, 0x00	; 0
    185e:	69 f7       	brne	.-38     	; 0x183a <LCD_voidIntialize+0xcc>
    1860:	14 c0       	rjmp	.+40     	; 0x188a <LCD_voidIntialize+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1862:	6b a1       	ldd	r22, Y+35	; 0x23
    1864:	7c a1       	ldd	r23, Y+36	; 0x24
    1866:	8d a1       	ldd	r24, Y+37	; 0x25
    1868:	9e a1       	ldd	r25, Y+38	; 0x26
    186a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	9a a3       	std	Y+34, r25	; 0x22
    1874:	89 a3       	std	Y+33, r24	; 0x21
    1876:	89 a1       	ldd	r24, Y+33	; 0x21
    1878:	9a a1       	ldd	r25, Y+34	; 0x22
    187a:	9e 8f       	std	Y+30, r25	; 0x1e
    187c:	8d 8f       	std	Y+29, r24	; 0x1d
    187e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1880:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1882:	01 97       	sbiw	r24, 0x01	; 1
    1884:	f1 f7       	brne	.-4      	; 0x1882 <LCD_voidIntialize+0x114>
    1886:	9e 8f       	std	Y+30, r25	; 0x1e
    1888:	8d 8f       	std	Y+29, r24	; 0x1d
	
	_delay_ms(30);
	LCD_voidWriteCommand(FUN_SET_COMMAND);
    188a:	88 e3       	ldi	r24, 0x38	; 56
    188c:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <LCD_voidWriteCommand>
    1890:	80 e0       	ldi	r24, 0x00	; 0
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	a0 e0       	ldi	r26, 0x00	; 0
    1896:	b0 e4       	ldi	r27, 0x40	; 64
    1898:	89 8f       	std	Y+25, r24	; 0x19
    189a:	9a 8f       	std	Y+26, r25	; 0x1a
    189c:	ab 8f       	std	Y+27, r26	; 0x1b
    189e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a0:	69 8d       	ldd	r22, Y+25	; 0x19
    18a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18a8:	20 e0       	ldi	r18, 0x00	; 0
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	4a ef       	ldi	r20, 0xFA	; 250
    18ae:	54 e4       	ldi	r21, 0x44	; 68
    18b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18b4:	dc 01       	movw	r26, r24
    18b6:	cb 01       	movw	r24, r22
    18b8:	8d 8b       	std	Y+21, r24	; 0x15
    18ba:	9e 8b       	std	Y+22, r25	; 0x16
    18bc:	af 8b       	std	Y+23, r26	; 0x17
    18be:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18c0:	6d 89       	ldd	r22, Y+21	; 0x15
    18c2:	7e 89       	ldd	r23, Y+22	; 0x16
    18c4:	8f 89       	ldd	r24, Y+23	; 0x17
    18c6:	98 8d       	ldd	r25, Y+24	; 0x18
    18c8:	20 e0       	ldi	r18, 0x00	; 0
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	40 e8       	ldi	r20, 0x80	; 128
    18ce:	5f e3       	ldi	r21, 0x3F	; 63
    18d0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18d4:	88 23       	and	r24, r24
    18d6:	2c f4       	brge	.+10     	; 0x18e2 <LCD_voidIntialize+0x174>
		__ticks = 1;
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	9c 8b       	std	Y+20, r25	; 0x14
    18de:	8b 8b       	std	Y+19, r24	; 0x13
    18e0:	3f c0       	rjmp	.+126    	; 0x1960 <LCD_voidIntialize+0x1f2>
	else if (__tmp > 65535)
    18e2:	6d 89       	ldd	r22, Y+21	; 0x15
    18e4:	7e 89       	ldd	r23, Y+22	; 0x16
    18e6:	8f 89       	ldd	r24, Y+23	; 0x17
    18e8:	98 8d       	ldd	r25, Y+24	; 0x18
    18ea:	20 e0       	ldi	r18, 0x00	; 0
    18ec:	3f ef       	ldi	r19, 0xFF	; 255
    18ee:	4f e7       	ldi	r20, 0x7F	; 127
    18f0:	57 e4       	ldi	r21, 0x47	; 71
    18f2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18f6:	18 16       	cp	r1, r24
    18f8:	4c f5       	brge	.+82     	; 0x194c <LCD_voidIntialize+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18fa:	69 8d       	ldd	r22, Y+25	; 0x19
    18fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1900:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	40 e2       	ldi	r20, 0x20	; 32
    1908:	51 e4       	ldi	r21, 0x41	; 65
    190a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    190e:	dc 01       	movw	r26, r24
    1910:	cb 01       	movw	r24, r22
    1912:	bc 01       	movw	r22, r24
    1914:	cd 01       	movw	r24, r26
    1916:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    191a:	dc 01       	movw	r26, r24
    191c:	cb 01       	movw	r24, r22
    191e:	9c 8b       	std	Y+20, r25	; 0x14
    1920:	8b 8b       	std	Y+19, r24	; 0x13
    1922:	0f c0       	rjmp	.+30     	; 0x1942 <LCD_voidIntialize+0x1d4>
    1924:	88 ec       	ldi	r24, 0xC8	; 200
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	9a 8b       	std	Y+18, r25	; 0x12
    192a:	89 8b       	std	Y+17, r24	; 0x11
    192c:	89 89       	ldd	r24, Y+17	; 0x11
    192e:	9a 89       	ldd	r25, Y+18	; 0x12
    1930:	01 97       	sbiw	r24, 0x01	; 1
    1932:	f1 f7       	brne	.-4      	; 0x1930 <LCD_voidIntialize+0x1c2>
    1934:	9a 8b       	std	Y+18, r25	; 0x12
    1936:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1938:	8b 89       	ldd	r24, Y+19	; 0x13
    193a:	9c 89       	ldd	r25, Y+20	; 0x14
    193c:	01 97       	sbiw	r24, 0x01	; 1
    193e:	9c 8b       	std	Y+20, r25	; 0x14
    1940:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1942:	8b 89       	ldd	r24, Y+19	; 0x13
    1944:	9c 89       	ldd	r25, Y+20	; 0x14
    1946:	00 97       	sbiw	r24, 0x00	; 0
    1948:	69 f7       	brne	.-38     	; 0x1924 <LCD_voidIntialize+0x1b6>
    194a:	14 c0       	rjmp	.+40     	; 0x1974 <LCD_voidIntialize+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    194c:	6d 89       	ldd	r22, Y+21	; 0x15
    194e:	7e 89       	ldd	r23, Y+22	; 0x16
    1950:	8f 89       	ldd	r24, Y+23	; 0x17
    1952:	98 8d       	ldd	r25, Y+24	; 0x18
    1954:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1958:	dc 01       	movw	r26, r24
    195a:	cb 01       	movw	r24, r22
    195c:	9c 8b       	std	Y+20, r25	; 0x14
    195e:	8b 8b       	std	Y+19, r24	; 0x13
    1960:	8b 89       	ldd	r24, Y+19	; 0x13
    1962:	9c 89       	ldd	r25, Y+20	; 0x14
    1964:	98 8b       	std	Y+16, r25	; 0x10
    1966:	8f 87       	std	Y+15, r24	; 0x0f
    1968:	8f 85       	ldd	r24, Y+15	; 0x0f
    196a:	98 89       	ldd	r25, Y+16	; 0x10
    196c:	01 97       	sbiw	r24, 0x01	; 1
    196e:	f1 f7       	brne	.-4      	; 0x196c <LCD_voidIntialize+0x1fe>
    1970:	98 8b       	std	Y+16, r25	; 0x10
    1972:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_voidWriteCommand(DISPLAY_CONTROL_COMMAND);
    1974:	8c e0       	ldi	r24, 0x0C	; 12
    1976:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <LCD_voidWriteCommand>
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	a0 e0       	ldi	r26, 0x00	; 0
    1980:	b0 e4       	ldi	r27, 0x40	; 64
    1982:	8b 87       	std	Y+11, r24	; 0x0b
    1984:	9c 87       	std	Y+12, r25	; 0x0c
    1986:	ad 87       	std	Y+13, r26	; 0x0d
    1988:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    198a:	6b 85       	ldd	r22, Y+11	; 0x0b
    198c:	7c 85       	ldd	r23, Y+12	; 0x0c
    198e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1990:	9e 85       	ldd	r25, Y+14	; 0x0e
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	4a ef       	ldi	r20, 0xFA	; 250
    1998:	54 e4       	ldi	r21, 0x44	; 68
    199a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    199e:	dc 01       	movw	r26, r24
    19a0:	cb 01       	movw	r24, r22
    19a2:	8f 83       	std	Y+7, r24	; 0x07
    19a4:	98 87       	std	Y+8, r25	; 0x08
    19a6:	a9 87       	std	Y+9, r26	; 0x09
    19a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19aa:	6f 81       	ldd	r22, Y+7	; 0x07
    19ac:	78 85       	ldd	r23, Y+8	; 0x08
    19ae:	89 85       	ldd	r24, Y+9	; 0x09
    19b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	40 e8       	ldi	r20, 0x80	; 128
    19b8:	5f e3       	ldi	r21, 0x3F	; 63
    19ba:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19be:	88 23       	and	r24, r24
    19c0:	2c f4       	brge	.+10     	; 0x19cc <LCD_voidIntialize+0x25e>
		__ticks = 1;
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	9e 83       	std	Y+6, r25	; 0x06
    19c8:	8d 83       	std	Y+5, r24	; 0x05
    19ca:	3f c0       	rjmp	.+126    	; 0x1a4a <LCD_voidIntialize+0x2dc>
	else if (__tmp > 65535)
    19cc:	6f 81       	ldd	r22, Y+7	; 0x07
    19ce:	78 85       	ldd	r23, Y+8	; 0x08
    19d0:	89 85       	ldd	r24, Y+9	; 0x09
    19d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	3f ef       	ldi	r19, 0xFF	; 255
    19d8:	4f e7       	ldi	r20, 0x7F	; 127
    19da:	57 e4       	ldi	r21, 0x47	; 71
    19dc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19e0:	18 16       	cp	r1, r24
    19e2:	4c f5       	brge	.+82     	; 0x1a36 <LCD_voidIntialize+0x2c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    19e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    19e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	40 e2       	ldi	r20, 0x20	; 32
    19f2:	51 e4       	ldi	r21, 0x41	; 65
    19f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	bc 01       	movw	r22, r24
    19fe:	cd 01       	movw	r24, r26
    1a00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a04:	dc 01       	movw	r26, r24
    1a06:	cb 01       	movw	r24, r22
    1a08:	9e 83       	std	Y+6, r25	; 0x06
    1a0a:	8d 83       	std	Y+5, r24	; 0x05
    1a0c:	0f c0       	rjmp	.+30     	; 0x1a2c <LCD_voidIntialize+0x2be>
    1a0e:	88 ec       	ldi	r24, 0xC8	; 200
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	9c 83       	std	Y+4, r25	; 0x04
    1a14:	8b 83       	std	Y+3, r24	; 0x03
    1a16:	8b 81       	ldd	r24, Y+3	; 0x03
    1a18:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1a:	01 97       	sbiw	r24, 0x01	; 1
    1a1c:	f1 f7       	brne	.-4      	; 0x1a1a <LCD_voidIntialize+0x2ac>
    1a1e:	9c 83       	std	Y+4, r25	; 0x04
    1a20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a22:	8d 81       	ldd	r24, Y+5	; 0x05
    1a24:	9e 81       	ldd	r25, Y+6	; 0x06
    1a26:	01 97       	sbiw	r24, 0x01	; 1
    1a28:	9e 83       	std	Y+6, r25	; 0x06
    1a2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a30:	00 97       	sbiw	r24, 0x00	; 0
    1a32:	69 f7       	brne	.-38     	; 0x1a0e <LCD_voidIntialize+0x2a0>
    1a34:	14 c0       	rjmp	.+40     	; 0x1a5e <LCD_voidIntialize+0x2f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a36:	6f 81       	ldd	r22, Y+7	; 0x07
    1a38:	78 85       	ldd	r23, Y+8	; 0x08
    1a3a:	89 85       	ldd	r24, Y+9	; 0x09
    1a3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a3e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a42:	dc 01       	movw	r26, r24
    1a44:	cb 01       	movw	r24, r22
    1a46:	9e 83       	std	Y+6, r25	; 0x06
    1a48:	8d 83       	std	Y+5, r24	; 0x05
    1a4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a4e:	9a 83       	std	Y+2, r25	; 0x02
    1a50:	89 83       	std	Y+1, r24	; 0x01
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
    1a54:	9a 81       	ldd	r25, Y+2	; 0x02
    1a56:	01 97       	sbiw	r24, 0x01	; 1
    1a58:	f1 f7       	brne	.-4      	; 0x1a56 <LCD_voidIntialize+0x2e8>
    1a5a:	9a 83       	std	Y+2, r25	; 0x02
    1a5c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_voidWriteCommand(CLEAR_COMMAND);
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <LCD_voidWriteCommand>
	
}
    1a64:	aa 96       	adiw	r28, 0x2a	; 42
    1a66:	0f b6       	in	r0, 0x3f	; 63
    1a68:	f8 94       	cli
    1a6a:	de bf       	out	0x3e, r29	; 62
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	cd bf       	out	0x3d, r28	; 61
    1a70:	cf 91       	pop	r28
    1a72:	df 91       	pop	r29
    1a74:	08 95       	ret

00001a76 <LCD_voidWriteCommand>:

void LCD_voidWriteCommand(u8 Copy_u8Command){
    1a76:	df 93       	push	r29
    1a78:	cf 93       	push	r28
    1a7a:	cd b7       	in	r28, 0x3d	; 61
    1a7c:	de b7       	in	r29, 0x3e	; 62
    1a7e:	2f 97       	sbiw	r28, 0x0f	; 15
    1a80:	0f b6       	in	r0, 0x3f	; 63
    1a82:	f8 94       	cli
    1a84:	de bf       	out	0x3e, r29	; 62
    1a86:	0f be       	out	0x3f, r0	; 63
    1a88:	cd bf       	out	0x3d, r28	; 61
    1a8a:	8f 87       	std	Y+15, r24	; 0x0f

	DIO_voidSetPinValue(LCD_CONTROL_PORT,RS,PIN_LOW);
    1a8c:	83 e0       	ldi	r24, 0x03	; 3
    1a8e:	60 e0       	ldi	r22, 0x00	; 0
    1a90:	40 e0       	ldi	r20, 0x00	; 0
    1a92:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT,RW,PIN_LOW);
    1a96:	83 e0       	ldi	r24, 0x03	; 3
    1a98:	61 e0       	ldi	r22, 0x01	; 1
    1a9a:	40 e0       	ldi	r20, 0x00	; 0
    1a9c:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_voidSetPinValue>
	
	DIO_voidSetPortValue(LCD_DATA_PORT,Copy_u8Command);
    1aa0:	82 e0       	ldi	r24, 0x02	; 2
    1aa2:	6f 85       	ldd	r22, Y+15	; 0x0f
    1aa4:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPortValue>
	
	DIO_voidSetPinValue(LCD_CONTROL_PORT,EN,PIN_HIGH);
    1aa8:	83 e0       	ldi	r24, 0x03	; 3
    1aaa:	62 e0       	ldi	r22, 0x02	; 2
    1aac:	41 e0       	ldi	r20, 0x01	; 1
    1aae:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_voidSetPinValue>
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	a0 e0       	ldi	r26, 0x00	; 0
    1ab8:	b0 e4       	ldi	r27, 0x40	; 64
    1aba:	8b 87       	std	Y+11, r24	; 0x0b
    1abc:	9c 87       	std	Y+12, r25	; 0x0c
    1abe:	ad 87       	std	Y+13, r26	; 0x0d
    1ac0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ac4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ac6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ac8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	4a ef       	ldi	r20, 0xFA	; 250
    1ad0:	54 e4       	ldi	r21, 0x44	; 68
    1ad2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	8f 83       	std	Y+7, r24	; 0x07
    1adc:	98 87       	std	Y+8, r25	; 0x08
    1ade:	a9 87       	std	Y+9, r26	; 0x09
    1ae0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ae2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae4:	78 85       	ldd	r23, Y+8	; 0x08
    1ae6:	89 85       	ldd	r24, Y+9	; 0x09
    1ae8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	40 e8       	ldi	r20, 0x80	; 128
    1af0:	5f e3       	ldi	r21, 0x3F	; 63
    1af2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1af6:	88 23       	and	r24, r24
    1af8:	2c f4       	brge	.+10     	; 0x1b04 <LCD_voidWriteCommand+0x8e>
		__ticks = 1;
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	9e 83       	std	Y+6, r25	; 0x06
    1b00:	8d 83       	std	Y+5, r24	; 0x05
    1b02:	3f c0       	rjmp	.+126    	; 0x1b82 <LCD_voidWriteCommand+0x10c>
	else if (__tmp > 65535)
    1b04:	6f 81       	ldd	r22, Y+7	; 0x07
    1b06:	78 85       	ldd	r23, Y+8	; 0x08
    1b08:	89 85       	ldd	r24, Y+9	; 0x09
    1b0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	3f ef       	ldi	r19, 0xFF	; 255
    1b10:	4f e7       	ldi	r20, 0x7F	; 127
    1b12:	57 e4       	ldi	r21, 0x47	; 71
    1b14:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b18:	18 16       	cp	r1, r24
    1b1a:	4c f5       	brge	.+82     	; 0x1b6e <LCD_voidWriteCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b20:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b22:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	40 e2       	ldi	r20, 0x20	; 32
    1b2a:	51 e4       	ldi	r21, 0x41	; 65
    1b2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	bc 01       	movw	r22, r24
    1b36:	cd 01       	movw	r24, r26
    1b38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b3c:	dc 01       	movw	r26, r24
    1b3e:	cb 01       	movw	r24, r22
    1b40:	9e 83       	std	Y+6, r25	; 0x06
    1b42:	8d 83       	std	Y+5, r24	; 0x05
    1b44:	0f c0       	rjmp	.+30     	; 0x1b64 <LCD_voidWriteCommand+0xee>
    1b46:	88 ec       	ldi	r24, 0xC8	; 200
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	9c 83       	std	Y+4, r25	; 0x04
    1b4c:	8b 83       	std	Y+3, r24	; 0x03
    1b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b50:	9c 81       	ldd	r25, Y+4	; 0x04
    1b52:	01 97       	sbiw	r24, 0x01	; 1
    1b54:	f1 f7       	brne	.-4      	; 0x1b52 <LCD_voidWriteCommand+0xdc>
    1b56:	9c 83       	std	Y+4, r25	; 0x04
    1b58:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b5e:	01 97       	sbiw	r24, 0x01	; 1
    1b60:	9e 83       	std	Y+6, r25	; 0x06
    1b62:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b64:	8d 81       	ldd	r24, Y+5	; 0x05
    1b66:	9e 81       	ldd	r25, Y+6	; 0x06
    1b68:	00 97       	sbiw	r24, 0x00	; 0
    1b6a:	69 f7       	brne	.-38     	; 0x1b46 <LCD_voidWriteCommand+0xd0>
    1b6c:	14 c0       	rjmp	.+40     	; 0x1b96 <LCD_voidWriteCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b70:	78 85       	ldd	r23, Y+8	; 0x08
    1b72:	89 85       	ldd	r24, Y+9	; 0x09
    1b74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	9e 83       	std	Y+6, r25	; 0x06
    1b80:	8d 83       	std	Y+5, r24	; 0x05
    1b82:	8d 81       	ldd	r24, Y+5	; 0x05
    1b84:	9e 81       	ldd	r25, Y+6	; 0x06
    1b86:	9a 83       	std	Y+2, r25	; 0x02
    1b88:	89 83       	std	Y+1, r24	; 0x01
    1b8a:	89 81       	ldd	r24, Y+1	; 0x01
    1b8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8e:	01 97       	sbiw	r24, 0x01	; 1
    1b90:	f1 f7       	brne	.-4      	; 0x1b8e <LCD_voidWriteCommand+0x118>
    1b92:	9a 83       	std	Y+2, r25	; 0x02
    1b94:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CONTROL_PORT,EN,PIN_LOW);
    1b96:	83 e0       	ldi	r24, 0x03	; 3
    1b98:	62 e0       	ldi	r22, 0x02	; 2
    1b9a:	40 e0       	ldi	r20, 0x00	; 0
    1b9c:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_voidSetPinValue>
}
    1ba0:	2f 96       	adiw	r28, 0x0f	; 15
    1ba2:	0f b6       	in	r0, 0x3f	; 63
    1ba4:	f8 94       	cli
    1ba6:	de bf       	out	0x3e, r29	; 62
    1ba8:	0f be       	out	0x3f, r0	; 63
    1baa:	cd bf       	out	0x3d, r28	; 61
    1bac:	cf 91       	pop	r28
    1bae:	df 91       	pop	r29
    1bb0:	08 95       	ret

00001bb2 <LCD_voidWriteData>:

void LCD_voidWriteData(u8 Copy_u8Data){
    1bb2:	df 93       	push	r29
    1bb4:	cf 93       	push	r28
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
    1bba:	2f 97       	sbiw	r28, 0x0f	; 15
    1bbc:	0f b6       	in	r0, 0x3f	; 63
    1bbe:	f8 94       	cli
    1bc0:	de bf       	out	0x3e, r29	; 62
    1bc2:	0f be       	out	0x3f, r0	; 63
    1bc4:	cd bf       	out	0x3d, r28	; 61
    1bc6:	8f 87       	std	Y+15, r24	; 0x0f

	DIO_voidSetPinValue(LCD_CONTROL_PORT,RS,PIN_HIGH);
    1bc8:	83 e0       	ldi	r24, 0x03	; 3
    1bca:	60 e0       	ldi	r22, 0x00	; 0
    1bcc:	41 e0       	ldi	r20, 0x01	; 1
    1bce:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT,RW,PIN_LOW);
    1bd2:	83 e0       	ldi	r24, 0x03	; 3
    1bd4:	61 e0       	ldi	r22, 0x01	; 1
    1bd6:	40 e0       	ldi	r20, 0x00	; 0
    1bd8:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_voidSetPinValue>
	
	DIO_voidSetPortValue(LCD_DATA_PORT,Copy_u8Data);
    1bdc:	82 e0       	ldi	r24, 0x02	; 2
    1bde:	6f 85       	ldd	r22, Y+15	; 0x0f
    1be0:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPortValue>
	
	DIO_voidSetPinValue(LCD_CONTROL_PORT,EN,PIN_HIGH);
    1be4:	83 e0       	ldi	r24, 0x03	; 3
    1be6:	62 e0       	ldi	r22, 0x02	; 2
    1be8:	41 e0       	ldi	r20, 0x01	; 1
    1bea:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_voidSetPinValue>
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	a0 e0       	ldi	r26, 0x00	; 0
    1bf4:	b0 e4       	ldi	r27, 0x40	; 64
    1bf6:	8b 87       	std	Y+11, r24	; 0x0b
    1bf8:	9c 87       	std	Y+12, r25	; 0x0c
    1bfa:	ad 87       	std	Y+13, r26	; 0x0d
    1bfc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c00:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	4a ef       	ldi	r20, 0xFA	; 250
    1c0c:	54 e4       	ldi	r21, 0x44	; 68
    1c0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	8f 83       	std	Y+7, r24	; 0x07
    1c18:	98 87       	std	Y+8, r25	; 0x08
    1c1a:	a9 87       	std	Y+9, r26	; 0x09
    1c1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c20:	78 85       	ldd	r23, Y+8	; 0x08
    1c22:	89 85       	ldd	r24, Y+9	; 0x09
    1c24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	40 e8       	ldi	r20, 0x80	; 128
    1c2c:	5f e3       	ldi	r21, 0x3F	; 63
    1c2e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c32:	88 23       	and	r24, r24
    1c34:	2c f4       	brge	.+10     	; 0x1c40 <LCD_voidWriteData+0x8e>
		__ticks = 1;
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	9e 83       	std	Y+6, r25	; 0x06
    1c3c:	8d 83       	std	Y+5, r24	; 0x05
    1c3e:	3f c0       	rjmp	.+126    	; 0x1cbe <LCD_voidWriteData+0x10c>
	else if (__tmp > 65535)
    1c40:	6f 81       	ldd	r22, Y+7	; 0x07
    1c42:	78 85       	ldd	r23, Y+8	; 0x08
    1c44:	89 85       	ldd	r24, Y+9	; 0x09
    1c46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	3f ef       	ldi	r19, 0xFF	; 255
    1c4c:	4f e7       	ldi	r20, 0x7F	; 127
    1c4e:	57 e4       	ldi	r21, 0x47	; 71
    1c50:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c54:	18 16       	cp	r1, r24
    1c56:	4c f5       	brge	.+82     	; 0x1caa <LCD_voidWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	40 e2       	ldi	r20, 0x20	; 32
    1c66:	51 e4       	ldi	r21, 0x41	; 65
    1c68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	bc 01       	movw	r22, r24
    1c72:	cd 01       	movw	r24, r26
    1c74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	9e 83       	std	Y+6, r25	; 0x06
    1c7e:	8d 83       	std	Y+5, r24	; 0x05
    1c80:	0f c0       	rjmp	.+30     	; 0x1ca0 <LCD_voidWriteData+0xee>
    1c82:	88 ec       	ldi	r24, 0xC8	; 200
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	9c 83       	std	Y+4, r25	; 0x04
    1c88:	8b 83       	std	Y+3, r24	; 0x03
    1c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8e:	01 97       	sbiw	r24, 0x01	; 1
    1c90:	f1 f7       	brne	.-4      	; 0x1c8e <LCD_voidWriteData+0xdc>
    1c92:	9c 83       	std	Y+4, r25	; 0x04
    1c94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c96:	8d 81       	ldd	r24, Y+5	; 0x05
    1c98:	9e 81       	ldd	r25, Y+6	; 0x06
    1c9a:	01 97       	sbiw	r24, 0x01	; 1
    1c9c:	9e 83       	std	Y+6, r25	; 0x06
    1c9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca4:	00 97       	sbiw	r24, 0x00	; 0
    1ca6:	69 f7       	brne	.-38     	; 0x1c82 <LCD_voidWriteData+0xd0>
    1ca8:	14 c0       	rjmp	.+40     	; 0x1cd2 <LCD_voidWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1caa:	6f 81       	ldd	r22, Y+7	; 0x07
    1cac:	78 85       	ldd	r23, Y+8	; 0x08
    1cae:	89 85       	ldd	r24, Y+9	; 0x09
    1cb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	9e 83       	std	Y+6, r25	; 0x06
    1cbc:	8d 83       	std	Y+5, r24	; 0x05
    1cbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc2:	9a 83       	std	Y+2, r25	; 0x02
    1cc4:	89 83       	std	Y+1, r24	; 0x01
    1cc6:	89 81       	ldd	r24, Y+1	; 0x01
    1cc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cca:	01 97       	sbiw	r24, 0x01	; 1
    1ccc:	f1 f7       	brne	.-4      	; 0x1cca <LCD_voidWriteData+0x118>
    1cce:	9a 83       	std	Y+2, r25	; 0x02
    1cd0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CONTROL_PORT,EN,PIN_LOW);
    1cd2:	83 e0       	ldi	r24, 0x03	; 3
    1cd4:	62 e0       	ldi	r22, 0x02	; 2
    1cd6:	40 e0       	ldi	r20, 0x00	; 0
    1cd8:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_voidSetPinValue>
}
    1cdc:	2f 96       	adiw	r28, 0x0f	; 15
    1cde:	0f b6       	in	r0, 0x3f	; 63
    1ce0:	f8 94       	cli
    1ce2:	de bf       	out	0x3e, r29	; 62
    1ce4:	0f be       	out	0x3f, r0	; 63
    1ce6:	cd bf       	out	0x3d, r28	; 61
    1ce8:	cf 91       	pop	r28
    1cea:	df 91       	pop	r29
    1cec:	08 95       	ret

00001cee <LCD_voidGoToXY>:

void LCD_voidGoToXY(u8 Copy_u8X,u8 Copy_u8Y){
    1cee:	df 93       	push	r29
    1cf0:	cf 93       	push	r28
    1cf2:	00 d0       	rcall	.+0      	; 0x1cf4 <LCD_voidGoToXY+0x6>
    1cf4:	00 d0       	rcall	.+0      	; 0x1cf6 <LCD_voidGoToXY+0x8>
    1cf6:	cd b7       	in	r28, 0x3d	; 61
    1cf8:	de b7       	in	r29, 0x3e	; 62
    1cfa:	89 83       	std	Y+1, r24	; 0x01
    1cfc:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8X){
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
    1d00:	28 2f       	mov	r18, r24
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	3c 83       	std	Y+4, r19	; 0x04
    1d06:	2b 83       	std	Y+3, r18	; 0x03
    1d08:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0c:	00 97       	sbiw	r24, 0x00	; 0
    1d0e:	31 f0       	breq	.+12     	; 0x1d1c <LCD_voidGoToXY+0x2e>
    1d10:	2b 81       	ldd	r18, Y+3	; 0x03
    1d12:	3c 81       	ldd	r19, Y+4	; 0x04
    1d14:	21 30       	cpi	r18, 0x01	; 1
    1d16:	31 05       	cpc	r19, r1
    1d18:	31 f0       	breq	.+12     	; 0x1d26 <LCD_voidGoToXY+0x38>
    1d1a:	09 c0       	rjmp	.+18     	; 0x1d2e <LCD_voidGoToXY+0x40>
		case LINE0:
			LCD_voidWriteCommand(LINE0_ADDRESS+Copy_u8Y);
    1d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1e:	80 58       	subi	r24, 0x80	; 128
    1d20:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <LCD_voidWriteCommand>
    1d24:	04 c0       	rjmp	.+8      	; 0x1d2e <LCD_voidGoToXY+0x40>
			break;
		case LINE1:
			LCD_voidWriteCommand(LINE1_ADDRESS+Copy_u8Y);
    1d26:	8a 81       	ldd	r24, Y+2	; 0x02
    1d28:	80 54       	subi	r24, 0x40	; 64
    1d2a:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <LCD_voidWriteCommand>
	}
}
    1d2e:	0f 90       	pop	r0
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	cf 91       	pop	r28
    1d38:	df 91       	pop	r29
    1d3a:	08 95       	ret

00001d3c <LCD_voidWriteString>:


void LCD_voidWriteString(u8 *Copy_u8String){
    1d3c:	df 93       	push	r29
    1d3e:	cf 93       	push	r28
    1d40:	00 d0       	rcall	.+0      	; 0x1d42 <LCD_voidWriteString+0x6>
    1d42:	0f 92       	push	r0
    1d44:	cd b7       	in	r28, 0x3d	; 61
    1d46:	de b7       	in	r29, 0x3e	; 62
    1d48:	9b 83       	std	Y+3, r25	; 0x03
    1d4a:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    1d4c:	19 82       	std	Y+1, r1	; 0x01
    1d4e:	0e c0       	rjmp	.+28     	; 0x1d6c <LCD_voidWriteString+0x30>
	while(Copy_u8String[i]!='\0'){
		LCD_voidWriteData(Copy_u8String[i]);
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
    1d52:	28 2f       	mov	r18, r24
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	8a 81       	ldd	r24, Y+2	; 0x02
    1d58:	9b 81       	ldd	r25, Y+3	; 0x03
    1d5a:	fc 01       	movw	r30, r24
    1d5c:	e2 0f       	add	r30, r18
    1d5e:	f3 1f       	adc	r31, r19
    1d60:	80 81       	ld	r24, Z
    1d62:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <LCD_voidWriteData>
		i++;
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	8f 5f       	subi	r24, 0xFF	; 255
    1d6a:	89 83       	std	Y+1, r24	; 0x01
}


void LCD_voidWriteString(u8 *Copy_u8String){
	u8 i=0;
	while(Copy_u8String[i]!='\0'){
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
    1d6e:	28 2f       	mov	r18, r24
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	8a 81       	ldd	r24, Y+2	; 0x02
    1d74:	9b 81       	ldd	r25, Y+3	; 0x03
    1d76:	fc 01       	movw	r30, r24
    1d78:	e2 0f       	add	r30, r18
    1d7a:	f3 1f       	adc	r31, r19
    1d7c:	80 81       	ld	r24, Z
    1d7e:	88 23       	and	r24, r24
    1d80:	39 f7       	brne	.-50     	; 0x1d50 <LCD_voidWriteString+0x14>
		LCD_voidWriteData(Copy_u8String[i]);
		i++;
	}
}
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	0f 90       	pop	r0
    1d88:	cf 91       	pop	r28
    1d8a:	df 91       	pop	r29
    1d8c:	08 95       	ret

00001d8e <LCD_voidWriteNumber>:

void LCD_voidWriteNumber(u32 Copy_u32Number){
    1d8e:	0f 93       	push	r16
    1d90:	1f 93       	push	r17
    1d92:	df 93       	push	r29
    1d94:	cf 93       	push	r28
    1d96:	cd b7       	in	r28, 0x3d	; 61
    1d98:	de b7       	in	r29, 0x3e	; 62
    1d9a:	60 97       	sbiw	r28, 0x10	; 16
    1d9c:	0f b6       	in	r0, 0x3f	; 63
    1d9e:	f8 94       	cli
    1da0:	de bf       	out	0x3e, r29	; 62
    1da2:	0f be       	out	0x3f, r0	; 63
    1da4:	cd bf       	out	0x3d, r28	; 61
    1da6:	6d 87       	std	Y+13, r22	; 0x0d
    1da8:	7e 87       	std	Y+14, r23	; 0x0e
    1daa:	8f 87       	std	Y+15, r24	; 0x0f
    1dac:	98 8b       	std	Y+16, r25	; 0x10
	u8 arr[MAX_INT_DIGITS];
	u8 i=0;
    1dae:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u32Number==0){
    1db0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1db2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1db4:	af 85       	ldd	r26, Y+15	; 0x0f
    1db6:	b8 89       	ldd	r27, Y+16	; 0x10
    1db8:	00 97       	sbiw	r24, 0x00	; 0
    1dba:	a1 05       	cpc	r26, r1
    1dbc:	b1 05       	cpc	r27, r1
    1dbe:	89 f5       	brne	.+98     	; 0x1e22 <LCD_voidWriteNumber+0x94>
		LCD_voidWriteData(ZERO_ASCII);
    1dc0:	80 e3       	ldi	r24, 0x30	; 48
    1dc2:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <LCD_voidWriteData>
    1dc6:	4d c0       	rjmp	.+154    	; 0x1e62 <LCD_voidWriteNumber+0xd4>
	}
	else{
		while(Copy_u32Number>0){
			arr[i]=Copy_u32Number%10;
    1dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dca:	08 2f       	mov	r16, r24
    1dcc:	10 e0       	ldi	r17, 0x00	; 0
    1dce:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dd2:	af 85       	ldd	r26, Y+15	; 0x0f
    1dd4:	b8 89       	ldd	r27, Y+16	; 0x10
    1dd6:	2a e0       	ldi	r18, 0x0A	; 10
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	40 e0       	ldi	r20, 0x00	; 0
    1ddc:	50 e0       	ldi	r21, 0x00	; 0
    1dde:	bc 01       	movw	r22, r24
    1de0:	cd 01       	movw	r24, r26
    1de2:	0e 94 9b 10 	call	0x2136	; 0x2136 <__udivmodsi4>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	28 2f       	mov	r18, r24
    1dec:	ce 01       	movw	r24, r28
    1dee:	03 96       	adiw	r24, 0x03	; 3
    1df0:	fc 01       	movw	r30, r24
    1df2:	e0 0f       	add	r30, r16
    1df4:	f1 1f       	adc	r31, r17
    1df6:	20 83       	st	Z, r18
			Copy_u32Number/=10;
    1df8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dfa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dfc:	af 85       	ldd	r26, Y+15	; 0x0f
    1dfe:	b8 89       	ldd	r27, Y+16	; 0x10
    1e00:	2a e0       	ldi	r18, 0x0A	; 10
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	40 e0       	ldi	r20, 0x00	; 0
    1e06:	50 e0       	ldi	r21, 0x00	; 0
    1e08:	bc 01       	movw	r22, r24
    1e0a:	cd 01       	movw	r24, r26
    1e0c:	0e 94 9b 10 	call	0x2136	; 0x2136 <__udivmodsi4>
    1e10:	da 01       	movw	r26, r20
    1e12:	c9 01       	movw	r24, r18
    1e14:	8d 87       	std	Y+13, r24	; 0x0d
    1e16:	9e 87       	std	Y+14, r25	; 0x0e
    1e18:	af 87       	std	Y+15, r26	; 0x0f
    1e1a:	b8 8b       	std	Y+16, r27	; 0x10
			i++;
    1e1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1e:	8f 5f       	subi	r24, 0xFF	; 255
    1e20:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
	if(Copy_u32Number==0){
		LCD_voidWriteData(ZERO_ASCII);
	}
	else{
		while(Copy_u32Number>0){
    1e22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e26:	af 85       	ldd	r26, Y+15	; 0x0f
    1e28:	b8 89       	ldd	r27, Y+16	; 0x10
    1e2a:	00 97       	sbiw	r24, 0x00	; 0
    1e2c:	a1 05       	cpc	r26, r1
    1e2e:	b1 05       	cpc	r27, r1
    1e30:	59 f6       	brne	.-106    	; 0x1dc8 <LCD_voidWriteNumber+0x3a>
			arr[i]=Copy_u32Number%10;
			Copy_u32Number/=10;
			i++;
		}
		for(u8 j=i;j>0;j--){
    1e32:	8a 81       	ldd	r24, Y+2	; 0x02
    1e34:	89 83       	std	Y+1, r24	; 0x01
    1e36:	12 c0       	rjmp	.+36     	; 0x1e5c <LCD_voidWriteNumber+0xce>
			LCD_voidWriteData(arr[j-1]+ZERO_ASCII);
    1e38:	89 81       	ldd	r24, Y+1	; 0x01
    1e3a:	88 2f       	mov	r24, r24
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	9c 01       	movw	r18, r24
    1e40:	21 50       	subi	r18, 0x01	; 1
    1e42:	30 40       	sbci	r19, 0x00	; 0
    1e44:	ce 01       	movw	r24, r28
    1e46:	03 96       	adiw	r24, 0x03	; 3
    1e48:	fc 01       	movw	r30, r24
    1e4a:	e2 0f       	add	r30, r18
    1e4c:	f3 1f       	adc	r31, r19
    1e4e:	80 81       	ld	r24, Z
    1e50:	80 5d       	subi	r24, 0xD0	; 208
    1e52:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <LCD_voidWriteData>
		while(Copy_u32Number>0){
			arr[i]=Copy_u32Number%10;
			Copy_u32Number/=10;
			i++;
		}
		for(u8 j=i;j>0;j--){
    1e56:	89 81       	ldd	r24, Y+1	; 0x01
    1e58:	81 50       	subi	r24, 0x01	; 1
    1e5a:	89 83       	std	Y+1, r24	; 0x01
    1e5c:	89 81       	ldd	r24, Y+1	; 0x01
    1e5e:	88 23       	and	r24, r24
    1e60:	59 f7       	brne	.-42     	; 0x1e38 <LCD_voidWriteNumber+0xaa>
			LCD_voidWriteData(arr[j-1]+ZERO_ASCII);
		}		
	}
}
    1e62:	60 96       	adiw	r28, 0x10	; 16
    1e64:	0f b6       	in	r0, 0x3f	; 63
    1e66:	f8 94       	cli
    1e68:	de bf       	out	0x3e, r29	; 62
    1e6a:	0f be       	out	0x3f, r0	; 63
    1e6c:	cd bf       	out	0x3d, r28	; 61
    1e6e:	cf 91       	pop	r28
    1e70:	df 91       	pop	r29
    1e72:	1f 91       	pop	r17
    1e74:	0f 91       	pop	r16
    1e76:	08 95       	ret

00001e78 <LCD_voidWriteSpecialCharacter>:

void LCD_voidWriteSpecialCharacter(u8 *patern,u8 Copy_u32Char,u8 Copy_u8X,u8 Copy_u8Y){
    1e78:	df 93       	push	r29
    1e7a:	cf 93       	push	r28
    1e7c:	00 d0       	rcall	.+0      	; 0x1e7e <LCD_voidWriteSpecialCharacter+0x6>
    1e7e:	00 d0       	rcall	.+0      	; 0x1e80 <LCD_voidWriteSpecialCharacter+0x8>
    1e80:	00 d0       	rcall	.+0      	; 0x1e82 <LCD_voidWriteSpecialCharacter+0xa>
    1e82:	cd b7       	in	r28, 0x3d	; 61
    1e84:	de b7       	in	r29, 0x3e	; 62
    1e86:	9b 83       	std	Y+3, r25	; 0x03
    1e88:	8a 83       	std	Y+2, r24	; 0x02
    1e8a:	6c 83       	std	Y+4, r22	; 0x04
    1e8c:	4d 83       	std	Y+5, r20	; 0x05
    1e8e:	2e 83       	std	Y+6, r18	; 0x06
	LCD_voidWriteCommand(CGRAM_ADDRESS+Copy_u32Char*NO_BLOCK_BYTES);
    1e90:	8c 81       	ldd	r24, Y+4	; 0x04
    1e92:	88 2f       	mov	r24, r24
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	08 96       	adiw	r24, 0x08	; 8
    1e98:	88 0f       	add	r24, r24
    1e9a:	99 1f       	adc	r25, r25
    1e9c:	88 0f       	add	r24, r24
    1e9e:	99 1f       	adc	r25, r25
    1ea0:	88 0f       	add	r24, r24
    1ea2:	99 1f       	adc	r25, r25
    1ea4:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <LCD_voidWriteCommand>
	for(u8 i=0;i<NO_BLOCK_BYTES;i++){
    1ea8:	19 82       	std	Y+1, r1	; 0x01
    1eaa:	0e c0       	rjmp	.+28     	; 0x1ec8 <LCD_voidWriteSpecialCharacter+0x50>
		LCD_voidWriteData(patern[i]);
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
    1eae:	28 2f       	mov	r18, r24
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb4:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb6:	fc 01       	movw	r30, r24
    1eb8:	e2 0f       	add	r30, r18
    1eba:	f3 1f       	adc	r31, r19
    1ebc:	80 81       	ld	r24, Z
    1ebe:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <LCD_voidWriteData>
	}
}

void LCD_voidWriteSpecialCharacter(u8 *patern,u8 Copy_u32Char,u8 Copy_u8X,u8 Copy_u8Y){
	LCD_voidWriteCommand(CGRAM_ADDRESS+Copy_u32Char*NO_BLOCK_BYTES);
	for(u8 i=0;i<NO_BLOCK_BYTES;i++){
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01
    1ec4:	8f 5f       	subi	r24, 0xFF	; 255
    1ec6:	89 83       	std	Y+1, r24	; 0x01
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
    1eca:	88 30       	cpi	r24, 0x08	; 8
    1ecc:	78 f3       	brcs	.-34     	; 0x1eac <LCD_voidWriteSpecialCharacter+0x34>
		LCD_voidWriteData(patern[i]);
	}
	LCD_voidGoToXY(Copy_u8X,Copy_u8Y);
    1ece:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed0:	6e 81       	ldd	r22, Y+6	; 0x06
    1ed2:	0e 94 77 0e 	call	0x1cee	; 0x1cee <LCD_voidGoToXY>
	LCD_voidWriteData(Copy_u32Char);
    1ed6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed8:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <LCD_voidWriteData>
}
    1edc:	26 96       	adiw	r28, 0x06	; 6
    1ede:	0f b6       	in	r0, 0x3f	; 63
    1ee0:	f8 94       	cli
    1ee2:	de bf       	out	0x3e, r29	; 62
    1ee4:	0f be       	out	0x3f, r0	; 63
    1ee6:	cd bf       	out	0x3d, r28	; 61
    1ee8:	cf 91       	pop	r28
    1eea:	df 91       	pop	r29
    1eec:	08 95       	ret

00001eee <LCD_voidClearDisplay>:

void LCD_voidClearDisplay(){
    1eee:	df 93       	push	r29
    1ef0:	cf 93       	push	r28
    1ef2:	cd b7       	in	r28, 0x3d	; 61
    1ef4:	de b7       	in	r29, 0x3e	; 62
	LCD_voidWriteCommand(CLEAR_COMMAND);
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <LCD_voidWriteCommand>
    1efc:	cf 91       	pop	r28
    1efe:	df 91       	pop	r29
    1f00:	08 95       	ret

00001f02 <main>:
#include "DIO_interface.h"
#include "ADC_interface.h"
#include "LCD_interface.h"
#include "avr/delay.h"

int main(){
    1f02:	df 93       	push	r29
    1f04:	cf 93       	push	r28
    1f06:	cd b7       	in	r28, 0x3d	; 61
    1f08:	de b7       	in	r29, 0x3e	; 62
    1f0a:	64 97       	sbiw	r28, 0x14	; 20
    1f0c:	0f b6       	in	r0, 0x3f	; 63
    1f0e:	f8 94       	cli
    1f10:	de bf       	out	0x3e, r29	; 62
    1f12:	0f be       	out	0x3f, r0	; 63
    1f14:	cd bf       	out	0x3d, r28	; 61

	u16 reading,temp,light;

	LCD_voidIntialize();
    1f16:	0e 94 b7 0b 	call	0x176e	; 0x176e <LCD_voidIntialize>

	LCD_voidWriteString("Welcome");
    1f1a:	80 e6       	ldi	r24, 0x60	; 96
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <LCD_voidWriteString>
    1f22:	80 e0       	ldi	r24, 0x00	; 0
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	a8 ec       	ldi	r26, 0xC8	; 200
    1f28:	b2 e4       	ldi	r27, 0x42	; 66
    1f2a:	8b 87       	std	Y+11, r24	; 0x0b
    1f2c:	9c 87       	std	Y+12, r25	; 0x0c
    1f2e:	ad 87       	std	Y+13, r26	; 0x0d
    1f30:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f32:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f34:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f36:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f38:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	4a ef       	ldi	r20, 0xFA	; 250
    1f40:	54 e4       	ldi	r21, 0x44	; 68
    1f42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f46:	dc 01       	movw	r26, r24
    1f48:	cb 01       	movw	r24, r22
    1f4a:	8f 83       	std	Y+7, r24	; 0x07
    1f4c:	98 87       	std	Y+8, r25	; 0x08
    1f4e:	a9 87       	std	Y+9, r26	; 0x09
    1f50:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f52:	6f 81       	ldd	r22, Y+7	; 0x07
    1f54:	78 85       	ldd	r23, Y+8	; 0x08
    1f56:	89 85       	ldd	r24, Y+9	; 0x09
    1f58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f5a:	20 e0       	ldi	r18, 0x00	; 0
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	40 e8       	ldi	r20, 0x80	; 128
    1f60:	5f e3       	ldi	r21, 0x3F	; 63
    1f62:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f66:	88 23       	and	r24, r24
    1f68:	2c f4       	brge	.+10     	; 0x1f74 <main+0x72>
		__ticks = 1;
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	9e 83       	std	Y+6, r25	; 0x06
    1f70:	8d 83       	std	Y+5, r24	; 0x05
    1f72:	3f c0       	rjmp	.+126    	; 0x1ff2 <main+0xf0>
	else if (__tmp > 65535)
    1f74:	6f 81       	ldd	r22, Y+7	; 0x07
    1f76:	78 85       	ldd	r23, Y+8	; 0x08
    1f78:	89 85       	ldd	r24, Y+9	; 0x09
    1f7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	3f ef       	ldi	r19, 0xFF	; 255
    1f80:	4f e7       	ldi	r20, 0x7F	; 127
    1f82:	57 e4       	ldi	r21, 0x47	; 71
    1f84:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f88:	18 16       	cp	r1, r24
    1f8a:	4c f5       	brge	.+82     	; 0x1fde <main+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	40 e2       	ldi	r20, 0x20	; 32
    1f9a:	51 e4       	ldi	r21, 0x41	; 65
    1f9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	bc 01       	movw	r22, r24
    1fa6:	cd 01       	movw	r24, r26
    1fa8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	9e 83       	std	Y+6, r25	; 0x06
    1fb2:	8d 83       	std	Y+5, r24	; 0x05
    1fb4:	0f c0       	rjmp	.+30     	; 0x1fd4 <main+0xd2>
    1fb6:	88 ec       	ldi	r24, 0xC8	; 200
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	9c 83       	std	Y+4, r25	; 0x04
    1fbc:	8b 83       	std	Y+3, r24	; 0x03
    1fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc2:	01 97       	sbiw	r24, 0x01	; 1
    1fc4:	f1 f7       	brne	.-4      	; 0x1fc2 <main+0xc0>
    1fc6:	9c 83       	std	Y+4, r25	; 0x04
    1fc8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fca:	8d 81       	ldd	r24, Y+5	; 0x05
    1fcc:	9e 81       	ldd	r25, Y+6	; 0x06
    1fce:	01 97       	sbiw	r24, 0x01	; 1
    1fd0:	9e 83       	std	Y+6, r25	; 0x06
    1fd2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd8:	00 97       	sbiw	r24, 0x00	; 0
    1fda:	69 f7       	brne	.-38     	; 0x1fb6 <main+0xb4>
    1fdc:	14 c0       	rjmp	.+40     	; 0x2006 <main+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fde:	6f 81       	ldd	r22, Y+7	; 0x07
    1fe0:	78 85       	ldd	r23, Y+8	; 0x08
    1fe2:	89 85       	ldd	r24, Y+9	; 0x09
    1fe4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	9e 83       	std	Y+6, r25	; 0x06
    1ff0:	8d 83       	std	Y+5, r24	; 0x05
    1ff2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff6:	9a 83       	std	Y+2, r25	; 0x02
    1ff8:	89 83       	std	Y+1, r24	; 0x01
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
    1ffc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffe:	01 97       	sbiw	r24, 0x01	; 1
    2000:	f1 f7       	brne	.-4      	; 0x1ffe <main+0xfc>
    2002:	9a 83       	std	Y+2, r25	; 0x02
    2004:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	LCD_voidClearDisplay();
    2006:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_voidClearDisplay>

	while(1){
		ADC_voidInitialize(ADC0);
    200a:	80 e0       	ldi	r24, 0x00	; 0
    200c:	0e 94 9b 05 	call	0xb36	; 0xb36 <ADC_voidInitialize>
		ADC_voidInitialize(ADC1);
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	0e 94 9b 05 	call	0xb36	; 0xb36 <ADC_voidInitialize>

		LCD_voidGoToXY(0,0);
    2016:	80 e0       	ldi	r24, 0x00	; 0
    2018:	60 e0       	ldi	r22, 0x00	; 0
    201a:	0e 94 77 0e 	call	0x1cee	; 0x1cee <LCD_voidGoToXY>
		reading=ADC_voidStartConversion();
    201e:	0e 94 39 07 	call	0xe72	; 0xe72 <ADC_voidStartConversion>
    2022:	9c 8b       	std	Y+20, r25	; 0x14
    2024:	8b 8b       	std	Y+19, r24	; 0x13
		temp=(u16)(((u32)reading*5000)/(1023*10));
    2026:	8b 89       	ldd	r24, Y+19	; 0x13
    2028:	9c 89       	ldd	r25, Y+20	; 0x14
    202a:	cc 01       	movw	r24, r24
    202c:	a0 e0       	ldi	r26, 0x00	; 0
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	28 e8       	ldi	r18, 0x88	; 136
    2032:	33 e1       	ldi	r19, 0x13	; 19
    2034:	40 e0       	ldi	r20, 0x00	; 0
    2036:	50 e0       	ldi	r21, 0x00	; 0
    2038:	bc 01       	movw	r22, r24
    203a:	cd 01       	movw	r24, r26
    203c:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <__mulsi3>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	26 ef       	ldi	r18, 0xF6	; 246
    2046:	37 e2       	ldi	r19, 0x27	; 39
    2048:	40 e0       	ldi	r20, 0x00	; 0
    204a:	50 e0       	ldi	r21, 0x00	; 0
    204c:	bc 01       	movw	r22, r24
    204e:	cd 01       	movw	r24, r26
    2050:	0e 94 9b 10 	call	0x2136	; 0x2136 <__udivmodsi4>
    2054:	da 01       	movw	r26, r20
    2056:	c9 01       	movw	r24, r18
    2058:	9a 8b       	std	Y+18, r25	; 0x12
    205a:	89 8b       	std	Y+17, r24	; 0x11
		LCD_voidWriteString("temp=");
    205c:	88 e6       	ldi	r24, 0x68	; 104
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <LCD_voidWriteString>
		LCD_voidWriteNumber(temp);
    2064:	89 89       	ldd	r24, Y+17	; 0x11
    2066:	9a 89       	ldd	r25, Y+18	; 0x12
    2068:	cc 01       	movw	r24, r24
    206a:	a0 e0       	ldi	r26, 0x00	; 0
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	bc 01       	movw	r22, r24
    2070:	cd 01       	movw	r24, r26
    2072:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <LCD_voidWriteNumber>
		LCD_voidWriteString("C");
    2076:	8e e6       	ldi	r24, 0x6E	; 110
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <LCD_voidWriteString>
		LCD_voidWriteString("         ");
    207e:	80 e7       	ldi	r24, 0x70	; 112
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <LCD_voidWriteString>

		LCD_voidGoToXY(1,0);
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	60 e0       	ldi	r22, 0x00	; 0
    208a:	0e 94 77 0e 	call	0x1cee	; 0x1cee <LCD_voidGoToXY>
		reading=ADC_voidStartConversion();
    208e:	0e 94 39 07 	call	0xe72	; 0xe72 <ADC_voidStartConversion>
    2092:	9c 8b       	std	Y+20, r25	; 0x14
    2094:	8b 8b       	std	Y+19, r24	; 0x13
		light=(u16)(((u32)reading*5000*2)/(1023));
    2096:	8b 89       	ldd	r24, Y+19	; 0x13
    2098:	9c 89       	ldd	r25, Y+20	; 0x14
    209a:	cc 01       	movw	r24, r24
    209c:	a0 e0       	ldi	r26, 0x00	; 0
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	20 e1       	ldi	r18, 0x10	; 16
    20a2:	37 e2       	ldi	r19, 0x27	; 39
    20a4:	40 e0       	ldi	r20, 0x00	; 0
    20a6:	50 e0       	ldi	r21, 0x00	; 0
    20a8:	bc 01       	movw	r22, r24
    20aa:	cd 01       	movw	r24, r26
    20ac:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <__mulsi3>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	2f ef       	ldi	r18, 0xFF	; 255
    20b6:	33 e0       	ldi	r19, 0x03	; 3
    20b8:	40 e0       	ldi	r20, 0x00	; 0
    20ba:	50 e0       	ldi	r21, 0x00	; 0
    20bc:	bc 01       	movw	r22, r24
    20be:	cd 01       	movw	r24, r26
    20c0:	0e 94 9b 10 	call	0x2136	; 0x2136 <__udivmodsi4>
    20c4:	da 01       	movw	r26, r20
    20c6:	c9 01       	movw	r24, r18
    20c8:	98 8b       	std	Y+16, r25	; 0x10
    20ca:	8f 87       	std	Y+15, r24	; 0x0f
		LCD_voidWriteString("light=");
    20cc:	8a e7       	ldi	r24, 0x7A	; 122
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <LCD_voidWriteString>
		LCD_voidWriteNumber(light);
    20d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    20d6:	98 89       	ldd	r25, Y+16	; 0x10
    20d8:	cc 01       	movw	r24, r24
    20da:	a0 e0       	ldi	r26, 0x00	; 0
    20dc:	b0 e0       	ldi	r27, 0x00	; 0
    20de:	bc 01       	movw	r22, r24
    20e0:	cd 01       	movw	r24, r26
    20e2:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <LCD_voidWriteNumber>
		LCD_voidWriteString("Lux");
    20e6:	81 e8       	ldi	r24, 0x81	; 129
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <LCD_voidWriteString>
		LCD_voidWriteString("          ");
    20ee:	85 e8       	ldi	r24, 0x85	; 133
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <LCD_voidWriteString>
    20f6:	89 cf       	rjmp	.-238    	; 0x200a <main+0x108>

000020f8 <__mulsi3>:
    20f8:	62 9f       	mul	r22, r18
    20fa:	d0 01       	movw	r26, r0
    20fc:	73 9f       	mul	r23, r19
    20fe:	f0 01       	movw	r30, r0
    2100:	82 9f       	mul	r24, r18
    2102:	e0 0d       	add	r30, r0
    2104:	f1 1d       	adc	r31, r1
    2106:	64 9f       	mul	r22, r20
    2108:	e0 0d       	add	r30, r0
    210a:	f1 1d       	adc	r31, r1
    210c:	92 9f       	mul	r25, r18
    210e:	f0 0d       	add	r31, r0
    2110:	83 9f       	mul	r24, r19
    2112:	f0 0d       	add	r31, r0
    2114:	74 9f       	mul	r23, r20
    2116:	f0 0d       	add	r31, r0
    2118:	65 9f       	mul	r22, r21
    211a:	f0 0d       	add	r31, r0
    211c:	99 27       	eor	r25, r25
    211e:	72 9f       	mul	r23, r18
    2120:	b0 0d       	add	r27, r0
    2122:	e1 1d       	adc	r30, r1
    2124:	f9 1f       	adc	r31, r25
    2126:	63 9f       	mul	r22, r19
    2128:	b0 0d       	add	r27, r0
    212a:	e1 1d       	adc	r30, r1
    212c:	f9 1f       	adc	r31, r25
    212e:	bd 01       	movw	r22, r26
    2130:	cf 01       	movw	r24, r30
    2132:	11 24       	eor	r1, r1
    2134:	08 95       	ret

00002136 <__udivmodsi4>:
    2136:	a1 e2       	ldi	r26, 0x21	; 33
    2138:	1a 2e       	mov	r1, r26
    213a:	aa 1b       	sub	r26, r26
    213c:	bb 1b       	sub	r27, r27
    213e:	fd 01       	movw	r30, r26
    2140:	0d c0       	rjmp	.+26     	; 0x215c <__udivmodsi4_ep>

00002142 <__udivmodsi4_loop>:
    2142:	aa 1f       	adc	r26, r26
    2144:	bb 1f       	adc	r27, r27
    2146:	ee 1f       	adc	r30, r30
    2148:	ff 1f       	adc	r31, r31
    214a:	a2 17       	cp	r26, r18
    214c:	b3 07       	cpc	r27, r19
    214e:	e4 07       	cpc	r30, r20
    2150:	f5 07       	cpc	r31, r21
    2152:	20 f0       	brcs	.+8      	; 0x215c <__udivmodsi4_ep>
    2154:	a2 1b       	sub	r26, r18
    2156:	b3 0b       	sbc	r27, r19
    2158:	e4 0b       	sbc	r30, r20
    215a:	f5 0b       	sbc	r31, r21

0000215c <__udivmodsi4_ep>:
    215c:	66 1f       	adc	r22, r22
    215e:	77 1f       	adc	r23, r23
    2160:	88 1f       	adc	r24, r24
    2162:	99 1f       	adc	r25, r25
    2164:	1a 94       	dec	r1
    2166:	69 f7       	brne	.-38     	; 0x2142 <__udivmodsi4_loop>
    2168:	60 95       	com	r22
    216a:	70 95       	com	r23
    216c:	80 95       	com	r24
    216e:	90 95       	com	r25
    2170:	9b 01       	movw	r18, r22
    2172:	ac 01       	movw	r20, r24
    2174:	bd 01       	movw	r22, r26
    2176:	cf 01       	movw	r24, r30
    2178:	08 95       	ret

0000217a <__prologue_saves__>:
    217a:	2f 92       	push	r2
    217c:	3f 92       	push	r3
    217e:	4f 92       	push	r4
    2180:	5f 92       	push	r5
    2182:	6f 92       	push	r6
    2184:	7f 92       	push	r7
    2186:	8f 92       	push	r8
    2188:	9f 92       	push	r9
    218a:	af 92       	push	r10
    218c:	bf 92       	push	r11
    218e:	cf 92       	push	r12
    2190:	df 92       	push	r13
    2192:	ef 92       	push	r14
    2194:	ff 92       	push	r15
    2196:	0f 93       	push	r16
    2198:	1f 93       	push	r17
    219a:	cf 93       	push	r28
    219c:	df 93       	push	r29
    219e:	cd b7       	in	r28, 0x3d	; 61
    21a0:	de b7       	in	r29, 0x3e	; 62
    21a2:	ca 1b       	sub	r28, r26
    21a4:	db 0b       	sbc	r29, r27
    21a6:	0f b6       	in	r0, 0x3f	; 63
    21a8:	f8 94       	cli
    21aa:	de bf       	out	0x3e, r29	; 62
    21ac:	0f be       	out	0x3f, r0	; 63
    21ae:	cd bf       	out	0x3d, r28	; 61
    21b0:	09 94       	ijmp

000021b2 <__epilogue_restores__>:
    21b2:	2a 88       	ldd	r2, Y+18	; 0x12
    21b4:	39 88       	ldd	r3, Y+17	; 0x11
    21b6:	48 88       	ldd	r4, Y+16	; 0x10
    21b8:	5f 84       	ldd	r5, Y+15	; 0x0f
    21ba:	6e 84       	ldd	r6, Y+14	; 0x0e
    21bc:	7d 84       	ldd	r7, Y+13	; 0x0d
    21be:	8c 84       	ldd	r8, Y+12	; 0x0c
    21c0:	9b 84       	ldd	r9, Y+11	; 0x0b
    21c2:	aa 84       	ldd	r10, Y+10	; 0x0a
    21c4:	b9 84       	ldd	r11, Y+9	; 0x09
    21c6:	c8 84       	ldd	r12, Y+8	; 0x08
    21c8:	df 80       	ldd	r13, Y+7	; 0x07
    21ca:	ee 80       	ldd	r14, Y+6	; 0x06
    21cc:	fd 80       	ldd	r15, Y+5	; 0x05
    21ce:	0c 81       	ldd	r16, Y+4	; 0x04
    21d0:	1b 81       	ldd	r17, Y+3	; 0x03
    21d2:	aa 81       	ldd	r26, Y+2	; 0x02
    21d4:	b9 81       	ldd	r27, Y+1	; 0x01
    21d6:	ce 0f       	add	r28, r30
    21d8:	d1 1d       	adc	r29, r1
    21da:	0f b6       	in	r0, 0x3f	; 63
    21dc:	f8 94       	cli
    21de:	de bf       	out	0x3e, r29	; 62
    21e0:	0f be       	out	0x3f, r0	; 63
    21e2:	cd bf       	out	0x3d, r28	; 61
    21e4:	ed 01       	movw	r28, r26
    21e6:	08 95       	ret

000021e8 <_exit>:
    21e8:	f8 94       	cli

000021ea <__stop_program>:
    21ea:	ff cf       	rjmp	.-2      	; 0x21ea <__stop_program>
