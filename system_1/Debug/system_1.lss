
system_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001080  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00001080  00001114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800068  00800068  0000111c  2**0
                  ALLOC
  3 .stab         00001068  00000000  00000000  0000111c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000695  00000000  00000000  00002184  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e8       	ldi	r30, 0x80	; 128
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e6       	ldi	r26, 0x68	; 104
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 37       	cpi	r26, 0x7D	; 125
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bb 07 	call	0xf76	; 0xf76 <main>
      8a:	0c 94 3e 08 	jmp	0x107c	; 0x107c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_voidInitialize>:
#include "Bit_Math.h"
#include "DIO_interface.h"
#include "ADC_private.h"
#include "ADC_interface.h"

void ADC_voidInitialize(u8 Copy_u8ADC_Channel){
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <ADC_voidInitialize+0x6>
      98:	0f 92       	push	r0
      9a:	cd b7       	in	r28, 0x3d	; 61
      9c:	de b7       	in	r29, 0x3e	; 62
      9e:	89 83       	std	Y+1, r24	; 0x01
	ClrBit(ADMUX,PIN7);
      a0:	a7 e2       	ldi	r26, 0x27	; 39
      a2:	b0 e0       	ldi	r27, 0x00	; 0
      a4:	e7 e2       	ldi	r30, 0x27	; 39
      a6:	f0 e0       	ldi	r31, 0x00	; 0
      a8:	80 81       	ld	r24, Z
      aa:	8f 77       	andi	r24, 0x7F	; 127
      ac:	8c 93       	st	X, r24
	SetBit(ADMUX,PIN6);
      ae:	a7 e2       	ldi	r26, 0x27	; 39
      b0:	b0 e0       	ldi	r27, 0x00	; 0
      b2:	e7 e2       	ldi	r30, 0x27	; 39
      b4:	f0 e0       	ldi	r31, 0x00	; 0
      b6:	80 81       	ld	r24, Z
      b8:	80 64       	ori	r24, 0x40	; 64
      ba:	8c 93       	st	X, r24
	ClrBit(ADMUX,PIN5);
      bc:	a7 e2       	ldi	r26, 0x27	; 39
      be:	b0 e0       	ldi	r27, 0x00	; 0
      c0:	e7 e2       	ldi	r30, 0x27	; 39
      c2:	f0 e0       	ldi	r31, 0x00	; 0
      c4:	80 81       	ld	r24, Z
      c6:	8f 7d       	andi	r24, 0xDF	; 223
      c8:	8c 93       	st	X, r24
	
	switch(Copy_u8ADC_Channel){
      ca:	89 81       	ldd	r24, Y+1	; 0x01
      cc:	28 2f       	mov	r18, r24
      ce:	30 e0       	ldi	r19, 0x00	; 0
      d0:	3b 83       	std	Y+3, r19	; 0x03
      d2:	2a 83       	std	Y+2, r18	; 0x02
      d4:	8a 81       	ldd	r24, Y+2	; 0x02
      d6:	9b 81       	ldd	r25, Y+3	; 0x03
      d8:	83 30       	cpi	r24, 0x03	; 3
      da:	91 05       	cpc	r25, r1
      dc:	09 f4       	brne	.+2      	; 0xe0 <ADC_voidInitialize+0x4e>
      de:	9b c0       	rjmp	.+310    	; 0x216 <ADC_voidInitialize+0x184>
      e0:	2a 81       	ldd	r18, Y+2	; 0x02
      e2:	3b 81       	ldd	r19, Y+3	; 0x03
      e4:	24 30       	cpi	r18, 0x04	; 4
      e6:	31 05       	cpc	r19, r1
      e8:	8c f4       	brge	.+34     	; 0x10c <ADC_voidInitialize+0x7a>
      ea:	8a 81       	ldd	r24, Y+2	; 0x02
      ec:	9b 81       	ldd	r25, Y+3	; 0x03
      ee:	81 30       	cpi	r24, 0x01	; 1
      f0:	91 05       	cpc	r25, r1
      f2:	09 f4       	brne	.+2      	; 0xf6 <ADC_voidInitialize+0x64>
      f4:	48 c0       	rjmp	.+144    	; 0x186 <ADC_voidInitialize+0xf4>
      f6:	2a 81       	ldd	r18, Y+2	; 0x02
      f8:	3b 81       	ldd	r19, Y+3	; 0x03
      fa:	22 30       	cpi	r18, 0x02	; 2
      fc:	31 05       	cpc	r19, r1
      fe:	0c f0       	brlt	.+2      	; 0x102 <ADC_voidInitialize+0x70>
     100:	66 c0       	rjmp	.+204    	; 0x1ce <ADC_voidInitialize+0x13c>
     102:	8a 81       	ldd	r24, Y+2	; 0x02
     104:	9b 81       	ldd	r25, Y+3	; 0x03
     106:	00 97       	sbiw	r24, 0x00	; 0
     108:	d1 f0       	breq	.+52     	; 0x13e <ADC_voidInitialize+0xac>
     10a:	38 c1       	rjmp	.+624    	; 0x37c <ADC_voidInitialize+0x2ea>
     10c:	2a 81       	ldd	r18, Y+2	; 0x02
     10e:	3b 81       	ldd	r19, Y+3	; 0x03
     110:	25 30       	cpi	r18, 0x05	; 5
     112:	31 05       	cpc	r19, r1
     114:	09 f4       	brne	.+2      	; 0x118 <ADC_voidInitialize+0x86>
     116:	c7 c0       	rjmp	.+398    	; 0x2a6 <ADC_voidInitialize+0x214>
     118:	8a 81       	ldd	r24, Y+2	; 0x02
     11a:	9b 81       	ldd	r25, Y+3	; 0x03
     11c:	85 30       	cpi	r24, 0x05	; 5
     11e:	91 05       	cpc	r25, r1
     120:	0c f4       	brge	.+2      	; 0x124 <ADC_voidInitialize+0x92>
     122:	9d c0       	rjmp	.+314    	; 0x25e <ADC_voidInitialize+0x1cc>
     124:	2a 81       	ldd	r18, Y+2	; 0x02
     126:	3b 81       	ldd	r19, Y+3	; 0x03
     128:	26 30       	cpi	r18, 0x06	; 6
     12a:	31 05       	cpc	r19, r1
     12c:	09 f4       	brne	.+2      	; 0x130 <ADC_voidInitialize+0x9e>
     12e:	df c0       	rjmp	.+446    	; 0x2ee <ADC_voidInitialize+0x25c>
     130:	8a 81       	ldd	r24, Y+2	; 0x02
     132:	9b 81       	ldd	r25, Y+3	; 0x03
     134:	87 30       	cpi	r24, 0x07	; 7
     136:	91 05       	cpc	r25, r1
     138:	09 f4       	brne	.+2      	; 0x13c <ADC_voidInitialize+0xaa>
     13a:	fd c0       	rjmp	.+506    	; 0x336 <ADC_voidInitialize+0x2a4>
     13c:	1f c1       	rjmp	.+574    	; 0x37c <ADC_voidInitialize+0x2ea>
		case ADC0:
			ClrBit(ADMUX,PIN4);
     13e:	a7 e2       	ldi	r26, 0x27	; 39
     140:	b0 e0       	ldi	r27, 0x00	; 0
     142:	e7 e2       	ldi	r30, 0x27	; 39
     144:	f0 e0       	ldi	r31, 0x00	; 0
     146:	80 81       	ld	r24, Z
     148:	8f 7e       	andi	r24, 0xEF	; 239
     14a:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN3);
     14c:	a7 e2       	ldi	r26, 0x27	; 39
     14e:	b0 e0       	ldi	r27, 0x00	; 0
     150:	e7 e2       	ldi	r30, 0x27	; 39
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	80 81       	ld	r24, Z
     156:	87 7f       	andi	r24, 0xF7	; 247
     158:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN2);
     15a:	a7 e2       	ldi	r26, 0x27	; 39
     15c:	b0 e0       	ldi	r27, 0x00	; 0
     15e:	e7 e2       	ldi	r30, 0x27	; 39
     160:	f0 e0       	ldi	r31, 0x00	; 0
     162:	80 81       	ld	r24, Z
     164:	8b 7f       	andi	r24, 0xFB	; 251
     166:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN1);
     168:	a7 e2       	ldi	r26, 0x27	; 39
     16a:	b0 e0       	ldi	r27, 0x00	; 0
     16c:	e7 e2       	ldi	r30, 0x27	; 39
     16e:	f0 e0       	ldi	r31, 0x00	; 0
     170:	80 81       	ld	r24, Z
     172:	8d 7f       	andi	r24, 0xFD	; 253
     174:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN0);
     176:	a7 e2       	ldi	r26, 0x27	; 39
     178:	b0 e0       	ldi	r27, 0x00	; 0
     17a:	e7 e2       	ldi	r30, 0x27	; 39
     17c:	f0 e0       	ldi	r31, 0x00	; 0
     17e:	80 81       	ld	r24, Z
     180:	8e 7f       	andi	r24, 0xFE	; 254
     182:	8c 93       	st	X, r24
     184:	fb c0       	rjmp	.+502    	; 0x37c <ADC_voidInitialize+0x2ea>
			break;
		case ADC1:
			ClrBit(ADMUX,PIN4);
     186:	a7 e2       	ldi	r26, 0x27	; 39
     188:	b0 e0       	ldi	r27, 0x00	; 0
     18a:	e7 e2       	ldi	r30, 0x27	; 39
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	80 81       	ld	r24, Z
     190:	8f 7e       	andi	r24, 0xEF	; 239
     192:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN3);
     194:	a7 e2       	ldi	r26, 0x27	; 39
     196:	b0 e0       	ldi	r27, 0x00	; 0
     198:	e7 e2       	ldi	r30, 0x27	; 39
     19a:	f0 e0       	ldi	r31, 0x00	; 0
     19c:	80 81       	ld	r24, Z
     19e:	87 7f       	andi	r24, 0xF7	; 247
     1a0:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN2);
     1a2:	a7 e2       	ldi	r26, 0x27	; 39
     1a4:	b0 e0       	ldi	r27, 0x00	; 0
     1a6:	e7 e2       	ldi	r30, 0x27	; 39
     1a8:	f0 e0       	ldi	r31, 0x00	; 0
     1aa:	80 81       	ld	r24, Z
     1ac:	8b 7f       	andi	r24, 0xFB	; 251
     1ae:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN1);
     1b0:	a7 e2       	ldi	r26, 0x27	; 39
     1b2:	b0 e0       	ldi	r27, 0x00	; 0
     1b4:	e7 e2       	ldi	r30, 0x27	; 39
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	80 81       	ld	r24, Z
     1ba:	8d 7f       	andi	r24, 0xFD	; 253
     1bc:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN0);
     1be:	a7 e2       	ldi	r26, 0x27	; 39
     1c0:	b0 e0       	ldi	r27, 0x00	; 0
     1c2:	e7 e2       	ldi	r30, 0x27	; 39
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
     1c6:	80 81       	ld	r24, Z
     1c8:	81 60       	ori	r24, 0x01	; 1
     1ca:	8c 93       	st	X, r24
     1cc:	d7 c0       	rjmp	.+430    	; 0x37c <ADC_voidInitialize+0x2ea>
			break;
		case ADC2:
			ClrBit(ADMUX,PIN4);
     1ce:	a7 e2       	ldi	r26, 0x27	; 39
     1d0:	b0 e0       	ldi	r27, 0x00	; 0
     1d2:	e7 e2       	ldi	r30, 0x27	; 39
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	80 81       	ld	r24, Z
     1d8:	8f 7e       	andi	r24, 0xEF	; 239
     1da:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN3);
     1dc:	a7 e2       	ldi	r26, 0x27	; 39
     1de:	b0 e0       	ldi	r27, 0x00	; 0
     1e0:	e7 e2       	ldi	r30, 0x27	; 39
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	80 81       	ld	r24, Z
     1e6:	87 7f       	andi	r24, 0xF7	; 247
     1e8:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN2);
     1ea:	a7 e2       	ldi	r26, 0x27	; 39
     1ec:	b0 e0       	ldi	r27, 0x00	; 0
     1ee:	e7 e2       	ldi	r30, 0x27	; 39
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	80 81       	ld	r24, Z
     1f4:	8b 7f       	andi	r24, 0xFB	; 251
     1f6:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN1);
     1f8:	a7 e2       	ldi	r26, 0x27	; 39
     1fa:	b0 e0       	ldi	r27, 0x00	; 0
     1fc:	e7 e2       	ldi	r30, 0x27	; 39
     1fe:	f0 e0       	ldi	r31, 0x00	; 0
     200:	80 81       	ld	r24, Z
     202:	82 60       	ori	r24, 0x02	; 2
     204:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN0);
     206:	a7 e2       	ldi	r26, 0x27	; 39
     208:	b0 e0       	ldi	r27, 0x00	; 0
     20a:	e7 e2       	ldi	r30, 0x27	; 39
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	80 81       	ld	r24, Z
     210:	8e 7f       	andi	r24, 0xFE	; 254
     212:	8c 93       	st	X, r24
     214:	b3 c0       	rjmp	.+358    	; 0x37c <ADC_voidInitialize+0x2ea>
			break;
		case ADC3:
			ClrBit(ADMUX,PIN4);
     216:	a7 e2       	ldi	r26, 0x27	; 39
     218:	b0 e0       	ldi	r27, 0x00	; 0
     21a:	e7 e2       	ldi	r30, 0x27	; 39
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	80 81       	ld	r24, Z
     220:	8f 7e       	andi	r24, 0xEF	; 239
     222:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN3);
     224:	a7 e2       	ldi	r26, 0x27	; 39
     226:	b0 e0       	ldi	r27, 0x00	; 0
     228:	e7 e2       	ldi	r30, 0x27	; 39
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	80 81       	ld	r24, Z
     22e:	87 7f       	andi	r24, 0xF7	; 247
     230:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN2);
     232:	a7 e2       	ldi	r26, 0x27	; 39
     234:	b0 e0       	ldi	r27, 0x00	; 0
     236:	e7 e2       	ldi	r30, 0x27	; 39
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	80 81       	ld	r24, Z
     23c:	8b 7f       	andi	r24, 0xFB	; 251
     23e:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN1);
     240:	a7 e2       	ldi	r26, 0x27	; 39
     242:	b0 e0       	ldi	r27, 0x00	; 0
     244:	e7 e2       	ldi	r30, 0x27	; 39
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	80 81       	ld	r24, Z
     24a:	82 60       	ori	r24, 0x02	; 2
     24c:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN0);
     24e:	a7 e2       	ldi	r26, 0x27	; 39
     250:	b0 e0       	ldi	r27, 0x00	; 0
     252:	e7 e2       	ldi	r30, 0x27	; 39
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	80 81       	ld	r24, Z
     258:	81 60       	ori	r24, 0x01	; 1
     25a:	8c 93       	st	X, r24
     25c:	8f c0       	rjmp	.+286    	; 0x37c <ADC_voidInitialize+0x2ea>
			break;
		case ADC4:
			ClrBit(ADMUX,PIN4);
     25e:	a7 e2       	ldi	r26, 0x27	; 39
     260:	b0 e0       	ldi	r27, 0x00	; 0
     262:	e7 e2       	ldi	r30, 0x27	; 39
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	80 81       	ld	r24, Z
     268:	8f 7e       	andi	r24, 0xEF	; 239
     26a:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN3);
     26c:	a7 e2       	ldi	r26, 0x27	; 39
     26e:	b0 e0       	ldi	r27, 0x00	; 0
     270:	e7 e2       	ldi	r30, 0x27	; 39
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	80 81       	ld	r24, Z
     276:	87 7f       	andi	r24, 0xF7	; 247
     278:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN2);
     27a:	a7 e2       	ldi	r26, 0x27	; 39
     27c:	b0 e0       	ldi	r27, 0x00	; 0
     27e:	e7 e2       	ldi	r30, 0x27	; 39
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	80 81       	ld	r24, Z
     284:	84 60       	ori	r24, 0x04	; 4
     286:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN1);
     288:	a7 e2       	ldi	r26, 0x27	; 39
     28a:	b0 e0       	ldi	r27, 0x00	; 0
     28c:	e7 e2       	ldi	r30, 0x27	; 39
     28e:	f0 e0       	ldi	r31, 0x00	; 0
     290:	80 81       	ld	r24, Z
     292:	8d 7f       	andi	r24, 0xFD	; 253
     294:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN0);
     296:	a7 e2       	ldi	r26, 0x27	; 39
     298:	b0 e0       	ldi	r27, 0x00	; 0
     29a:	e7 e2       	ldi	r30, 0x27	; 39
     29c:	f0 e0       	ldi	r31, 0x00	; 0
     29e:	80 81       	ld	r24, Z
     2a0:	8e 7f       	andi	r24, 0xFE	; 254
     2a2:	8c 93       	st	X, r24
     2a4:	6b c0       	rjmp	.+214    	; 0x37c <ADC_voidInitialize+0x2ea>
			break;
		case ADC5:
			ClrBit(ADMUX,PIN4);
     2a6:	a7 e2       	ldi	r26, 0x27	; 39
     2a8:	b0 e0       	ldi	r27, 0x00	; 0
     2aa:	e7 e2       	ldi	r30, 0x27	; 39
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	80 81       	ld	r24, Z
     2b0:	8f 7e       	andi	r24, 0xEF	; 239
     2b2:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN3);
     2b4:	a7 e2       	ldi	r26, 0x27	; 39
     2b6:	b0 e0       	ldi	r27, 0x00	; 0
     2b8:	e7 e2       	ldi	r30, 0x27	; 39
     2ba:	f0 e0       	ldi	r31, 0x00	; 0
     2bc:	80 81       	ld	r24, Z
     2be:	87 7f       	andi	r24, 0xF7	; 247
     2c0:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN2);
     2c2:	a7 e2       	ldi	r26, 0x27	; 39
     2c4:	b0 e0       	ldi	r27, 0x00	; 0
     2c6:	e7 e2       	ldi	r30, 0x27	; 39
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	80 81       	ld	r24, Z
     2cc:	84 60       	ori	r24, 0x04	; 4
     2ce:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN1);
     2d0:	a7 e2       	ldi	r26, 0x27	; 39
     2d2:	b0 e0       	ldi	r27, 0x00	; 0
     2d4:	e7 e2       	ldi	r30, 0x27	; 39
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	80 81       	ld	r24, Z
     2da:	8d 7f       	andi	r24, 0xFD	; 253
     2dc:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN0);
     2de:	a7 e2       	ldi	r26, 0x27	; 39
     2e0:	b0 e0       	ldi	r27, 0x00	; 0
     2e2:	e7 e2       	ldi	r30, 0x27	; 39
     2e4:	f0 e0       	ldi	r31, 0x00	; 0
     2e6:	80 81       	ld	r24, Z
     2e8:	81 60       	ori	r24, 0x01	; 1
     2ea:	8c 93       	st	X, r24
     2ec:	47 c0       	rjmp	.+142    	; 0x37c <ADC_voidInitialize+0x2ea>
			break;
		case ADC6:
			ClrBit(ADMUX,PIN4);
     2ee:	a7 e2       	ldi	r26, 0x27	; 39
     2f0:	b0 e0       	ldi	r27, 0x00	; 0
     2f2:	e7 e2       	ldi	r30, 0x27	; 39
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
     2f6:	80 81       	ld	r24, Z
     2f8:	8f 7e       	andi	r24, 0xEF	; 239
     2fa:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN3);
     2fc:	a7 e2       	ldi	r26, 0x27	; 39
     2fe:	b0 e0       	ldi	r27, 0x00	; 0
     300:	e7 e2       	ldi	r30, 0x27	; 39
     302:	f0 e0       	ldi	r31, 0x00	; 0
     304:	80 81       	ld	r24, Z
     306:	87 7f       	andi	r24, 0xF7	; 247
     308:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN2);
     30a:	a7 e2       	ldi	r26, 0x27	; 39
     30c:	b0 e0       	ldi	r27, 0x00	; 0
     30e:	e7 e2       	ldi	r30, 0x27	; 39
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	80 81       	ld	r24, Z
     314:	84 60       	ori	r24, 0x04	; 4
     316:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN1);
     318:	a7 e2       	ldi	r26, 0x27	; 39
     31a:	b0 e0       	ldi	r27, 0x00	; 0
     31c:	e7 e2       	ldi	r30, 0x27	; 39
     31e:	f0 e0       	ldi	r31, 0x00	; 0
     320:	80 81       	ld	r24, Z
     322:	82 60       	ori	r24, 0x02	; 2
     324:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN0);
     326:	a7 e2       	ldi	r26, 0x27	; 39
     328:	b0 e0       	ldi	r27, 0x00	; 0
     32a:	e7 e2       	ldi	r30, 0x27	; 39
     32c:	f0 e0       	ldi	r31, 0x00	; 0
     32e:	80 81       	ld	r24, Z
     330:	8e 7f       	andi	r24, 0xFE	; 254
     332:	8c 93       	st	X, r24
     334:	23 c0       	rjmp	.+70     	; 0x37c <ADC_voidInitialize+0x2ea>
			break;
		case ADC7:
			ClrBit(ADMUX,PIN4);
     336:	a7 e2       	ldi	r26, 0x27	; 39
     338:	b0 e0       	ldi	r27, 0x00	; 0
     33a:	e7 e2       	ldi	r30, 0x27	; 39
     33c:	f0 e0       	ldi	r31, 0x00	; 0
     33e:	80 81       	ld	r24, Z
     340:	8f 7e       	andi	r24, 0xEF	; 239
     342:	8c 93       	st	X, r24
			ClrBit(ADMUX,PIN3);
     344:	a7 e2       	ldi	r26, 0x27	; 39
     346:	b0 e0       	ldi	r27, 0x00	; 0
     348:	e7 e2       	ldi	r30, 0x27	; 39
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	80 81       	ld	r24, Z
     34e:	87 7f       	andi	r24, 0xF7	; 247
     350:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN2);
     352:	a7 e2       	ldi	r26, 0x27	; 39
     354:	b0 e0       	ldi	r27, 0x00	; 0
     356:	e7 e2       	ldi	r30, 0x27	; 39
     358:	f0 e0       	ldi	r31, 0x00	; 0
     35a:	80 81       	ld	r24, Z
     35c:	84 60       	ori	r24, 0x04	; 4
     35e:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN1);
     360:	a7 e2       	ldi	r26, 0x27	; 39
     362:	b0 e0       	ldi	r27, 0x00	; 0
     364:	e7 e2       	ldi	r30, 0x27	; 39
     366:	f0 e0       	ldi	r31, 0x00	; 0
     368:	80 81       	ld	r24, Z
     36a:	82 60       	ori	r24, 0x02	; 2
     36c:	8c 93       	st	X, r24
			SetBit(ADMUX,PIN0);
     36e:	a7 e2       	ldi	r26, 0x27	; 39
     370:	b0 e0       	ldi	r27, 0x00	; 0
     372:	e7 e2       	ldi	r30, 0x27	; 39
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	80 81       	ld	r24, Z
     378:	81 60       	ori	r24, 0x01	; 1
     37a:	8c 93       	st	X, r24
			break;
	}
	
	ClrBit(ADCSRA,PIN0);
     37c:	a6 e2       	ldi	r26, 0x26	; 38
     37e:	b0 e0       	ldi	r27, 0x00	; 0
     380:	e6 e2       	ldi	r30, 0x26	; 38
     382:	f0 e0       	ldi	r31, 0x00	; 0
     384:	80 81       	ld	r24, Z
     386:	8e 7f       	andi	r24, 0xFE	; 254
     388:	8c 93       	st	X, r24
	SetBit(ADCSRA,PIN1);
     38a:	a6 e2       	ldi	r26, 0x26	; 38
     38c:	b0 e0       	ldi	r27, 0x00	; 0
     38e:	e6 e2       	ldi	r30, 0x26	; 38
     390:	f0 e0       	ldi	r31, 0x00	; 0
     392:	80 81       	ld	r24, Z
     394:	82 60       	ori	r24, 0x02	; 2
     396:	8c 93       	st	X, r24
	SetBit(ADCSRA,PIN2);
     398:	a6 e2       	ldi	r26, 0x26	; 38
     39a:	b0 e0       	ldi	r27, 0x00	; 0
     39c:	e6 e2       	ldi	r30, 0x26	; 38
     39e:	f0 e0       	ldi	r31, 0x00	; 0
     3a0:	80 81       	ld	r24, Z
     3a2:	84 60       	ori	r24, 0x04	; 4
     3a4:	8c 93       	st	X, r24
	
	SetBit(ADCSRA,PIN7);
     3a6:	a6 e2       	ldi	r26, 0x26	; 38
     3a8:	b0 e0       	ldi	r27, 0x00	; 0
     3aa:	e6 e2       	ldi	r30, 0x26	; 38
     3ac:	f0 e0       	ldi	r31, 0x00	; 0
     3ae:	80 81       	ld	r24, Z
     3b0:	80 68       	ori	r24, 0x80	; 128
     3b2:	8c 93       	st	X, r24
	SetBit(ADCSRA,PIN6);
     3b4:	a6 e2       	ldi	r26, 0x26	; 38
     3b6:	b0 e0       	ldi	r27, 0x00	; 0
     3b8:	e6 e2       	ldi	r30, 0x26	; 38
     3ba:	f0 e0       	ldi	r31, 0x00	; 0
     3bc:	80 81       	ld	r24, Z
     3be:	80 64       	ori	r24, 0x40	; 64
     3c0:	8c 93       	st	X, r24
}
     3c2:	0f 90       	pop	r0
     3c4:	0f 90       	pop	r0
     3c6:	0f 90       	pop	r0
     3c8:	cf 91       	pop	r28
     3ca:	df 91       	pop	r29
     3cc:	08 95       	ret

000003ce <ADC_voidStartConversion>:

u16 ADC_voidStartConversion(){
     3ce:	df 93       	push	r29
     3d0:	cf 93       	push	r28
     3d2:	cd b7       	in	r28, 0x3d	; 61
     3d4:	de b7       	in	r29, 0x3e	; 62
	
	SetBit(ADCSRA,PIN6);
     3d6:	a6 e2       	ldi	r26, 0x26	; 38
     3d8:	b0 e0       	ldi	r27, 0x00	; 0
     3da:	e6 e2       	ldi	r30, 0x26	; 38
     3dc:	f0 e0       	ldi	r31, 0x00	; 0
     3de:	80 81       	ld	r24, Z
     3e0:	80 64       	ori	r24, 0x40	; 64
     3e2:	8c 93       	st	X, r24
	return ADC;
     3e4:	e4 e2       	ldi	r30, 0x24	; 36
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
     3e8:	80 81       	ld	r24, Z
     3ea:	91 81       	ldd	r25, Z+1	; 0x01
     3ec:	cf 91       	pop	r28
     3ee:	df 91       	pop	r29
     3f0:	08 95       	ret

000003f2 <DIO_voidSetPinDirection>:
#include "Bit_Math.h"
#include "DIO_config.h"
#include "DIO_private.h"
#include "DIO_interface.h"

void DIO_voidSetPinDirection(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinDir){
     3f2:	df 93       	push	r29
     3f4:	cf 93       	push	r28
     3f6:	cd b7       	in	r28, 0x3d	; 61
     3f8:	de b7       	in	r29, 0x3e	; 62
     3fa:	27 97       	sbiw	r28, 0x07	; 7
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	f8 94       	cli
     400:	de bf       	out	0x3e, r29	; 62
     402:	0f be       	out	0x3f, r0	; 63
     404:	cd bf       	out	0x3d, r28	; 61
     406:	89 83       	std	Y+1, r24	; 0x01
     408:	6a 83       	std	Y+2, r22	; 0x02
     40a:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinDir==PIN_OUTPUT){     //output
     40c:	8b 81       	ldd	r24, Y+3	; 0x03
     40e:	81 30       	cpi	r24, 0x01	; 1
     410:	09 f0       	breq	.+2      	; 0x414 <DIO_voidSetPinDirection+0x22>
     412:	6f c0       	rjmp	.+222    	; 0x4f2 <DIO_voidSetPinDirection+0x100>
		switch(Copy_u8PortID){
     414:	89 81       	ldd	r24, Y+1	; 0x01
     416:	28 2f       	mov	r18, r24
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	3f 83       	std	Y+7, r19	; 0x07
     41c:	2e 83       	std	Y+6, r18	; 0x06
     41e:	8e 81       	ldd	r24, Y+6	; 0x06
     420:	9f 81       	ldd	r25, Y+7	; 0x07
     422:	81 30       	cpi	r24, 0x01	; 1
     424:	91 05       	cpc	r25, r1
     426:	49 f1       	breq	.+82     	; 0x47a <DIO_voidSetPinDirection+0x88>
     428:	2e 81       	ldd	r18, Y+6	; 0x06
     42a:	3f 81       	ldd	r19, Y+7	; 0x07
     42c:	22 30       	cpi	r18, 0x02	; 2
     42e:	31 05       	cpc	r19, r1
     430:	2c f4       	brge	.+10     	; 0x43c <DIO_voidSetPinDirection+0x4a>
     432:	8e 81       	ldd	r24, Y+6	; 0x06
     434:	9f 81       	ldd	r25, Y+7	; 0x07
     436:	00 97       	sbiw	r24, 0x00	; 0
     438:	61 f0       	breq	.+24     	; 0x452 <DIO_voidSetPinDirection+0x60>
     43a:	d2 c0       	rjmp	.+420    	; 0x5e0 <DIO_voidSetPinDirection+0x1ee>
     43c:	2e 81       	ldd	r18, Y+6	; 0x06
     43e:	3f 81       	ldd	r19, Y+7	; 0x07
     440:	22 30       	cpi	r18, 0x02	; 2
     442:	31 05       	cpc	r19, r1
     444:	71 f1       	breq	.+92     	; 0x4a2 <DIO_voidSetPinDirection+0xb0>
     446:	8e 81       	ldd	r24, Y+6	; 0x06
     448:	9f 81       	ldd	r25, Y+7	; 0x07
     44a:	83 30       	cpi	r24, 0x03	; 3
     44c:	91 05       	cpc	r25, r1
     44e:	e9 f1       	breq	.+122    	; 0x4ca <DIO_voidSetPinDirection+0xd8>
     450:	c7 c0       	rjmp	.+398    	; 0x5e0 <DIO_voidSetPinDirection+0x1ee>
			case PORTA/*Port A*/: SetBit(DDRA_REG,Copy_u8PinID);break;
     452:	aa e3       	ldi	r26, 0x3A	; 58
     454:	b0 e0       	ldi	r27, 0x00	; 0
     456:	ea e3       	ldi	r30, 0x3A	; 58
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	80 81       	ld	r24, Z
     45c:	48 2f       	mov	r20, r24
     45e:	8a 81       	ldd	r24, Y+2	; 0x02
     460:	28 2f       	mov	r18, r24
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	02 2e       	mov	r0, r18
     46a:	02 c0       	rjmp	.+4      	; 0x470 <DIO_voidSetPinDirection+0x7e>
     46c:	88 0f       	add	r24, r24
     46e:	99 1f       	adc	r25, r25
     470:	0a 94       	dec	r0
     472:	e2 f7       	brpl	.-8      	; 0x46c <DIO_voidSetPinDirection+0x7a>
     474:	84 2b       	or	r24, r20
     476:	8c 93       	st	X, r24
     478:	b3 c0       	rjmp	.+358    	; 0x5e0 <DIO_voidSetPinDirection+0x1ee>
			case PORTB/*Port B*/: SetBit(DDRB_REG,Copy_u8PinID);break;
     47a:	a7 e3       	ldi	r26, 0x37	; 55
     47c:	b0 e0       	ldi	r27, 0x00	; 0
     47e:	e7 e3       	ldi	r30, 0x37	; 55
     480:	f0 e0       	ldi	r31, 0x00	; 0
     482:	80 81       	ld	r24, Z
     484:	48 2f       	mov	r20, r24
     486:	8a 81       	ldd	r24, Y+2	; 0x02
     488:	28 2f       	mov	r18, r24
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	02 2e       	mov	r0, r18
     492:	02 c0       	rjmp	.+4      	; 0x498 <DIO_voidSetPinDirection+0xa6>
     494:	88 0f       	add	r24, r24
     496:	99 1f       	adc	r25, r25
     498:	0a 94       	dec	r0
     49a:	e2 f7       	brpl	.-8      	; 0x494 <DIO_voidSetPinDirection+0xa2>
     49c:	84 2b       	or	r24, r20
     49e:	8c 93       	st	X, r24
     4a0:	9f c0       	rjmp	.+318    	; 0x5e0 <DIO_voidSetPinDirection+0x1ee>
			case PORTC/*Port C*/: SetBit(DDRC_REG,Copy_u8PinID);break;
     4a2:	a4 e3       	ldi	r26, 0x34	; 52
     4a4:	b0 e0       	ldi	r27, 0x00	; 0
     4a6:	e4 e3       	ldi	r30, 0x34	; 52
     4a8:	f0 e0       	ldi	r31, 0x00	; 0
     4aa:	80 81       	ld	r24, Z
     4ac:	48 2f       	mov	r20, r24
     4ae:	8a 81       	ldd	r24, Y+2	; 0x02
     4b0:	28 2f       	mov	r18, r24
     4b2:	30 e0       	ldi	r19, 0x00	; 0
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	02 2e       	mov	r0, r18
     4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <DIO_voidSetPinDirection+0xce>
     4bc:	88 0f       	add	r24, r24
     4be:	99 1f       	adc	r25, r25
     4c0:	0a 94       	dec	r0
     4c2:	e2 f7       	brpl	.-8      	; 0x4bc <DIO_voidSetPinDirection+0xca>
     4c4:	84 2b       	or	r24, r20
     4c6:	8c 93       	st	X, r24
     4c8:	8b c0       	rjmp	.+278    	; 0x5e0 <DIO_voidSetPinDirection+0x1ee>
			case PORTD/*Port D*/: SetBit(DDRD_REG,Copy_u8PinID);break;
     4ca:	a1 e3       	ldi	r26, 0x31	; 49
     4cc:	b0 e0       	ldi	r27, 0x00	; 0
     4ce:	e1 e3       	ldi	r30, 0x31	; 49
     4d0:	f0 e0       	ldi	r31, 0x00	; 0
     4d2:	80 81       	ld	r24, Z
     4d4:	48 2f       	mov	r20, r24
     4d6:	8a 81       	ldd	r24, Y+2	; 0x02
     4d8:	28 2f       	mov	r18, r24
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	02 2e       	mov	r0, r18
     4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <DIO_voidSetPinDirection+0xf6>
     4e4:	88 0f       	add	r24, r24
     4e6:	99 1f       	adc	r25, r25
     4e8:	0a 94       	dec	r0
     4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <DIO_voidSetPinDirection+0xf2>
     4ec:	84 2b       	or	r24, r20
     4ee:	8c 93       	st	X, r24
     4f0:	77 c0       	rjmp	.+238    	; 0x5e0 <DIO_voidSetPinDirection+0x1ee>
		}
	}
	else if(Copy_u8PinDir==PIN_INPUT){ //input
     4f2:	8b 81       	ldd	r24, Y+3	; 0x03
     4f4:	88 23       	and	r24, r24
     4f6:	09 f0       	breq	.+2      	; 0x4fa <DIO_voidSetPinDirection+0x108>
     4f8:	73 c0       	rjmp	.+230    	; 0x5e0 <DIO_voidSetPinDirection+0x1ee>
		switch(Copy_u8PortID){
     4fa:	89 81       	ldd	r24, Y+1	; 0x01
     4fc:	28 2f       	mov	r18, r24
     4fe:	30 e0       	ldi	r19, 0x00	; 0
     500:	3d 83       	std	Y+5, r19	; 0x05
     502:	2c 83       	std	Y+4, r18	; 0x04
     504:	8c 81       	ldd	r24, Y+4	; 0x04
     506:	9d 81       	ldd	r25, Y+5	; 0x05
     508:	81 30       	cpi	r24, 0x01	; 1
     50a:	91 05       	cpc	r25, r1
     50c:	59 f1       	breq	.+86     	; 0x564 <DIO_voidSetPinDirection+0x172>
     50e:	2c 81       	ldd	r18, Y+4	; 0x04
     510:	3d 81       	ldd	r19, Y+5	; 0x05
     512:	22 30       	cpi	r18, 0x02	; 2
     514:	31 05       	cpc	r19, r1
     516:	2c f4       	brge	.+10     	; 0x522 <DIO_voidSetPinDirection+0x130>
     518:	8c 81       	ldd	r24, Y+4	; 0x04
     51a:	9d 81       	ldd	r25, Y+5	; 0x05
     51c:	00 97       	sbiw	r24, 0x00	; 0
     51e:	69 f0       	breq	.+26     	; 0x53a <DIO_voidSetPinDirection+0x148>
     520:	5f c0       	rjmp	.+190    	; 0x5e0 <DIO_voidSetPinDirection+0x1ee>
     522:	2c 81       	ldd	r18, Y+4	; 0x04
     524:	3d 81       	ldd	r19, Y+5	; 0x05
     526:	22 30       	cpi	r18, 0x02	; 2
     528:	31 05       	cpc	r19, r1
     52a:	89 f1       	breq	.+98     	; 0x58e <DIO_voidSetPinDirection+0x19c>
     52c:	8c 81       	ldd	r24, Y+4	; 0x04
     52e:	9d 81       	ldd	r25, Y+5	; 0x05
     530:	83 30       	cpi	r24, 0x03	; 3
     532:	91 05       	cpc	r25, r1
     534:	09 f4       	brne	.+2      	; 0x538 <DIO_voidSetPinDirection+0x146>
     536:	40 c0       	rjmp	.+128    	; 0x5b8 <DIO_voidSetPinDirection+0x1c6>
     538:	53 c0       	rjmp	.+166    	; 0x5e0 <DIO_voidSetPinDirection+0x1ee>
			case PORTA/*Port A*/: ClrBit(DDRA_REG,Copy_u8PinID);break;
     53a:	aa e3       	ldi	r26, 0x3A	; 58
     53c:	b0 e0       	ldi	r27, 0x00	; 0
     53e:	ea e3       	ldi	r30, 0x3A	; 58
     540:	f0 e0       	ldi	r31, 0x00	; 0
     542:	80 81       	ld	r24, Z
     544:	48 2f       	mov	r20, r24
     546:	8a 81       	ldd	r24, Y+2	; 0x02
     548:	28 2f       	mov	r18, r24
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	02 2e       	mov	r0, r18
     552:	02 c0       	rjmp	.+4      	; 0x558 <DIO_voidSetPinDirection+0x166>
     554:	88 0f       	add	r24, r24
     556:	99 1f       	adc	r25, r25
     558:	0a 94       	dec	r0
     55a:	e2 f7       	brpl	.-8      	; 0x554 <DIO_voidSetPinDirection+0x162>
     55c:	80 95       	com	r24
     55e:	84 23       	and	r24, r20
     560:	8c 93       	st	X, r24
     562:	3e c0       	rjmp	.+124    	; 0x5e0 <DIO_voidSetPinDirection+0x1ee>
			case PORTB/*Port B*/: ClrBit(DDRB_REG,Copy_u8PinID);break;
     564:	a7 e3       	ldi	r26, 0x37	; 55
     566:	b0 e0       	ldi	r27, 0x00	; 0
     568:	e7 e3       	ldi	r30, 0x37	; 55
     56a:	f0 e0       	ldi	r31, 0x00	; 0
     56c:	80 81       	ld	r24, Z
     56e:	48 2f       	mov	r20, r24
     570:	8a 81       	ldd	r24, Y+2	; 0x02
     572:	28 2f       	mov	r18, r24
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	02 2e       	mov	r0, r18
     57c:	02 c0       	rjmp	.+4      	; 0x582 <DIO_voidSetPinDirection+0x190>
     57e:	88 0f       	add	r24, r24
     580:	99 1f       	adc	r25, r25
     582:	0a 94       	dec	r0
     584:	e2 f7       	brpl	.-8      	; 0x57e <DIO_voidSetPinDirection+0x18c>
     586:	80 95       	com	r24
     588:	84 23       	and	r24, r20
     58a:	8c 93       	st	X, r24
     58c:	29 c0       	rjmp	.+82     	; 0x5e0 <DIO_voidSetPinDirection+0x1ee>
			case PORTC/*Port C*/: ClrBit(DDRC_REG,Copy_u8PinID);break;
     58e:	a4 e3       	ldi	r26, 0x34	; 52
     590:	b0 e0       	ldi	r27, 0x00	; 0
     592:	e4 e3       	ldi	r30, 0x34	; 52
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	80 81       	ld	r24, Z
     598:	48 2f       	mov	r20, r24
     59a:	8a 81       	ldd	r24, Y+2	; 0x02
     59c:	28 2f       	mov	r18, r24
     59e:	30 e0       	ldi	r19, 0x00	; 0
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	02 2e       	mov	r0, r18
     5a6:	02 c0       	rjmp	.+4      	; 0x5ac <DIO_voidSetPinDirection+0x1ba>
     5a8:	88 0f       	add	r24, r24
     5aa:	99 1f       	adc	r25, r25
     5ac:	0a 94       	dec	r0
     5ae:	e2 f7       	brpl	.-8      	; 0x5a8 <DIO_voidSetPinDirection+0x1b6>
     5b0:	80 95       	com	r24
     5b2:	84 23       	and	r24, r20
     5b4:	8c 93       	st	X, r24
     5b6:	14 c0       	rjmp	.+40     	; 0x5e0 <DIO_voidSetPinDirection+0x1ee>
			case PORTD/*Port D*/: ClrBit(DDRD_REG,Copy_u8PinID);break;
     5b8:	a1 e3       	ldi	r26, 0x31	; 49
     5ba:	b0 e0       	ldi	r27, 0x00	; 0
     5bc:	e1 e3       	ldi	r30, 0x31	; 49
     5be:	f0 e0       	ldi	r31, 0x00	; 0
     5c0:	80 81       	ld	r24, Z
     5c2:	48 2f       	mov	r20, r24
     5c4:	8a 81       	ldd	r24, Y+2	; 0x02
     5c6:	28 2f       	mov	r18, r24
     5c8:	30 e0       	ldi	r19, 0x00	; 0
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	02 2e       	mov	r0, r18
     5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <DIO_voidSetPinDirection+0x1e4>
     5d2:	88 0f       	add	r24, r24
     5d4:	99 1f       	adc	r25, r25
     5d6:	0a 94       	dec	r0
     5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <DIO_voidSetPinDirection+0x1e0>
     5da:	80 95       	com	r24
     5dc:	84 23       	and	r24, r20
     5de:	8c 93       	st	X, r24
		}
	}
}
     5e0:	27 96       	adiw	r28, 0x07	; 7
     5e2:	0f b6       	in	r0, 0x3f	; 63
     5e4:	f8 94       	cli
     5e6:	de bf       	out	0x3e, r29	; 62
     5e8:	0f be       	out	0x3f, r0	; 63
     5ea:	cd bf       	out	0x3d, r28	; 61
     5ec:	cf 91       	pop	r28
     5ee:	df 91       	pop	r29
     5f0:	08 95       	ret

000005f2 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
     5f2:	df 93       	push	r29
     5f4:	cf 93       	push	r28
     5f6:	cd b7       	in	r28, 0x3d	; 61
     5f8:	de b7       	in	r29, 0x3e	; 62
     5fa:	27 97       	sbiw	r28, 0x07	; 7
     5fc:	0f b6       	in	r0, 0x3f	; 63
     5fe:	f8 94       	cli
     600:	de bf       	out	0x3e, r29	; 62
     602:	0f be       	out	0x3f, r0	; 63
     604:	cd bf       	out	0x3d, r28	; 61
     606:	89 83       	std	Y+1, r24	; 0x01
     608:	6a 83       	std	Y+2, r22	; 0x02
     60a:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinValue==PIN_HIGH){      //high
     60c:	8b 81       	ldd	r24, Y+3	; 0x03
     60e:	81 30       	cpi	r24, 0x01	; 1
     610:	09 f0       	breq	.+2      	; 0x614 <DIO_voidSetPinValue+0x22>
     612:	6f c0       	rjmp	.+222    	; 0x6f2 <DIO_voidSetPinValue+0x100>
		switch(Copy_u8PortID){
     614:	89 81       	ldd	r24, Y+1	; 0x01
     616:	28 2f       	mov	r18, r24
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	3f 83       	std	Y+7, r19	; 0x07
     61c:	2e 83       	std	Y+6, r18	; 0x06
     61e:	8e 81       	ldd	r24, Y+6	; 0x06
     620:	9f 81       	ldd	r25, Y+7	; 0x07
     622:	81 30       	cpi	r24, 0x01	; 1
     624:	91 05       	cpc	r25, r1
     626:	49 f1       	breq	.+82     	; 0x67a <DIO_voidSetPinValue+0x88>
     628:	2e 81       	ldd	r18, Y+6	; 0x06
     62a:	3f 81       	ldd	r19, Y+7	; 0x07
     62c:	22 30       	cpi	r18, 0x02	; 2
     62e:	31 05       	cpc	r19, r1
     630:	2c f4       	brge	.+10     	; 0x63c <DIO_voidSetPinValue+0x4a>
     632:	8e 81       	ldd	r24, Y+6	; 0x06
     634:	9f 81       	ldd	r25, Y+7	; 0x07
     636:	00 97       	sbiw	r24, 0x00	; 0
     638:	61 f0       	breq	.+24     	; 0x652 <DIO_voidSetPinValue+0x60>
     63a:	d2 c0       	rjmp	.+420    	; 0x7e0 <DIO_voidSetPinValue+0x1ee>
     63c:	2e 81       	ldd	r18, Y+6	; 0x06
     63e:	3f 81       	ldd	r19, Y+7	; 0x07
     640:	22 30       	cpi	r18, 0x02	; 2
     642:	31 05       	cpc	r19, r1
     644:	71 f1       	breq	.+92     	; 0x6a2 <DIO_voidSetPinValue+0xb0>
     646:	8e 81       	ldd	r24, Y+6	; 0x06
     648:	9f 81       	ldd	r25, Y+7	; 0x07
     64a:	83 30       	cpi	r24, 0x03	; 3
     64c:	91 05       	cpc	r25, r1
     64e:	e9 f1       	breq	.+122    	; 0x6ca <DIO_voidSetPinValue+0xd8>
     650:	c7 c0       	rjmp	.+398    	; 0x7e0 <DIO_voidSetPinValue+0x1ee>
			case PORTA/*Port A*/: SetBit(PORTA_REG,Copy_u8PinID);break;
     652:	ab e3       	ldi	r26, 0x3B	; 59
     654:	b0 e0       	ldi	r27, 0x00	; 0
     656:	eb e3       	ldi	r30, 0x3B	; 59
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	80 81       	ld	r24, Z
     65c:	48 2f       	mov	r20, r24
     65e:	8a 81       	ldd	r24, Y+2	; 0x02
     660:	28 2f       	mov	r18, r24
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	02 2e       	mov	r0, r18
     66a:	02 c0       	rjmp	.+4      	; 0x670 <DIO_voidSetPinValue+0x7e>
     66c:	88 0f       	add	r24, r24
     66e:	99 1f       	adc	r25, r25
     670:	0a 94       	dec	r0
     672:	e2 f7       	brpl	.-8      	; 0x66c <DIO_voidSetPinValue+0x7a>
     674:	84 2b       	or	r24, r20
     676:	8c 93       	st	X, r24
     678:	b3 c0       	rjmp	.+358    	; 0x7e0 <DIO_voidSetPinValue+0x1ee>
			case PORTB/*Port B*/: SetBit(PORTB_REG,Copy_u8PinID);break;
     67a:	a8 e3       	ldi	r26, 0x38	; 56
     67c:	b0 e0       	ldi	r27, 0x00	; 0
     67e:	e8 e3       	ldi	r30, 0x38	; 56
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	80 81       	ld	r24, Z
     684:	48 2f       	mov	r20, r24
     686:	8a 81       	ldd	r24, Y+2	; 0x02
     688:	28 2f       	mov	r18, r24
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	02 2e       	mov	r0, r18
     692:	02 c0       	rjmp	.+4      	; 0x698 <DIO_voidSetPinValue+0xa6>
     694:	88 0f       	add	r24, r24
     696:	99 1f       	adc	r25, r25
     698:	0a 94       	dec	r0
     69a:	e2 f7       	brpl	.-8      	; 0x694 <DIO_voidSetPinValue+0xa2>
     69c:	84 2b       	or	r24, r20
     69e:	8c 93       	st	X, r24
     6a0:	9f c0       	rjmp	.+318    	; 0x7e0 <DIO_voidSetPinValue+0x1ee>
			case PORTC/*Port C*/: SetBit(PORTC_REG,Copy_u8PinID);break;
     6a2:	a5 e3       	ldi	r26, 0x35	; 53
     6a4:	b0 e0       	ldi	r27, 0x00	; 0
     6a6:	e5 e3       	ldi	r30, 0x35	; 53
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	80 81       	ld	r24, Z
     6ac:	48 2f       	mov	r20, r24
     6ae:	8a 81       	ldd	r24, Y+2	; 0x02
     6b0:	28 2f       	mov	r18, r24
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	02 2e       	mov	r0, r18
     6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <DIO_voidSetPinValue+0xce>
     6bc:	88 0f       	add	r24, r24
     6be:	99 1f       	adc	r25, r25
     6c0:	0a 94       	dec	r0
     6c2:	e2 f7       	brpl	.-8      	; 0x6bc <DIO_voidSetPinValue+0xca>
     6c4:	84 2b       	or	r24, r20
     6c6:	8c 93       	st	X, r24
     6c8:	8b c0       	rjmp	.+278    	; 0x7e0 <DIO_voidSetPinValue+0x1ee>
			case PORTD/*Port D*/: SetBit(PORTD_REG,Copy_u8PinID);break;
     6ca:	a2 e3       	ldi	r26, 0x32	; 50
     6cc:	b0 e0       	ldi	r27, 0x00	; 0
     6ce:	e2 e3       	ldi	r30, 0x32	; 50
     6d0:	f0 e0       	ldi	r31, 0x00	; 0
     6d2:	80 81       	ld	r24, Z
     6d4:	48 2f       	mov	r20, r24
     6d6:	8a 81       	ldd	r24, Y+2	; 0x02
     6d8:	28 2f       	mov	r18, r24
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	02 2e       	mov	r0, r18
     6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <DIO_voidSetPinValue+0xf6>
     6e4:	88 0f       	add	r24, r24
     6e6:	99 1f       	adc	r25, r25
     6e8:	0a 94       	dec	r0
     6ea:	e2 f7       	brpl	.-8      	; 0x6e4 <DIO_voidSetPinValue+0xf2>
     6ec:	84 2b       	or	r24, r20
     6ee:	8c 93       	st	X, r24
     6f0:	77 c0       	rjmp	.+238    	; 0x7e0 <DIO_voidSetPinValue+0x1ee>
		}
	}
	else if(Copy_u8PinValue==PIN_LOW){  //low
     6f2:	8b 81       	ldd	r24, Y+3	; 0x03
     6f4:	88 23       	and	r24, r24
     6f6:	09 f0       	breq	.+2      	; 0x6fa <DIO_voidSetPinValue+0x108>
     6f8:	73 c0       	rjmp	.+230    	; 0x7e0 <DIO_voidSetPinValue+0x1ee>
		switch(Copy_u8PortID){
     6fa:	89 81       	ldd	r24, Y+1	; 0x01
     6fc:	28 2f       	mov	r18, r24
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	3d 83       	std	Y+5, r19	; 0x05
     702:	2c 83       	std	Y+4, r18	; 0x04
     704:	8c 81       	ldd	r24, Y+4	; 0x04
     706:	9d 81       	ldd	r25, Y+5	; 0x05
     708:	81 30       	cpi	r24, 0x01	; 1
     70a:	91 05       	cpc	r25, r1
     70c:	59 f1       	breq	.+86     	; 0x764 <DIO_voidSetPinValue+0x172>
     70e:	2c 81       	ldd	r18, Y+4	; 0x04
     710:	3d 81       	ldd	r19, Y+5	; 0x05
     712:	22 30       	cpi	r18, 0x02	; 2
     714:	31 05       	cpc	r19, r1
     716:	2c f4       	brge	.+10     	; 0x722 <DIO_voidSetPinValue+0x130>
     718:	8c 81       	ldd	r24, Y+4	; 0x04
     71a:	9d 81       	ldd	r25, Y+5	; 0x05
     71c:	00 97       	sbiw	r24, 0x00	; 0
     71e:	69 f0       	breq	.+26     	; 0x73a <DIO_voidSetPinValue+0x148>
     720:	5f c0       	rjmp	.+190    	; 0x7e0 <DIO_voidSetPinValue+0x1ee>
     722:	2c 81       	ldd	r18, Y+4	; 0x04
     724:	3d 81       	ldd	r19, Y+5	; 0x05
     726:	22 30       	cpi	r18, 0x02	; 2
     728:	31 05       	cpc	r19, r1
     72a:	89 f1       	breq	.+98     	; 0x78e <DIO_voidSetPinValue+0x19c>
     72c:	8c 81       	ldd	r24, Y+4	; 0x04
     72e:	9d 81       	ldd	r25, Y+5	; 0x05
     730:	83 30       	cpi	r24, 0x03	; 3
     732:	91 05       	cpc	r25, r1
     734:	09 f4       	brne	.+2      	; 0x738 <DIO_voidSetPinValue+0x146>
     736:	40 c0       	rjmp	.+128    	; 0x7b8 <DIO_voidSetPinValue+0x1c6>
     738:	53 c0       	rjmp	.+166    	; 0x7e0 <DIO_voidSetPinValue+0x1ee>
			case PORTA/*Port A*/: ClrBit(PORTA_REG,Copy_u8PinID);break;
     73a:	ab e3       	ldi	r26, 0x3B	; 59
     73c:	b0 e0       	ldi	r27, 0x00	; 0
     73e:	eb e3       	ldi	r30, 0x3B	; 59
     740:	f0 e0       	ldi	r31, 0x00	; 0
     742:	80 81       	ld	r24, Z
     744:	48 2f       	mov	r20, r24
     746:	8a 81       	ldd	r24, Y+2	; 0x02
     748:	28 2f       	mov	r18, r24
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	02 2e       	mov	r0, r18
     752:	02 c0       	rjmp	.+4      	; 0x758 <DIO_voidSetPinValue+0x166>
     754:	88 0f       	add	r24, r24
     756:	99 1f       	adc	r25, r25
     758:	0a 94       	dec	r0
     75a:	e2 f7       	brpl	.-8      	; 0x754 <DIO_voidSetPinValue+0x162>
     75c:	80 95       	com	r24
     75e:	84 23       	and	r24, r20
     760:	8c 93       	st	X, r24
     762:	3e c0       	rjmp	.+124    	; 0x7e0 <DIO_voidSetPinValue+0x1ee>
			case PORTB/*Port B*/: ClrBit(PORTB_REG,Copy_u8PinID);break;
     764:	a8 e3       	ldi	r26, 0x38	; 56
     766:	b0 e0       	ldi	r27, 0x00	; 0
     768:	e8 e3       	ldi	r30, 0x38	; 56
     76a:	f0 e0       	ldi	r31, 0x00	; 0
     76c:	80 81       	ld	r24, Z
     76e:	48 2f       	mov	r20, r24
     770:	8a 81       	ldd	r24, Y+2	; 0x02
     772:	28 2f       	mov	r18, r24
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	02 2e       	mov	r0, r18
     77c:	02 c0       	rjmp	.+4      	; 0x782 <DIO_voidSetPinValue+0x190>
     77e:	88 0f       	add	r24, r24
     780:	99 1f       	adc	r25, r25
     782:	0a 94       	dec	r0
     784:	e2 f7       	brpl	.-8      	; 0x77e <DIO_voidSetPinValue+0x18c>
     786:	80 95       	com	r24
     788:	84 23       	and	r24, r20
     78a:	8c 93       	st	X, r24
     78c:	29 c0       	rjmp	.+82     	; 0x7e0 <DIO_voidSetPinValue+0x1ee>
			case PORTC/*Port C*/: ClrBit(PORTC_REG,Copy_u8PinID);break;
     78e:	a5 e3       	ldi	r26, 0x35	; 53
     790:	b0 e0       	ldi	r27, 0x00	; 0
     792:	e5 e3       	ldi	r30, 0x35	; 53
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	80 81       	ld	r24, Z
     798:	48 2f       	mov	r20, r24
     79a:	8a 81       	ldd	r24, Y+2	; 0x02
     79c:	28 2f       	mov	r18, r24
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	02 2e       	mov	r0, r18
     7a6:	02 c0       	rjmp	.+4      	; 0x7ac <DIO_voidSetPinValue+0x1ba>
     7a8:	88 0f       	add	r24, r24
     7aa:	99 1f       	adc	r25, r25
     7ac:	0a 94       	dec	r0
     7ae:	e2 f7       	brpl	.-8      	; 0x7a8 <DIO_voidSetPinValue+0x1b6>
     7b0:	80 95       	com	r24
     7b2:	84 23       	and	r24, r20
     7b4:	8c 93       	st	X, r24
     7b6:	14 c0       	rjmp	.+40     	; 0x7e0 <DIO_voidSetPinValue+0x1ee>
			case PORTD/*Port D*/: ClrBit(PORTD_REG,Copy_u8PinID);break;
     7b8:	a2 e3       	ldi	r26, 0x32	; 50
     7ba:	b0 e0       	ldi	r27, 0x00	; 0
     7bc:	e2 e3       	ldi	r30, 0x32	; 50
     7be:	f0 e0       	ldi	r31, 0x00	; 0
     7c0:	80 81       	ld	r24, Z
     7c2:	48 2f       	mov	r20, r24
     7c4:	8a 81       	ldd	r24, Y+2	; 0x02
     7c6:	28 2f       	mov	r18, r24
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	02 2e       	mov	r0, r18
     7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <DIO_voidSetPinValue+0x1e4>
     7d2:	88 0f       	add	r24, r24
     7d4:	99 1f       	adc	r25, r25
     7d6:	0a 94       	dec	r0
     7d8:	e2 f7       	brpl	.-8      	; 0x7d2 <DIO_voidSetPinValue+0x1e0>
     7da:	80 95       	com	r24
     7dc:	84 23       	and	r24, r20
     7de:	8c 93       	st	X, r24
		}
	}	
}
     7e0:	27 96       	adiw	r28, 0x07	; 7
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	f8 94       	cli
     7e6:	de bf       	out	0x3e, r29	; 62
     7e8:	0f be       	out	0x3f, r0	; 63
     7ea:	cd bf       	out	0x3d, r28	; 61
     7ec:	cf 91       	pop	r28
     7ee:	df 91       	pop	r29
     7f0:	08 95       	ret

000007f2 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(u8 Copy_u8PortID,u8 Copy_u8PortDir){
     7f2:	df 93       	push	r29
     7f4:	cf 93       	push	r28
     7f6:	00 d0       	rcall	.+0      	; 0x7f8 <DIO_voidSetPortDirection+0x6>
     7f8:	00 d0       	rcall	.+0      	; 0x7fa <DIO_voidSetPortDirection+0x8>
     7fa:	cd b7       	in	r28, 0x3d	; 61
     7fc:	de b7       	in	r29, 0x3e	; 62
     7fe:	89 83       	std	Y+1, r24	; 0x01
     800:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortID){
     802:	89 81       	ldd	r24, Y+1	; 0x01
     804:	28 2f       	mov	r18, r24
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	3c 83       	std	Y+4, r19	; 0x04
     80a:	2b 83       	std	Y+3, r18	; 0x03
     80c:	8b 81       	ldd	r24, Y+3	; 0x03
     80e:	9c 81       	ldd	r25, Y+4	; 0x04
     810:	81 30       	cpi	r24, 0x01	; 1
     812:	91 05       	cpc	r25, r1
     814:	d1 f0       	breq	.+52     	; 0x84a <DIO_voidSetPortDirection+0x58>
     816:	2b 81       	ldd	r18, Y+3	; 0x03
     818:	3c 81       	ldd	r19, Y+4	; 0x04
     81a:	22 30       	cpi	r18, 0x02	; 2
     81c:	31 05       	cpc	r19, r1
     81e:	2c f4       	brge	.+10     	; 0x82a <DIO_voidSetPortDirection+0x38>
     820:	8b 81       	ldd	r24, Y+3	; 0x03
     822:	9c 81       	ldd	r25, Y+4	; 0x04
     824:	00 97       	sbiw	r24, 0x00	; 0
     826:	61 f0       	breq	.+24     	; 0x840 <DIO_voidSetPortDirection+0x4e>
     828:	1e c0       	rjmp	.+60     	; 0x866 <__stack+0x7>
     82a:	2b 81       	ldd	r18, Y+3	; 0x03
     82c:	3c 81       	ldd	r19, Y+4	; 0x04
     82e:	22 30       	cpi	r18, 0x02	; 2
     830:	31 05       	cpc	r19, r1
     832:	81 f0       	breq	.+32     	; 0x854 <DIO_voidSetPortDirection+0x62>
     834:	8b 81       	ldd	r24, Y+3	; 0x03
     836:	9c 81       	ldd	r25, Y+4	; 0x04
     838:	83 30       	cpi	r24, 0x03	; 3
     83a:	91 05       	cpc	r25, r1
     83c:	81 f0       	breq	.+32     	; 0x85e <DIO_voidSetPortDirection+0x6c>
     83e:	13 c0       	rjmp	.+38     	; 0x866 <__stack+0x7>
		case PORTA/*Port A*/: DDRA_REG=Copy_u8PortDir;break;
     840:	ea e3       	ldi	r30, 0x3A	; 58
     842:	f0 e0       	ldi	r31, 0x00	; 0
     844:	8a 81       	ldd	r24, Y+2	; 0x02
     846:	80 83       	st	Z, r24
     848:	0e c0       	rjmp	.+28     	; 0x866 <__stack+0x7>
		case PORTB/*Port B*/: DDRB_REG=Copy_u8PortDir;break;
     84a:	e7 e3       	ldi	r30, 0x37	; 55
     84c:	f0 e0       	ldi	r31, 0x00	; 0
     84e:	8a 81       	ldd	r24, Y+2	; 0x02
     850:	80 83       	st	Z, r24
     852:	09 c0       	rjmp	.+18     	; 0x866 <__stack+0x7>
		case PORTC/*Port C*/: DDRC_REG=Copy_u8PortDir;break;
     854:	e4 e3       	ldi	r30, 0x34	; 52
     856:	f0 e0       	ldi	r31, 0x00	; 0
     858:	8a 81       	ldd	r24, Y+2	; 0x02
     85a:	80 83       	st	Z, r24
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
		case PORTD/*Port D*/: DDRD_REG=Copy_u8PortDir;break;
     85e:	e1 e3       	ldi	r30, 0x31	; 49
     860:	f0 e0       	ldi	r31, 0x00	; 0
     862:	8a 81       	ldd	r24, Y+2	; 0x02
     864:	80 83       	st	Z, r24
	}
}
     866:	0f 90       	pop	r0
     868:	0f 90       	pop	r0
     86a:	0f 90       	pop	r0
     86c:	0f 90       	pop	r0
     86e:	cf 91       	pop	r28
     870:	df 91       	pop	r29
     872:	08 95       	ret

00000874 <DIO_voidSetAllPortInput>:

void DIO_voidSetAllPortInput(u8 Copy_u8PortID){
     874:	df 93       	push	r29
     876:	cf 93       	push	r28
     878:	00 d0       	rcall	.+0      	; 0x87a <DIO_voidSetAllPortInput+0x6>
     87a:	0f 92       	push	r0
     87c:	cd b7       	in	r28, 0x3d	; 61
     87e:	de b7       	in	r29, 0x3e	; 62
     880:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID){
     882:	89 81       	ldd	r24, Y+1	; 0x01
     884:	28 2f       	mov	r18, r24
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	3b 83       	std	Y+3, r19	; 0x03
     88a:	2a 83       	std	Y+2, r18	; 0x02
     88c:	8a 81       	ldd	r24, Y+2	; 0x02
     88e:	9b 81       	ldd	r25, Y+3	; 0x03
     890:	81 30       	cpi	r24, 0x01	; 1
     892:	91 05       	cpc	r25, r1
     894:	c9 f0       	breq	.+50     	; 0x8c8 <DIO_voidSetAllPortInput+0x54>
     896:	2a 81       	ldd	r18, Y+2	; 0x02
     898:	3b 81       	ldd	r19, Y+3	; 0x03
     89a:	22 30       	cpi	r18, 0x02	; 2
     89c:	31 05       	cpc	r19, r1
     89e:	2c f4       	brge	.+10     	; 0x8aa <DIO_voidSetAllPortInput+0x36>
     8a0:	8a 81       	ldd	r24, Y+2	; 0x02
     8a2:	9b 81       	ldd	r25, Y+3	; 0x03
     8a4:	00 97       	sbiw	r24, 0x00	; 0
     8a6:	61 f0       	breq	.+24     	; 0x8c0 <DIO_voidSetAllPortInput+0x4c>
     8a8:	1a c0       	rjmp	.+52     	; 0x8de <DIO_voidSetAllPortInput+0x6a>
     8aa:	2a 81       	ldd	r18, Y+2	; 0x02
     8ac:	3b 81       	ldd	r19, Y+3	; 0x03
     8ae:	22 30       	cpi	r18, 0x02	; 2
     8b0:	31 05       	cpc	r19, r1
     8b2:	71 f0       	breq	.+28     	; 0x8d0 <DIO_voidSetAllPortInput+0x5c>
     8b4:	8a 81       	ldd	r24, Y+2	; 0x02
     8b6:	9b 81       	ldd	r25, Y+3	; 0x03
     8b8:	83 30       	cpi	r24, 0x03	; 3
     8ba:	91 05       	cpc	r25, r1
     8bc:	69 f0       	breq	.+26     	; 0x8d8 <DIO_voidSetAllPortInput+0x64>
     8be:	0f c0       	rjmp	.+30     	; 0x8de <DIO_voidSetAllPortInput+0x6a>
		case PORTA/*Port A*/: DDRA_REG=PORT_INPUT;break;
     8c0:	ea e3       	ldi	r30, 0x3A	; 58
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	10 82       	st	Z, r1
     8c6:	0b c0       	rjmp	.+22     	; 0x8de <DIO_voidSetAllPortInput+0x6a>
		case PORTB/*Port B*/: DDRB_REG=PORT_INPUT;break;
     8c8:	e7 e3       	ldi	r30, 0x37	; 55
     8ca:	f0 e0       	ldi	r31, 0x00	; 0
     8cc:	10 82       	st	Z, r1
     8ce:	07 c0       	rjmp	.+14     	; 0x8de <DIO_voidSetAllPortInput+0x6a>
		case PORTC/*Port C*/: DDRC_REG=PORT_INPUT;break;
     8d0:	e4 e3       	ldi	r30, 0x34	; 52
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	10 82       	st	Z, r1
     8d6:	03 c0       	rjmp	.+6      	; 0x8de <DIO_voidSetAllPortInput+0x6a>
		case PORTD/*Port D*/: DDRD_REG=PORT_INPUT;break;
     8d8:	e1 e3       	ldi	r30, 0x31	; 49
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	10 82       	st	Z, r1
	}
}
     8de:	0f 90       	pop	r0
     8e0:	0f 90       	pop	r0
     8e2:	0f 90       	pop	r0
     8e4:	cf 91       	pop	r28
     8e6:	df 91       	pop	r29
     8e8:	08 95       	ret

000008ea <DIO_voidSetAllPortOutput>:

void DIO_voidSetAllPortOutput(u8 Copy_u8PortID){
     8ea:	df 93       	push	r29
     8ec:	cf 93       	push	r28
     8ee:	00 d0       	rcall	.+0      	; 0x8f0 <DIO_voidSetAllPortOutput+0x6>
     8f0:	0f 92       	push	r0
     8f2:	cd b7       	in	r28, 0x3d	; 61
     8f4:	de b7       	in	r29, 0x3e	; 62
     8f6:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID){
     8f8:	89 81       	ldd	r24, Y+1	; 0x01
     8fa:	28 2f       	mov	r18, r24
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	3b 83       	std	Y+3, r19	; 0x03
     900:	2a 83       	std	Y+2, r18	; 0x02
     902:	8a 81       	ldd	r24, Y+2	; 0x02
     904:	9b 81       	ldd	r25, Y+3	; 0x03
     906:	81 30       	cpi	r24, 0x01	; 1
     908:	91 05       	cpc	r25, r1
     90a:	d1 f0       	breq	.+52     	; 0x940 <DIO_voidSetAllPortOutput+0x56>
     90c:	2a 81       	ldd	r18, Y+2	; 0x02
     90e:	3b 81       	ldd	r19, Y+3	; 0x03
     910:	22 30       	cpi	r18, 0x02	; 2
     912:	31 05       	cpc	r19, r1
     914:	2c f4       	brge	.+10     	; 0x920 <DIO_voidSetAllPortOutput+0x36>
     916:	8a 81       	ldd	r24, Y+2	; 0x02
     918:	9b 81       	ldd	r25, Y+3	; 0x03
     91a:	00 97       	sbiw	r24, 0x00	; 0
     91c:	61 f0       	breq	.+24     	; 0x936 <DIO_voidSetAllPortOutput+0x4c>
     91e:	1e c0       	rjmp	.+60     	; 0x95c <DIO_voidSetAllPortOutput+0x72>
     920:	2a 81       	ldd	r18, Y+2	; 0x02
     922:	3b 81       	ldd	r19, Y+3	; 0x03
     924:	22 30       	cpi	r18, 0x02	; 2
     926:	31 05       	cpc	r19, r1
     928:	81 f0       	breq	.+32     	; 0x94a <DIO_voidSetAllPortOutput+0x60>
     92a:	8a 81       	ldd	r24, Y+2	; 0x02
     92c:	9b 81       	ldd	r25, Y+3	; 0x03
     92e:	83 30       	cpi	r24, 0x03	; 3
     930:	91 05       	cpc	r25, r1
     932:	81 f0       	breq	.+32     	; 0x954 <DIO_voidSetAllPortOutput+0x6a>
     934:	13 c0       	rjmp	.+38     	; 0x95c <DIO_voidSetAllPortOutput+0x72>
		case PORTA/*Port A*/: DDRA_REG=PORT_OUTPUT;break;
     936:	ea e3       	ldi	r30, 0x3A	; 58
     938:	f0 e0       	ldi	r31, 0x00	; 0
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	80 83       	st	Z, r24
     93e:	0e c0       	rjmp	.+28     	; 0x95c <DIO_voidSetAllPortOutput+0x72>
		case PORTB/*Port B*/: DDRB_REG=PORT_OUTPUT;break;
     940:	e7 e3       	ldi	r30, 0x37	; 55
     942:	f0 e0       	ldi	r31, 0x00	; 0
     944:	8f ef       	ldi	r24, 0xFF	; 255
     946:	80 83       	st	Z, r24
     948:	09 c0       	rjmp	.+18     	; 0x95c <DIO_voidSetAllPortOutput+0x72>
		case PORTC/*Port C*/: DDRC_REG=PORT_OUTPUT;break;
     94a:	e4 e3       	ldi	r30, 0x34	; 52
     94c:	f0 e0       	ldi	r31, 0x00	; 0
     94e:	8f ef       	ldi	r24, 0xFF	; 255
     950:	80 83       	st	Z, r24
     952:	04 c0       	rjmp	.+8      	; 0x95c <DIO_voidSetAllPortOutput+0x72>
		case PORTD/*Port D*/: DDRD_REG=PORT_OUTPUT;break;
     954:	e1 e3       	ldi	r30, 0x31	; 49
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	8f ef       	ldi	r24, 0xFF	; 255
     95a:	80 83       	st	Z, r24
	}
}
     95c:	0f 90       	pop	r0
     95e:	0f 90       	pop	r0
     960:	0f 90       	pop	r0
     962:	cf 91       	pop	r28
     964:	df 91       	pop	r29
     966:	08 95       	ret

00000968 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 Copy_u8PortID,u8 Copy_u8PortValue){
     968:	df 93       	push	r29
     96a:	cf 93       	push	r28
     96c:	00 d0       	rcall	.+0      	; 0x96e <DIO_voidSetPortValue+0x6>
     96e:	00 d0       	rcall	.+0      	; 0x970 <DIO_voidSetPortValue+0x8>
     970:	cd b7       	in	r28, 0x3d	; 61
     972:	de b7       	in	r29, 0x3e	; 62
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortID){
     978:	89 81       	ldd	r24, Y+1	; 0x01
     97a:	28 2f       	mov	r18, r24
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	3c 83       	std	Y+4, r19	; 0x04
     980:	2b 83       	std	Y+3, r18	; 0x03
     982:	8b 81       	ldd	r24, Y+3	; 0x03
     984:	9c 81       	ldd	r25, Y+4	; 0x04
     986:	81 30       	cpi	r24, 0x01	; 1
     988:	91 05       	cpc	r25, r1
     98a:	d1 f0       	breq	.+52     	; 0x9c0 <DIO_voidSetPortValue+0x58>
     98c:	2b 81       	ldd	r18, Y+3	; 0x03
     98e:	3c 81       	ldd	r19, Y+4	; 0x04
     990:	22 30       	cpi	r18, 0x02	; 2
     992:	31 05       	cpc	r19, r1
     994:	2c f4       	brge	.+10     	; 0x9a0 <DIO_voidSetPortValue+0x38>
     996:	8b 81       	ldd	r24, Y+3	; 0x03
     998:	9c 81       	ldd	r25, Y+4	; 0x04
     99a:	00 97       	sbiw	r24, 0x00	; 0
     99c:	61 f0       	breq	.+24     	; 0x9b6 <DIO_voidSetPortValue+0x4e>
     99e:	1e c0       	rjmp	.+60     	; 0x9dc <DIO_voidSetPortValue+0x74>
     9a0:	2b 81       	ldd	r18, Y+3	; 0x03
     9a2:	3c 81       	ldd	r19, Y+4	; 0x04
     9a4:	22 30       	cpi	r18, 0x02	; 2
     9a6:	31 05       	cpc	r19, r1
     9a8:	81 f0       	breq	.+32     	; 0x9ca <DIO_voidSetPortValue+0x62>
     9aa:	8b 81       	ldd	r24, Y+3	; 0x03
     9ac:	9c 81       	ldd	r25, Y+4	; 0x04
     9ae:	83 30       	cpi	r24, 0x03	; 3
     9b0:	91 05       	cpc	r25, r1
     9b2:	81 f0       	breq	.+32     	; 0x9d4 <DIO_voidSetPortValue+0x6c>
     9b4:	13 c0       	rjmp	.+38     	; 0x9dc <DIO_voidSetPortValue+0x74>
		case PORTA/*Port A*/: PORTA_REG=Copy_u8PortValue;break;
     9b6:	eb e3       	ldi	r30, 0x3B	; 59
     9b8:	f0 e0       	ldi	r31, 0x00	; 0
     9ba:	8a 81       	ldd	r24, Y+2	; 0x02
     9bc:	80 83       	st	Z, r24
     9be:	0e c0       	rjmp	.+28     	; 0x9dc <DIO_voidSetPortValue+0x74>
		case PORTB/*Port B*/: PORTB_REG=Copy_u8PortValue;break;
     9c0:	e8 e3       	ldi	r30, 0x38	; 56
     9c2:	f0 e0       	ldi	r31, 0x00	; 0
     9c4:	8a 81       	ldd	r24, Y+2	; 0x02
     9c6:	80 83       	st	Z, r24
     9c8:	09 c0       	rjmp	.+18     	; 0x9dc <DIO_voidSetPortValue+0x74>
		case PORTC/*Port C*/: PORTC_REG=Copy_u8PortValue;break;
     9ca:	e5 e3       	ldi	r30, 0x35	; 53
     9cc:	f0 e0       	ldi	r31, 0x00	; 0
     9ce:	8a 81       	ldd	r24, Y+2	; 0x02
     9d0:	80 83       	st	Z, r24
     9d2:	04 c0       	rjmp	.+8      	; 0x9dc <DIO_voidSetPortValue+0x74>
		case PORTD/*Port D*/: PORTD_REG=Copy_u8PortValue;break;
     9d4:	e2 e3       	ldi	r30, 0x32	; 50
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	8a 81       	ldd	r24, Y+2	; 0x02
     9da:	80 83       	st	Z, r24
	}
}
     9dc:	0f 90       	pop	r0
     9de:	0f 90       	pop	r0
     9e0:	0f 90       	pop	r0
     9e2:	0f 90       	pop	r0
     9e4:	cf 91       	pop	r28
     9e6:	df 91       	pop	r29
     9e8:	08 95       	ret

000009ea <DIO_voidSetAllPortLow>:

void DIO_voidSetAllPortLow(u8 Copy_u8PortID){
     9ea:	df 93       	push	r29
     9ec:	cf 93       	push	r28
     9ee:	00 d0       	rcall	.+0      	; 0x9f0 <DIO_voidSetAllPortLow+0x6>
     9f0:	0f 92       	push	r0
     9f2:	cd b7       	in	r28, 0x3d	; 61
     9f4:	de b7       	in	r29, 0x3e	; 62
     9f6:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID){
     9f8:	89 81       	ldd	r24, Y+1	; 0x01
     9fa:	28 2f       	mov	r18, r24
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	3b 83       	std	Y+3, r19	; 0x03
     a00:	2a 83       	std	Y+2, r18	; 0x02
     a02:	8a 81       	ldd	r24, Y+2	; 0x02
     a04:	9b 81       	ldd	r25, Y+3	; 0x03
     a06:	81 30       	cpi	r24, 0x01	; 1
     a08:	91 05       	cpc	r25, r1
     a0a:	c9 f0       	breq	.+50     	; 0xa3e <DIO_voidSetAllPortLow+0x54>
     a0c:	2a 81       	ldd	r18, Y+2	; 0x02
     a0e:	3b 81       	ldd	r19, Y+3	; 0x03
     a10:	22 30       	cpi	r18, 0x02	; 2
     a12:	31 05       	cpc	r19, r1
     a14:	2c f4       	brge	.+10     	; 0xa20 <DIO_voidSetAllPortLow+0x36>
     a16:	8a 81       	ldd	r24, Y+2	; 0x02
     a18:	9b 81       	ldd	r25, Y+3	; 0x03
     a1a:	00 97       	sbiw	r24, 0x00	; 0
     a1c:	61 f0       	breq	.+24     	; 0xa36 <DIO_voidSetAllPortLow+0x4c>
     a1e:	1a c0       	rjmp	.+52     	; 0xa54 <DIO_voidSetAllPortLow+0x6a>
     a20:	2a 81       	ldd	r18, Y+2	; 0x02
     a22:	3b 81       	ldd	r19, Y+3	; 0x03
     a24:	22 30       	cpi	r18, 0x02	; 2
     a26:	31 05       	cpc	r19, r1
     a28:	71 f0       	breq	.+28     	; 0xa46 <DIO_voidSetAllPortLow+0x5c>
     a2a:	8a 81       	ldd	r24, Y+2	; 0x02
     a2c:	9b 81       	ldd	r25, Y+3	; 0x03
     a2e:	83 30       	cpi	r24, 0x03	; 3
     a30:	91 05       	cpc	r25, r1
     a32:	69 f0       	breq	.+26     	; 0xa4e <DIO_voidSetAllPortLow+0x64>
     a34:	0f c0       	rjmp	.+30     	; 0xa54 <DIO_voidSetAllPortLow+0x6a>
		case PORTA/*Port A*/: PORTA_REG=PORT_LOW;break;
     a36:	eb e3       	ldi	r30, 0x3B	; 59
     a38:	f0 e0       	ldi	r31, 0x00	; 0
     a3a:	10 82       	st	Z, r1
     a3c:	0b c0       	rjmp	.+22     	; 0xa54 <DIO_voidSetAllPortLow+0x6a>
		case PORTB/*Port B*/: PORTB_REG=PORT_LOW;break;
     a3e:	e8 e3       	ldi	r30, 0x38	; 56
     a40:	f0 e0       	ldi	r31, 0x00	; 0
     a42:	10 82       	st	Z, r1
     a44:	07 c0       	rjmp	.+14     	; 0xa54 <DIO_voidSetAllPortLow+0x6a>
		case PORTC/*Port C*/: PORTC_REG=PORT_LOW;break;
     a46:	e5 e3       	ldi	r30, 0x35	; 53
     a48:	f0 e0       	ldi	r31, 0x00	; 0
     a4a:	10 82       	st	Z, r1
     a4c:	03 c0       	rjmp	.+6      	; 0xa54 <DIO_voidSetAllPortLow+0x6a>
		case PORTD/*Port D*/: PORTD_REG=PORT_LOW;break;
     a4e:	e2 e3       	ldi	r30, 0x32	; 50
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	10 82       	st	Z, r1
	}
}
     a54:	0f 90       	pop	r0
     a56:	0f 90       	pop	r0
     a58:	0f 90       	pop	r0
     a5a:	cf 91       	pop	r28
     a5c:	df 91       	pop	r29
     a5e:	08 95       	ret

00000a60 <DIO_voidSetAllPortHigh>:

void DIO_voidSetAllPortHigh(u8 Copy_u8PortID){
     a60:	df 93       	push	r29
     a62:	cf 93       	push	r28
     a64:	00 d0       	rcall	.+0      	; 0xa66 <DIO_voidSetAllPortHigh+0x6>
     a66:	0f 92       	push	r0
     a68:	cd b7       	in	r28, 0x3d	; 61
     a6a:	de b7       	in	r29, 0x3e	; 62
     a6c:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID){
     a6e:	89 81       	ldd	r24, Y+1	; 0x01
     a70:	28 2f       	mov	r18, r24
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	3b 83       	std	Y+3, r19	; 0x03
     a76:	2a 83       	std	Y+2, r18	; 0x02
     a78:	8a 81       	ldd	r24, Y+2	; 0x02
     a7a:	9b 81       	ldd	r25, Y+3	; 0x03
     a7c:	81 30       	cpi	r24, 0x01	; 1
     a7e:	91 05       	cpc	r25, r1
     a80:	d1 f0       	breq	.+52     	; 0xab6 <DIO_voidSetAllPortHigh+0x56>
     a82:	2a 81       	ldd	r18, Y+2	; 0x02
     a84:	3b 81       	ldd	r19, Y+3	; 0x03
     a86:	22 30       	cpi	r18, 0x02	; 2
     a88:	31 05       	cpc	r19, r1
     a8a:	2c f4       	brge	.+10     	; 0xa96 <DIO_voidSetAllPortHigh+0x36>
     a8c:	8a 81       	ldd	r24, Y+2	; 0x02
     a8e:	9b 81       	ldd	r25, Y+3	; 0x03
     a90:	00 97       	sbiw	r24, 0x00	; 0
     a92:	61 f0       	breq	.+24     	; 0xaac <DIO_voidSetAllPortHigh+0x4c>
     a94:	1e c0       	rjmp	.+60     	; 0xad2 <DIO_voidSetAllPortHigh+0x72>
     a96:	2a 81       	ldd	r18, Y+2	; 0x02
     a98:	3b 81       	ldd	r19, Y+3	; 0x03
     a9a:	22 30       	cpi	r18, 0x02	; 2
     a9c:	31 05       	cpc	r19, r1
     a9e:	81 f0       	breq	.+32     	; 0xac0 <DIO_voidSetAllPortHigh+0x60>
     aa0:	8a 81       	ldd	r24, Y+2	; 0x02
     aa2:	9b 81       	ldd	r25, Y+3	; 0x03
     aa4:	83 30       	cpi	r24, 0x03	; 3
     aa6:	91 05       	cpc	r25, r1
     aa8:	81 f0       	breq	.+32     	; 0xaca <DIO_voidSetAllPortHigh+0x6a>
     aaa:	13 c0       	rjmp	.+38     	; 0xad2 <DIO_voidSetAllPortHigh+0x72>
		case PORTA/*Port A*/: PORTA_REG=PORT_HIGH;break;
     aac:	eb e3       	ldi	r30, 0x3B	; 59
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	8f ef       	ldi	r24, 0xFF	; 255
     ab2:	80 83       	st	Z, r24
     ab4:	0e c0       	rjmp	.+28     	; 0xad2 <DIO_voidSetAllPortHigh+0x72>
		case PORTB/*Port B*/: PORTB_REG=PORT_HIGH;break;
     ab6:	e8 e3       	ldi	r30, 0x38	; 56
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	8f ef       	ldi	r24, 0xFF	; 255
     abc:	80 83       	st	Z, r24
     abe:	09 c0       	rjmp	.+18     	; 0xad2 <DIO_voidSetAllPortHigh+0x72>
		case PORTC/*Port C*/: PORTC_REG=PORT_HIGH;break;
     ac0:	e5 e3       	ldi	r30, 0x35	; 53
     ac2:	f0 e0       	ldi	r31, 0x00	; 0
     ac4:	8f ef       	ldi	r24, 0xFF	; 255
     ac6:	80 83       	st	Z, r24
     ac8:	04 c0       	rjmp	.+8      	; 0xad2 <DIO_voidSetAllPortHigh+0x72>
		case PORTD/*Port D*/: PORTD_REG=PORT_HIGH;break;
     aca:	e2 e3       	ldi	r30, 0x32	; 50
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	8f ef       	ldi	r24, 0xFF	; 255
     ad0:	80 83       	st	Z, r24
	}
}
     ad2:	0f 90       	pop	r0
     ad4:	0f 90       	pop	r0
     ad6:	0f 90       	pop	r0
     ad8:	cf 91       	pop	r28
     ada:	df 91       	pop	r29
     adc:	08 95       	ret

00000ade <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID){
     ade:	df 93       	push	r29
     ae0:	cf 93       	push	r28
     ae2:	00 d0       	rcall	.+0      	; 0xae4 <DIO_u8GetPinValue+0x6>
     ae4:	00 d0       	rcall	.+0      	; 0xae6 <DIO_u8GetPinValue+0x8>
     ae6:	0f 92       	push	r0
     ae8:	cd b7       	in	r28, 0x3d	; 61
     aea:	de b7       	in	r29, 0x3e	; 62
     aec:	8a 83       	std	Y+2, r24	; 0x02
     aee:	6b 83       	std	Y+3, r22	; 0x03
	u8 value;
	switch(Copy_u8PortID){
     af0:	8a 81       	ldd	r24, Y+2	; 0x02
     af2:	28 2f       	mov	r18, r24
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	3d 83       	std	Y+5, r19	; 0x05
     af8:	2c 83       	std	Y+4, r18	; 0x04
     afa:	4c 81       	ldd	r20, Y+4	; 0x04
     afc:	5d 81       	ldd	r21, Y+5	; 0x05
     afe:	41 30       	cpi	r20, 0x01	; 1
     b00:	51 05       	cpc	r21, r1
     b02:	41 f1       	breq	.+80     	; 0xb54 <DIO_u8GetPinValue+0x76>
     b04:	8c 81       	ldd	r24, Y+4	; 0x04
     b06:	9d 81       	ldd	r25, Y+5	; 0x05
     b08:	82 30       	cpi	r24, 0x02	; 2
     b0a:	91 05       	cpc	r25, r1
     b0c:	34 f4       	brge	.+12     	; 0xb1a <DIO_u8GetPinValue+0x3c>
     b0e:	2c 81       	ldd	r18, Y+4	; 0x04
     b10:	3d 81       	ldd	r19, Y+5	; 0x05
     b12:	21 15       	cp	r18, r1
     b14:	31 05       	cpc	r19, r1
     b16:	61 f0       	breq	.+24     	; 0xb30 <DIO_u8GetPinValue+0x52>
     b18:	52 c0       	rjmp	.+164    	; 0xbbe <DIO_u8GetPinValue+0xe0>
     b1a:	4c 81       	ldd	r20, Y+4	; 0x04
     b1c:	5d 81       	ldd	r21, Y+5	; 0x05
     b1e:	42 30       	cpi	r20, 0x02	; 2
     b20:	51 05       	cpc	r21, r1
     b22:	51 f1       	breq	.+84     	; 0xb78 <DIO_u8GetPinValue+0x9a>
     b24:	8c 81       	ldd	r24, Y+4	; 0x04
     b26:	9d 81       	ldd	r25, Y+5	; 0x05
     b28:	83 30       	cpi	r24, 0x03	; 3
     b2a:	91 05       	cpc	r25, r1
     b2c:	b9 f1       	breq	.+110    	; 0xb9c <DIO_u8GetPinValue+0xbe>
     b2e:	47 c0       	rjmp	.+142    	; 0xbbe <DIO_u8GetPinValue+0xe0>
		case PORTA/*Port A*/: value=GetBit(PINA_REG,Copy_u8PinID);break;
     b30:	e9 e3       	ldi	r30, 0x39	; 57
     b32:	f0 e0       	ldi	r31, 0x00	; 0
     b34:	80 81       	ld	r24, Z
     b36:	28 2f       	mov	r18, r24
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	8b 81       	ldd	r24, Y+3	; 0x03
     b3c:	88 2f       	mov	r24, r24
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	a9 01       	movw	r20, r18
     b42:	02 c0       	rjmp	.+4      	; 0xb48 <DIO_u8GetPinValue+0x6a>
     b44:	55 95       	asr	r21
     b46:	47 95       	ror	r20
     b48:	8a 95       	dec	r24
     b4a:	e2 f7       	brpl	.-8      	; 0xb44 <DIO_u8GetPinValue+0x66>
     b4c:	ca 01       	movw	r24, r20
     b4e:	81 70       	andi	r24, 0x01	; 1
     b50:	89 83       	std	Y+1, r24	; 0x01
     b52:	35 c0       	rjmp	.+106    	; 0xbbe <DIO_u8GetPinValue+0xe0>
		case PORTB/*Port B*/: value=GetBit(PINB_REG,Copy_u8PinID);break;
     b54:	e6 e3       	ldi	r30, 0x36	; 54
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	80 81       	ld	r24, Z
     b5a:	28 2f       	mov	r18, r24
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	8b 81       	ldd	r24, Y+3	; 0x03
     b60:	88 2f       	mov	r24, r24
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	a9 01       	movw	r20, r18
     b66:	02 c0       	rjmp	.+4      	; 0xb6c <DIO_u8GetPinValue+0x8e>
     b68:	55 95       	asr	r21
     b6a:	47 95       	ror	r20
     b6c:	8a 95       	dec	r24
     b6e:	e2 f7       	brpl	.-8      	; 0xb68 <DIO_u8GetPinValue+0x8a>
     b70:	ca 01       	movw	r24, r20
     b72:	81 70       	andi	r24, 0x01	; 1
     b74:	89 83       	std	Y+1, r24	; 0x01
     b76:	23 c0       	rjmp	.+70     	; 0xbbe <DIO_u8GetPinValue+0xe0>
		case PORTC/*Port C*/: value=GetBit(PINC_REG,Copy_u8PinID);break;
     b78:	e3 e3       	ldi	r30, 0x33	; 51
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	28 2f       	mov	r18, r24
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	8b 81       	ldd	r24, Y+3	; 0x03
     b84:	88 2f       	mov	r24, r24
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	a9 01       	movw	r20, r18
     b8a:	02 c0       	rjmp	.+4      	; 0xb90 <DIO_u8GetPinValue+0xb2>
     b8c:	55 95       	asr	r21
     b8e:	47 95       	ror	r20
     b90:	8a 95       	dec	r24
     b92:	e2 f7       	brpl	.-8      	; 0xb8c <DIO_u8GetPinValue+0xae>
     b94:	ca 01       	movw	r24, r20
     b96:	81 70       	andi	r24, 0x01	; 1
     b98:	89 83       	std	Y+1, r24	; 0x01
     b9a:	11 c0       	rjmp	.+34     	; 0xbbe <DIO_u8GetPinValue+0xe0>
		case PORTD/*Port D*/: value=GetBit(PIND_REG,Copy_u8PinID);break;
     b9c:	e0 e3       	ldi	r30, 0x30	; 48
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	80 81       	ld	r24, Z
     ba2:	28 2f       	mov	r18, r24
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	8b 81       	ldd	r24, Y+3	; 0x03
     ba8:	88 2f       	mov	r24, r24
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	a9 01       	movw	r20, r18
     bae:	02 c0       	rjmp	.+4      	; 0xbb4 <DIO_u8GetPinValue+0xd6>
     bb0:	55 95       	asr	r21
     bb2:	47 95       	ror	r20
     bb4:	8a 95       	dec	r24
     bb6:	e2 f7       	brpl	.-8      	; 0xbb0 <DIO_u8GetPinValue+0xd2>
     bb8:	ca 01       	movw	r24, r20
     bba:	81 70       	andi	r24, 0x01	; 1
     bbc:	89 83       	std	Y+1, r24	; 0x01
	}
	return value;
     bbe:	89 81       	ldd	r24, Y+1	; 0x01
}
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	0f 90       	pop	r0
     bc6:	0f 90       	pop	r0
     bc8:	0f 90       	pop	r0
     bca:	cf 91       	pop	r28
     bcc:	df 91       	pop	r29
     bce:	08 95       	ret

00000bd0 <DIO_voidTogglePinValue>:

void DIO_voidTogglePinValue(u8 Copy_u8PortID,u8 Copy_u8PinID){
     bd0:	df 93       	push	r29
     bd2:	cf 93       	push	r28
     bd4:	00 d0       	rcall	.+0      	; 0xbd6 <DIO_voidTogglePinValue+0x6>
     bd6:	00 d0       	rcall	.+0      	; 0xbd8 <DIO_voidTogglePinValue+0x8>
     bd8:	cd b7       	in	r28, 0x3d	; 61
     bda:	de b7       	in	r29, 0x3e	; 62
     bdc:	89 83       	std	Y+1, r24	; 0x01
     bde:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortID){
     be0:	89 81       	ldd	r24, Y+1	; 0x01
     be2:	28 2f       	mov	r18, r24
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	3c 83       	std	Y+4, r19	; 0x04
     be8:	2b 83       	std	Y+3, r18	; 0x03
     bea:	8b 81       	ldd	r24, Y+3	; 0x03
     bec:	9c 81       	ldd	r25, Y+4	; 0x04
     bee:	81 30       	cpi	r24, 0x01	; 1
     bf0:	91 05       	cpc	r25, r1
     bf2:	49 f1       	breq	.+82     	; 0xc46 <DIO_voidTogglePinValue+0x76>
     bf4:	2b 81       	ldd	r18, Y+3	; 0x03
     bf6:	3c 81       	ldd	r19, Y+4	; 0x04
     bf8:	22 30       	cpi	r18, 0x02	; 2
     bfa:	31 05       	cpc	r19, r1
     bfc:	2c f4       	brge	.+10     	; 0xc08 <DIO_voidTogglePinValue+0x38>
     bfe:	8b 81       	ldd	r24, Y+3	; 0x03
     c00:	9c 81       	ldd	r25, Y+4	; 0x04
     c02:	00 97       	sbiw	r24, 0x00	; 0
     c04:	61 f0       	breq	.+24     	; 0xc1e <DIO_voidTogglePinValue+0x4e>
     c06:	5a c0       	rjmp	.+180    	; 0xcbc <DIO_voidTogglePinValue+0xec>
     c08:	2b 81       	ldd	r18, Y+3	; 0x03
     c0a:	3c 81       	ldd	r19, Y+4	; 0x04
     c0c:	22 30       	cpi	r18, 0x02	; 2
     c0e:	31 05       	cpc	r19, r1
     c10:	71 f1       	breq	.+92     	; 0xc6e <DIO_voidTogglePinValue+0x9e>
     c12:	8b 81       	ldd	r24, Y+3	; 0x03
     c14:	9c 81       	ldd	r25, Y+4	; 0x04
     c16:	83 30       	cpi	r24, 0x03	; 3
     c18:	91 05       	cpc	r25, r1
     c1a:	e9 f1       	breq	.+122    	; 0xc96 <DIO_voidTogglePinValue+0xc6>
     c1c:	4f c0       	rjmp	.+158    	; 0xcbc <DIO_voidTogglePinValue+0xec>
		case PORTA/*Port A*/: TogBit(PORTA_REG,Copy_u8PinID);break;
     c1e:	ab e3       	ldi	r26, 0x3B	; 59
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	eb e3       	ldi	r30, 0x3B	; 59
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	48 2f       	mov	r20, r24
     c2a:	8a 81       	ldd	r24, Y+2	; 0x02
     c2c:	28 2f       	mov	r18, r24
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	02 2e       	mov	r0, r18
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <DIO_voidTogglePinValue+0x6c>
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	0a 94       	dec	r0
     c3e:	e2 f7       	brpl	.-8      	; 0xc38 <DIO_voidTogglePinValue+0x68>
     c40:	84 27       	eor	r24, r20
     c42:	8c 93       	st	X, r24
     c44:	3b c0       	rjmp	.+118    	; 0xcbc <DIO_voidTogglePinValue+0xec>
		case PORTB/*Port B*/: TogBit(PORTB_REG,Copy_u8PinID);break;
     c46:	a8 e3       	ldi	r26, 0x38	; 56
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	e8 e3       	ldi	r30, 0x38	; 56
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 81       	ld	r24, Z
     c50:	48 2f       	mov	r20, r24
     c52:	8a 81       	ldd	r24, Y+2	; 0x02
     c54:	28 2f       	mov	r18, r24
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	02 2e       	mov	r0, r18
     c5e:	02 c0       	rjmp	.+4      	; 0xc64 <DIO_voidTogglePinValue+0x94>
     c60:	88 0f       	add	r24, r24
     c62:	99 1f       	adc	r25, r25
     c64:	0a 94       	dec	r0
     c66:	e2 f7       	brpl	.-8      	; 0xc60 <DIO_voidTogglePinValue+0x90>
     c68:	84 27       	eor	r24, r20
     c6a:	8c 93       	st	X, r24
     c6c:	27 c0       	rjmp	.+78     	; 0xcbc <DIO_voidTogglePinValue+0xec>
		case PORTC/*Port C*/: TogBit(PORTC_REG,Copy_u8PinID);break;
     c6e:	a5 e3       	ldi	r26, 0x35	; 53
     c70:	b0 e0       	ldi	r27, 0x00	; 0
     c72:	e5 e3       	ldi	r30, 0x35	; 53
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	80 81       	ld	r24, Z
     c78:	48 2f       	mov	r20, r24
     c7a:	8a 81       	ldd	r24, Y+2	; 0x02
     c7c:	28 2f       	mov	r18, r24
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	02 2e       	mov	r0, r18
     c86:	02 c0       	rjmp	.+4      	; 0xc8c <DIO_voidTogglePinValue+0xbc>
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	0a 94       	dec	r0
     c8e:	e2 f7       	brpl	.-8      	; 0xc88 <DIO_voidTogglePinValue+0xb8>
     c90:	84 27       	eor	r24, r20
     c92:	8c 93       	st	X, r24
     c94:	13 c0       	rjmp	.+38     	; 0xcbc <DIO_voidTogglePinValue+0xec>
		case PORTD/*Port D*/: TogBit(PORTD_REG,Copy_u8PinID);break;
     c96:	a2 e3       	ldi	r26, 0x32	; 50
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	e2 e3       	ldi	r30, 0x32	; 50
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	48 2f       	mov	r20, r24
     ca2:	8a 81       	ldd	r24, Y+2	; 0x02
     ca4:	28 2f       	mov	r18, r24
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	02 2e       	mov	r0, r18
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <DIO_voidTogglePinValue+0xe4>
     cb0:	88 0f       	add	r24, r24
     cb2:	99 1f       	adc	r25, r25
     cb4:	0a 94       	dec	r0
     cb6:	e2 f7       	brpl	.-8      	; 0xcb0 <DIO_voidTogglePinValue+0xe0>
     cb8:	84 27       	eor	r24, r20
     cba:	8c 93       	st	X, r24
	}
}
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	cf 91       	pop	r28
     cc6:	df 91       	pop	r29
     cc8:	08 95       	ret

00000cca <UART_voidInitialize>:
#include "UART_private.h"
#include "UART_interface.h"

u8 TEMP;

void UART_voidInitialize(){
     cca:	df 93       	push	r29
     ccc:	cf 93       	push	r28
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
	
	SetBit(UCSRB,PIN4);
     cd2:	aa e2       	ldi	r26, 0x2A	; 42
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	ea e2       	ldi	r30, 0x2A	; 42
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	80 61       	ori	r24, 0x10	; 16
     cde:	8c 93       	st	X, r24
	SetBit(UCSRB,PIN3);
     ce0:	aa e2       	ldi	r26, 0x2A	; 42
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	ea e2       	ldi	r30, 0x2A	; 42
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	88 60       	ori	r24, 0x08	; 8
     cec:	8c 93       	st	X, r24
	
	SetBit(TEMP,PIN7);
     cee:	80 91 7c 00 	lds	r24, 0x007C
     cf2:	80 68       	ori	r24, 0x80	; 128
     cf4:	80 93 7c 00 	sts	0x007C, r24
	ClrBit(TEMP,PIN6);
     cf8:	80 91 7c 00 	lds	r24, 0x007C
     cfc:	8f 7b       	andi	r24, 0xBF	; 191
     cfe:	80 93 7c 00 	sts	0x007C, r24
	ClrBit(TEMP,PIN5);
     d02:	80 91 7c 00 	lds	r24, 0x007C
     d06:	8f 7d       	andi	r24, 0xDF	; 223
     d08:	80 93 7c 00 	sts	0x007C, r24
	ClrBit(TEMP,PIN4);
     d0c:	80 91 7c 00 	lds	r24, 0x007C
     d10:	8f 7e       	andi	r24, 0xEF	; 239
     d12:	80 93 7c 00 	sts	0x007C, r24
	ClrBit(TEMP,PIN3);
     d16:	80 91 7c 00 	lds	r24, 0x007C
     d1a:	87 7f       	andi	r24, 0xF7	; 247
     d1c:	80 93 7c 00 	sts	0x007C, r24
	SetBit(TEMP,PIN2);
     d20:	80 91 7c 00 	lds	r24, 0x007C
     d24:	84 60       	ori	r24, 0x04	; 4
     d26:	80 93 7c 00 	sts	0x007C, r24
	SetBit(TEMP,PIN1);
     d2a:	80 91 7c 00 	lds	r24, 0x007C
     d2e:	82 60       	ori	r24, 0x02	; 2
     d30:	80 93 7c 00 	sts	0x007C, r24
	
	UCSRC=TEMP;
     d34:	e0 e4       	ldi	r30, 0x40	; 64
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 91 7c 00 	lds	r24, 0x007C
     d3c:	80 83       	st	Z, r24
	
	UBRRH=0;
     d3e:	e0 e4       	ldi	r30, 0x40	; 64
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	10 82       	st	Z, r1
	UBRRL=51;
     d44:	e9 e2       	ldi	r30, 0x29	; 41
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	83 e3       	ldi	r24, 0x33	; 51
     d4a:	80 83       	st	Z, r24
}
     d4c:	cf 91       	pop	r28
     d4e:	df 91       	pop	r29
     d50:	08 95       	ret

00000d52 <UART_voidSendData>:

void UART_voidSendData(u8 Copy_u8Data){
     d52:	df 93       	push	r29
     d54:	cf 93       	push	r28
     d56:	0f 92       	push	r0
     d58:	cd b7       	in	r28, 0x3d	; 61
     d5a:	de b7       	in	r29, 0x3e	; 62
     d5c:	89 83       	std	Y+1, r24	; 0x01
	UDR=Copy_u8Data;
     d5e:	ec e2       	ldi	r30, 0x2C	; 44
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	89 81       	ldd	r24, Y+1	; 0x01
     d64:	80 83       	st	Z, r24
	while((GetBit(UCSRA,PIN6))==0);
     d66:	eb e2       	ldi	r30, 0x2B	; 43
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	82 95       	swap	r24
     d6e:	86 95       	lsr	r24
     d70:	86 95       	lsr	r24
     d72:	83 70       	andi	r24, 0x03	; 3
     d74:	88 2f       	mov	r24, r24
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	81 70       	andi	r24, 0x01	; 1
     d7a:	90 70       	andi	r25, 0x00	; 0
     d7c:	00 97       	sbiw	r24, 0x00	; 0
     d7e:	99 f3       	breq	.-26     	; 0xd66 <UART_voidSendData+0x14>
	SetBit(UCSRA,PIN6);
     d80:	ab e2       	ldi	r26, 0x2B	; 43
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	eb e2       	ldi	r30, 0x2B	; 43
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	80 64       	ori	r24, 0x40	; 64
     d8c:	8c 93       	st	X, r24
}
     d8e:	0f 90       	pop	r0
     d90:	cf 91       	pop	r28
     d92:	df 91       	pop	r29
     d94:	08 95       	ret

00000d96 <UART_u8ReciveData>:

u8 UART_u8ReciveData(){
     d96:	df 93       	push	r29
     d98:	cf 93       	push	r28
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
	while((GetBit(UCSRA,PIN7))==0);
     d9e:	eb e2       	ldi	r30, 0x2B	; 43
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	88 23       	and	r24, r24
     da6:	dc f7       	brge	.-10     	; 0xd9e <UART_u8ReciveData+0x8>
	return UDR;
     da8:	ec e2       	ldi	r30, 0x2C	; 44
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
}
     dae:	cf 91       	pop	r28
     db0:	df 91       	pop	r29
     db2:	08 95       	ret

00000db4 <UART_voidSendString>:

void UART_voidSendString(u8 *Copy_u8String){
     db4:	df 93       	push	r29
     db6:	cf 93       	push	r28
     db8:	00 d0       	rcall	.+0      	; 0xdba <UART_voidSendString+0x6>
     dba:	0f 92       	push	r0
     dbc:	cd b7       	in	r28, 0x3d	; 61
     dbe:	de b7       	in	r29, 0x3e	; 62
     dc0:	9b 83       	std	Y+3, r25	; 0x03
     dc2:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
     dc4:	19 82       	std	Y+1, r1	; 0x01
     dc6:	23 c0       	rjmp	.+70     	; 0xe0e <UART_voidSendString+0x5a>
	while(Copy_u8String[i]!='\0'){
		UDR=Copy_u8String[i];
     dc8:	ac e2       	ldi	r26, 0x2C	; 44
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	28 2f       	mov	r18, r24
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	8a 81       	ldd	r24, Y+2	; 0x02
     dd4:	9b 81       	ldd	r25, Y+3	; 0x03
     dd6:	fc 01       	movw	r30, r24
     dd8:	e2 0f       	add	r30, r18
     dda:	f3 1f       	adc	r31, r19
     ddc:	80 81       	ld	r24, Z
     dde:	8c 93       	st	X, r24
		while((GetBit(UCSRA,PIN6))==0);
     de0:	eb e2       	ldi	r30, 0x2B	; 43
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	82 95       	swap	r24
     de8:	86 95       	lsr	r24
     dea:	86 95       	lsr	r24
     dec:	83 70       	andi	r24, 0x03	; 3
     dee:	88 2f       	mov	r24, r24
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	81 70       	andi	r24, 0x01	; 1
     df4:	90 70       	andi	r25, 0x00	; 0
     df6:	00 97       	sbiw	r24, 0x00	; 0
     df8:	99 f3       	breq	.-26     	; 0xde0 <UART_voidSendString+0x2c>
		SetBit(UCSRA,PIN6);
     dfa:	ab e2       	ldi	r26, 0x2B	; 43
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	eb e2       	ldi	r30, 0x2B	; 43
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	80 64       	ori	r24, 0x40	; 64
     e06:	8c 93       	st	X, r24
		i++;
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	8f 5f       	subi	r24, 0xFF	; 255
     e0c:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}

void UART_voidSendString(u8 *Copy_u8String){
	u8 i=0;
	while(Copy_u8String[i]!='\0'){
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
     e10:	28 2f       	mov	r18, r24
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	8a 81       	ldd	r24, Y+2	; 0x02
     e16:	9b 81       	ldd	r25, Y+3	; 0x03
     e18:	fc 01       	movw	r30, r24
     e1a:	e2 0f       	add	r30, r18
     e1c:	f3 1f       	adc	r31, r19
     e1e:	80 81       	ld	r24, Z
     e20:	88 23       	and	r24, r24
     e22:	91 f6       	brne	.-92     	; 0xdc8 <UART_voidSendString+0x14>
		UDR=Copy_u8String[i];
		while((GetBit(UCSRA,PIN6))==0);
		SetBit(UCSRA,PIN6);
		i++;
	}
}
     e24:	0f 90       	pop	r0
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	08 95       	ret

00000e30 <UART_u8_ReciveString>:

u8 *UART_u8_ReciveString(){
     e30:	0f 93       	push	r16
     e32:	1f 93       	push	r17
     e34:	df 93       	push	r29
     e36:	cf 93       	push	r28
     e38:	0f 92       	push	r0
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
	static u8 string[20];
	u8 i=0;
     e3e:	19 82       	std	Y+1, r1	; 0x01
	do{
		string[i]=UART_u8ReciveData();
     e40:	89 81       	ldd	r24, Y+1	; 0x01
     e42:	08 2f       	mov	r16, r24
     e44:	10 e0       	ldi	r17, 0x00	; 0
     e46:	0e 94 cb 06 	call	0xd96	; 0xd96 <UART_u8ReciveData>
     e4a:	f8 01       	movw	r30, r16
     e4c:	e8 59       	subi	r30, 0x98	; 152
     e4e:	ff 4f       	sbci	r31, 0xFF	; 255
     e50:	80 83       	st	Z, r24
		i++;
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	8f 5f       	subi	r24, 0xFF	; 255
     e56:	89 83       	std	Y+1, r24	; 0x01
	}while(string[i-1]!='!');
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	88 2f       	mov	r24, r24
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	01 97       	sbiw	r24, 0x01	; 1
     e60:	fc 01       	movw	r30, r24
     e62:	e8 59       	subi	r30, 0x98	; 152
     e64:	ff 4f       	sbci	r31, 0xFF	; 255
     e66:	80 81       	ld	r24, Z
     e68:	81 32       	cpi	r24, 0x21	; 33
     e6a:	51 f7       	brne	.-44     	; 0xe40 <UART_u8_ReciveString+0x10>
	string[i-1]='\0';
     e6c:	89 81       	ldd	r24, Y+1	; 0x01
     e6e:	88 2f       	mov	r24, r24
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	fc 01       	movw	r30, r24
     e76:	e8 59       	subi	r30, 0x98	; 152
     e78:	ff 4f       	sbci	r31, 0xFF	; 255
     e7a:	10 82       	st	Z, r1
	return string;
     e7c:	88 e6       	ldi	r24, 0x68	; 104
     e7e:	90 e0       	ldi	r25, 0x00	; 0
}
     e80:	0f 90       	pop	r0
     e82:	cf 91       	pop	r28
     e84:	df 91       	pop	r29
     e86:	1f 91       	pop	r17
     e88:	0f 91       	pop	r16
     e8a:	08 95       	ret

00000e8c <UART_voidSendNumber>:

void UART_voidSendNumber(u32 Copy_u32Number){
     e8c:	0f 93       	push	r16
     e8e:	1f 93       	push	r17
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	60 97       	sbiw	r28, 0x10	; 16
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	f8 94       	cli
     e9e:	de bf       	out	0x3e, r29	; 62
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	cd bf       	out	0x3d, r28	; 61
     ea4:	6d 87       	std	Y+13, r22	; 0x0d
     ea6:	7e 87       	std	Y+14, r23	; 0x0e
     ea8:	8f 87       	std	Y+15, r24	; 0x0f
     eaa:	98 8b       	std	Y+16, r25	; 0x10
	u8 arr[MAX_INT_DIGITS];
	u8 i=0;
     eac:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u32Number==0){
     eae:	8d 85       	ldd	r24, Y+13	; 0x0d
     eb0:	9e 85       	ldd	r25, Y+14	; 0x0e
     eb2:	af 85       	ldd	r26, Y+15	; 0x0f
     eb4:	b8 89       	ldd	r27, Y+16	; 0x10
     eb6:	00 97       	sbiw	r24, 0x00	; 0
     eb8:	a1 05       	cpc	r26, r1
     eba:	b1 05       	cpc	r27, r1
     ebc:	89 f5       	brne	.+98     	; 0xf20 <UART_voidSendNumber+0x94>
		UART_voidSendData(ZERO_ASCII);
     ebe:	80 e3       	ldi	r24, 0x30	; 48
     ec0:	0e 94 a9 06 	call	0xd52	; 0xd52 <UART_voidSendData>
     ec4:	4d c0       	rjmp	.+154    	; 0xf60 <UART_voidSendNumber+0xd4>
	}
	else{
		while(Copy_u32Number>0){
			arr[i]=Copy_u32Number%10;
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	08 2f       	mov	r16, r24
     eca:	10 e0       	ldi	r17, 0x00	; 0
     ecc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ece:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed0:	af 85       	ldd	r26, Y+15	; 0x0f
     ed2:	b8 89       	ldd	r27, Y+16	; 0x10
     ed4:	2a e0       	ldi	r18, 0x0A	; 10
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	40 e0       	ldi	r20, 0x00	; 0
     eda:	50 e0       	ldi	r21, 0x00	; 0
     edc:	bc 01       	movw	r22, r24
     ede:	cd 01       	movw	r24, r26
     ee0:	0e 94 1c 08 	call	0x1038	; 0x1038 <__udivmodsi4>
     ee4:	dc 01       	movw	r26, r24
     ee6:	cb 01       	movw	r24, r22
     ee8:	28 2f       	mov	r18, r24
     eea:	ce 01       	movw	r24, r28
     eec:	03 96       	adiw	r24, 0x03	; 3
     eee:	fc 01       	movw	r30, r24
     ef0:	e0 0f       	add	r30, r16
     ef2:	f1 1f       	adc	r31, r17
     ef4:	20 83       	st	Z, r18
			Copy_u32Number/=10;
     ef6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ef8:	9e 85       	ldd	r25, Y+14	; 0x0e
     efa:	af 85       	ldd	r26, Y+15	; 0x0f
     efc:	b8 89       	ldd	r27, Y+16	; 0x10
     efe:	2a e0       	ldi	r18, 0x0A	; 10
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	40 e0       	ldi	r20, 0x00	; 0
     f04:	50 e0       	ldi	r21, 0x00	; 0
     f06:	bc 01       	movw	r22, r24
     f08:	cd 01       	movw	r24, r26
     f0a:	0e 94 1c 08 	call	0x1038	; 0x1038 <__udivmodsi4>
     f0e:	da 01       	movw	r26, r20
     f10:	c9 01       	movw	r24, r18
     f12:	8d 87       	std	Y+13, r24	; 0x0d
     f14:	9e 87       	std	Y+14, r25	; 0x0e
     f16:	af 87       	std	Y+15, r26	; 0x0f
     f18:	b8 8b       	std	Y+16, r27	; 0x10
			i++;
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	8f 5f       	subi	r24, 0xFF	; 255
     f1e:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
	if(Copy_u32Number==0){
		UART_voidSendData(ZERO_ASCII);
	}
	else{
		while(Copy_u32Number>0){
     f20:	8d 85       	ldd	r24, Y+13	; 0x0d
     f22:	9e 85       	ldd	r25, Y+14	; 0x0e
     f24:	af 85       	ldd	r26, Y+15	; 0x0f
     f26:	b8 89       	ldd	r27, Y+16	; 0x10
     f28:	00 97       	sbiw	r24, 0x00	; 0
     f2a:	a1 05       	cpc	r26, r1
     f2c:	b1 05       	cpc	r27, r1
     f2e:	59 f6       	brne	.-106    	; 0xec6 <UART_voidSendNumber+0x3a>
			arr[i]=Copy_u32Number%10;
			Copy_u32Number/=10;
			i++;
		}
		for(u8 j=i;j>0;j--){
     f30:	8a 81       	ldd	r24, Y+2	; 0x02
     f32:	89 83       	std	Y+1, r24	; 0x01
     f34:	12 c0       	rjmp	.+36     	; 0xf5a <UART_voidSendNumber+0xce>
			UART_voidSendData(arr[j-1]+ZERO_ASCII);
     f36:	89 81       	ldd	r24, Y+1	; 0x01
     f38:	88 2f       	mov	r24, r24
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	9c 01       	movw	r18, r24
     f3e:	21 50       	subi	r18, 0x01	; 1
     f40:	30 40       	sbci	r19, 0x00	; 0
     f42:	ce 01       	movw	r24, r28
     f44:	03 96       	adiw	r24, 0x03	; 3
     f46:	fc 01       	movw	r30, r24
     f48:	e2 0f       	add	r30, r18
     f4a:	f3 1f       	adc	r31, r19
     f4c:	80 81       	ld	r24, Z
     f4e:	80 5d       	subi	r24, 0xD0	; 208
     f50:	0e 94 a9 06 	call	0xd52	; 0xd52 <UART_voidSendData>
		while(Copy_u32Number>0){
			arr[i]=Copy_u32Number%10;
			Copy_u32Number/=10;
			i++;
		}
		for(u8 j=i;j>0;j--){
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	81 50       	subi	r24, 0x01	; 1
     f58:	89 83       	std	Y+1, r24	; 0x01
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	88 23       	and	r24, r24
     f5e:	59 f7       	brne	.-42     	; 0xf36 <UART_voidSendNumber+0xaa>
			UART_voidSendData(arr[j-1]+ZERO_ASCII);
		}		
	}
     f60:	60 96       	adiw	r28, 0x10	; 16
     f62:	0f b6       	in	r0, 0x3f	; 63
     f64:	f8 94       	cli
     f66:	de bf       	out	0x3e, r29	; 62
     f68:	0f be       	out	0x3f, r0	; 63
     f6a:	cd bf       	out	0x3d, r28	; 61
     f6c:	cf 91       	pop	r28
     f6e:	df 91       	pop	r29
     f70:	1f 91       	pop	r17
     f72:	0f 91       	pop	r16
     f74:	08 95       	ret

00000f76 <main>:
#include "Bit_Math.h"
#include "DIO_interface.h"
#include "UART_interface.h"
#include "ADC_interface.h"

int main(){
     f76:	df 93       	push	r29
     f78:	cf 93       	push	r28
     f7a:	00 d0       	rcall	.+0      	; 0xf7c <main+0x6>
     f7c:	00 d0       	rcall	.+0      	; 0xf7e <main+0x8>
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62

	u16 reading=0;
     f82:	1c 82       	std	Y+4, r1	; 0x04
     f84:	1b 82       	std	Y+3, r1	; 0x03
	u16 temp;

	ADC_voidInitialize(ADC0);
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	0e 94 49 00 	call	0x92	; 0x92 <ADC_voidInitialize>
	UART_voidInitialize();
     f8c:	0e 94 65 06 	call	0xcca	; 0xcca <UART_voidInitialize>

	while(1){
		if(reading!=ADC_voidStartConversion()){
     f90:	0e 94 e7 01 	call	0x3ce	; 0x3ce <ADC_voidStartConversion>
     f94:	9c 01       	movw	r18, r24
     f96:	8b 81       	ldd	r24, Y+3	; 0x03
     f98:	9c 81       	ldd	r25, Y+4	; 0x04
     f9a:	28 17       	cp	r18, r24
     f9c:	39 07       	cpc	r19, r25
     f9e:	c1 f3       	breq	.-16     	; 0xf90 <main+0x1a>
			reading=ADC_voidStartConversion();
     fa0:	0e 94 e7 01 	call	0x3ce	; 0x3ce <ADC_voidStartConversion>
     fa4:	9c 83       	std	Y+4, r25	; 0x04
     fa6:	8b 83       	std	Y+3, r24	; 0x03
			temp=(u16)(((u32)reading*5000)/(1023*10));
     fa8:	8b 81       	ldd	r24, Y+3	; 0x03
     faa:	9c 81       	ldd	r25, Y+4	; 0x04
     fac:	cc 01       	movw	r24, r24
     fae:	a0 e0       	ldi	r26, 0x00	; 0
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	28 e8       	ldi	r18, 0x88	; 136
     fb4:	33 e1       	ldi	r19, 0x13	; 19
     fb6:	40 e0       	ldi	r20, 0x00	; 0
     fb8:	50 e0       	ldi	r21, 0x00	; 0
     fba:	bc 01       	movw	r22, r24
     fbc:	cd 01       	movw	r24, r26
     fbe:	0e 94 fd 07 	call	0xffa	; 0xffa <__mulsi3>
     fc2:	dc 01       	movw	r26, r24
     fc4:	cb 01       	movw	r24, r22
     fc6:	26 ef       	ldi	r18, 0xF6	; 246
     fc8:	37 e2       	ldi	r19, 0x27	; 39
     fca:	40 e0       	ldi	r20, 0x00	; 0
     fcc:	50 e0       	ldi	r21, 0x00	; 0
     fce:	bc 01       	movw	r22, r24
     fd0:	cd 01       	movw	r24, r26
     fd2:	0e 94 1c 08 	call	0x1038	; 0x1038 <__udivmodsi4>
     fd6:	da 01       	movw	r26, r20
     fd8:	c9 01       	movw	r24, r18
     fda:	9a 83       	std	Y+2, r25	; 0x02
     fdc:	89 83       	std	Y+1, r24	; 0x01
			UART_voidSendNumber(temp);
     fde:	89 81       	ldd	r24, Y+1	; 0x01
     fe0:	9a 81       	ldd	r25, Y+2	; 0x02
     fe2:	cc 01       	movw	r24, r24
     fe4:	a0 e0       	ldi	r26, 0x00	; 0
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	bc 01       	movw	r22, r24
     fea:	cd 01       	movw	r24, r26
     fec:	0e 94 46 07 	call	0xe8c	; 0xe8c <UART_voidSendNumber>
			UART_voidSendString("C     ");
     ff0:	80 e6       	ldi	r24, 0x60	; 96
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	0e 94 da 06 	call	0xdb4	; 0xdb4 <UART_voidSendString>
     ff8:	cb cf       	rjmp	.-106    	; 0xf90 <main+0x1a>

00000ffa <__mulsi3>:
     ffa:	62 9f       	mul	r22, r18
     ffc:	d0 01       	movw	r26, r0
     ffe:	73 9f       	mul	r23, r19
    1000:	f0 01       	movw	r30, r0
    1002:	82 9f       	mul	r24, r18
    1004:	e0 0d       	add	r30, r0
    1006:	f1 1d       	adc	r31, r1
    1008:	64 9f       	mul	r22, r20
    100a:	e0 0d       	add	r30, r0
    100c:	f1 1d       	adc	r31, r1
    100e:	92 9f       	mul	r25, r18
    1010:	f0 0d       	add	r31, r0
    1012:	83 9f       	mul	r24, r19
    1014:	f0 0d       	add	r31, r0
    1016:	74 9f       	mul	r23, r20
    1018:	f0 0d       	add	r31, r0
    101a:	65 9f       	mul	r22, r21
    101c:	f0 0d       	add	r31, r0
    101e:	99 27       	eor	r25, r25
    1020:	72 9f       	mul	r23, r18
    1022:	b0 0d       	add	r27, r0
    1024:	e1 1d       	adc	r30, r1
    1026:	f9 1f       	adc	r31, r25
    1028:	63 9f       	mul	r22, r19
    102a:	b0 0d       	add	r27, r0
    102c:	e1 1d       	adc	r30, r1
    102e:	f9 1f       	adc	r31, r25
    1030:	bd 01       	movw	r22, r26
    1032:	cf 01       	movw	r24, r30
    1034:	11 24       	eor	r1, r1
    1036:	08 95       	ret

00001038 <__udivmodsi4>:
    1038:	a1 e2       	ldi	r26, 0x21	; 33
    103a:	1a 2e       	mov	r1, r26
    103c:	aa 1b       	sub	r26, r26
    103e:	bb 1b       	sub	r27, r27
    1040:	fd 01       	movw	r30, r26
    1042:	0d c0       	rjmp	.+26     	; 0x105e <__udivmodsi4_ep>

00001044 <__udivmodsi4_loop>:
    1044:	aa 1f       	adc	r26, r26
    1046:	bb 1f       	adc	r27, r27
    1048:	ee 1f       	adc	r30, r30
    104a:	ff 1f       	adc	r31, r31
    104c:	a2 17       	cp	r26, r18
    104e:	b3 07       	cpc	r27, r19
    1050:	e4 07       	cpc	r30, r20
    1052:	f5 07       	cpc	r31, r21
    1054:	20 f0       	brcs	.+8      	; 0x105e <__udivmodsi4_ep>
    1056:	a2 1b       	sub	r26, r18
    1058:	b3 0b       	sbc	r27, r19
    105a:	e4 0b       	sbc	r30, r20
    105c:	f5 0b       	sbc	r31, r21

0000105e <__udivmodsi4_ep>:
    105e:	66 1f       	adc	r22, r22
    1060:	77 1f       	adc	r23, r23
    1062:	88 1f       	adc	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	1a 94       	dec	r1
    1068:	69 f7       	brne	.-38     	; 0x1044 <__udivmodsi4_loop>
    106a:	60 95       	com	r22
    106c:	70 95       	com	r23
    106e:	80 95       	com	r24
    1070:	90 95       	com	r25
    1072:	9b 01       	movw	r18, r22
    1074:	ac 01       	movw	r20, r24
    1076:	bd 01       	movw	r22, r26
    1078:	cf 01       	movw	r24, r30
    107a:	08 95       	ret

0000107c <_exit>:
    107c:	f8 94       	cli

0000107e <__stop_program>:
    107e:	ff cf       	rjmp	.-2      	; 0x107e <__stop_program>
