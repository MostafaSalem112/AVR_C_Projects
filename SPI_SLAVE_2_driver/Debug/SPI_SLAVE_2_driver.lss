
SPI_SLAVE_2_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d84  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000015  00800060  00800060  00000df8  2**0
                  ALLOC
  2 .stab         00000eac  00000000  00000000  00000df8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000692  00000000  00000000  00001ca4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 37       	cpi	r26, 0x75	; 117
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 78 06 	call	0xcf0	; 0xcf0 <main>
  74:	0c 94 c0 06 	jmp	0xd80	; 0xd80 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_voidSetPinDirection>:
#include "Bit_Math.h"
#include "DIO_config.h"
#include "DIO_private.h"
#include "DIO_interface.h"

void DIO_voidSetPinDirection(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinDir){
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	27 97       	sbiw	r28, 0x07	; 7
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	f8 94       	cli
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	cd bf       	out	0x3d, r28	; 61
  90:	89 83       	std	Y+1, r24	; 0x01
  92:	6a 83       	std	Y+2, r22	; 0x02
  94:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinDir==PIN_OUTPUT){     //output
  96:	8b 81       	ldd	r24, Y+3	; 0x03
  98:	81 30       	cpi	r24, 0x01	; 1
  9a:	09 f0       	breq	.+2      	; 0x9e <DIO_voidSetPinDirection+0x22>
  9c:	6f c0       	rjmp	.+222    	; 0x17c <DIO_voidSetPinDirection+0x100>
		switch(Copy_u8PortID){
  9e:	89 81       	ldd	r24, Y+1	; 0x01
  a0:	28 2f       	mov	r18, r24
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	3f 83       	std	Y+7, r19	; 0x07
  a6:	2e 83       	std	Y+6, r18	; 0x06
  a8:	8e 81       	ldd	r24, Y+6	; 0x06
  aa:	9f 81       	ldd	r25, Y+7	; 0x07
  ac:	81 30       	cpi	r24, 0x01	; 1
  ae:	91 05       	cpc	r25, r1
  b0:	49 f1       	breq	.+82     	; 0x104 <DIO_voidSetPinDirection+0x88>
  b2:	2e 81       	ldd	r18, Y+6	; 0x06
  b4:	3f 81       	ldd	r19, Y+7	; 0x07
  b6:	22 30       	cpi	r18, 0x02	; 2
  b8:	31 05       	cpc	r19, r1
  ba:	2c f4       	brge	.+10     	; 0xc6 <DIO_voidSetPinDirection+0x4a>
  bc:	8e 81       	ldd	r24, Y+6	; 0x06
  be:	9f 81       	ldd	r25, Y+7	; 0x07
  c0:	00 97       	sbiw	r24, 0x00	; 0
  c2:	61 f0       	breq	.+24     	; 0xdc <DIO_voidSetPinDirection+0x60>
  c4:	d2 c0       	rjmp	.+420    	; 0x26a <DIO_voidSetPinDirection+0x1ee>
  c6:	2e 81       	ldd	r18, Y+6	; 0x06
  c8:	3f 81       	ldd	r19, Y+7	; 0x07
  ca:	22 30       	cpi	r18, 0x02	; 2
  cc:	31 05       	cpc	r19, r1
  ce:	71 f1       	breq	.+92     	; 0x12c <DIO_voidSetPinDirection+0xb0>
  d0:	8e 81       	ldd	r24, Y+6	; 0x06
  d2:	9f 81       	ldd	r25, Y+7	; 0x07
  d4:	83 30       	cpi	r24, 0x03	; 3
  d6:	91 05       	cpc	r25, r1
  d8:	e9 f1       	breq	.+122    	; 0x154 <DIO_voidSetPinDirection+0xd8>
  da:	c7 c0       	rjmp	.+398    	; 0x26a <DIO_voidSetPinDirection+0x1ee>
			case PORTA/*Port A*/: SetBit(DDRA_REG,Copy_u8PinID);break;
  dc:	aa e3       	ldi	r26, 0x3A	; 58
  de:	b0 e0       	ldi	r27, 0x00	; 0
  e0:	ea e3       	ldi	r30, 0x3A	; 58
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	48 2f       	mov	r20, r24
  e8:	8a 81       	ldd	r24, Y+2	; 0x02
  ea:	28 2f       	mov	r18, r24
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 2e       	mov	r0, r18
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_voidSetPinDirection+0x7e>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	0a 94       	dec	r0
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_voidSetPinDirection+0x7a>
  fe:	84 2b       	or	r24, r20
 100:	8c 93       	st	X, r24
 102:	b3 c0       	rjmp	.+358    	; 0x26a <DIO_voidSetPinDirection+0x1ee>
			case PORTB/*Port B*/: SetBit(DDRB_REG,Copy_u8PinID);break;
 104:	a7 e3       	ldi	r26, 0x37	; 55
 106:	b0 e0       	ldi	r27, 0x00	; 0
 108:	e7 e3       	ldi	r30, 0x37	; 55
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	48 2f       	mov	r20, r24
 110:	8a 81       	ldd	r24, Y+2	; 0x02
 112:	28 2f       	mov	r18, r24
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	02 2e       	mov	r0, r18
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_voidSetPinDirection+0xa6>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	0a 94       	dec	r0
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_voidSetPinDirection+0xa2>
 126:	84 2b       	or	r24, r20
 128:	8c 93       	st	X, r24
 12a:	9f c0       	rjmp	.+318    	; 0x26a <DIO_voidSetPinDirection+0x1ee>
			case PORTC/*Port C*/: SetBit(DDRC_REG,Copy_u8PinID);break;
 12c:	a4 e3       	ldi	r26, 0x34	; 52
 12e:	b0 e0       	ldi	r27, 0x00	; 0
 130:	e4 e3       	ldi	r30, 0x34	; 52
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	48 2f       	mov	r20, r24
 138:	8a 81       	ldd	r24, Y+2	; 0x02
 13a:	28 2f       	mov	r18, r24
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	02 2e       	mov	r0, r18
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_voidSetPinDirection+0xce>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	0a 94       	dec	r0
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_voidSetPinDirection+0xca>
 14e:	84 2b       	or	r24, r20
 150:	8c 93       	st	X, r24
 152:	8b c0       	rjmp	.+278    	; 0x26a <DIO_voidSetPinDirection+0x1ee>
			case PORTD/*Port D*/: SetBit(DDRD_REG,Copy_u8PinID);break;
 154:	a1 e3       	ldi	r26, 0x31	; 49
 156:	b0 e0       	ldi	r27, 0x00	; 0
 158:	e1 e3       	ldi	r30, 0x31	; 49
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	48 2f       	mov	r20, r24
 160:	8a 81       	ldd	r24, Y+2	; 0x02
 162:	28 2f       	mov	r18, r24
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	02 2e       	mov	r0, r18
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_voidSetPinDirection+0xf6>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	0a 94       	dec	r0
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_voidSetPinDirection+0xf2>
 176:	84 2b       	or	r24, r20
 178:	8c 93       	st	X, r24
 17a:	77 c0       	rjmp	.+238    	; 0x26a <DIO_voidSetPinDirection+0x1ee>
		}
	}
	else if(Copy_u8PinDir==PIN_INPUT){ //input
 17c:	8b 81       	ldd	r24, Y+3	; 0x03
 17e:	88 23       	and	r24, r24
 180:	09 f0       	breq	.+2      	; 0x184 <DIO_voidSetPinDirection+0x108>
 182:	73 c0       	rjmp	.+230    	; 0x26a <DIO_voidSetPinDirection+0x1ee>
		switch(Copy_u8PortID){
 184:	89 81       	ldd	r24, Y+1	; 0x01
 186:	28 2f       	mov	r18, r24
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	3d 83       	std	Y+5, r19	; 0x05
 18c:	2c 83       	std	Y+4, r18	; 0x04
 18e:	8c 81       	ldd	r24, Y+4	; 0x04
 190:	9d 81       	ldd	r25, Y+5	; 0x05
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	91 05       	cpc	r25, r1
 196:	59 f1       	breq	.+86     	; 0x1ee <DIO_voidSetPinDirection+0x172>
 198:	2c 81       	ldd	r18, Y+4	; 0x04
 19a:	3d 81       	ldd	r19, Y+5	; 0x05
 19c:	22 30       	cpi	r18, 0x02	; 2
 19e:	31 05       	cpc	r19, r1
 1a0:	2c f4       	brge	.+10     	; 0x1ac <DIO_voidSetPinDirection+0x130>
 1a2:	8c 81       	ldd	r24, Y+4	; 0x04
 1a4:	9d 81       	ldd	r25, Y+5	; 0x05
 1a6:	00 97       	sbiw	r24, 0x00	; 0
 1a8:	69 f0       	breq	.+26     	; 0x1c4 <DIO_voidSetPinDirection+0x148>
 1aa:	5f c0       	rjmp	.+190    	; 0x26a <DIO_voidSetPinDirection+0x1ee>
 1ac:	2c 81       	ldd	r18, Y+4	; 0x04
 1ae:	3d 81       	ldd	r19, Y+5	; 0x05
 1b0:	22 30       	cpi	r18, 0x02	; 2
 1b2:	31 05       	cpc	r19, r1
 1b4:	89 f1       	breq	.+98     	; 0x218 <DIO_voidSetPinDirection+0x19c>
 1b6:	8c 81       	ldd	r24, Y+4	; 0x04
 1b8:	9d 81       	ldd	r25, Y+5	; 0x05
 1ba:	83 30       	cpi	r24, 0x03	; 3
 1bc:	91 05       	cpc	r25, r1
 1be:	09 f4       	brne	.+2      	; 0x1c2 <DIO_voidSetPinDirection+0x146>
 1c0:	40 c0       	rjmp	.+128    	; 0x242 <DIO_voidSetPinDirection+0x1c6>
 1c2:	53 c0       	rjmp	.+166    	; 0x26a <DIO_voidSetPinDirection+0x1ee>
			case PORTA/*Port A*/: ClrBit(DDRA_REG,Copy_u8PinID);break;
 1c4:	aa e3       	ldi	r26, 0x3A	; 58
 1c6:	b0 e0       	ldi	r27, 0x00	; 0
 1c8:	ea e3       	ldi	r30, 0x3A	; 58
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	48 2f       	mov	r20, r24
 1d0:	8a 81       	ldd	r24, Y+2	; 0x02
 1d2:	28 2f       	mov	r18, r24
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	02 2e       	mov	r0, r18
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_voidSetPinDirection+0x166>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	0a 94       	dec	r0
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_voidSetPinDirection+0x162>
 1e6:	80 95       	com	r24
 1e8:	84 23       	and	r24, r20
 1ea:	8c 93       	st	X, r24
 1ec:	3e c0       	rjmp	.+124    	; 0x26a <DIO_voidSetPinDirection+0x1ee>
			case PORTB/*Port B*/: ClrBit(DDRB_REG,Copy_u8PinID);break;
 1ee:	a7 e3       	ldi	r26, 0x37	; 55
 1f0:	b0 e0       	ldi	r27, 0x00	; 0
 1f2:	e7 e3       	ldi	r30, 0x37	; 55
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	48 2f       	mov	r20, r24
 1fa:	8a 81       	ldd	r24, Y+2	; 0x02
 1fc:	28 2f       	mov	r18, r24
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 2e       	mov	r0, r18
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_voidSetPinDirection+0x190>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	0a 94       	dec	r0
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_voidSetPinDirection+0x18c>
 210:	80 95       	com	r24
 212:	84 23       	and	r24, r20
 214:	8c 93       	st	X, r24
 216:	29 c0       	rjmp	.+82     	; 0x26a <DIO_voidSetPinDirection+0x1ee>
			case PORTC/*Port C*/: ClrBit(DDRC_REG,Copy_u8PinID);break;
 218:	a4 e3       	ldi	r26, 0x34	; 52
 21a:	b0 e0       	ldi	r27, 0x00	; 0
 21c:	e4 e3       	ldi	r30, 0x34	; 52
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	48 2f       	mov	r20, r24
 224:	8a 81       	ldd	r24, Y+2	; 0x02
 226:	28 2f       	mov	r18, r24
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 2e       	mov	r0, r18
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_voidSetPinDirection+0x1ba>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	0a 94       	dec	r0
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_voidSetPinDirection+0x1b6>
 23a:	80 95       	com	r24
 23c:	84 23       	and	r24, r20
 23e:	8c 93       	st	X, r24
 240:	14 c0       	rjmp	.+40     	; 0x26a <DIO_voidSetPinDirection+0x1ee>
			case PORTD/*Port D*/: ClrBit(DDRD_REG,Copy_u8PinID);break;
 242:	a1 e3       	ldi	r26, 0x31	; 49
 244:	b0 e0       	ldi	r27, 0x00	; 0
 246:	e1 e3       	ldi	r30, 0x31	; 49
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	48 2f       	mov	r20, r24
 24e:	8a 81       	ldd	r24, Y+2	; 0x02
 250:	28 2f       	mov	r18, r24
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 2e       	mov	r0, r18
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_voidSetPinDirection+0x1e4>
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	0a 94       	dec	r0
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_voidSetPinDirection+0x1e0>
 264:	80 95       	com	r24
 266:	84 23       	and	r24, r20
 268:	8c 93       	st	X, r24
		}
	}
}
 26a:	27 96       	adiw	r28, 0x07	; 7
 26c:	0f b6       	in	r0, 0x3f	; 63
 26e:	f8 94       	cli
 270:	de bf       	out	0x3e, r29	; 62
 272:	0f be       	out	0x3f, r0	; 63
 274:	cd bf       	out	0x3d, r28	; 61
 276:	cf 91       	pop	r28
 278:	df 91       	pop	r29
 27a:	08 95       	ret

0000027c <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
 27c:	df 93       	push	r29
 27e:	cf 93       	push	r28
 280:	cd b7       	in	r28, 0x3d	; 61
 282:	de b7       	in	r29, 0x3e	; 62
 284:	27 97       	sbiw	r28, 0x07	; 7
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	f8 94       	cli
 28a:	de bf       	out	0x3e, r29	; 62
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	cd bf       	out	0x3d, r28	; 61
 290:	89 83       	std	Y+1, r24	; 0x01
 292:	6a 83       	std	Y+2, r22	; 0x02
 294:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinValue==PIN_HIGH){      //high
 296:	8b 81       	ldd	r24, Y+3	; 0x03
 298:	81 30       	cpi	r24, 0x01	; 1
 29a:	09 f0       	breq	.+2      	; 0x29e <DIO_voidSetPinValue+0x22>
 29c:	6f c0       	rjmp	.+222    	; 0x37c <DIO_voidSetPinValue+0x100>
		switch(Copy_u8PortID){
 29e:	89 81       	ldd	r24, Y+1	; 0x01
 2a0:	28 2f       	mov	r18, r24
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	3f 83       	std	Y+7, r19	; 0x07
 2a6:	2e 83       	std	Y+6, r18	; 0x06
 2a8:	8e 81       	ldd	r24, Y+6	; 0x06
 2aa:	9f 81       	ldd	r25, Y+7	; 0x07
 2ac:	81 30       	cpi	r24, 0x01	; 1
 2ae:	91 05       	cpc	r25, r1
 2b0:	49 f1       	breq	.+82     	; 0x304 <DIO_voidSetPinValue+0x88>
 2b2:	2e 81       	ldd	r18, Y+6	; 0x06
 2b4:	3f 81       	ldd	r19, Y+7	; 0x07
 2b6:	22 30       	cpi	r18, 0x02	; 2
 2b8:	31 05       	cpc	r19, r1
 2ba:	2c f4       	brge	.+10     	; 0x2c6 <DIO_voidSetPinValue+0x4a>
 2bc:	8e 81       	ldd	r24, Y+6	; 0x06
 2be:	9f 81       	ldd	r25, Y+7	; 0x07
 2c0:	00 97       	sbiw	r24, 0x00	; 0
 2c2:	61 f0       	breq	.+24     	; 0x2dc <DIO_voidSetPinValue+0x60>
 2c4:	d2 c0       	rjmp	.+420    	; 0x46a <DIO_voidSetPinValue+0x1ee>
 2c6:	2e 81       	ldd	r18, Y+6	; 0x06
 2c8:	3f 81       	ldd	r19, Y+7	; 0x07
 2ca:	22 30       	cpi	r18, 0x02	; 2
 2cc:	31 05       	cpc	r19, r1
 2ce:	71 f1       	breq	.+92     	; 0x32c <DIO_voidSetPinValue+0xb0>
 2d0:	8e 81       	ldd	r24, Y+6	; 0x06
 2d2:	9f 81       	ldd	r25, Y+7	; 0x07
 2d4:	83 30       	cpi	r24, 0x03	; 3
 2d6:	91 05       	cpc	r25, r1
 2d8:	e9 f1       	breq	.+122    	; 0x354 <DIO_voidSetPinValue+0xd8>
 2da:	c7 c0       	rjmp	.+398    	; 0x46a <DIO_voidSetPinValue+0x1ee>
			case PORTA/*Port A*/: SetBit(PORTA_REG,Copy_u8PinID);break;
 2dc:	ab e3       	ldi	r26, 0x3B	; 59
 2de:	b0 e0       	ldi	r27, 0x00	; 0
 2e0:	eb e3       	ldi	r30, 0x3B	; 59
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	80 81       	ld	r24, Z
 2e6:	48 2f       	mov	r20, r24
 2e8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ea:	28 2f       	mov	r18, r24
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	02 2e       	mov	r0, r18
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <DIO_voidSetPinValue+0x7e>
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	0a 94       	dec	r0
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <DIO_voidSetPinValue+0x7a>
 2fe:	84 2b       	or	r24, r20
 300:	8c 93       	st	X, r24
 302:	b3 c0       	rjmp	.+358    	; 0x46a <DIO_voidSetPinValue+0x1ee>
			case PORTB/*Port B*/: SetBit(PORTB_REG,Copy_u8PinID);break;
 304:	a8 e3       	ldi	r26, 0x38	; 56
 306:	b0 e0       	ldi	r27, 0x00	; 0
 308:	e8 e3       	ldi	r30, 0x38	; 56
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	80 81       	ld	r24, Z
 30e:	48 2f       	mov	r20, r24
 310:	8a 81       	ldd	r24, Y+2	; 0x02
 312:	28 2f       	mov	r18, r24
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	02 2e       	mov	r0, r18
 31c:	02 c0       	rjmp	.+4      	; 0x322 <DIO_voidSetPinValue+0xa6>
 31e:	88 0f       	add	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	0a 94       	dec	r0
 324:	e2 f7       	brpl	.-8      	; 0x31e <DIO_voidSetPinValue+0xa2>
 326:	84 2b       	or	r24, r20
 328:	8c 93       	st	X, r24
 32a:	9f c0       	rjmp	.+318    	; 0x46a <DIO_voidSetPinValue+0x1ee>
			case PORTC/*Port C*/: SetBit(PORTC_REG,Copy_u8PinID);break;
 32c:	a5 e3       	ldi	r26, 0x35	; 53
 32e:	b0 e0       	ldi	r27, 0x00	; 0
 330:	e5 e3       	ldi	r30, 0x35	; 53
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	80 81       	ld	r24, Z
 336:	48 2f       	mov	r20, r24
 338:	8a 81       	ldd	r24, Y+2	; 0x02
 33a:	28 2f       	mov	r18, r24
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	02 2e       	mov	r0, r18
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_voidSetPinValue+0xce>
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	0a 94       	dec	r0
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_voidSetPinValue+0xca>
 34e:	84 2b       	or	r24, r20
 350:	8c 93       	st	X, r24
 352:	8b c0       	rjmp	.+278    	; 0x46a <DIO_voidSetPinValue+0x1ee>
			case PORTD/*Port D*/: SetBit(PORTD_REG,Copy_u8PinID);break;
 354:	a2 e3       	ldi	r26, 0x32	; 50
 356:	b0 e0       	ldi	r27, 0x00	; 0
 358:	e2 e3       	ldi	r30, 0x32	; 50
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	80 81       	ld	r24, Z
 35e:	48 2f       	mov	r20, r24
 360:	8a 81       	ldd	r24, Y+2	; 0x02
 362:	28 2f       	mov	r18, r24
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	02 2e       	mov	r0, r18
 36c:	02 c0       	rjmp	.+4      	; 0x372 <DIO_voidSetPinValue+0xf6>
 36e:	88 0f       	add	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	0a 94       	dec	r0
 374:	e2 f7       	brpl	.-8      	; 0x36e <DIO_voidSetPinValue+0xf2>
 376:	84 2b       	or	r24, r20
 378:	8c 93       	st	X, r24
 37a:	77 c0       	rjmp	.+238    	; 0x46a <DIO_voidSetPinValue+0x1ee>
		}
	}
	else if(Copy_u8PinValue==PIN_LOW){  //low
 37c:	8b 81       	ldd	r24, Y+3	; 0x03
 37e:	88 23       	and	r24, r24
 380:	09 f0       	breq	.+2      	; 0x384 <DIO_voidSetPinValue+0x108>
 382:	73 c0       	rjmp	.+230    	; 0x46a <DIO_voidSetPinValue+0x1ee>
		switch(Copy_u8PortID){
 384:	89 81       	ldd	r24, Y+1	; 0x01
 386:	28 2f       	mov	r18, r24
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	3d 83       	std	Y+5, r19	; 0x05
 38c:	2c 83       	std	Y+4, r18	; 0x04
 38e:	8c 81       	ldd	r24, Y+4	; 0x04
 390:	9d 81       	ldd	r25, Y+5	; 0x05
 392:	81 30       	cpi	r24, 0x01	; 1
 394:	91 05       	cpc	r25, r1
 396:	59 f1       	breq	.+86     	; 0x3ee <DIO_voidSetPinValue+0x172>
 398:	2c 81       	ldd	r18, Y+4	; 0x04
 39a:	3d 81       	ldd	r19, Y+5	; 0x05
 39c:	22 30       	cpi	r18, 0x02	; 2
 39e:	31 05       	cpc	r19, r1
 3a0:	2c f4       	brge	.+10     	; 0x3ac <DIO_voidSetPinValue+0x130>
 3a2:	8c 81       	ldd	r24, Y+4	; 0x04
 3a4:	9d 81       	ldd	r25, Y+5	; 0x05
 3a6:	00 97       	sbiw	r24, 0x00	; 0
 3a8:	69 f0       	breq	.+26     	; 0x3c4 <DIO_voidSetPinValue+0x148>
 3aa:	5f c0       	rjmp	.+190    	; 0x46a <DIO_voidSetPinValue+0x1ee>
 3ac:	2c 81       	ldd	r18, Y+4	; 0x04
 3ae:	3d 81       	ldd	r19, Y+5	; 0x05
 3b0:	22 30       	cpi	r18, 0x02	; 2
 3b2:	31 05       	cpc	r19, r1
 3b4:	89 f1       	breq	.+98     	; 0x418 <DIO_voidSetPinValue+0x19c>
 3b6:	8c 81       	ldd	r24, Y+4	; 0x04
 3b8:	9d 81       	ldd	r25, Y+5	; 0x05
 3ba:	83 30       	cpi	r24, 0x03	; 3
 3bc:	91 05       	cpc	r25, r1
 3be:	09 f4       	brne	.+2      	; 0x3c2 <DIO_voidSetPinValue+0x146>
 3c0:	40 c0       	rjmp	.+128    	; 0x442 <DIO_voidSetPinValue+0x1c6>
 3c2:	53 c0       	rjmp	.+166    	; 0x46a <DIO_voidSetPinValue+0x1ee>
			case PORTA/*Port A*/: ClrBit(PORTA_REG,Copy_u8PinID);break;
 3c4:	ab e3       	ldi	r26, 0x3B	; 59
 3c6:	b0 e0       	ldi	r27, 0x00	; 0
 3c8:	eb e3       	ldi	r30, 0x3B	; 59
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	80 81       	ld	r24, Z
 3ce:	48 2f       	mov	r20, r24
 3d0:	8a 81       	ldd	r24, Y+2	; 0x02
 3d2:	28 2f       	mov	r18, r24
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	02 2e       	mov	r0, r18
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_voidSetPinValue+0x166>
 3de:	88 0f       	add	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	0a 94       	dec	r0
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_voidSetPinValue+0x162>
 3e6:	80 95       	com	r24
 3e8:	84 23       	and	r24, r20
 3ea:	8c 93       	st	X, r24
 3ec:	3e c0       	rjmp	.+124    	; 0x46a <DIO_voidSetPinValue+0x1ee>
			case PORTB/*Port B*/: ClrBit(PORTB_REG,Copy_u8PinID);break;
 3ee:	a8 e3       	ldi	r26, 0x38	; 56
 3f0:	b0 e0       	ldi	r27, 0x00	; 0
 3f2:	e8 e3       	ldi	r30, 0x38	; 56
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	80 81       	ld	r24, Z
 3f8:	48 2f       	mov	r20, r24
 3fa:	8a 81       	ldd	r24, Y+2	; 0x02
 3fc:	28 2f       	mov	r18, r24
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	02 2e       	mov	r0, r18
 406:	02 c0       	rjmp	.+4      	; 0x40c <DIO_voidSetPinValue+0x190>
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	0a 94       	dec	r0
 40e:	e2 f7       	brpl	.-8      	; 0x408 <DIO_voidSetPinValue+0x18c>
 410:	80 95       	com	r24
 412:	84 23       	and	r24, r20
 414:	8c 93       	st	X, r24
 416:	29 c0       	rjmp	.+82     	; 0x46a <DIO_voidSetPinValue+0x1ee>
			case PORTC/*Port C*/: ClrBit(PORTC_REG,Copy_u8PinID);break;
 418:	a5 e3       	ldi	r26, 0x35	; 53
 41a:	b0 e0       	ldi	r27, 0x00	; 0
 41c:	e5 e3       	ldi	r30, 0x35	; 53
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	80 81       	ld	r24, Z
 422:	48 2f       	mov	r20, r24
 424:	8a 81       	ldd	r24, Y+2	; 0x02
 426:	28 2f       	mov	r18, r24
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	02 2e       	mov	r0, r18
 430:	02 c0       	rjmp	.+4      	; 0x436 <DIO_voidSetPinValue+0x1ba>
 432:	88 0f       	add	r24, r24
 434:	99 1f       	adc	r25, r25
 436:	0a 94       	dec	r0
 438:	e2 f7       	brpl	.-8      	; 0x432 <DIO_voidSetPinValue+0x1b6>
 43a:	80 95       	com	r24
 43c:	84 23       	and	r24, r20
 43e:	8c 93       	st	X, r24
 440:	14 c0       	rjmp	.+40     	; 0x46a <DIO_voidSetPinValue+0x1ee>
			case PORTD/*Port D*/: ClrBit(PORTD_REG,Copy_u8PinID);break;
 442:	a2 e3       	ldi	r26, 0x32	; 50
 444:	b0 e0       	ldi	r27, 0x00	; 0
 446:	e2 e3       	ldi	r30, 0x32	; 50
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	80 81       	ld	r24, Z
 44c:	48 2f       	mov	r20, r24
 44e:	8a 81       	ldd	r24, Y+2	; 0x02
 450:	28 2f       	mov	r18, r24
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	02 2e       	mov	r0, r18
 45a:	02 c0       	rjmp	.+4      	; 0x460 <DIO_voidSetPinValue+0x1e4>
 45c:	88 0f       	add	r24, r24
 45e:	99 1f       	adc	r25, r25
 460:	0a 94       	dec	r0
 462:	e2 f7       	brpl	.-8      	; 0x45c <DIO_voidSetPinValue+0x1e0>
 464:	80 95       	com	r24
 466:	84 23       	and	r24, r20
 468:	8c 93       	st	X, r24
		}
	}	
}
 46a:	27 96       	adiw	r28, 0x07	; 7
 46c:	0f b6       	in	r0, 0x3f	; 63
 46e:	f8 94       	cli
 470:	de bf       	out	0x3e, r29	; 62
 472:	0f be       	out	0x3f, r0	; 63
 474:	cd bf       	out	0x3d, r28	; 61
 476:	cf 91       	pop	r28
 478:	df 91       	pop	r29
 47a:	08 95       	ret

0000047c <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(u8 Copy_u8PortID,u8 Copy_u8PortDir){
 47c:	df 93       	push	r29
 47e:	cf 93       	push	r28
 480:	00 d0       	rcall	.+0      	; 0x482 <DIO_voidSetPortDirection+0x6>
 482:	00 d0       	rcall	.+0      	; 0x484 <DIO_voidSetPortDirection+0x8>
 484:	cd b7       	in	r28, 0x3d	; 61
 486:	de b7       	in	r29, 0x3e	; 62
 488:	89 83       	std	Y+1, r24	; 0x01
 48a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortID){
 48c:	89 81       	ldd	r24, Y+1	; 0x01
 48e:	28 2f       	mov	r18, r24
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	3c 83       	std	Y+4, r19	; 0x04
 494:	2b 83       	std	Y+3, r18	; 0x03
 496:	8b 81       	ldd	r24, Y+3	; 0x03
 498:	9c 81       	ldd	r25, Y+4	; 0x04
 49a:	81 30       	cpi	r24, 0x01	; 1
 49c:	91 05       	cpc	r25, r1
 49e:	d1 f0       	breq	.+52     	; 0x4d4 <DIO_voidSetPortDirection+0x58>
 4a0:	2b 81       	ldd	r18, Y+3	; 0x03
 4a2:	3c 81       	ldd	r19, Y+4	; 0x04
 4a4:	22 30       	cpi	r18, 0x02	; 2
 4a6:	31 05       	cpc	r19, r1
 4a8:	2c f4       	brge	.+10     	; 0x4b4 <DIO_voidSetPortDirection+0x38>
 4aa:	8b 81       	ldd	r24, Y+3	; 0x03
 4ac:	9c 81       	ldd	r25, Y+4	; 0x04
 4ae:	00 97       	sbiw	r24, 0x00	; 0
 4b0:	61 f0       	breq	.+24     	; 0x4ca <DIO_voidSetPortDirection+0x4e>
 4b2:	1e c0       	rjmp	.+60     	; 0x4f0 <DIO_voidSetPortDirection+0x74>
 4b4:	2b 81       	ldd	r18, Y+3	; 0x03
 4b6:	3c 81       	ldd	r19, Y+4	; 0x04
 4b8:	22 30       	cpi	r18, 0x02	; 2
 4ba:	31 05       	cpc	r19, r1
 4bc:	81 f0       	breq	.+32     	; 0x4de <DIO_voidSetPortDirection+0x62>
 4be:	8b 81       	ldd	r24, Y+3	; 0x03
 4c0:	9c 81       	ldd	r25, Y+4	; 0x04
 4c2:	83 30       	cpi	r24, 0x03	; 3
 4c4:	91 05       	cpc	r25, r1
 4c6:	81 f0       	breq	.+32     	; 0x4e8 <DIO_voidSetPortDirection+0x6c>
 4c8:	13 c0       	rjmp	.+38     	; 0x4f0 <DIO_voidSetPortDirection+0x74>
		case PORTA/*Port A*/: DDRA_REG=Copy_u8PortDir;break;
 4ca:	ea e3       	ldi	r30, 0x3A	; 58
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	8a 81       	ldd	r24, Y+2	; 0x02
 4d0:	80 83       	st	Z, r24
 4d2:	0e c0       	rjmp	.+28     	; 0x4f0 <DIO_voidSetPortDirection+0x74>
		case PORTB/*Port B*/: DDRB_REG=Copy_u8PortDir;break;
 4d4:	e7 e3       	ldi	r30, 0x37	; 55
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	8a 81       	ldd	r24, Y+2	; 0x02
 4da:	80 83       	st	Z, r24
 4dc:	09 c0       	rjmp	.+18     	; 0x4f0 <DIO_voidSetPortDirection+0x74>
		case PORTC/*Port C*/: DDRC_REG=Copy_u8PortDir;break;
 4de:	e4 e3       	ldi	r30, 0x34	; 52
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	8a 81       	ldd	r24, Y+2	; 0x02
 4e4:	80 83       	st	Z, r24
 4e6:	04 c0       	rjmp	.+8      	; 0x4f0 <DIO_voidSetPortDirection+0x74>
		case PORTD/*Port D*/: DDRD_REG=Copy_u8PortDir;break;
 4e8:	e1 e3       	ldi	r30, 0x31	; 49
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	8a 81       	ldd	r24, Y+2	; 0x02
 4ee:	80 83       	st	Z, r24
	}
}
 4f0:	0f 90       	pop	r0
 4f2:	0f 90       	pop	r0
 4f4:	0f 90       	pop	r0
 4f6:	0f 90       	pop	r0
 4f8:	cf 91       	pop	r28
 4fa:	df 91       	pop	r29
 4fc:	08 95       	ret

000004fe <DIO_voidSetAllPortInput>:

void DIO_voidSetAllPortInput(u8 Copy_u8PortID){
 4fe:	df 93       	push	r29
 500:	cf 93       	push	r28
 502:	00 d0       	rcall	.+0      	; 0x504 <DIO_voidSetAllPortInput+0x6>
 504:	0f 92       	push	r0
 506:	cd b7       	in	r28, 0x3d	; 61
 508:	de b7       	in	r29, 0x3e	; 62
 50a:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID){
 50c:	89 81       	ldd	r24, Y+1	; 0x01
 50e:	28 2f       	mov	r18, r24
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	3b 83       	std	Y+3, r19	; 0x03
 514:	2a 83       	std	Y+2, r18	; 0x02
 516:	8a 81       	ldd	r24, Y+2	; 0x02
 518:	9b 81       	ldd	r25, Y+3	; 0x03
 51a:	81 30       	cpi	r24, 0x01	; 1
 51c:	91 05       	cpc	r25, r1
 51e:	c9 f0       	breq	.+50     	; 0x552 <DIO_voidSetAllPortInput+0x54>
 520:	2a 81       	ldd	r18, Y+2	; 0x02
 522:	3b 81       	ldd	r19, Y+3	; 0x03
 524:	22 30       	cpi	r18, 0x02	; 2
 526:	31 05       	cpc	r19, r1
 528:	2c f4       	brge	.+10     	; 0x534 <DIO_voidSetAllPortInput+0x36>
 52a:	8a 81       	ldd	r24, Y+2	; 0x02
 52c:	9b 81       	ldd	r25, Y+3	; 0x03
 52e:	00 97       	sbiw	r24, 0x00	; 0
 530:	61 f0       	breq	.+24     	; 0x54a <DIO_voidSetAllPortInput+0x4c>
 532:	1a c0       	rjmp	.+52     	; 0x568 <DIO_voidSetAllPortInput+0x6a>
 534:	2a 81       	ldd	r18, Y+2	; 0x02
 536:	3b 81       	ldd	r19, Y+3	; 0x03
 538:	22 30       	cpi	r18, 0x02	; 2
 53a:	31 05       	cpc	r19, r1
 53c:	71 f0       	breq	.+28     	; 0x55a <DIO_voidSetAllPortInput+0x5c>
 53e:	8a 81       	ldd	r24, Y+2	; 0x02
 540:	9b 81       	ldd	r25, Y+3	; 0x03
 542:	83 30       	cpi	r24, 0x03	; 3
 544:	91 05       	cpc	r25, r1
 546:	69 f0       	breq	.+26     	; 0x562 <DIO_voidSetAllPortInput+0x64>
 548:	0f c0       	rjmp	.+30     	; 0x568 <DIO_voidSetAllPortInput+0x6a>
		case PORTA/*Port A*/: DDRA_REG=PORT_INPUT;break;
 54a:	ea e3       	ldi	r30, 0x3A	; 58
 54c:	f0 e0       	ldi	r31, 0x00	; 0
 54e:	10 82       	st	Z, r1
 550:	0b c0       	rjmp	.+22     	; 0x568 <DIO_voidSetAllPortInput+0x6a>
		case PORTB/*Port B*/: DDRB_REG=PORT_INPUT;break;
 552:	e7 e3       	ldi	r30, 0x37	; 55
 554:	f0 e0       	ldi	r31, 0x00	; 0
 556:	10 82       	st	Z, r1
 558:	07 c0       	rjmp	.+14     	; 0x568 <DIO_voidSetAllPortInput+0x6a>
		case PORTC/*Port C*/: DDRC_REG=PORT_INPUT;break;
 55a:	e4 e3       	ldi	r30, 0x34	; 52
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	10 82       	st	Z, r1
 560:	03 c0       	rjmp	.+6      	; 0x568 <DIO_voidSetAllPortInput+0x6a>
		case PORTD/*Port D*/: DDRD_REG=PORT_INPUT;break;
 562:	e1 e3       	ldi	r30, 0x31	; 49
 564:	f0 e0       	ldi	r31, 0x00	; 0
 566:	10 82       	st	Z, r1
	}
}
 568:	0f 90       	pop	r0
 56a:	0f 90       	pop	r0
 56c:	0f 90       	pop	r0
 56e:	cf 91       	pop	r28
 570:	df 91       	pop	r29
 572:	08 95       	ret

00000574 <DIO_voidSetAllPortOutput>:

void DIO_voidSetAllPortOutput(u8 Copy_u8PortID){
 574:	df 93       	push	r29
 576:	cf 93       	push	r28
 578:	00 d0       	rcall	.+0      	; 0x57a <DIO_voidSetAllPortOutput+0x6>
 57a:	0f 92       	push	r0
 57c:	cd b7       	in	r28, 0x3d	; 61
 57e:	de b7       	in	r29, 0x3e	; 62
 580:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID){
 582:	89 81       	ldd	r24, Y+1	; 0x01
 584:	28 2f       	mov	r18, r24
 586:	30 e0       	ldi	r19, 0x00	; 0
 588:	3b 83       	std	Y+3, r19	; 0x03
 58a:	2a 83       	std	Y+2, r18	; 0x02
 58c:	8a 81       	ldd	r24, Y+2	; 0x02
 58e:	9b 81       	ldd	r25, Y+3	; 0x03
 590:	81 30       	cpi	r24, 0x01	; 1
 592:	91 05       	cpc	r25, r1
 594:	d1 f0       	breq	.+52     	; 0x5ca <DIO_voidSetAllPortOutput+0x56>
 596:	2a 81       	ldd	r18, Y+2	; 0x02
 598:	3b 81       	ldd	r19, Y+3	; 0x03
 59a:	22 30       	cpi	r18, 0x02	; 2
 59c:	31 05       	cpc	r19, r1
 59e:	2c f4       	brge	.+10     	; 0x5aa <DIO_voidSetAllPortOutput+0x36>
 5a0:	8a 81       	ldd	r24, Y+2	; 0x02
 5a2:	9b 81       	ldd	r25, Y+3	; 0x03
 5a4:	00 97       	sbiw	r24, 0x00	; 0
 5a6:	61 f0       	breq	.+24     	; 0x5c0 <DIO_voidSetAllPortOutput+0x4c>
 5a8:	1e c0       	rjmp	.+60     	; 0x5e6 <DIO_voidSetAllPortOutput+0x72>
 5aa:	2a 81       	ldd	r18, Y+2	; 0x02
 5ac:	3b 81       	ldd	r19, Y+3	; 0x03
 5ae:	22 30       	cpi	r18, 0x02	; 2
 5b0:	31 05       	cpc	r19, r1
 5b2:	81 f0       	breq	.+32     	; 0x5d4 <DIO_voidSetAllPortOutput+0x60>
 5b4:	8a 81       	ldd	r24, Y+2	; 0x02
 5b6:	9b 81       	ldd	r25, Y+3	; 0x03
 5b8:	83 30       	cpi	r24, 0x03	; 3
 5ba:	91 05       	cpc	r25, r1
 5bc:	81 f0       	breq	.+32     	; 0x5de <DIO_voidSetAllPortOutput+0x6a>
 5be:	13 c0       	rjmp	.+38     	; 0x5e6 <DIO_voidSetAllPortOutput+0x72>
		case PORTA/*Port A*/: DDRA_REG=PORT_OUTPUT;break;
 5c0:	ea e3       	ldi	r30, 0x3A	; 58
 5c2:	f0 e0       	ldi	r31, 0x00	; 0
 5c4:	8f ef       	ldi	r24, 0xFF	; 255
 5c6:	80 83       	st	Z, r24
 5c8:	0e c0       	rjmp	.+28     	; 0x5e6 <DIO_voidSetAllPortOutput+0x72>
		case PORTB/*Port B*/: DDRB_REG=PORT_OUTPUT;break;
 5ca:	e7 e3       	ldi	r30, 0x37	; 55
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	8f ef       	ldi	r24, 0xFF	; 255
 5d0:	80 83       	st	Z, r24
 5d2:	09 c0       	rjmp	.+18     	; 0x5e6 <DIO_voidSetAllPortOutput+0x72>
		case PORTC/*Port C*/: DDRC_REG=PORT_OUTPUT;break;
 5d4:	e4 e3       	ldi	r30, 0x34	; 52
 5d6:	f0 e0       	ldi	r31, 0x00	; 0
 5d8:	8f ef       	ldi	r24, 0xFF	; 255
 5da:	80 83       	st	Z, r24
 5dc:	04 c0       	rjmp	.+8      	; 0x5e6 <DIO_voidSetAllPortOutput+0x72>
		case PORTD/*Port D*/: DDRD_REG=PORT_OUTPUT;break;
 5de:	e1 e3       	ldi	r30, 0x31	; 49
 5e0:	f0 e0       	ldi	r31, 0x00	; 0
 5e2:	8f ef       	ldi	r24, 0xFF	; 255
 5e4:	80 83       	st	Z, r24
	}
}
 5e6:	0f 90       	pop	r0
 5e8:	0f 90       	pop	r0
 5ea:	0f 90       	pop	r0
 5ec:	cf 91       	pop	r28
 5ee:	df 91       	pop	r29
 5f0:	08 95       	ret

000005f2 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 Copy_u8PortID,u8 Copy_u8PortValue){
 5f2:	df 93       	push	r29
 5f4:	cf 93       	push	r28
 5f6:	00 d0       	rcall	.+0      	; 0x5f8 <DIO_voidSetPortValue+0x6>
 5f8:	00 d0       	rcall	.+0      	; 0x5fa <DIO_voidSetPortValue+0x8>
 5fa:	cd b7       	in	r28, 0x3d	; 61
 5fc:	de b7       	in	r29, 0x3e	; 62
 5fe:	89 83       	std	Y+1, r24	; 0x01
 600:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortID){
 602:	89 81       	ldd	r24, Y+1	; 0x01
 604:	28 2f       	mov	r18, r24
 606:	30 e0       	ldi	r19, 0x00	; 0
 608:	3c 83       	std	Y+4, r19	; 0x04
 60a:	2b 83       	std	Y+3, r18	; 0x03
 60c:	8b 81       	ldd	r24, Y+3	; 0x03
 60e:	9c 81       	ldd	r25, Y+4	; 0x04
 610:	81 30       	cpi	r24, 0x01	; 1
 612:	91 05       	cpc	r25, r1
 614:	d1 f0       	breq	.+52     	; 0x64a <DIO_voidSetPortValue+0x58>
 616:	2b 81       	ldd	r18, Y+3	; 0x03
 618:	3c 81       	ldd	r19, Y+4	; 0x04
 61a:	22 30       	cpi	r18, 0x02	; 2
 61c:	31 05       	cpc	r19, r1
 61e:	2c f4       	brge	.+10     	; 0x62a <DIO_voidSetPortValue+0x38>
 620:	8b 81       	ldd	r24, Y+3	; 0x03
 622:	9c 81       	ldd	r25, Y+4	; 0x04
 624:	00 97       	sbiw	r24, 0x00	; 0
 626:	61 f0       	breq	.+24     	; 0x640 <DIO_voidSetPortValue+0x4e>
 628:	1e c0       	rjmp	.+60     	; 0x666 <DIO_voidSetPortValue+0x74>
 62a:	2b 81       	ldd	r18, Y+3	; 0x03
 62c:	3c 81       	ldd	r19, Y+4	; 0x04
 62e:	22 30       	cpi	r18, 0x02	; 2
 630:	31 05       	cpc	r19, r1
 632:	81 f0       	breq	.+32     	; 0x654 <DIO_voidSetPortValue+0x62>
 634:	8b 81       	ldd	r24, Y+3	; 0x03
 636:	9c 81       	ldd	r25, Y+4	; 0x04
 638:	83 30       	cpi	r24, 0x03	; 3
 63a:	91 05       	cpc	r25, r1
 63c:	81 f0       	breq	.+32     	; 0x65e <DIO_voidSetPortValue+0x6c>
 63e:	13 c0       	rjmp	.+38     	; 0x666 <DIO_voidSetPortValue+0x74>
		case PORTA/*Port A*/: PORTA_REG=Copy_u8PortValue;break;
 640:	eb e3       	ldi	r30, 0x3B	; 59
 642:	f0 e0       	ldi	r31, 0x00	; 0
 644:	8a 81       	ldd	r24, Y+2	; 0x02
 646:	80 83       	st	Z, r24
 648:	0e c0       	rjmp	.+28     	; 0x666 <DIO_voidSetPortValue+0x74>
		case PORTB/*Port B*/: PORTB_REG=Copy_u8PortValue;break;
 64a:	e8 e3       	ldi	r30, 0x38	; 56
 64c:	f0 e0       	ldi	r31, 0x00	; 0
 64e:	8a 81       	ldd	r24, Y+2	; 0x02
 650:	80 83       	st	Z, r24
 652:	09 c0       	rjmp	.+18     	; 0x666 <DIO_voidSetPortValue+0x74>
		case PORTC/*Port C*/: PORTC_REG=Copy_u8PortValue;break;
 654:	e5 e3       	ldi	r30, 0x35	; 53
 656:	f0 e0       	ldi	r31, 0x00	; 0
 658:	8a 81       	ldd	r24, Y+2	; 0x02
 65a:	80 83       	st	Z, r24
 65c:	04 c0       	rjmp	.+8      	; 0x666 <DIO_voidSetPortValue+0x74>
		case PORTD/*Port D*/: PORTD_REG=Copy_u8PortValue;break;
 65e:	e2 e3       	ldi	r30, 0x32	; 50
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	8a 81       	ldd	r24, Y+2	; 0x02
 664:	80 83       	st	Z, r24
	}
}
 666:	0f 90       	pop	r0
 668:	0f 90       	pop	r0
 66a:	0f 90       	pop	r0
 66c:	0f 90       	pop	r0
 66e:	cf 91       	pop	r28
 670:	df 91       	pop	r29
 672:	08 95       	ret

00000674 <DIO_voidSetAllPortLow>:

void DIO_voidSetAllPortLow(u8 Copy_u8PortID){
 674:	df 93       	push	r29
 676:	cf 93       	push	r28
 678:	00 d0       	rcall	.+0      	; 0x67a <DIO_voidSetAllPortLow+0x6>
 67a:	0f 92       	push	r0
 67c:	cd b7       	in	r28, 0x3d	; 61
 67e:	de b7       	in	r29, 0x3e	; 62
 680:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID){
 682:	89 81       	ldd	r24, Y+1	; 0x01
 684:	28 2f       	mov	r18, r24
 686:	30 e0       	ldi	r19, 0x00	; 0
 688:	3b 83       	std	Y+3, r19	; 0x03
 68a:	2a 83       	std	Y+2, r18	; 0x02
 68c:	8a 81       	ldd	r24, Y+2	; 0x02
 68e:	9b 81       	ldd	r25, Y+3	; 0x03
 690:	81 30       	cpi	r24, 0x01	; 1
 692:	91 05       	cpc	r25, r1
 694:	c9 f0       	breq	.+50     	; 0x6c8 <DIO_voidSetAllPortLow+0x54>
 696:	2a 81       	ldd	r18, Y+2	; 0x02
 698:	3b 81       	ldd	r19, Y+3	; 0x03
 69a:	22 30       	cpi	r18, 0x02	; 2
 69c:	31 05       	cpc	r19, r1
 69e:	2c f4       	brge	.+10     	; 0x6aa <DIO_voidSetAllPortLow+0x36>
 6a0:	8a 81       	ldd	r24, Y+2	; 0x02
 6a2:	9b 81       	ldd	r25, Y+3	; 0x03
 6a4:	00 97       	sbiw	r24, 0x00	; 0
 6a6:	61 f0       	breq	.+24     	; 0x6c0 <DIO_voidSetAllPortLow+0x4c>
 6a8:	1a c0       	rjmp	.+52     	; 0x6de <DIO_voidSetAllPortLow+0x6a>
 6aa:	2a 81       	ldd	r18, Y+2	; 0x02
 6ac:	3b 81       	ldd	r19, Y+3	; 0x03
 6ae:	22 30       	cpi	r18, 0x02	; 2
 6b0:	31 05       	cpc	r19, r1
 6b2:	71 f0       	breq	.+28     	; 0x6d0 <DIO_voidSetAllPortLow+0x5c>
 6b4:	8a 81       	ldd	r24, Y+2	; 0x02
 6b6:	9b 81       	ldd	r25, Y+3	; 0x03
 6b8:	83 30       	cpi	r24, 0x03	; 3
 6ba:	91 05       	cpc	r25, r1
 6bc:	69 f0       	breq	.+26     	; 0x6d8 <DIO_voidSetAllPortLow+0x64>
 6be:	0f c0       	rjmp	.+30     	; 0x6de <DIO_voidSetAllPortLow+0x6a>
		case PORTA/*Port A*/: PORTA_REG=PORT_LOW;break;
 6c0:	eb e3       	ldi	r30, 0x3B	; 59
 6c2:	f0 e0       	ldi	r31, 0x00	; 0
 6c4:	10 82       	st	Z, r1
 6c6:	0b c0       	rjmp	.+22     	; 0x6de <DIO_voidSetAllPortLow+0x6a>
		case PORTB/*Port B*/: PORTB_REG=PORT_LOW;break;
 6c8:	e8 e3       	ldi	r30, 0x38	; 56
 6ca:	f0 e0       	ldi	r31, 0x00	; 0
 6cc:	10 82       	st	Z, r1
 6ce:	07 c0       	rjmp	.+14     	; 0x6de <DIO_voidSetAllPortLow+0x6a>
		case PORTC/*Port C*/: PORTC_REG=PORT_LOW;break;
 6d0:	e5 e3       	ldi	r30, 0x35	; 53
 6d2:	f0 e0       	ldi	r31, 0x00	; 0
 6d4:	10 82       	st	Z, r1
 6d6:	03 c0       	rjmp	.+6      	; 0x6de <DIO_voidSetAllPortLow+0x6a>
		case PORTD/*Port D*/: PORTD_REG=PORT_LOW;break;
 6d8:	e2 e3       	ldi	r30, 0x32	; 50
 6da:	f0 e0       	ldi	r31, 0x00	; 0
 6dc:	10 82       	st	Z, r1
	}
}
 6de:	0f 90       	pop	r0
 6e0:	0f 90       	pop	r0
 6e2:	0f 90       	pop	r0
 6e4:	cf 91       	pop	r28
 6e6:	df 91       	pop	r29
 6e8:	08 95       	ret

000006ea <DIO_voidSetAllPortHigh>:

void DIO_voidSetAllPortHigh(u8 Copy_u8PortID){
 6ea:	df 93       	push	r29
 6ec:	cf 93       	push	r28
 6ee:	00 d0       	rcall	.+0      	; 0x6f0 <DIO_voidSetAllPortHigh+0x6>
 6f0:	0f 92       	push	r0
 6f2:	cd b7       	in	r28, 0x3d	; 61
 6f4:	de b7       	in	r29, 0x3e	; 62
 6f6:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID){
 6f8:	89 81       	ldd	r24, Y+1	; 0x01
 6fa:	28 2f       	mov	r18, r24
 6fc:	30 e0       	ldi	r19, 0x00	; 0
 6fe:	3b 83       	std	Y+3, r19	; 0x03
 700:	2a 83       	std	Y+2, r18	; 0x02
 702:	8a 81       	ldd	r24, Y+2	; 0x02
 704:	9b 81       	ldd	r25, Y+3	; 0x03
 706:	81 30       	cpi	r24, 0x01	; 1
 708:	91 05       	cpc	r25, r1
 70a:	d1 f0       	breq	.+52     	; 0x740 <DIO_voidSetAllPortHigh+0x56>
 70c:	2a 81       	ldd	r18, Y+2	; 0x02
 70e:	3b 81       	ldd	r19, Y+3	; 0x03
 710:	22 30       	cpi	r18, 0x02	; 2
 712:	31 05       	cpc	r19, r1
 714:	2c f4       	brge	.+10     	; 0x720 <DIO_voidSetAllPortHigh+0x36>
 716:	8a 81       	ldd	r24, Y+2	; 0x02
 718:	9b 81       	ldd	r25, Y+3	; 0x03
 71a:	00 97       	sbiw	r24, 0x00	; 0
 71c:	61 f0       	breq	.+24     	; 0x736 <DIO_voidSetAllPortHigh+0x4c>
 71e:	1e c0       	rjmp	.+60     	; 0x75c <DIO_voidSetAllPortHigh+0x72>
 720:	2a 81       	ldd	r18, Y+2	; 0x02
 722:	3b 81       	ldd	r19, Y+3	; 0x03
 724:	22 30       	cpi	r18, 0x02	; 2
 726:	31 05       	cpc	r19, r1
 728:	81 f0       	breq	.+32     	; 0x74a <DIO_voidSetAllPortHigh+0x60>
 72a:	8a 81       	ldd	r24, Y+2	; 0x02
 72c:	9b 81       	ldd	r25, Y+3	; 0x03
 72e:	83 30       	cpi	r24, 0x03	; 3
 730:	91 05       	cpc	r25, r1
 732:	81 f0       	breq	.+32     	; 0x754 <DIO_voidSetAllPortHigh+0x6a>
 734:	13 c0       	rjmp	.+38     	; 0x75c <DIO_voidSetAllPortHigh+0x72>
		case PORTA/*Port A*/: PORTA_REG=PORT_HIGH;break;
 736:	eb e3       	ldi	r30, 0x3B	; 59
 738:	f0 e0       	ldi	r31, 0x00	; 0
 73a:	8f ef       	ldi	r24, 0xFF	; 255
 73c:	80 83       	st	Z, r24
 73e:	0e c0       	rjmp	.+28     	; 0x75c <DIO_voidSetAllPortHigh+0x72>
		case PORTB/*Port B*/: PORTB_REG=PORT_HIGH;break;
 740:	e8 e3       	ldi	r30, 0x38	; 56
 742:	f0 e0       	ldi	r31, 0x00	; 0
 744:	8f ef       	ldi	r24, 0xFF	; 255
 746:	80 83       	st	Z, r24
 748:	09 c0       	rjmp	.+18     	; 0x75c <DIO_voidSetAllPortHigh+0x72>
		case PORTC/*Port C*/: PORTC_REG=PORT_HIGH;break;
 74a:	e5 e3       	ldi	r30, 0x35	; 53
 74c:	f0 e0       	ldi	r31, 0x00	; 0
 74e:	8f ef       	ldi	r24, 0xFF	; 255
 750:	80 83       	st	Z, r24
 752:	04 c0       	rjmp	.+8      	; 0x75c <DIO_voidSetAllPortHigh+0x72>
		case PORTD/*Port D*/: PORTD_REG=PORT_HIGH;break;
 754:	e2 e3       	ldi	r30, 0x32	; 50
 756:	f0 e0       	ldi	r31, 0x00	; 0
 758:	8f ef       	ldi	r24, 0xFF	; 255
 75a:	80 83       	st	Z, r24
	}
}
 75c:	0f 90       	pop	r0
 75e:	0f 90       	pop	r0
 760:	0f 90       	pop	r0
 762:	cf 91       	pop	r28
 764:	df 91       	pop	r29
 766:	08 95       	ret

00000768 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID){
 768:	df 93       	push	r29
 76a:	cf 93       	push	r28
 76c:	00 d0       	rcall	.+0      	; 0x76e <DIO_u8GetPinValue+0x6>
 76e:	00 d0       	rcall	.+0      	; 0x770 <DIO_u8GetPinValue+0x8>
 770:	0f 92       	push	r0
 772:	cd b7       	in	r28, 0x3d	; 61
 774:	de b7       	in	r29, 0x3e	; 62
 776:	8a 83       	std	Y+2, r24	; 0x02
 778:	6b 83       	std	Y+3, r22	; 0x03
	u8 value;
	switch(Copy_u8PortID){
 77a:	8a 81       	ldd	r24, Y+2	; 0x02
 77c:	28 2f       	mov	r18, r24
 77e:	30 e0       	ldi	r19, 0x00	; 0
 780:	3d 83       	std	Y+5, r19	; 0x05
 782:	2c 83       	std	Y+4, r18	; 0x04
 784:	4c 81       	ldd	r20, Y+4	; 0x04
 786:	5d 81       	ldd	r21, Y+5	; 0x05
 788:	41 30       	cpi	r20, 0x01	; 1
 78a:	51 05       	cpc	r21, r1
 78c:	41 f1       	breq	.+80     	; 0x7de <DIO_u8GetPinValue+0x76>
 78e:	8c 81       	ldd	r24, Y+4	; 0x04
 790:	9d 81       	ldd	r25, Y+5	; 0x05
 792:	82 30       	cpi	r24, 0x02	; 2
 794:	91 05       	cpc	r25, r1
 796:	34 f4       	brge	.+12     	; 0x7a4 <DIO_u8GetPinValue+0x3c>
 798:	2c 81       	ldd	r18, Y+4	; 0x04
 79a:	3d 81       	ldd	r19, Y+5	; 0x05
 79c:	21 15       	cp	r18, r1
 79e:	31 05       	cpc	r19, r1
 7a0:	61 f0       	breq	.+24     	; 0x7ba <DIO_u8GetPinValue+0x52>
 7a2:	52 c0       	rjmp	.+164    	; 0x848 <DIO_u8GetPinValue+0xe0>
 7a4:	4c 81       	ldd	r20, Y+4	; 0x04
 7a6:	5d 81       	ldd	r21, Y+5	; 0x05
 7a8:	42 30       	cpi	r20, 0x02	; 2
 7aa:	51 05       	cpc	r21, r1
 7ac:	51 f1       	breq	.+84     	; 0x802 <DIO_u8GetPinValue+0x9a>
 7ae:	8c 81       	ldd	r24, Y+4	; 0x04
 7b0:	9d 81       	ldd	r25, Y+5	; 0x05
 7b2:	83 30       	cpi	r24, 0x03	; 3
 7b4:	91 05       	cpc	r25, r1
 7b6:	b9 f1       	breq	.+110    	; 0x826 <DIO_u8GetPinValue+0xbe>
 7b8:	47 c0       	rjmp	.+142    	; 0x848 <DIO_u8GetPinValue+0xe0>
		case PORTA/*Port A*/: value=GetBit(PINA_REG,Copy_u8PinID);break;
 7ba:	e9 e3       	ldi	r30, 0x39	; 57
 7bc:	f0 e0       	ldi	r31, 0x00	; 0
 7be:	80 81       	ld	r24, Z
 7c0:	28 2f       	mov	r18, r24
 7c2:	30 e0       	ldi	r19, 0x00	; 0
 7c4:	8b 81       	ldd	r24, Y+3	; 0x03
 7c6:	88 2f       	mov	r24, r24
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	a9 01       	movw	r20, r18
 7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <DIO_u8GetPinValue+0x6a>
 7ce:	55 95       	asr	r21
 7d0:	47 95       	ror	r20
 7d2:	8a 95       	dec	r24
 7d4:	e2 f7       	brpl	.-8      	; 0x7ce <DIO_u8GetPinValue+0x66>
 7d6:	ca 01       	movw	r24, r20
 7d8:	81 70       	andi	r24, 0x01	; 1
 7da:	89 83       	std	Y+1, r24	; 0x01
 7dc:	35 c0       	rjmp	.+106    	; 0x848 <DIO_u8GetPinValue+0xe0>
		case PORTB/*Port B*/: value=GetBit(PINB_REG,Copy_u8PinID);break;
 7de:	e6 e3       	ldi	r30, 0x36	; 54
 7e0:	f0 e0       	ldi	r31, 0x00	; 0
 7e2:	80 81       	ld	r24, Z
 7e4:	28 2f       	mov	r18, r24
 7e6:	30 e0       	ldi	r19, 0x00	; 0
 7e8:	8b 81       	ldd	r24, Y+3	; 0x03
 7ea:	88 2f       	mov	r24, r24
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	a9 01       	movw	r20, r18
 7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <DIO_u8GetPinValue+0x8e>
 7f2:	55 95       	asr	r21
 7f4:	47 95       	ror	r20
 7f6:	8a 95       	dec	r24
 7f8:	e2 f7       	brpl	.-8      	; 0x7f2 <DIO_u8GetPinValue+0x8a>
 7fa:	ca 01       	movw	r24, r20
 7fc:	81 70       	andi	r24, 0x01	; 1
 7fe:	89 83       	std	Y+1, r24	; 0x01
 800:	23 c0       	rjmp	.+70     	; 0x848 <DIO_u8GetPinValue+0xe0>
		case PORTC/*Port C*/: value=GetBit(PINC_REG,Copy_u8PinID);break;
 802:	e3 e3       	ldi	r30, 0x33	; 51
 804:	f0 e0       	ldi	r31, 0x00	; 0
 806:	80 81       	ld	r24, Z
 808:	28 2f       	mov	r18, r24
 80a:	30 e0       	ldi	r19, 0x00	; 0
 80c:	8b 81       	ldd	r24, Y+3	; 0x03
 80e:	88 2f       	mov	r24, r24
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	a9 01       	movw	r20, r18
 814:	02 c0       	rjmp	.+4      	; 0x81a <DIO_u8GetPinValue+0xb2>
 816:	55 95       	asr	r21
 818:	47 95       	ror	r20
 81a:	8a 95       	dec	r24
 81c:	e2 f7       	brpl	.-8      	; 0x816 <DIO_u8GetPinValue+0xae>
 81e:	ca 01       	movw	r24, r20
 820:	81 70       	andi	r24, 0x01	; 1
 822:	89 83       	std	Y+1, r24	; 0x01
 824:	11 c0       	rjmp	.+34     	; 0x848 <DIO_u8GetPinValue+0xe0>
		case PORTD/*Port D*/: value=GetBit(PIND_REG,Copy_u8PinID);break;
 826:	e0 e3       	ldi	r30, 0x30	; 48
 828:	f0 e0       	ldi	r31, 0x00	; 0
 82a:	80 81       	ld	r24, Z
 82c:	28 2f       	mov	r18, r24
 82e:	30 e0       	ldi	r19, 0x00	; 0
 830:	8b 81       	ldd	r24, Y+3	; 0x03
 832:	88 2f       	mov	r24, r24
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	a9 01       	movw	r20, r18
 838:	02 c0       	rjmp	.+4      	; 0x83e <DIO_u8GetPinValue+0xd6>
 83a:	55 95       	asr	r21
 83c:	47 95       	ror	r20
 83e:	8a 95       	dec	r24
 840:	e2 f7       	brpl	.-8      	; 0x83a <DIO_u8GetPinValue+0xd2>
 842:	ca 01       	movw	r24, r20
 844:	81 70       	andi	r24, 0x01	; 1
 846:	89 83       	std	Y+1, r24	; 0x01
	}
	return value;
 848:	89 81       	ldd	r24, Y+1	; 0x01
}
 84a:	0f 90       	pop	r0
 84c:	0f 90       	pop	r0
 84e:	0f 90       	pop	r0
 850:	0f 90       	pop	r0
 852:	0f 90       	pop	r0
 854:	cf 91       	pop	r28
 856:	df 91       	pop	r29
 858:	08 95       	ret

0000085a <DIO_voidTogglePinValue>:

void DIO_voidTogglePinValue(u8 Copy_u8PortID,u8 Copy_u8PinID){
 85a:	df 93       	push	r29
 85c:	cf 93       	push	r28
 85e:	00 d0       	rcall	.+0      	; 0x860 <__stack+0x1>
 860:	00 d0       	rcall	.+0      	; 0x862 <__stack+0x3>
 862:	cd b7       	in	r28, 0x3d	; 61
 864:	de b7       	in	r29, 0x3e	; 62
 866:	89 83       	std	Y+1, r24	; 0x01
 868:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortID){
 86a:	89 81       	ldd	r24, Y+1	; 0x01
 86c:	28 2f       	mov	r18, r24
 86e:	30 e0       	ldi	r19, 0x00	; 0
 870:	3c 83       	std	Y+4, r19	; 0x04
 872:	2b 83       	std	Y+3, r18	; 0x03
 874:	8b 81       	ldd	r24, Y+3	; 0x03
 876:	9c 81       	ldd	r25, Y+4	; 0x04
 878:	81 30       	cpi	r24, 0x01	; 1
 87a:	91 05       	cpc	r25, r1
 87c:	49 f1       	breq	.+82     	; 0x8d0 <__stack+0x71>
 87e:	2b 81       	ldd	r18, Y+3	; 0x03
 880:	3c 81       	ldd	r19, Y+4	; 0x04
 882:	22 30       	cpi	r18, 0x02	; 2
 884:	31 05       	cpc	r19, r1
 886:	2c f4       	brge	.+10     	; 0x892 <__stack+0x33>
 888:	8b 81       	ldd	r24, Y+3	; 0x03
 88a:	9c 81       	ldd	r25, Y+4	; 0x04
 88c:	00 97       	sbiw	r24, 0x00	; 0
 88e:	61 f0       	breq	.+24     	; 0x8a8 <__stack+0x49>
 890:	5a c0       	rjmp	.+180    	; 0x946 <__stack+0xe7>
 892:	2b 81       	ldd	r18, Y+3	; 0x03
 894:	3c 81       	ldd	r19, Y+4	; 0x04
 896:	22 30       	cpi	r18, 0x02	; 2
 898:	31 05       	cpc	r19, r1
 89a:	71 f1       	breq	.+92     	; 0x8f8 <__stack+0x99>
 89c:	8b 81       	ldd	r24, Y+3	; 0x03
 89e:	9c 81       	ldd	r25, Y+4	; 0x04
 8a0:	83 30       	cpi	r24, 0x03	; 3
 8a2:	91 05       	cpc	r25, r1
 8a4:	e9 f1       	breq	.+122    	; 0x920 <__stack+0xc1>
 8a6:	4f c0       	rjmp	.+158    	; 0x946 <__stack+0xe7>
		case PORTA/*Port A*/: TogBit(PORTA_REG,Copy_u8PinID);break;
 8a8:	ab e3       	ldi	r26, 0x3B	; 59
 8aa:	b0 e0       	ldi	r27, 0x00	; 0
 8ac:	eb e3       	ldi	r30, 0x3B	; 59
 8ae:	f0 e0       	ldi	r31, 0x00	; 0
 8b0:	80 81       	ld	r24, Z
 8b2:	48 2f       	mov	r20, r24
 8b4:	8a 81       	ldd	r24, Y+2	; 0x02
 8b6:	28 2f       	mov	r18, r24
 8b8:	30 e0       	ldi	r19, 0x00	; 0
 8ba:	81 e0       	ldi	r24, 0x01	; 1
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	02 2e       	mov	r0, r18
 8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <__stack+0x67>
 8c2:	88 0f       	add	r24, r24
 8c4:	99 1f       	adc	r25, r25
 8c6:	0a 94       	dec	r0
 8c8:	e2 f7       	brpl	.-8      	; 0x8c2 <__stack+0x63>
 8ca:	84 27       	eor	r24, r20
 8cc:	8c 93       	st	X, r24
 8ce:	3b c0       	rjmp	.+118    	; 0x946 <__stack+0xe7>
		case PORTB/*Port B*/: TogBit(PORTB_REG,Copy_u8PinID);break;
 8d0:	a8 e3       	ldi	r26, 0x38	; 56
 8d2:	b0 e0       	ldi	r27, 0x00	; 0
 8d4:	e8 e3       	ldi	r30, 0x38	; 56
 8d6:	f0 e0       	ldi	r31, 0x00	; 0
 8d8:	80 81       	ld	r24, Z
 8da:	48 2f       	mov	r20, r24
 8dc:	8a 81       	ldd	r24, Y+2	; 0x02
 8de:	28 2f       	mov	r18, r24
 8e0:	30 e0       	ldi	r19, 0x00	; 0
 8e2:	81 e0       	ldi	r24, 0x01	; 1
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	02 2e       	mov	r0, r18
 8e8:	02 c0       	rjmp	.+4      	; 0x8ee <__stack+0x8f>
 8ea:	88 0f       	add	r24, r24
 8ec:	99 1f       	adc	r25, r25
 8ee:	0a 94       	dec	r0
 8f0:	e2 f7       	brpl	.-8      	; 0x8ea <__stack+0x8b>
 8f2:	84 27       	eor	r24, r20
 8f4:	8c 93       	st	X, r24
 8f6:	27 c0       	rjmp	.+78     	; 0x946 <__stack+0xe7>
		case PORTC/*Port C*/: TogBit(PORTC_REG,Copy_u8PinID);break;
 8f8:	a5 e3       	ldi	r26, 0x35	; 53
 8fa:	b0 e0       	ldi	r27, 0x00	; 0
 8fc:	e5 e3       	ldi	r30, 0x35	; 53
 8fe:	f0 e0       	ldi	r31, 0x00	; 0
 900:	80 81       	ld	r24, Z
 902:	48 2f       	mov	r20, r24
 904:	8a 81       	ldd	r24, Y+2	; 0x02
 906:	28 2f       	mov	r18, r24
 908:	30 e0       	ldi	r19, 0x00	; 0
 90a:	81 e0       	ldi	r24, 0x01	; 1
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	02 2e       	mov	r0, r18
 910:	02 c0       	rjmp	.+4      	; 0x916 <__stack+0xb7>
 912:	88 0f       	add	r24, r24
 914:	99 1f       	adc	r25, r25
 916:	0a 94       	dec	r0
 918:	e2 f7       	brpl	.-8      	; 0x912 <__stack+0xb3>
 91a:	84 27       	eor	r24, r20
 91c:	8c 93       	st	X, r24
 91e:	13 c0       	rjmp	.+38     	; 0x946 <__stack+0xe7>
		case PORTD/*Port D*/: TogBit(PORTD_REG,Copy_u8PinID);break;
 920:	a2 e3       	ldi	r26, 0x32	; 50
 922:	b0 e0       	ldi	r27, 0x00	; 0
 924:	e2 e3       	ldi	r30, 0x32	; 50
 926:	f0 e0       	ldi	r31, 0x00	; 0
 928:	80 81       	ld	r24, Z
 92a:	48 2f       	mov	r20, r24
 92c:	8a 81       	ldd	r24, Y+2	; 0x02
 92e:	28 2f       	mov	r18, r24
 930:	30 e0       	ldi	r19, 0x00	; 0
 932:	81 e0       	ldi	r24, 0x01	; 1
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	02 2e       	mov	r0, r18
 938:	02 c0       	rjmp	.+4      	; 0x93e <__stack+0xdf>
 93a:	88 0f       	add	r24, r24
 93c:	99 1f       	adc	r25, r25
 93e:	0a 94       	dec	r0
 940:	e2 f7       	brpl	.-8      	; 0x93a <__stack+0xdb>
 942:	84 27       	eor	r24, r20
 944:	8c 93       	st	X, r24
	}
}
 946:	0f 90       	pop	r0
 948:	0f 90       	pop	r0
 94a:	0f 90       	pop	r0
 94c:	0f 90       	pop	r0
 94e:	cf 91       	pop	r28
 950:	df 91       	pop	r29
 952:	08 95       	ret

00000954 <SPI_voidInitialize>:
#include "Bit_Math.h"
#include "DIO_interface.h"
#include "SPI_private.h"
#include "SPI_interface.h"

void SPI_voidInitialize(u8 Copy_u8ModeSelect){
 954:	df 93       	push	r29
 956:	cf 93       	push	r28
 958:	00 d0       	rcall	.+0      	; 0x95a <SPI_voidInitialize+0x6>
 95a:	0f 92       	push	r0
 95c:	cd b7       	in	r28, 0x3d	; 61
 95e:	de b7       	in	r29, 0x3e	; 62
 960:	89 83       	std	Y+1, r24	; 0x01
	
	ClrBit(SPCR,PIN7);
 962:	ad e2       	ldi	r26, 0x2D	; 45
 964:	b0 e0       	ldi	r27, 0x00	; 0
 966:	ed e2       	ldi	r30, 0x2D	; 45
 968:	f0 e0       	ldi	r31, 0x00	; 0
 96a:	80 81       	ld	r24, Z
 96c:	8f 77       	andi	r24, 0x7F	; 127
 96e:	8c 93       	st	X, r24
	SetBit(SPCR,PIN6);
 970:	ad e2       	ldi	r26, 0x2D	; 45
 972:	b0 e0       	ldi	r27, 0x00	; 0
 974:	ed e2       	ldi	r30, 0x2D	; 45
 976:	f0 e0       	ldi	r31, 0x00	; 0
 978:	80 81       	ld	r24, Z
 97a:	80 64       	ori	r24, 0x40	; 64
 97c:	8c 93       	st	X, r24
	ClrBit(SPCR,PIN5);
 97e:	ad e2       	ldi	r26, 0x2D	; 45
 980:	b0 e0       	ldi	r27, 0x00	; 0
 982:	ed e2       	ldi	r30, 0x2D	; 45
 984:	f0 e0       	ldi	r31, 0x00	; 0
 986:	80 81       	ld	r24, Z
 988:	8f 7d       	andi	r24, 0xDF	; 223
 98a:	8c 93       	st	X, r24
	
	switch(Copy_u8ModeSelect){
 98c:	89 81       	ldd	r24, Y+1	; 0x01
 98e:	28 2f       	mov	r18, r24
 990:	30 e0       	ldi	r19, 0x00	; 0
 992:	3b 83       	std	Y+3, r19	; 0x03
 994:	2a 83       	std	Y+2, r18	; 0x02
 996:	8a 81       	ldd	r24, Y+2	; 0x02
 998:	9b 81       	ldd	r25, Y+3	; 0x03
 99a:	00 97       	sbiw	r24, 0x00	; 0
 99c:	31 f0       	breq	.+12     	; 0x9aa <SPI_voidInitialize+0x56>
 99e:	2a 81       	ldd	r18, Y+2	; 0x02
 9a0:	3b 81       	ldd	r19, Y+3	; 0x03
 9a2:	21 30       	cpi	r18, 0x01	; 1
 9a4:	31 05       	cpc	r19, r1
 9a6:	49 f0       	breq	.+18     	; 0x9ba <SPI_voidInitialize+0x66>
 9a8:	0f c0       	rjmp	.+30     	; 0x9c8 <SPI_voidInitialize+0x74>
		case MASTER:
			SetBit(SPCR,PIN4);
 9aa:	ad e2       	ldi	r26, 0x2D	; 45
 9ac:	b0 e0       	ldi	r27, 0x00	; 0
 9ae:	ed e2       	ldi	r30, 0x2D	; 45
 9b0:	f0 e0       	ldi	r31, 0x00	; 0
 9b2:	80 81       	ld	r24, Z
 9b4:	80 61       	ori	r24, 0x10	; 16
 9b6:	8c 93       	st	X, r24
 9b8:	07 c0       	rjmp	.+14     	; 0x9c8 <SPI_voidInitialize+0x74>
			break;
		case SLAVE:
			ClrBit(SPCR,PIN4);
 9ba:	ad e2       	ldi	r26, 0x2D	; 45
 9bc:	b0 e0       	ldi	r27, 0x00	; 0
 9be:	ed e2       	ldi	r30, 0x2D	; 45
 9c0:	f0 e0       	ldi	r31, 0x00	; 0
 9c2:	80 81       	ld	r24, Z
 9c4:	8f 7e       	andi	r24, 0xEF	; 239
 9c6:	8c 93       	st	X, r24
			break;
	}
	
	ClrBit(SPCR,PIN3);
 9c8:	ad e2       	ldi	r26, 0x2D	; 45
 9ca:	b0 e0       	ldi	r27, 0x00	; 0
 9cc:	ed e2       	ldi	r30, 0x2D	; 45
 9ce:	f0 e0       	ldi	r31, 0x00	; 0
 9d0:	80 81       	ld	r24, Z
 9d2:	87 7f       	andi	r24, 0xF7	; 247
 9d4:	8c 93       	st	X, r24
	ClrBit(SPCR,PIN2);
 9d6:	ad e2       	ldi	r26, 0x2D	; 45
 9d8:	b0 e0       	ldi	r27, 0x00	; 0
 9da:	ed e2       	ldi	r30, 0x2D	; 45
 9dc:	f0 e0       	ldi	r31, 0x00	; 0
 9de:	80 81       	ld	r24, Z
 9e0:	8b 7f       	andi	r24, 0xFB	; 251
 9e2:	8c 93       	st	X, r24
	
	ClrBit(SPCR,PIN1);
 9e4:	ad e2       	ldi	r26, 0x2D	; 45
 9e6:	b0 e0       	ldi	r27, 0x00	; 0
 9e8:	ed e2       	ldi	r30, 0x2D	; 45
 9ea:	f0 e0       	ldi	r31, 0x00	; 0
 9ec:	80 81       	ld	r24, Z
 9ee:	8d 7f       	andi	r24, 0xFD	; 253
 9f0:	8c 93       	st	X, r24
	SetBit(SPCR,PIN0);
 9f2:	ad e2       	ldi	r26, 0x2D	; 45
 9f4:	b0 e0       	ldi	r27, 0x00	; 0
 9f6:	ed e2       	ldi	r30, 0x2D	; 45
 9f8:	f0 e0       	ldi	r31, 0x00	; 0
 9fa:	80 81       	ld	r24, Z
 9fc:	81 60       	ori	r24, 0x01	; 1
 9fe:	8c 93       	st	X, r24
	SetBit(SPSR,PIN0);
 a00:	ae e2       	ldi	r26, 0x2E	; 46
 a02:	b0 e0       	ldi	r27, 0x00	; 0
 a04:	ee e2       	ldi	r30, 0x2E	; 46
 a06:	f0 e0       	ldi	r31, 0x00	; 0
 a08:	80 81       	ld	r24, Z
 a0a:	81 60       	ori	r24, 0x01	; 1
 a0c:	8c 93       	st	X, r24
}
 a0e:	0f 90       	pop	r0
 a10:	0f 90       	pop	r0
 a12:	0f 90       	pop	r0
 a14:	cf 91       	pop	r28
 a16:	df 91       	pop	r29
 a18:	08 95       	ret

00000a1a <SPI_u8TransCiver>:

u8 SPI_u8TransCiver(u8 Copu_u8Data){
 a1a:	df 93       	push	r29
 a1c:	cf 93       	push	r28
 a1e:	00 d0       	rcall	.+0      	; 0xa20 <SPI_u8TransCiver+0x6>
 a20:	cd b7       	in	r28, 0x3d	; 61
 a22:	de b7       	in	r29, 0x3e	; 62
 a24:	89 83       	std	Y+1, r24	; 0x01
	
	SPDR=Copu_u8Data;
 a26:	ef e2       	ldi	r30, 0x2F	; 47
 a28:	f0 e0       	ldi	r31, 0x00	; 0
 a2a:	89 81       	ldd	r24, Y+1	; 0x01
 a2c:	80 83       	st	Z, r24
	while(GetBit(SPSR,PIN7)==0);
 a2e:	ee e2       	ldi	r30, 0x2E	; 46
 a30:	f0 e0       	ldi	r31, 0x00	; 0
 a32:	80 81       	ld	r24, Z
	return SPDR;
 a34:	ef e2       	ldi	r30, 0x2F	; 47
 a36:	f0 e0       	ldi	r31, 0x00	; 0
 a38:	80 81       	ld	r24, Z
 a3a:	0f 90       	pop	r0
 a3c:	0f 90       	pop	r0
 a3e:	cf 91       	pop	r28
 a40:	df 91       	pop	r29
 a42:	08 95       	ret

00000a44 <UART_voidInitialize>:
#include "UART_private.h"
#include "UART_interface.h"

u8 TEMP;

void UART_voidInitialize(){
 a44:	df 93       	push	r29
 a46:	cf 93       	push	r28
 a48:	cd b7       	in	r28, 0x3d	; 61
 a4a:	de b7       	in	r29, 0x3e	; 62
	
	SetBit(UCSRB,PIN4);
 a4c:	aa e2       	ldi	r26, 0x2A	; 42
 a4e:	b0 e0       	ldi	r27, 0x00	; 0
 a50:	ea e2       	ldi	r30, 0x2A	; 42
 a52:	f0 e0       	ldi	r31, 0x00	; 0
 a54:	80 81       	ld	r24, Z
 a56:	80 61       	ori	r24, 0x10	; 16
 a58:	8c 93       	st	X, r24
	SetBit(UCSRB,PIN3);
 a5a:	aa e2       	ldi	r26, 0x2A	; 42
 a5c:	b0 e0       	ldi	r27, 0x00	; 0
 a5e:	ea e2       	ldi	r30, 0x2A	; 42
 a60:	f0 e0       	ldi	r31, 0x00	; 0
 a62:	80 81       	ld	r24, Z
 a64:	88 60       	ori	r24, 0x08	; 8
 a66:	8c 93       	st	X, r24
	
	SetBit(TEMP,PIN7);
 a68:	80 91 74 00 	lds	r24, 0x0074
 a6c:	80 68       	ori	r24, 0x80	; 128
 a6e:	80 93 74 00 	sts	0x0074, r24
	ClrBit(TEMP,PIN6);
 a72:	80 91 74 00 	lds	r24, 0x0074
 a76:	8f 7b       	andi	r24, 0xBF	; 191
 a78:	80 93 74 00 	sts	0x0074, r24
	ClrBit(TEMP,PIN5);
 a7c:	80 91 74 00 	lds	r24, 0x0074
 a80:	8f 7d       	andi	r24, 0xDF	; 223
 a82:	80 93 74 00 	sts	0x0074, r24
	ClrBit(TEMP,PIN4);
 a86:	80 91 74 00 	lds	r24, 0x0074
 a8a:	8f 7e       	andi	r24, 0xEF	; 239
 a8c:	80 93 74 00 	sts	0x0074, r24
	ClrBit(TEMP,PIN3);
 a90:	80 91 74 00 	lds	r24, 0x0074
 a94:	87 7f       	andi	r24, 0xF7	; 247
 a96:	80 93 74 00 	sts	0x0074, r24
	SetBit(TEMP,PIN2);
 a9a:	80 91 74 00 	lds	r24, 0x0074
 a9e:	84 60       	ori	r24, 0x04	; 4
 aa0:	80 93 74 00 	sts	0x0074, r24
	SetBit(TEMP,PIN1);
 aa4:	80 91 74 00 	lds	r24, 0x0074
 aa8:	82 60       	ori	r24, 0x02	; 2
 aaa:	80 93 74 00 	sts	0x0074, r24
	
	UCSRC=TEMP;
 aae:	e0 e4       	ldi	r30, 0x40	; 64
 ab0:	f0 e0       	ldi	r31, 0x00	; 0
 ab2:	80 91 74 00 	lds	r24, 0x0074
 ab6:	80 83       	st	Z, r24
	
	UBRRH=0;
 ab8:	e0 e4       	ldi	r30, 0x40	; 64
 aba:	f0 e0       	ldi	r31, 0x00	; 0
 abc:	10 82       	st	Z, r1
	UBRRL=51;
 abe:	e9 e2       	ldi	r30, 0x29	; 41
 ac0:	f0 e0       	ldi	r31, 0x00	; 0
 ac2:	83 e3       	ldi	r24, 0x33	; 51
 ac4:	80 83       	st	Z, r24
}
 ac6:	cf 91       	pop	r28
 ac8:	df 91       	pop	r29
 aca:	08 95       	ret

00000acc <UART_voidSendData>:

void UART_voidSendData(u8 Copy_u8Data){
 acc:	df 93       	push	r29
 ace:	cf 93       	push	r28
 ad0:	0f 92       	push	r0
 ad2:	cd b7       	in	r28, 0x3d	; 61
 ad4:	de b7       	in	r29, 0x3e	; 62
 ad6:	89 83       	std	Y+1, r24	; 0x01
	UDR=Copy_u8Data;
 ad8:	ec e2       	ldi	r30, 0x2C	; 44
 ada:	f0 e0       	ldi	r31, 0x00	; 0
 adc:	89 81       	ldd	r24, Y+1	; 0x01
 ade:	80 83       	st	Z, r24
	while((GetBit(UCSRA,PIN6))==0);
 ae0:	eb e2       	ldi	r30, 0x2B	; 43
 ae2:	f0 e0       	ldi	r31, 0x00	; 0
 ae4:	80 81       	ld	r24, Z
 ae6:	82 95       	swap	r24
 ae8:	86 95       	lsr	r24
 aea:	86 95       	lsr	r24
 aec:	83 70       	andi	r24, 0x03	; 3
 aee:	88 2f       	mov	r24, r24
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	81 70       	andi	r24, 0x01	; 1
 af4:	90 70       	andi	r25, 0x00	; 0
 af6:	00 97       	sbiw	r24, 0x00	; 0
 af8:	99 f3       	breq	.-26     	; 0xae0 <UART_voidSendData+0x14>
	SetBit(UCSRA,PIN6);
 afa:	ab e2       	ldi	r26, 0x2B	; 43
 afc:	b0 e0       	ldi	r27, 0x00	; 0
 afe:	eb e2       	ldi	r30, 0x2B	; 43
 b00:	f0 e0       	ldi	r31, 0x00	; 0
 b02:	80 81       	ld	r24, Z
 b04:	80 64       	ori	r24, 0x40	; 64
 b06:	8c 93       	st	X, r24
}
 b08:	0f 90       	pop	r0
 b0a:	cf 91       	pop	r28
 b0c:	df 91       	pop	r29
 b0e:	08 95       	ret

00000b10 <UART_u8ReciveData>:

u8 UART_u8ReciveData(){
 b10:	df 93       	push	r29
 b12:	cf 93       	push	r28
 b14:	cd b7       	in	r28, 0x3d	; 61
 b16:	de b7       	in	r29, 0x3e	; 62
	while((GetBit(UCSRA,PIN7))==0);
 b18:	eb e2       	ldi	r30, 0x2B	; 43
 b1a:	f0 e0       	ldi	r31, 0x00	; 0
 b1c:	80 81       	ld	r24, Z
 b1e:	88 23       	and	r24, r24
 b20:	dc f7       	brge	.-10     	; 0xb18 <UART_u8ReciveData+0x8>
	return UDR;
 b22:	ec e2       	ldi	r30, 0x2C	; 44
 b24:	f0 e0       	ldi	r31, 0x00	; 0
 b26:	80 81       	ld	r24, Z
}
 b28:	cf 91       	pop	r28
 b2a:	df 91       	pop	r29
 b2c:	08 95       	ret

00000b2e <UART_voidSendString>:

void UART_voidSendString(u8 *Copy_u8String){
 b2e:	df 93       	push	r29
 b30:	cf 93       	push	r28
 b32:	00 d0       	rcall	.+0      	; 0xb34 <UART_voidSendString+0x6>
 b34:	0f 92       	push	r0
 b36:	cd b7       	in	r28, 0x3d	; 61
 b38:	de b7       	in	r29, 0x3e	; 62
 b3a:	9b 83       	std	Y+3, r25	; 0x03
 b3c:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
 b3e:	19 82       	std	Y+1, r1	; 0x01
 b40:	23 c0       	rjmp	.+70     	; 0xb88 <UART_voidSendString+0x5a>
	while(Copy_u8String[i]!='\0'){
		UDR=Copy_u8String[i];
 b42:	ac e2       	ldi	r26, 0x2C	; 44
 b44:	b0 e0       	ldi	r27, 0x00	; 0
 b46:	89 81       	ldd	r24, Y+1	; 0x01
 b48:	28 2f       	mov	r18, r24
 b4a:	30 e0       	ldi	r19, 0x00	; 0
 b4c:	8a 81       	ldd	r24, Y+2	; 0x02
 b4e:	9b 81       	ldd	r25, Y+3	; 0x03
 b50:	fc 01       	movw	r30, r24
 b52:	e2 0f       	add	r30, r18
 b54:	f3 1f       	adc	r31, r19
 b56:	80 81       	ld	r24, Z
 b58:	8c 93       	st	X, r24
		while((GetBit(UCSRA,PIN6))==0);
 b5a:	eb e2       	ldi	r30, 0x2B	; 43
 b5c:	f0 e0       	ldi	r31, 0x00	; 0
 b5e:	80 81       	ld	r24, Z
 b60:	82 95       	swap	r24
 b62:	86 95       	lsr	r24
 b64:	86 95       	lsr	r24
 b66:	83 70       	andi	r24, 0x03	; 3
 b68:	88 2f       	mov	r24, r24
 b6a:	90 e0       	ldi	r25, 0x00	; 0
 b6c:	81 70       	andi	r24, 0x01	; 1
 b6e:	90 70       	andi	r25, 0x00	; 0
 b70:	00 97       	sbiw	r24, 0x00	; 0
 b72:	99 f3       	breq	.-26     	; 0xb5a <UART_voidSendString+0x2c>
		SetBit(UCSRA,PIN6);
 b74:	ab e2       	ldi	r26, 0x2B	; 43
 b76:	b0 e0       	ldi	r27, 0x00	; 0
 b78:	eb e2       	ldi	r30, 0x2B	; 43
 b7a:	f0 e0       	ldi	r31, 0x00	; 0
 b7c:	80 81       	ld	r24, Z
 b7e:	80 64       	ori	r24, 0x40	; 64
 b80:	8c 93       	st	X, r24
		i++;
 b82:	89 81       	ldd	r24, Y+1	; 0x01
 b84:	8f 5f       	subi	r24, 0xFF	; 255
 b86:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}

void UART_voidSendString(u8 *Copy_u8String){
	u8 i=0;
	while(Copy_u8String[i]!='\0'){
 b88:	89 81       	ldd	r24, Y+1	; 0x01
 b8a:	28 2f       	mov	r18, r24
 b8c:	30 e0       	ldi	r19, 0x00	; 0
 b8e:	8a 81       	ldd	r24, Y+2	; 0x02
 b90:	9b 81       	ldd	r25, Y+3	; 0x03
 b92:	fc 01       	movw	r30, r24
 b94:	e2 0f       	add	r30, r18
 b96:	f3 1f       	adc	r31, r19
 b98:	80 81       	ld	r24, Z
 b9a:	88 23       	and	r24, r24
 b9c:	91 f6       	brne	.-92     	; 0xb42 <UART_voidSendString+0x14>
		UDR=Copy_u8String[i];
		while((GetBit(UCSRA,PIN6))==0);
		SetBit(UCSRA,PIN6);
		i++;
	}
}
 b9e:	0f 90       	pop	r0
 ba0:	0f 90       	pop	r0
 ba2:	0f 90       	pop	r0
 ba4:	cf 91       	pop	r28
 ba6:	df 91       	pop	r29
 ba8:	08 95       	ret

00000baa <UART_u8_ReciveString>:

u8 *UART_u8_ReciveString(){
 baa:	0f 93       	push	r16
 bac:	1f 93       	push	r17
 bae:	df 93       	push	r29
 bb0:	cf 93       	push	r28
 bb2:	0f 92       	push	r0
 bb4:	cd b7       	in	r28, 0x3d	; 61
 bb6:	de b7       	in	r29, 0x3e	; 62
	static u8 string[20];
	u8 i=0;
 bb8:	19 82       	std	Y+1, r1	; 0x01
	do{
		string[i]=UART_u8ReciveData();
 bba:	89 81       	ldd	r24, Y+1	; 0x01
 bbc:	08 2f       	mov	r16, r24
 bbe:	10 e0       	ldi	r17, 0x00	; 0
 bc0:	0e 94 88 05 	call	0xb10	; 0xb10 <UART_u8ReciveData>
 bc4:	f8 01       	movw	r30, r16
 bc6:	e0 5a       	subi	r30, 0xA0	; 160
 bc8:	ff 4f       	sbci	r31, 0xFF	; 255
 bca:	80 83       	st	Z, r24
		i++;
 bcc:	89 81       	ldd	r24, Y+1	; 0x01
 bce:	8f 5f       	subi	r24, 0xFF	; 255
 bd0:	89 83       	std	Y+1, r24	; 0x01
	}while(string[i-1]!='!');
 bd2:	89 81       	ldd	r24, Y+1	; 0x01
 bd4:	88 2f       	mov	r24, r24
 bd6:	90 e0       	ldi	r25, 0x00	; 0
 bd8:	01 97       	sbiw	r24, 0x01	; 1
 bda:	fc 01       	movw	r30, r24
 bdc:	e0 5a       	subi	r30, 0xA0	; 160
 bde:	ff 4f       	sbci	r31, 0xFF	; 255
 be0:	80 81       	ld	r24, Z
 be2:	81 32       	cpi	r24, 0x21	; 33
 be4:	51 f7       	brne	.-44     	; 0xbba <UART_u8_ReciveString+0x10>
	string[i-1]='\0';
 be6:	89 81       	ldd	r24, Y+1	; 0x01
 be8:	88 2f       	mov	r24, r24
 bea:	90 e0       	ldi	r25, 0x00	; 0
 bec:	01 97       	sbiw	r24, 0x01	; 1
 bee:	fc 01       	movw	r30, r24
 bf0:	e0 5a       	subi	r30, 0xA0	; 160
 bf2:	ff 4f       	sbci	r31, 0xFF	; 255
 bf4:	10 82       	st	Z, r1
	return string;
 bf6:	80 e6       	ldi	r24, 0x60	; 96
 bf8:	90 e0       	ldi	r25, 0x00	; 0
}
 bfa:	0f 90       	pop	r0
 bfc:	cf 91       	pop	r28
 bfe:	df 91       	pop	r29
 c00:	1f 91       	pop	r17
 c02:	0f 91       	pop	r16
 c04:	08 95       	ret

00000c06 <UART_voidSendNumber>:

void UART_voidSendNumber(u32 Copy_u32Number){
 c06:	0f 93       	push	r16
 c08:	1f 93       	push	r17
 c0a:	df 93       	push	r29
 c0c:	cf 93       	push	r28
 c0e:	cd b7       	in	r28, 0x3d	; 61
 c10:	de b7       	in	r29, 0x3e	; 62
 c12:	60 97       	sbiw	r28, 0x10	; 16
 c14:	0f b6       	in	r0, 0x3f	; 63
 c16:	f8 94       	cli
 c18:	de bf       	out	0x3e, r29	; 62
 c1a:	0f be       	out	0x3f, r0	; 63
 c1c:	cd bf       	out	0x3d, r28	; 61
 c1e:	6d 87       	std	Y+13, r22	; 0x0d
 c20:	7e 87       	std	Y+14, r23	; 0x0e
 c22:	8f 87       	std	Y+15, r24	; 0x0f
 c24:	98 8b       	std	Y+16, r25	; 0x10
	u8 arr[MAX_INT_DIGITS];
	u8 i=0;
 c26:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u32Number==0){
 c28:	8d 85       	ldd	r24, Y+13	; 0x0d
 c2a:	9e 85       	ldd	r25, Y+14	; 0x0e
 c2c:	af 85       	ldd	r26, Y+15	; 0x0f
 c2e:	b8 89       	ldd	r27, Y+16	; 0x10
 c30:	00 97       	sbiw	r24, 0x00	; 0
 c32:	a1 05       	cpc	r26, r1
 c34:	b1 05       	cpc	r27, r1
 c36:	89 f5       	brne	.+98     	; 0xc9a <UART_voidSendNumber+0x94>
		UART_voidSendData(ZERO_ASCII);
 c38:	80 e3       	ldi	r24, 0x30	; 48
 c3a:	0e 94 66 05 	call	0xacc	; 0xacc <UART_voidSendData>
 c3e:	4d c0       	rjmp	.+154    	; 0xcda <UART_voidSendNumber+0xd4>
	}
	else{
		while(Copy_u32Number>0){
			arr[i]=Copy_u32Number%10;
 c40:	8a 81       	ldd	r24, Y+2	; 0x02
 c42:	08 2f       	mov	r16, r24
 c44:	10 e0       	ldi	r17, 0x00	; 0
 c46:	8d 85       	ldd	r24, Y+13	; 0x0d
 c48:	9e 85       	ldd	r25, Y+14	; 0x0e
 c4a:	af 85       	ldd	r26, Y+15	; 0x0f
 c4c:	b8 89       	ldd	r27, Y+16	; 0x10
 c4e:	2a e0       	ldi	r18, 0x0A	; 10
 c50:	30 e0       	ldi	r19, 0x00	; 0
 c52:	40 e0       	ldi	r20, 0x00	; 0
 c54:	50 e0       	ldi	r21, 0x00	; 0
 c56:	bc 01       	movw	r22, r24
 c58:	cd 01       	movw	r24, r26
 c5a:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__udivmodsi4>
 c5e:	dc 01       	movw	r26, r24
 c60:	cb 01       	movw	r24, r22
 c62:	28 2f       	mov	r18, r24
 c64:	ce 01       	movw	r24, r28
 c66:	03 96       	adiw	r24, 0x03	; 3
 c68:	fc 01       	movw	r30, r24
 c6a:	e0 0f       	add	r30, r16
 c6c:	f1 1f       	adc	r31, r17
 c6e:	20 83       	st	Z, r18
			Copy_u32Number/=10;
 c70:	8d 85       	ldd	r24, Y+13	; 0x0d
 c72:	9e 85       	ldd	r25, Y+14	; 0x0e
 c74:	af 85       	ldd	r26, Y+15	; 0x0f
 c76:	b8 89       	ldd	r27, Y+16	; 0x10
 c78:	2a e0       	ldi	r18, 0x0A	; 10
 c7a:	30 e0       	ldi	r19, 0x00	; 0
 c7c:	40 e0       	ldi	r20, 0x00	; 0
 c7e:	50 e0       	ldi	r21, 0x00	; 0
 c80:	bc 01       	movw	r22, r24
 c82:	cd 01       	movw	r24, r26
 c84:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__udivmodsi4>
 c88:	da 01       	movw	r26, r20
 c8a:	c9 01       	movw	r24, r18
 c8c:	8d 87       	std	Y+13, r24	; 0x0d
 c8e:	9e 87       	std	Y+14, r25	; 0x0e
 c90:	af 87       	std	Y+15, r26	; 0x0f
 c92:	b8 8b       	std	Y+16, r27	; 0x10
			i++;
 c94:	8a 81       	ldd	r24, Y+2	; 0x02
 c96:	8f 5f       	subi	r24, 0xFF	; 255
 c98:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
	if(Copy_u32Number==0){
		UART_voidSendData(ZERO_ASCII);
	}
	else{
		while(Copy_u32Number>0){
 c9a:	8d 85       	ldd	r24, Y+13	; 0x0d
 c9c:	9e 85       	ldd	r25, Y+14	; 0x0e
 c9e:	af 85       	ldd	r26, Y+15	; 0x0f
 ca0:	b8 89       	ldd	r27, Y+16	; 0x10
 ca2:	00 97       	sbiw	r24, 0x00	; 0
 ca4:	a1 05       	cpc	r26, r1
 ca6:	b1 05       	cpc	r27, r1
 ca8:	59 f6       	brne	.-106    	; 0xc40 <UART_voidSendNumber+0x3a>
			arr[i]=Copy_u32Number%10;
			Copy_u32Number/=10;
			i++;
		}
		for(u8 j=i;j>0;j--){
 caa:	8a 81       	ldd	r24, Y+2	; 0x02
 cac:	89 83       	std	Y+1, r24	; 0x01
 cae:	12 c0       	rjmp	.+36     	; 0xcd4 <UART_voidSendNumber+0xce>
			UART_voidSendData(arr[j-1]+ZERO_ASCII);
 cb0:	89 81       	ldd	r24, Y+1	; 0x01
 cb2:	88 2f       	mov	r24, r24
 cb4:	90 e0       	ldi	r25, 0x00	; 0
 cb6:	9c 01       	movw	r18, r24
 cb8:	21 50       	subi	r18, 0x01	; 1
 cba:	30 40       	sbci	r19, 0x00	; 0
 cbc:	ce 01       	movw	r24, r28
 cbe:	03 96       	adiw	r24, 0x03	; 3
 cc0:	fc 01       	movw	r30, r24
 cc2:	e2 0f       	add	r30, r18
 cc4:	f3 1f       	adc	r31, r19
 cc6:	80 81       	ld	r24, Z
 cc8:	80 5d       	subi	r24, 0xD0	; 208
 cca:	0e 94 66 05 	call	0xacc	; 0xacc <UART_voidSendData>
		while(Copy_u32Number>0){
			arr[i]=Copy_u32Number%10;
			Copy_u32Number/=10;
			i++;
		}
		for(u8 j=i;j>0;j--){
 cce:	89 81       	ldd	r24, Y+1	; 0x01
 cd0:	81 50       	subi	r24, 0x01	; 1
 cd2:	89 83       	std	Y+1, r24	; 0x01
 cd4:	89 81       	ldd	r24, Y+1	; 0x01
 cd6:	88 23       	and	r24, r24
 cd8:	59 f7       	brne	.-42     	; 0xcb0 <UART_voidSendNumber+0xaa>
			UART_voidSendData(arr[j-1]+ZERO_ASCII);
		}		
	}
 cda:	60 96       	adiw	r28, 0x10	; 16
 cdc:	0f b6       	in	r0, 0x3f	; 63
 cde:	f8 94       	cli
 ce0:	de bf       	out	0x3e, r29	; 62
 ce2:	0f be       	out	0x3f, r0	; 63
 ce4:	cd bf       	out	0x3d, r28	; 61
 ce6:	cf 91       	pop	r28
 ce8:	df 91       	pop	r29
 cea:	1f 91       	pop	r17
 cec:	0f 91       	pop	r16
 cee:	08 95       	ret

00000cf0 <main>:
#include "Bit_Math.h"
#include "DIO_interface.h"
#include "SPI_interface.h"
#include "UART_interface.h"

int main(){
 cf0:	df 93       	push	r29
 cf2:	cf 93       	push	r28
 cf4:	0f 92       	push	r0
 cf6:	cd b7       	in	r28, 0x3d	; 61
 cf8:	de b7       	in	r29, 0x3e	; 62

	u8 data;

	SPI_voidInitialize(SLAVE);
 cfa:	81 e0       	ldi	r24, 0x01	; 1
 cfc:	0e 94 aa 04 	call	0x954	; 0x954 <SPI_voidInitialize>
	UART_voidInitialize();
 d00:	0e 94 22 05 	call	0xa44	; 0xa44 <UART_voidInitialize>

	DIO_voidSetPinDirection(PORTB,PIN4,PIN_INPUT);
 d04:	81 e0       	ldi	r24, 0x01	; 1
 d06:	64 e0       	ldi	r22, 0x04	; 4
 d08:	40 e0       	ldi	r20, 0x00	; 0
 d0a:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB,PIN5,PIN_INPUT);
 d0e:	81 e0       	ldi	r24, 0x01	; 1
 d10:	65 e0       	ldi	r22, 0x05	; 5
 d12:	40 e0       	ldi	r20, 0x00	; 0
 d14:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB,PIN6,PIN_OUTPUT);
 d18:	81 e0       	ldi	r24, 0x01	; 1
 d1a:	66 e0       	ldi	r22, 0x06	; 6
 d1c:	41 e0       	ldi	r20, 0x01	; 1
 d1e:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB,PIN7,PIN_INPUT);
 d22:	81 e0       	ldi	r24, 0x01	; 1
 d24:	67 e0       	ldi	r22, 0x07	; 7
 d26:	40 e0       	ldi	r20, 0x00	; 0
 d28:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_voidSetPinDirection>

	while(1){
		data=SPI_u8TransCiver(0);
 d2c:	80 e0       	ldi	r24, 0x00	; 0
 d2e:	0e 94 0d 05 	call	0xa1a	; 0xa1a <SPI_u8TransCiver>
 d32:	89 83       	std	Y+1, r24	; 0x01
		UART_voidSendData(data);
 d34:	89 81       	ldd	r24, Y+1	; 0x01
 d36:	0e 94 66 05 	call	0xacc	; 0xacc <UART_voidSendData>
 d3a:	f8 cf       	rjmp	.-16     	; 0xd2c <main+0x3c>

00000d3c <__udivmodsi4>:
 d3c:	a1 e2       	ldi	r26, 0x21	; 33
 d3e:	1a 2e       	mov	r1, r26
 d40:	aa 1b       	sub	r26, r26
 d42:	bb 1b       	sub	r27, r27
 d44:	fd 01       	movw	r30, r26
 d46:	0d c0       	rjmp	.+26     	; 0xd62 <__udivmodsi4_ep>

00000d48 <__udivmodsi4_loop>:
 d48:	aa 1f       	adc	r26, r26
 d4a:	bb 1f       	adc	r27, r27
 d4c:	ee 1f       	adc	r30, r30
 d4e:	ff 1f       	adc	r31, r31
 d50:	a2 17       	cp	r26, r18
 d52:	b3 07       	cpc	r27, r19
 d54:	e4 07       	cpc	r30, r20
 d56:	f5 07       	cpc	r31, r21
 d58:	20 f0       	brcs	.+8      	; 0xd62 <__udivmodsi4_ep>
 d5a:	a2 1b       	sub	r26, r18
 d5c:	b3 0b       	sbc	r27, r19
 d5e:	e4 0b       	sbc	r30, r20
 d60:	f5 0b       	sbc	r31, r21

00000d62 <__udivmodsi4_ep>:
 d62:	66 1f       	adc	r22, r22
 d64:	77 1f       	adc	r23, r23
 d66:	88 1f       	adc	r24, r24
 d68:	99 1f       	adc	r25, r25
 d6a:	1a 94       	dec	r1
 d6c:	69 f7       	brne	.-38     	; 0xd48 <__udivmodsi4_loop>
 d6e:	60 95       	com	r22
 d70:	70 95       	com	r23
 d72:	80 95       	com	r24
 d74:	90 95       	com	r25
 d76:	9b 01       	movw	r18, r22
 d78:	ac 01       	movw	r20, r24
 d7a:	bd 01       	movw	r22, r26
 d7c:	cf 01       	movw	r24, r30
 d7e:	08 95       	ret

00000d80 <_exit>:
 d80:	f8 94       	cli

00000d82 <__stop_program>:
 d82:	ff cf       	rjmp	.-2      	; 0xd82 <__stop_program>
